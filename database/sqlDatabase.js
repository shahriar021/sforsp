import SQLite from 'react-native-sqlite-storage';
import {baseApi, token} from '../constants/base_api';
import {database} from './db';
import {getCurrentDateandTime} from '../hooks/dateUtils';
import { useEffect, useState } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';

// const database = SQLite.openDatabase(
//   {
//     name: 'myDatabase.db',
//     location: 'default',
//   },
//   () => {
//     // console.log('Database opened')
//   },
//   error => console.error('Error opening database', error),
// );

//API Start
export const aspects_api = async () => {
  try {
    const response = await fetch(`${baseApi}/aspects?token=${token}`);
    const data = await response.json();
    //console.log('Total aspects items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS aspects',
          [],
          () => {
            // console.log('aspects table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS aspects (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            //console.log('aspects table created successfully');
          },
          reject,
        );

        data.forEach(aspects => {
          tx.executeSql(
            'INSERT INTO aspects VALUES (?, ?, ?, ?, ?)',
            [
              aspects.id || null,
              aspects.name || null,
              aspects.name_bn || null,
              aspects.name_short || null,
              aspects.code || null,
            ],
            (_, resultSet) =>
              //console.log('aspects data inserted successfully', resultSet),
              (_, error) => {
                //console.error('Error inserting aspects data', error, aspects);
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching aspects data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const aspects_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM aspects`, // Query the aspects table
        [],
        (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start

export const aspects_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM aspects`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          //console.log('All data deleted from aspects:', resultSet);

          try {
            await aspects_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from aspects`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// export const aspects_api = () => {
//   fetch(`${baseApi}/aspects?token=${token}`)
//     .then(response => response.json())
//     .then(data => {
//       console.log('Total aspects items from API:', data.length);

//       database.transaction(tx => {
//         // Drop the existing aspects table and recreate it
//         tx.executeSql(
//           'DROP TABLE IF EXISTS aspects',
//           [],
//           () => console.log('aspects Table dropped successfully'),
//           (_, error) => {
//             console.error('Error dropping aspects table', error);
//           },
//         );

//         tx.executeSql(
//           'CREATE TABLE IF NOT EXISTS aspects (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
//           [],
//           () => console.log('aspects table created successfully'),
//           (_, error) => {
//             console.error('Error creating aspects table', error);
//           },
//         );

//         // Insert data into the projectData table
//         data.forEach(aspects => {
//           tx.executeSql(
//             'INSERT INTO aspects VALUES (?, ?, ?, ?, ?)',
//             [
//               aspects.id || null,
//               aspects.name || null,
//               aspects.name_bn || null,
//               aspects.name_short || null,
//               aspects.code || null,
//             ],
//             (_, resultSet) =>
//               console.log('Project data inserted successfully', resultSet),
//             (_, error) => {
//               // console.log('you are offline')
//               console.error('Error inserting project data', error, project);
//             },
//           );
//         });
//       });
//     })
//     .catch(error => {
//       // console.log('you are offline')
//       console.error('Error fetching project data from API', error);
//     });
// };

// export const aspects_api = async () => {
//   try {
//     const response = await fetch(`${baseApi}/aspects?token=${token}`);
//     const data = await response.json();
//     console.log('Total aspects items from API:', data.length);

//     await new Promise((resolve, reject) => {
//       database.transaction(tx => {
//         tx.executeSql(
//           'DROP TABLE IF EXISTS aspects',
//           [],
//           () => {
//             console.log('Aspects table dropped successfully');
//           },
//           reject,
//         );

//         tx.executeSql(
//           'CREATE TABLE IF NOT EXISTS aspects (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
//           [],
//           () => {
//             console.log('Aspects table created successfully');
//           },
//           reject,
//         );

//         data.forEach(aspects => {
//           tx.executeSql(
//             'INSERT INTO aspects VALUES (?, ?, ?, ?, ?)',
//             [
//               aspects.id || null,
//               aspects.name || null,
//               aspects.name_bn || null,
//               aspects.name_short || null,
//               aspects.code || null,
//             ],
//             (_, resultSet) =>
//               console.log('Aspects data inserted successfully', resultSet),
//             (_, error) => {
//               console.error('Error inserting aspects data', error, aspects);
//             },
//           );
//         });
//         resolve();
//       });
//     });
//   } catch (error) {
//     console.error('Error fetching aspects data from API', error);
//   }
// };

// export const aspects_list = async () => {
//   return new Promise((resolve, reject) => {
//     database.transaction(tx => {
//       tx.executeSql(
//         `SELECT * FROM aspects WHERE 1=1`, // Adjust the query based on your schema and condition

//         (_, resultSet) => {
//           const data = [];
//           for (let i = 0; i < resultSet.rows.length; i++) {
//             const row = resultSet.rows.item(i);
//             data.push(row);
//           }
//           resolve(data);
//         },
//         (_, error) => {
//           console.error(`Error querying aspects by condition`, error);
//           reject(error);
//         },
//       );
//     });
//   });
// };

// export const aspects_list = async () => {
//   return new Promise((resolve, reject) => {
//     database.transaction(tx => {
//       tx.executeSql(
//         `SELECT * FROM aspects`, // Query the aspects table
//         [],
//         (_, resultSet) => {
//           console.log('ResultSet:', resultSet); // Log the resultSet to debug
//           const data = [];
//           for (let i = 0; i < resultSet.rows.length; i++) {
//             const row = resultSet.rows.item(i);
//             data.push(row);
//           }
//           resolve(data);
//         },
//         (_, error) => {
//           console.error(`Error querying aspects`, error);
//           reject(error);
//         },
//       );
//     });
//   });
// };

//API START
// export const sources_api = () => {
//   fetch(`${baseApi}/sources?token=${token}`)
//     .then(response => response.json())
//     .then(data => {
//       console.log('Total sources items from API:', data.length);

//       database.transaction(tx => {
//         // Drop the existing sources table and recreate it
//         tx.executeSql('DROP TABLE IF EXISTS sources', [], () =>
//           //console.log('sources Table dropped successfully'),
//           (_, error) => {
//             console.error('Error dropping sources table', error);
//           },
//         );

//         tx.executeSql(
//           'CREATE TABLE IF NOT EXISTS sources (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
//           [],
//           () => console.log('sources table created successfully'),
//           (_, error) => {
//             console.error('Error creating sources table', error);
//           },
//         );

//         // Insert data into the projectData table
//         data.forEach(sources => {
//           tx.executeSql(
//             'INSERT INTO sources VALUES (?, ?, ?, ?, ?)',
//             [
//               sources.id || null,
//               sources.name || null,
//               sources.name_bn || null,
//               sources.name_short || null,
//               sources.code || null,
//             ],
//             (_, resultSet) =>
//               console.log('Project data inserted successfully', resultSet),
//             (_, error) => {
//               // console.log('you are offline')
//               console.error('Error inserting project data', error, project);
//             },
//           );
//         });
//       });
//     })
//     .catch(error => {
//       // console.log('you are offline')
//       console.error('Error fetching project data from API', error);
//     });
// };
//API END
//---------------------------------------------------//
//list start
// export const sources_list = async () => {
//   return new Promise((resolve, reject) => {
//     database.transaction(tx => {
//       tx.executeSql(
//         `SELECT * FROM sources `, // Adjust the query based on your schema and condition

//         (_, resultSet) => {
//           const data = [];
//           console.log(resultSet);
//           for (let i = 0; i < resultSet.rows.length; i++) {
//             const row = resultSet.rows.item(i);
//             data.push(row);
//           }
//           resolve(data);
//         },
//         (_, error) => {
//           console.error(`Error querying sources by condition`, error);
//           reject(error);
//         },
//       );
//     });
//   });
// };
//list end
//---------------------------------------------------//

//API Start
export const jur_fd_ecozones_api = async () => {
  try {
    const response = await fetch(`${baseApi}/jur_fd_ecozones?token=${token}`);
    const data = await response.json();
    console.log('Total jur_fd_ecozones items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS jur_fd_ecozones',
          [],
          () => {
            //console.log('jur_fd_ecozones table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS jur_fd_ecozones (id TEXT, name TEXT, name_bn TEXT, code TEXT, raw_code TEXT)',
          [],
          () => {
            //console.log('jur_fd_ecozones table created successfully');
          },
          reject,
        );

        data.forEach(jur_fd_ecozones => {
          tx.executeSql(
            'INSERT INTO jur_fd_ecozones VALUES (?, ?, ?, ?, ?)',
            [
              jur_fd_ecozones.id || null,
              jur_fd_ecozones.name || null,
              jur_fd_ecozones.name_bn || null,
              jur_fd_ecozones.code || null,
              jur_fd_ecozones.raw_code || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'jur_fd_ecozones data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting jur_fd_ecozones data',
                  error,
                  jur_fd_ecozones,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching jur_fd_ecozones data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const jur_fd_ecozones_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM jur_fd_ecozones`, // Query the jur_fd_ecozones table
        [],
        (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying jur_fd_ecozones`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const jur_fd_ecozones_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM jur_fd_ecozones`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from jur_fd_ecozones:', resultSet);

          try {
            await jur_fd_ecozones_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from jur_fd_ecozones`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//

//API Start
export const spatial_ref_sys_api = async () => {
  try {
    const response = await fetch(`${baseApi}/spatial_ref_sys?token=${token}`);
    const data = await response.json();
    console.log('Total spatial_ref_sys items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS spatial_ref_sys',
          [],
          () => {
            console.log('spatial_ref_sys table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS spatial_ref_sys (srid TEXT, auth_name TEXT, auth_srid TEXT, srtext TEXT, proj4text TEXT)',
          [],
          () => {
            console.log('spatial_ref_sys table created successfully');
          },
          reject,
        );

        data.forEach(spatial_ref_sys => {
          tx.executeSql(
            'INSERT INTO spatial_ref_sys VALUES (?, ?, ?, ?, ?)',
            [
              spatial_ref_sys.srid || null,
              spatial_ref_sys.auth_name || null,
              spatial_ref_sys.auth_srid || null,
              spatial_ref_sys.srtext || null,
              spatial_ref_sys.proj4text || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'spatial_ref_sys data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting spatial_ref_sys data',
                  error,
                  spatial_ref_sys,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching spatial_ref_sys data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const spatial_ref_sys_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM spatial_ref_sys`, // Query the spatial_ref_sys table
        [],
        (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying spatial_ref_sys`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const spatial_ref_sys_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM spatial_ref_sys`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from spatial_ref_sys:', resultSet);

          try {
            await spatial_ref_sys_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from spatial_ref_sys`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const age_plantations_api = async () => {
  try {
    const response = await fetch(`${baseApi}/age_plantations?token=${token}`);
    const data = await response.json();
    console.log('Total age_plantations items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS age_plantations',
          [],
          () => {
            console.log('age_plantations table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS age_plantations (id TEXT, name TEXT, name_bn TEXT, code TEXT)',
          [],
          () => {
            console.log('age_plantations table created successfully');
          },
          reject,
        );

        data.forEach(age_plantations => {
          tx.executeSql(
            'INSERT INTO age_plantations VALUES (?, ?, ?, ?)',
            [
              age_plantations.id || null,
              age_plantations.name || null,
              age_plantations.name_bn || null,
              age_plantations.code || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'age_plantations data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting age_plantations data',
                  error,
                  age_plantations,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching age_plantations data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const age_plantations_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM age_plantations`, // Query the age_plantations table
        [],
        (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying age_plantations`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const age_plantations_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM age_plantations`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from age_plantations:', resultSet);

          try {
            await age_plantations_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from age_plantations`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
// export const aspects_api = async () => {
//   try {
// 	const response = await fetch(`${baseApi}/aspects?token=${token}`);
// 	const data = await response.json();
// 	console.log('Total aspects items from API:', data.length);

// 	await new Promise((resolve, reject) => {
// 	  database.transaction(tx => {
// 		tx.executeSql(
// 		  'DROP TABLE IF EXISTS aspects',
// 		  [],
// 		  () => {
// 			console.log('aspects table dropped successfully');
// 		  },
// 		  reject,
// 		);

// 		tx.executeSql(
// 		  'CREATE TABLE IF NOT EXISTS aspects (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
// 		  [],
// 		  () => {
// 			console.log('aspects table created successfully');
// 		  },
// 		  reject,
// 		);

// 		data.forEach(aspects => {
// 		  tx.executeSql(
// 			'INSERT INTO aspects VALUES (?, ?, ?, ?, ?)',
// 			[
// 			  aspects.id || null,
// aspects. name || null,
// aspects. name_bn || null,
// aspects. name_short || null,
// aspects. code || null,

// 			],
// 			(_, resultSet) =>
// 			  console.log('aspects data inserted successfully', resultSet),
// 			(_, error) => {
// 			  console.error('Error inserting aspects data', error, aspects);
// 			},
// 		  );
// 		});
// 		resolve();
// 	  });
// 	});
//   } catch (error) {
// 	console.error('Error fetching aspects data from API', error);
//   }
// };
//API End
//---------------------------------------------------------//
// List Start

// export const aspects_list = async () => {
//   return new Promise((resolve, reject) => {
// 	database.transaction(tx => {
// 	  tx.executeSql(
// 		`SELECT * FROM aspects`, // Query the aspects table
// 		[],
// 		(_, resultSet) => {
// 		  console.log('ResultSet:', resultSet); // Log the resultSet to debug
// 		  const data = [];
// 		  for (let i = 0; i < resultSet.rows.length; i++) {
// 			const row = resultSet.rows.item(i);
// 			data.push(row);
// 		  }
// 		  resolve(data);
// 		},
// 		(_, error) => {
// 		  console.error(`Error querying aspects`, error);
// 		  reject(error);
// 		},
// 	  );
// 	});
//   });
// };
// List End
//---------------------------------------------------------//
// Delete Start
// export const aspects_delete = async () => {
//   return new Promise((resolve, reject) => {
//     database.transaction(tx => {
//       tx.executeSql(
//         `DELETE FROM aspects`, // Correct SQL to delete all rows
//         [],
//         async (_, resultSet) => {
//           console.log('All data deleted from aspects:', resultSet);

//           try {

//             await aspects_api();
//             resolve(resultSet);
//           } catch (apiError) {
//             console.error('Error fetching data from API:', apiError);
//             reject(apiError);
//           }
//         },
//         (_, error) => {
//           console.error(`Error deleting data from aspects`, error);
//           reject(error); // Reject in case of a SQL error
//         },
//       );
//     });
//   });
// };

// Delete End
//---------------------------------------------------------//
//API Start
export const canopycover_lists_api = async () => {
  try {
    const response = await fetch(`${baseApi}/canopycover_lists?token=${token}`);
    const data = await response.json();
    console.log('Total canopycover_lists items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS canopycover_lists',
          [],
          () => {
            console.log('canopycover_lists table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS canopycover_lists (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('canopycover_lists table created successfully');
          },
          reject,
        );

        data.forEach(canopycover_lists => {
          tx.executeSql(
            'INSERT INTO canopycover_lists VALUES (?, ?, ?, ?, ?)',
            [
              canopycover_lists.id || null,
              canopycover_lists.name || null,
              canopycover_lists.name_bn || null,
              canopycover_lists.name_short || null,
              canopycover_lists.code || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'canopycover_lists data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting canopycover_lists data',
                  error,
                  canopycover_lists,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching canopycover_lists data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const canopycover_lists_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM canopycover_lists`, // Query the canopycover_lists table
        [],
        (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying canopycover_lists`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const canopycover_lists_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM canopycover_lists`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from canopycover_lists:', resultSet);

          try {
            await canopycover_lists_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from canopycover_lists`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const sources_api = async () => {
  try {
    const response = await fetch(`${baseApi}/sources?token=${token}`);
    const data = await response.json();
    console.log('Total sources items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS sources',
          [],
          () => {
            console.log('sources table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS sources (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('sources table created successfully');
          },
          reject,
        );

        data.forEach(sources => {
          tx.executeSql(
            'INSERT INTO sources VALUES (?, ?, ?, ?, ?)',
            [
              sources.id || null,
              sources.name || null,
              sources.name_bn || null,
              sources.name_short || null,
              sources.code || null,
            ],
            (_, resultSet) =>
              console.log('sources data inserted successfully', resultSet),
            (_, error) => {
              console.error('Error inserting sources data', error, sources);
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching sources data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const sources_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sources`, // Query the sources table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying sources`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sources_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sources`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from sources:', resultSet);

          try {
            await sources_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from sources`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const spacing_lists_api = async () => {
  try {
    const response = await fetch(`${baseApi}/spacing_lists?token=${token}`);
    const data = await response.json();
    console.log('Total spacing_lists items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS spacing_lists',
          [],
          () => {
            console.log('spacing_lists table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS spacing_lists (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('spacing_lists table created successfully');
          },
          reject,
        );

        data.forEach(spacing_lists => {
          tx.executeSql(
            'INSERT INTO spacing_lists VALUES (?, ?, ?, ?, ?)',
            [
              spacing_lists.id || null,
              spacing_lists.name || null,
              spacing_lists.name_bn || null,
              spacing_lists.name_short || null,
              spacing_lists.code || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'spacing_lists data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting spacing_lists data',
                  error,
                  spacing_lists,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching spacing_lists data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const spacing_lists_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM spacing_lists`, // Query the spacing_lists table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying spacing_lists`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const spacing_lists_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM spacing_lists`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from spacing_lists:', resultSet);

          try {
            await spacing_lists_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from spacing_lists`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const cardpoints_api = async () => {
  try {
    const response = await fetch(`${baseApi}/cardpoints?token=${token}`);
    const data = await response.json();
    console.log('Total cardpoints items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS cardpoints',
          [],
          () => {
            console.log('cardpoints table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS cardpoints (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('cardpoints table created successfully');
          },
          reject,
        );

        data.forEach(cardpoints => {
          tx.executeSql(
            'INSERT INTO cardpoints VALUES (?, ?, ?, ?, ?)',
            [
              cardpoints.id || null,
              cardpoints.name || null,
              cardpoints.name_bn || null,
              cardpoints.name_short || null,
              cardpoints.code || null,
            ],
            (_, resultSet) =>
              console.log('cardpoints data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting cardpoints data',
                error,
                cardpoints,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching cardpoints data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const cardpoints_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM cardpoints`, // Query the cardpoints table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying cardpoints`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const cardpoints_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM cardpoints`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from cardpoints:', resultSet);

          try {
            await cardpoints_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from cardpoints`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const teams_api = async () => {
  try {
    const response = await fetch(`${baseApi}/teams?token=${token}`);
    const data = await response.json();
    console.log('Total teams items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS teams',
          [],
          () => {
            console.log('teams table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS teams (id TEXT, user_id TEXT, name TEXT, personal_team TEXT, created_at TEXT, updated_at TEXT)',
          [],
          () => {
            console.log('teams table created successfully');
          },
          reject,
        );

        data.forEach(teams => {
          tx.executeSql(
            'INSERT INTO teams VALUES (?, ?, ?, ?, ?, ?)',
            [
              teams.id || null,
              teams.user_id || null,
              teams.name || null,
              teams.personal_team || null,
              teams.created_at || null,
              teams.updated_at || null,
            ],
            (_, resultSet) =>
              // console.log('teams data inserted successfully', resultSet),
              (_, error) => {
                console.error('Error inserting teams data', error, teams);
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching teams data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const teams_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM teams`, // Query the teams table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying teams`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const teams_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM teams`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from teams:', resultSet);

          try {
            await teams_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from teams`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const polytypetrt_lists_api = async () => {
  try {
    const response = await fetch(`${baseApi}/polytypetrt_lists?token=${token}`);
    const data = await response.json();
    console.log('Total polytypetrt_lists items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS polytypetrt_lists',
          [],
          () => {
            console.log('polytypetrt_lists table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS polytypetrt_lists (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('polytypetrt_lists table created successfully');
          },
          reject,
        );

        data.forEach(polytypetrt_lists => {
          tx.executeSql(
            'INSERT INTO polytypetrt_lists VALUES (?, ?, ?, ?, ?)',
            [
              polytypetrt_lists.id || null,
              polytypetrt_lists.name || null,
              polytypetrt_lists.name_bn || null,
              polytypetrt_lists.name_short || null,
              polytypetrt_lists.code || null,
            ],
            (_, resultSet) =>
              console.log(
                'polytypetrt_lists data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting polytypetrt_lists data',
                error,
                polytypetrt_lists,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching polytypetrt_lists data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const polytypetrt_lists_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM polytypetrt_lists`, // Query the polytypetrt_lists table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying polytypetrt_lists`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const polytypetrt_lists_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM polytypetrt_lists`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from polytypetrt_lists:', resultSet);

          try {
            await polytypetrt_lists_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from polytypetrt_lists`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const project_lists_audit_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/project_lists_audit?token=${token}`,
    );
    const data = await response.json();
    console.log('Total project_lists_audit items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS project_lists_audit',
          [],
          () => {
            console.log('project_lists_audit table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS project_lists_audit (id TEXT, name_en TEXT, name_bn TEXT, description TEXT, UserName TEXT, PLAdditionTime TEXT)',
          [],
          () => {
            console.log('project_lists_audit table created successfully');
          },
          reject,
        );

        data.forEach(project_lists_audit => {
          tx.executeSql(
            'INSERT INTO project_lists_audit VALUES (?, ?, ?, ?, ?, ?)',
            [
              project_lists_audit.id || null,
              project_lists_audit.name_en || null,
              project_lists_audit.name_bn || null,
              project_lists_audit.description || null,
              project_lists_audit.UserName || null,
              project_lists_audit.PLAdditionTime || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'project_lists_audit data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting project_lists_audit data',
                  error,
                  project_lists_audit,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching project_lists_audit data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const project_lists_audit_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM project_lists_audit`, // Query the project_lists_audit table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying project_lists_audit`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const project_lists_audit_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM project_lists_audit`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from project_lists_audit:', resultSet);

          try {
            await project_lists_audit_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from project_lists_audit`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const qtr_lists_api = async () => {
  try {
    const response = await fetch(`${baseApi}/qtr_lists?token=${token}`);
    const data = await response.json();
    console.log('Total qtr_lists items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS qtr_lists',
          [],
          () => {
            console.log('qtr_lists table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS qtr_lists (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('qtr_lists table created successfully');
          },
          reject,
        );

        data.forEach(qtr_lists => {
          tx.executeSql(
            'INSERT INTO qtr_lists VALUES (?, ?, ?, ?, ?)',
            [
              qtr_lists.id || null,
              qtr_lists.name || null,
              qtr_lists.name_bn || null,
              qtr_lists.name_short || null,
              qtr_lists.code || null,
            ],
            (_, resultSet) =>
              console.log('qtr_lists data inserted successfully', resultSet),
            (_, error) => {
              console.error('Error inserting qtr_lists data', error, qtr_lists);
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching qtr_lists data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const qtr_lists_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM qtr_lists`, // Query the qtr_lists table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying qtr_lists`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const qtr_lists_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM qtr_lists`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from qtr_lists:', resultSet);

          try {
            await qtr_lists_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from qtr_lists`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const receptors_api = async () => {
  try {
    const response = await fetch(`${baseApi}/receptors?token=${token}`);
    const data = await response.json();
    console.log('Total receptors items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS receptors',
          [],
          () => {
            console.log('receptors table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS receptors (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('receptors table created successfully');
          },
          reject,
        );

        data.forEach(receptors => {
          tx.executeSql(
            'INSERT INTO receptors VALUES (?, ?, ?, ?, ?)',
            [
              receptors.id || null,
              receptors.name || null,
              receptors.name_bn || null,
              receptors.name_short || null,
              receptors.code || null,
            ],
            (_, resultSet) =>
              console.log('receptors data inserted successfully', resultSet),
            (_, error) => {
              console.error('Error inserting receptors data', error, receptors);
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching receptors data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const receptors_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM receptors`, // Query the receptors table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying receptors`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const receptors_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM receptors`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from receptors:', resultSet);

          try {
            await receptors_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from receptors`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const record_points_api = async () => {
  try {
    const response = await fetch(`${baseApi}/record_points?token=${token}`);
    const data = await response.json();
    console.log('Total record_points items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS record_points',
          [],
          () => {
            console.log('record_points table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS record_points (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('record_points table created successfully');
          },
          reject,
        );

        data.forEach(record_points => {
          tx.executeSql(
            'INSERT INTO record_points VALUES (?, ?, ?, ?, ?)',
            [
              record_points.id || null,
              record_points.name || null,
              record_points.name_bn || null,
              record_points.name_short || null,
              record_points.code || null,
            ],
            (_, resultSet) =>
              console.log(
                'record_points data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting record_points data',
                error,
                record_points,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching record_points data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const record_points_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM record_points`, // Query the record_points table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying record_points`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const record_points_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM record_points`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from record_points:', resultSet);

          try {
            await record_points_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from record_points`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const regeneration_photo_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/regeneration_photo?token=${token}`,
    );
    const data = await response.json();
    console.log('Total regeneration_photo items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS regeneration_photo',
          [],
          () => {
            console.log('regeneration_photo table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS regeneration_photo (gid TEXT, core_uri TEXT, lat TEXT, lon TEXT, geom TEXT)',
          [],
          () => {
            console.log('regeneration_photo table created successfully');
          },
          reject,
        );

        data.forEach(regeneration_photo => {
          tx.executeSql(
            'INSERT INTO regeneration_photo VALUES (?, ?, ?, ?, ?)',
            [
              regeneration_photo.gid || null,
              regeneration_photo.core_uri || null,
              regeneration_photo.lat || null,
              regeneration_photo.lon || null,
              regeneration_photo.geom || null,
            ],
            (_, resultSet) =>
              console.log(
                'regeneration_photo data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting regeneration_photo data',
                error,
                regeneration_photo,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching regeneration_photo data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const regeneration_photo_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM regeneration_photo`, // Query the regeneration_photo table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying regeneration_photo`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const regeneration_photo_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM regeneration_photo`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from regeneration_photo:', resultSet);

          try {
            await regeneration_photo_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from regeneration_photo`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const directions_api = async () => {
  try {
    const response = await fetch(`${baseApi}/directions?token=${token}`);
    const data = await response.json();
    console.log('Total directions items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS directions',
          [],
          () => {
            console.log('directions table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS directions (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('directions table created successfully');
          },
          reject,
        );

        data.forEach(directions => {
          tx.executeSql(
            'INSERT INTO directions VALUES (?, ?, ?, ?, ?)',
            [
              directions.id || null,
              directions.name || null,
              directions.name_bn || null,
              directions.name_short || null,
              directions.code || null,
            ],
            (_, resultSet) =>
              console.log('directions data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting directions data',
                error,
                directions,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching directions data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const directions_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM directions`, // Query the directions table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying directions`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const directions_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM directions`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from directions:', resultSet);

          try {
            await directions_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from directions`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const dis_nurserys_api = async () => {
  try {
    const response = await fetch(`${baseApi}/dis_nurserys?token=${token}`);
    const data = await response.json();
    console.log('Total dis_nurserys items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS dis_nurserys',
          [],
          () => {
            console.log('dis_nurserys table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS dis_nurserys (id TEXT, name TEXT, name_bn TEXT, code TEXT)',
          [],
          () => {
            console.log('dis_nurserys table created successfully');
          },
          reject,
        );

        data.forEach(dis_nurserys => {
          tx.executeSql(
            'INSERT INTO dis_nurserys VALUES (?, ?, ?, ?)',
            [
              dis_nurserys.id || null,
              dis_nurserys.name || null,
              dis_nurserys.name_bn || null,
              dis_nurserys.code || null,
            ],
            (_, resultSet) =>
              console.log('dis_nurserys data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting dis_nurserys data',
                error,
                dis_nurserys,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching dis_nurserys data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const dis_nurserys_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM dis_nurserys`, // Query the dis_nurserys table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying dis_nurserys`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const dis_nurserys_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM dis_nurserys`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from dis_nurserys:', resultSet);

          try {
            await dis_nurserys_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from dis_nurserys`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const division_test_api = async () => {
  try {
    const response = await fetch(`${baseApi}/division_test?token=${token}`);
    const data = await response.json();
    console.log('Total division_test items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS division_test',
          [],
          () => {
            console.log('division_test table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS division_test (gid TEXT, __gid TEXT, division TEXT, divcode TEXT, geom TEXT)',
          [],
          () => {
            console.log('division_test table created successfully');
          },
          reject,
        );

        data.forEach(division_test => {
          tx.executeSql(
            'INSERT INTO division_test VALUES (?, ?, ?, ?, ?)',
            [
              division_test.gid || null,
              division_test.__gid || null,
              division_test.division || null,
              division_test.divcode || null,
              division_test.geom || null,
            ],
            (_, resultSet) =>
              console.log(
                'division_test data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting division_test data',
                error,
                division_test,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching division_test data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const division_test_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM division_test`, // Query the division_test table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying division_test`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const division_test_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM division_test`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from division_test:', resultSet);

          try {
            await division_test_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from division_test`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const elevations_api = async () => {
  try {
    const response = await fetch(`${baseApi}/elevations?token=${token}`);
    const data = await response.json();
    console.log('Total elevations items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS elevations',
          [],
          () => {
            console.log('elevations table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS elevations (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('elevations table created successfully');
          },
          reject,
        );

        data.forEach(elevations => {
          tx.executeSql(
            'INSERT INTO elevations VALUES (?, ?, ?, ?, ?)',
            [
              elevations.id || null,
              elevations.name || null,
              elevations.name_bn || null,
              elevations.name_short || null,
              elevations.code || null,
            ],
            (_, resultSet) =>
              console.log('elevations data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting elevations data',
                error,
                elevations,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching elevations data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const elevations_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM elevations`, // Query the elevations table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying elevations`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const elevations_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM elevations`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from elevations:', resultSet);

          try {
            await elevations_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from elevations`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const email_notifications_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/email_notifications?token=${token}`,
    );
    const data = await response.json();
    console.log('Total email_notifications items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS email_notifications',
          [],
          () => {
            console.log('email_notifications table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS email_notifications (id TEXT, comp_id TEXT, subject TEXT, message TEXT, from_email_id TEXT, to_email_id TEXT, from_user_id TEXT, to_user_id TEXT, from_role_id TEXT, to_role_id TEXT, status TEXT, request_ip TEXT, is_active TEXT, created_by TEXT, updated_by TEXT, created_at TEXT, updated_at TEXT)',
          [],
          () => {
            console.log('email_notifications table created successfully');
          },
          reject,
        );

        data.forEach(email_notifications => {
          tx.executeSql(
            'INSERT INTO email_notifications VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              email_notifications.id || null,
              email_notifications.comp_id || null,
              email_notifications.subject || null,
              email_notifications.message || null,
              email_notifications.from_email_id || null,
              email_notifications.to_email_id || null,
              email_notifications.from_user_id || null,
              email_notifications.to_user_id || null,
              email_notifications.from_role_id || null,
              email_notifications.to_role_id || null,
              email_notifications.status || null,
              email_notifications.request_ip || null,
              email_notifications.is_active || null,
              email_notifications.created_by || null,
              email_notifications.updated_by || null,
              email_notifications.created_at || null,
              email_notifications.updated_at || null,
            ],
            (_, resultSet) =>
              console.log(
                'email_notifications data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting email_notifications data',
                error,
                email_notifications,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching email_notifications data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const email_notifications_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM email_notifications`, // Query the email_notifications table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying email_notifications`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const email_notifications_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM email_notifications`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from email_notifications:', resultSet);

          try {
            await email_notifications_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from email_notifications`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const failed_jobs_api = async () => {
  try {
    const response = await fetch(`${baseApi}/failed_jobs?token=${token}`);
    const data = await response.json();
    console.log('Total failed_jobs items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS failed_jobs',
          [],
          () => {
            console.log('failed_jobs table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS failed_jobs (id TEXT, uuid TEXT, connection TEXT, queue TEXT, payload TEXT, exception TEXT, failed_at TEXT)',
          [],
          () => {
            console.log('failed_jobs table created successfully');
          },
          reject,
        );

        data.forEach(failed_jobs => {
          tx.executeSql(
            'INSERT INTO failed_jobs VALUES (?, ?, ?, ?, ?, ?, ?)',
            [
              failed_jobs.id || null,
              failed_jobs.uuid || null,
              failed_jobs.connection || null,
              failed_jobs.queue || null,
              failed_jobs.payload || null,
              failed_jobs.exception || null,
              failed_jobs.failed_at || null,
            ],
            (_, resultSet) =>
              console.log('failed_jobs data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting failed_jobs data',
                error,
                failed_jobs,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching failed_jobs data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const failed_jobs_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM failed_jobs`, // Query the failed_jobs table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying failed_jobs`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const failed_jobs_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM failed_jobs`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from failed_jobs:', resultSet);

          try {
            await failed_jobs_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from failed_jobs`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const file_categories_api = async () => {
  try {
    const response = await fetch(`${baseApi}/file_categories?token=${token}`);
    const data = await response.json();
    console.log('Total file_categories items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS file_categories',
          [],
          () => {
            console.log('file_categories table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS file_categories (id TEXT, title TEXT, code TEXT, description TEXT, sort TEXT, status TEXT, created_at TEXT, created_by TEXT, updated_at TEXT, updated_by TEXT, deleted_at TEXT, deleted_by TEXT)',
          [],
          () => {
            console.log('file_categories table created successfully');
          },
          reject,
        );

        data.forEach(file_categories => {
          tx.executeSql(
            'INSERT INTO file_categories VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              file_categories.id || null,
              file_categories.title || null,
              file_categories.code || null,
              file_categories.description || null,
              file_categories.sort || null,
              file_categories.status || null,
              file_categories.created_at || null,
              file_categories.created_by || null,
              file_categories.updated_at || null,
              file_categories.updated_by || null,
              file_categories.deleted_at || null,
              file_categories.deleted_by || null,
            ],
            (_, resultSet) =>
              console.log(
                'file_categories data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting file_categories data',
                error,
                file_categories,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching file_categories data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const file_categories_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM file_categories`, // Query the file_categories table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying file_categories`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const file_categories_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM file_categories`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from file_categories:', resultSet);

          try {
            await file_categories_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from file_categories`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const financial_years_api = async () => {
  try {
    const response = await fetch(`${baseApi}/financial_years?token=${token}`);
    const data = await response.json();
    console.log('Total financial_years items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS financial_years',
          [],
          () => {
            console.log('financial_years table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS financial_years (id TEXT, name TEXT, name_bn TEXT, code TEXT)',
          [],
          () => {
            console.log('financial_years table created successfully');
          },
          reject,
        );

        data.forEach(financial_years => {
          tx.executeSql(
            'INSERT INTO financial_years VALUES (?, ?, ?, ?)',
            [
              financial_years.id || null,
              financial_years.name || null,
              financial_years.name_bn || null,
              financial_years.code || null,
            ],
            (_, resultSet) =>
              console.log(
                'financial_years data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting financial_years data',
                error,
                financial_years,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching financial_years data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const financial_years_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM financial_years`, // Query the financial_years table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying financial_years`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const financial_years_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM financial_years`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from financial_years:', resultSet);

          try {
            await financial_years_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from financial_years`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const forward_beat_components_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/forward_beat_components?token=${token}`,
    );
    const data = await response.json();
    console.log('Total forward_beat_components items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS forward_beat_components',
          [],
          () => {
            console.log('forward_beat_components table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS forward_beat_components (id TEXT, part_a_uri TEXT, part_b_uri TEXT, part_c_uri TEXT, index_map_id TEXT, created_by TEXT, created_at TEXT, status TEXT, updated_by TEXT, updated_at TEXT, from_role_id TEXT, to_role_id TEXT, from_user_id TEXT, to_user_id TEXT)',
          [],
          () => {
            console.log('forward_beat_components table created successfully');
          },
          reject,
        );

        data.forEach(forward_beat_components => {
          tx.executeSql(
            'INSERT INTO forward_beat_components VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              forward_beat_components.id || null,
              forward_beat_components.part_a_uri || null,
              forward_beat_components.part_b_uri || null,
              forward_beat_components.part_c_uri || null,
              forward_beat_components.index_map_id || null,
              forward_beat_components.created_by || null,
              forward_beat_components.created_at || null,
              forward_beat_components.status || null,
              forward_beat_components.updated_by || null,
              forward_beat_components.updated_at || null,
              forward_beat_components.from_role_id || null,
              forward_beat_components.to_role_id || null,
              forward_beat_components.from_user_id || null,
              forward_beat_components.to_user_id || null,
            ],
            (_, resultSet) =>
              console.log(
                'forward_beat_components data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting forward_beat_components data',
                error,
                forward_beat_components,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching forward_beat_components data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const forward_beat_components_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM forward_beat_components`, // Query the forward_beat_components table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying forward_beat_components`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const forward_beat_components_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM forward_beat_components`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from forward_beat_components:',
            resultSet,
          );

          try {
            await forward_beat_components_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from forward_beat_components`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const forward_beat_history_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/forward_beat_history?token=${token}`,
    );
    const data = await response.json();
    console.log('Total forward_beat_history items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS forward_beat_history',
          [],
          () => {
            console.log('forward_beat_history table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS forward_beat_history (id TEXT, comment TEXT, comp_id TEXT, status TEXT, created_by TEXT, created_at TEXT, updated_by TEXT, updated_at TEXT, from_role_id TEXT, to_role_id TEXT, from_user_id TEXT, to_user_id TEXT)',
          [],
          () => {
            console.log('forward_beat_history table created successfully');
          },
          reject,
        );

        data.forEach(forward_beat_history => {
          tx.executeSql(
            'INSERT INTO forward_beat_history VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              forward_beat_history.id || null,
              forward_beat_history.comment || null,
              forward_beat_history.comp_id || null,
              forward_beat_history.status || null,
              forward_beat_history.created_by || null,
              forward_beat_history.created_at || null,
              forward_beat_history.updated_by || null,
              forward_beat_history.updated_at || null,
              forward_beat_history.from_role_id || null,
              forward_beat_history.to_role_id || null,
              forward_beat_history.from_user_id || null,
              forward_beat_history.to_user_id || null,
            ],
            (_, resultSet) =>
              console.log(
                'forward_beat_history data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting forward_beat_history data',
                error,
                forward_beat_history,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching forward_beat_history data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const forward_beat_history_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM forward_beat_history`, // Query the forward_beat_history table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying forward_beat_history`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const forward_beat_history_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM forward_beat_history`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from forward_beat_history:', resultSet);

          try {
            await forward_beat_history_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from forward_beat_history`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const forward_status_api = async () => {
  try {
    const response = await fetch(`${baseApi}/forward_status?token=${token}`);
    const data = await response.json();
    console.log('Total forward_status items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS forward_status',
          [],
          () => {
            console.log('forward_status table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS forward_status (id TEXT, name TEXT, to_role_id TEXT)',
          [],
          () => {
            console.log('forward_status table created successfully');
          },
          reject,
        );

        data.forEach(forward_status => {
          tx.executeSql(
            'INSERT INTO forward_status VALUES (?, ?, ?)',
            [
              forward_status.id || null,
              forward_status.name || null,
              forward_status.to_role_id || null,
            ],
            (_, resultSet) =>
              console.log(
                'forward_status data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting forward_status data',
                error,
                forward_status,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching forward_status data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const forward_status_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM forward_status`, // Query the forward_status table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying forward_status`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const forward_status_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM forward_status`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from forward_status:', resultSet);

          try {
            await forward_status_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from forward_status`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const geo_beats_api = async () => {
  try {
    const response = await fetch(`${baseApi}/geo_beats?token=${token}`);
    const data = await response.json();
    console.log('Total geo_beats items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS geo_beats',
          [],
          () => {
            console.log('geo_beats table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS geo_beats (gid TEXT, cox_blk_ TEXT, cox_blk_id TEXT, d_no TEXT, range TEXT, r_no TEXT, beat TEXT, be_no TEXT, block TEXT, bl_no TEXT, forest TEXT, division TEXT, beat_code TEXT, range_code TEXT, div_code TEXT, cir_code TEXT, geom TEXT)',
          [],
          () => {
            console.log('geo_beats table created successfully');
          },
          reject,
        );

        data.forEach(geo_beats => {
          tx.executeSql(
            'INSERT INTO geo_beats VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              geo_beats.gid || null,
              geo_beats.cox_blk_ || null,
              geo_beats.cox_blk_id || null,
              geo_beats.d_no || null,
              geo_beats.range || null,
              geo_beats.r_no || null,
              geo_beats.beat || null,
              geo_beats.be_no || null,
              geo_beats.block || null,
              geo_beats.bl_no || null,
              geo_beats.forest || null,
              geo_beats.division || null,
              geo_beats.beat_code || null,
              geo_beats.range_code || null,
              geo_beats.div_code || null,
              geo_beats.cir_code || null,
              geo_beats.geom || null,
            ],
            (_, resultSet) =>
              console.log('geo_beats data inserted successfully', resultSet),
            (_, error) => {
              console.error('Error inserting geo_beats data', error, geo_beats);
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching geo_beats data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const geo_beats_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM geo_beats`, // Query the geo_beats table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying geo_beats`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const geo_beats_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM geo_beats`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from geo_beats:', resultSet);

          try {
            await geo_beats_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from geo_beats`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const geo_district_boundary_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/geo_district_boundary?token=${token}`,
    );
    const data = await response.json();
    console.log('Total geo_district_boundary items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS geo_district_boundary',
          [],
          () => {
            console.log('geo_district_boundary table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS geo_district_boundary (gid TEXT, division_c TEXT, district_c TEXT, division_n TEXT, district_n TEXT, geom TEXT)',
          [],
          () => {
            console.log('geo_district_boundary table created successfully');
          },
          reject,
        );

        data.forEach(geo_district_boundary => {
          tx.executeSql(
            'INSERT INTO geo_district_boundary VALUES (?, ?, ?, ?, ?, ?)',
            [
              geo_district_boundary.gid || null,
              geo_district_boundary.division_c || null,
              geo_district_boundary.district_c || null,
              geo_district_boundary.division_n || null,
              geo_district_boundary.district_n || null,
              geo_district_boundary.geom || null,
            ],
            (_, resultSet) =>
              console.log(
                'geo_district_boundary data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting geo_district_boundary data',
                error,
                geo_district_boundary,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching geo_district_boundary data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const geo_district_boundary_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM geo_district_boundary`, // Query the geo_district_boundary table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying geo_district_boundary`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const geo_district_boundary_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM geo_district_boundary`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from geo_district_boundary:',
            resultSet,
          );

          try {
            await geo_district_boundary_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from geo_district_boundary`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const geo_district_pts_api = async () => {
  try {
    const response = await fetch(`${baseApi}/geo_district_pts?token=${token}`);
    const data = await response.json();
    console.log('Total geo_district_pts items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS geo_district_pts',
          [],
          () => {
            console.log('geo_district_pts table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS geo_district_pts (gid TEXT, objectid TEXT, division_c TEXT, district_c TEXT, division_n TEXT, district_n TEXT, orig_fid TEXT, geom TEXT)',
          [],
          () => {
            console.log('geo_district_pts table created successfully');
          },
          reject,
        );

        data.forEach(geo_district_pts => {
          tx.executeSql(
            'INSERT INTO geo_district_pts VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
            [
              geo_district_pts.gid || null,
              geo_district_pts.objectid || null,
              geo_district_pts.division_c || null,
              geo_district_pts.district_c || null,
              geo_district_pts.division_n || null,
              geo_district_pts.district_n || null,
              geo_district_pts.orig_fid || null,
              geo_district_pts.geom || null,
            ],
            (_, resultSet) =>
              console.log(
                'geo_district_pts data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting geo_district_pts data',
                error,
                geo_district_pts,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching geo_district_pts data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const geo_district_pts_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM geo_district_pts`, // Query the geo_district_pts table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying geo_district_pts`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const geo_district_pts_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM geo_district_pts`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from geo_district_pts:', resultSet);

          try {
            await geo_district_pts_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from geo_district_pts`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const geo_division_boundary_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/geo_division_boundary?token=${token}`,
    );
    const data = await response.json();
    console.log('Total geo_division_boundary items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS geo_division_boundary',
          [],
          () => {
            console.log('geo_division_boundary table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS geo_division_boundary (gid TEXT, __gid TEXT, division TEXT, divcode TEXT, geom TEXT)',
          [],
          () => {
            console.log('geo_division_boundary table created successfully');
          },
          reject,
        );

        data.forEach(geo_division_boundary => {
          tx.executeSql(
            'INSERT INTO geo_division_boundary VALUES (?, ?, ?, ?, ?)',
            [
              geo_division_boundary.gid || null,
              geo_division_boundary.__gid || null,
              geo_division_boundary.division || null,
              geo_division_boundary.divcode || null,
              geo_division_boundary.geom || null,
            ],
            (_, resultSet) =>
              console.log(
                'geo_division_boundary data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting geo_division_boundary data',
                error,
                geo_division_boundary,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching geo_division_boundary data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const geo_division_boundary_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM geo_division_boundary`, // Query the geo_division_boundary table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying geo_division_boundary`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const geo_division_boundary_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM geo_division_boundary`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from geo_division_boundary:',
            resultSet,
          );

          try {
            await geo_division_boundary_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from geo_division_boundary`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const geo_division_pts_api = async () => {
  try {
    const response = await fetch(`${baseApi}/geo_division_pts?token=${token}`);
    const data = await response.json();
    console.log('Total geo_division_pts items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS geo_division_pts',
          [],
          () => {
            console.log('geo_division_pts table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS geo_division_pts (gid TEXT, objectid TEXT, division TEXT, divcode TEXT, geom TEXT)',
          [],
          () => {
            console.log('geo_division_pts table created successfully');
          },
          reject,
        );

        data.forEach(geo_division_pts => {
          tx.executeSql(
            'INSERT INTO geo_division_pts VALUES (?, ?, ?, ?, ?)',
            [
              geo_division_pts.gid || null,
              geo_division_pts.objectid || null,
              geo_division_pts.division || null,
              geo_division_pts.divcode || null,
              geo_division_pts.geom || null,
            ],
            (_, resultSet) =>
              console.log(
                'geo_division_pts data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting geo_division_pts data',
                error,
                geo_division_pts,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching geo_division_pts data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const geo_division_pts_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM geo_division_pts`, // Query the geo_division_pts table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying geo_division_pts`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const geo_division_pts_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM geo_division_pts`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from geo_division_pts:', resultSet);

          try {
            await geo_division_pts_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from geo_division_pts`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const geo_int_boundary_api = async () => {
  try {
    const response = await fetch(`${baseApi}/geo_int_boundary?token=${token}`);
    const data = await response.json();
    console.log('Total geo_int_boundary items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS geo_int_boundary',
          [],
          () => {
            console.log('geo_int_boundary table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS geo_int_boundary (gid TEXT, objectid TEXT, ib TEXT, db TEXT, dsb TEXT, upb TEXT, ub TEXT, mb TEXT, pb TEXT, legend TEXT, shape_leng TEXT, name TEXT, india_myan TEXT, bd TEXT, geom TEXT)',
          [],
          () => {
            console.log('geo_int_boundary table created successfully');
          },
          reject,
        );

        data.forEach(geo_int_boundary => {
          tx.executeSql(
            'INSERT INTO geo_int_boundary VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              geo_int_boundary.gid || null,
              geo_int_boundary.objectid || null,
              geo_int_boundary.ib || null,
              geo_int_boundary.db || null,
              geo_int_boundary.dsb || null,
              geo_int_boundary.upb || null,
              geo_int_boundary.ub || null,
              geo_int_boundary.mb || null,
              geo_int_boundary.pb || null,
              geo_int_boundary.legend || null,
              geo_int_boundary.shape_leng || null,
              geo_int_boundary.name || null,
              geo_int_boundary.india_myan || null,
              geo_int_boundary.bd || null,
              geo_int_boundary.geom || null,
            ],
            (_, resultSet) =>
              console.log(
                'geo_int_boundary data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting geo_int_boundary data',
                error,
                geo_int_boundary,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching geo_int_boundary data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const geo_int_boundary_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM geo_int_boundary`, // Query the geo_int_boundary table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying geo_int_boundary`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const geo_int_boundary_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM geo_int_boundary`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from geo_int_boundary:', resultSet);

          try {
            await geo_int_boundary_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from geo_int_boundary`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const geo_mauza_boundary_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/geo_mauza_boundary?token=${token}`,
    );
    const data = await response.json();
    console.log('Total geo_mauza_boundary items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS geo_mauza_boundary',
          [],
          () => {
            console.log('geo_mauza_boundary table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS geo_mauza_boundary (gid TEXT, geocode TEXT, divname TEXT, distname TEXT, thaname TEXT, uniname TEXT, mauzname TEXT, uni_code TEXT, upz_code TEXT, geom TEXT)',
          [],
          () => {
            console.log('geo_mauza_boundary table created successfully');
          },
          reject,
        );

        data.forEach(geo_mauza_boundary => {
          tx.executeSql(
            'INSERT INTO geo_mauza_boundary VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              geo_mauza_boundary.gid || null,
              geo_mauza_boundary.geocode || null,
              geo_mauza_boundary.divname || null,
              geo_mauza_boundary.distname || null,
              geo_mauza_boundary.thaname || null,
              geo_mauza_boundary.uniname || null,
              geo_mauza_boundary.mauzname || null,
              geo_mauza_boundary.uni_code || null,
              geo_mauza_boundary.upz_code || null,
              geo_mauza_boundary.geom || null,
            ],
            (_, resultSet) =>
              console.log(
                'geo_mauza_boundary data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting geo_mauza_boundary data',
                error,
                geo_mauza_boundary,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching geo_mauza_boundary data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const geo_mauza_boundary_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM geo_mauza_boundary`, // Query the geo_mauza_boundary table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying geo_mauza_boundary`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const geo_mauza_boundary_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM geo_mauza_boundary`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from geo_mauza_boundary:', resultSet);

          try {
            await geo_mauza_boundary_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from geo_mauza_boundary`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const geo_ranges_api = async () => {
  try {
    const response = await fetch(`${baseApi}/geo_ranges?token=${token}`);
    const data = await response.json();
    console.log('Total geo_ranges items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS geo_ranges',
          [],
          () => {
            console.log('geo_ranges table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS geo_ranges (gid TEXT, range TEXT, shape_leng TEXT, shape_area TEXT, range_code TEXT, div_code TEXT, cir_code TEXT, geom TEXT)',
          [],
          () => {
            console.log('geo_ranges table created successfully');
          },
          reject,
        );

        data.forEach(geo_ranges => {
          tx.executeSql(
            'INSERT INTO geo_ranges VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
            [
              geo_ranges.gid || null,
              geo_ranges.range || null,
              geo_ranges.shape_leng || null,
              geo_ranges.shape_area || null,
              geo_ranges.range_code || null,
              geo_ranges.div_code || null,
              geo_ranges.cir_code || null,
              geo_ranges.geom || null,
            ],
            (_, resultSet) =>
              console.log('geo_ranges data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting geo_ranges data',
                error,
                geo_ranges,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching geo_ranges data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const geo_ranges_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM geo_ranges`, // Query the geo_ranges table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying geo_ranges`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const geo_ranges_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM geo_ranges`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from geo_ranges:', resultSet);

          try {
            await geo_ranges_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from geo_ranges`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const geo_ranges_test_api = async () => {
  try {
    const response = await fetch(`${baseApi}/geo_ranges_test?token=${token}`);
    const data = await response.json();
    console.log('Total geo_ranges_test items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS geo_ranges_test',
          [],
          () => {
            console.log('geo_ranges_test table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS geo_ranges_test (gid TEXT, range TEXT, shape_leng TEXT, shape_area TEXT, range_code TEXT, div_code TEXT, cir_code TEXT, geom TEXT)',
          [],
          () => {
            console.log('geo_ranges_test table created successfully');
          },
          reject,
        );

        data.forEach(geo_ranges_test => {
          tx.executeSql(
            'INSERT INTO geo_ranges_test VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
            [
              geo_ranges_test.gid || null,
              geo_ranges_test.range || null,
              geo_ranges_test.shape_leng || null,
              geo_ranges_test.shape_area || null,
              geo_ranges_test.range_code || null,
              geo_ranges_test.div_code || null,
              geo_ranges_test.cir_code || null,
              geo_ranges_test.geom || null,
            ],
            (_, resultSet) =>
              console.log(
                'geo_ranges_test data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting geo_ranges_test data',
                error,
                geo_ranges_test,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching geo_ranges_test data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const geo_ranges_test_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM geo_ranges_test`, // Query the geo_ranges_test table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying geo_ranges_test`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const geo_ranges_test_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM geo_ranges_test`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from geo_ranges_test:', resultSet);

          try {
            await geo_ranges_test_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from geo_ranges_test`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const geo_union_boundary_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/geo_union_boundary?token=${token}`,
    );
    const data = await response.json();
    console.log('Total geo_union_boundary items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS geo_union_boundary',
          [],
          () => {
            console.log('geo_union_boundary table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS geo_union_boundary (gid TEXT, objectid TEXT, divname TEXT, div_code TEXT, distname TEXT, dist_code TEXT, upazname TEXT, upz_code TEXT, psaname TEXT, psa TEXT, uniname TEXT, union_code TEXT, shape_leng TEXT, shape_area TEXT, geom TEXT)',
          [],
          () => {
            console.log('geo_union_boundary table created successfully');
          },
          reject,
        );

        data.forEach(geo_union_boundary => {
          tx.executeSql(
            'INSERT INTO geo_union_boundary VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              geo_union_boundary.gid || null,
              geo_union_boundary.objectid || null,
              geo_union_boundary.divname || null,
              geo_union_boundary.div_code || null,
              geo_union_boundary.distname || null,
              geo_union_boundary.dist_code || null,
              geo_union_boundary.upazname || null,
              geo_union_boundary.upz_code || null,
              geo_union_boundary.psaname || null,
              geo_union_boundary.psa || null,
              geo_union_boundary.uniname || null,
              geo_union_boundary.union_code || null,
              geo_union_boundary.shape_leng || null,
              geo_union_boundary.shape_area || null,
              geo_union_boundary.geom || null,
            ],
            (_, resultSet) =>
              console.log(
                'geo_union_boundary data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting geo_union_boundary data',
                error,
                geo_union_boundary,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching geo_union_boundary data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const geo_union_boundary_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM geo_union_boundary`, // Query the geo_union_boundary table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying geo_union_boundary`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const geo_union_boundary_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM geo_union_boundary`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from geo_union_boundary:', resultSet);

          try {
            await geo_union_boundary_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from geo_union_boundary`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const geo_union_pts_api = async () => {
  try {
    const response = await fetch(`${baseApi}/geo_union_pts?token=${token}`);
    const data = await response.json();
    console.log('Total geo_union_pts items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS geo_union_pts',
          [],
          () => {
            console.log('geo_union_pts table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS geo_union_pts (gid TEXT, union_code TEXT, upz_code TEXT, union_name TEXT, union_bn TEXT, geom TEXT)',
          [],
          () => {
            console.log('geo_union_pts table created successfully');
          },
          reject,
        );

        data.forEach(geo_union_pts => {
          tx.executeSql(
            'INSERT INTO geo_union_pts VALUES (?, ?, ?, ?, ?, ?)',
            [
              geo_union_pts.gid || null,
              geo_union_pts.union_code || null,
              geo_union_pts.upz_code || null,
              geo_union_pts.union_name || null,
              geo_union_pts.union_bn || null,
              geo_union_pts.geom || null,
            ],
            (_, resultSet) =>
              console.log(
                'geo_union_pts data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting geo_union_pts data',
                error,
                geo_union_pts,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching geo_union_pts data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const geo_union_pts_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM geo_union_pts`, // Query the geo_union_pts table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying geo_union_pts`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const geo_union_pts_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM geo_union_pts`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from geo_union_pts:', resultSet);

          try {
            await geo_union_pts_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from geo_union_pts`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const geo_upazila_boundary_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/geo_upazila_boundary?token=${token}`,
    );
    const data = await response.json();
    console.log('Total geo_upazila_boundary items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS geo_upazila_boundary',
          [],
          () => {
            console.log('geo_upazila_boundary table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS geo_upazila_boundary (gid TEXT, objectid TEXT, divname TEXT, div_code TEXT, distname TEXT, dist_code TEXT, upazname TEXT, upz_code TEXT, shape_leng TEXT, shape_area TEXT, geom TEXT)',
          [],
          () => {
            console.log('geo_upazila_boundary table created successfully');
          },
          reject,
        );

        data.forEach(geo_upazila_boundary => {
          tx.executeSql(
            'INSERT INTO geo_upazila_boundary VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              geo_upazila_boundary.gid || null,
              geo_upazila_boundary.objectid || null,
              geo_upazila_boundary.divname || null,
              geo_upazila_boundary.div_code || null,
              geo_upazila_boundary.distname || null,
              geo_upazila_boundary.dist_code || null,
              geo_upazila_boundary.upazname || null,
              geo_upazila_boundary.upz_code || null,
              geo_upazila_boundary.shape_leng || null,
              geo_upazila_boundary.shape_area || null,
              geo_upazila_boundary.geom || null,
            ],
            (_, resultSet) =>
              console.log(
                'geo_upazila_boundary data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting geo_upazila_boundary data',
                error,
                geo_upazila_boundary,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching geo_upazila_boundary data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const geo_upazila_boundary_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM geo_upazila_boundary`, // Query the geo_upazila_boundary table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying geo_upazila_boundary`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const geo_upazila_boundary_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM geo_upazila_boundary`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from geo_upazila_boundary:', resultSet);

          try {
            await geo_upazila_boundary_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from geo_upazila_boundary`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const geom_vw_ssp_map_api = async () => {
  try {
    const response = await fetch(`${baseApi}/geom_vw_ssp_map?token=${token}`);
    const data = await response.json();
    console.log('Total geom_vw_ssp_map items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS geom_vw_ssp_map',
          [],
          () => {
            console.log('geom_vw_ssp_map table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS geom_vw_ssp_map (_URI TEXT, geom TEXT, TOP_LEVEL_AURI TEXT, CREATION_DATE TEXT, FINANCIAL_YEAR TEXT, BEAT TEXT, RANGE TEXT, DIVISION TEXT, CIRCLE TEXT, beat_code TEXT, range_code TEXT, division_code TEXT, circle_code TEXT, intervention_name TEXT, total_area_ha TEXT, label_name TEXT)',
          [],
          () => {
            console.log('geom_vw_ssp_map table created successfully');
          },
          reject,
        );

        data.forEach(geom_vw_ssp_map => {
          tx.executeSql(
            'INSERT INTO geom_vw_ssp_map VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              geom_vw_ssp_map._URI || null,
              geom_vw_ssp_map.geom || null,
              geom_vw_ssp_map.TOP_LEVEL_AURI || null,
              geom_vw_ssp_map.CREATION_DATE || null,
              geom_vw_ssp_map.FINANCIAL_YEAR || null,
              geom_vw_ssp_map.BEAT || null,
              geom_vw_ssp_map.RANGE || null,
              geom_vw_ssp_map.DIVISION || null,
              geom_vw_ssp_map.CIRCLE || null,
              geom_vw_ssp_map.beat_code || null,
              geom_vw_ssp_map.range_code || null,
              geom_vw_ssp_map.division_code || null,
              geom_vw_ssp_map.circle_code || null,
              geom_vw_ssp_map.intervention_name || null,
              geom_vw_ssp_map.total_area_ha || null,
              geom_vw_ssp_map.label_name || null,
            ],
            (_, resultSet) =>
              console.log(
                'geom_vw_ssp_map data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting geom_vw_ssp_map data',
                error,
                geom_vw_ssp_map,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching geom_vw_ssp_map data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const geom_vw_ssp_map_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM geom_vw_ssp_map`, // Query the geom_vw_ssp_map table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying geom_vw_ssp_map`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const geom_vw_ssp_map_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM geom_vw_ssp_map`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from geom_vw_ssp_map:', resultSet);

          try {
            await geom_vw_ssp_map_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from geom_vw_ssp_map`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const gpx_file_lists_api = async () => {
  try {
    const response = await fetch(`${baseApi}/gpx_file_lists?token=${token}`);
    const data = await response.json();
    console.log('Total gpx_file_lists items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS gpx_file_lists',
          [],
          () => {
            console.log('gpx_file_lists table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS gpx_file_lists (id TEXT, title TEXT, beat_code TEXT, core_uri TEXT, ssp_uri TEXT, file_name TEXT, file_path TEXT, loc TEXT, sort TEXT, status TEXT, created_at TEXT, created_by TEXT, updated_at TEXT, updated_by TEXT)',
          [],
          () => {
            console.log('gpx_file_lists table created successfully');
          },
          reject,
        );

        data.forEach(gpx_file_lists => {
          tx.executeSql(
            'INSERT INTO gpx_file_lists VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              gpx_file_lists.id || null,
              gpx_file_lists.title || null,
              gpx_file_lists.beat_code || null,
              gpx_file_lists.core_uri || null,
              gpx_file_lists.ssp_uri || null,
              gpx_file_lists.file_name || null,
              gpx_file_lists.file_path || null,
              gpx_file_lists.loc || null,
              gpx_file_lists.sort || null,
              gpx_file_lists.status || null,
              gpx_file_lists.created_at || null,
              gpx_file_lists.created_by || null,
              gpx_file_lists.updated_at || null,
              gpx_file_lists.updated_by || null,
            ],
            (_, resultSet) =>
              console.log(
                'gpx_file_lists data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting gpx_file_lists data',
                error,
                gpx_file_lists,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching gpx_file_lists data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const gpx_file_lists_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM gpx_file_lists`, // Query the gpx_file_lists table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying gpx_file_lists`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const gpx_file_lists_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM gpx_file_lists`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from gpx_file_lists:', resultSet);

          try {
            await gpx_file_lists_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from gpx_file_lists`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const historys_api = async () => {
  try {
    const response = await fetch(`${baseApi}/historys?token=${token}`);
    const data = await response.json();
    console.log('Total historys items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS historys',
          [],
          () => {
            console.log('historys table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS historys (id TEXT, name TEXT, name_bn TEXT, code TEXT)',
          [],
          () => {
            console.log('historys table created successfully');
          },
          reject,
        );

        data.forEach(historys => {
          tx.executeSql(
            'INSERT INTO historys VALUES (?, ?, ?, ?)',
            [
              historys.id || null,
              historys.name || null,
              historys.name_bn || null,
              historys.code || null,
            ],
            (_, resultSet) =>
              console.log('historys data inserted successfully', resultSet),
            (_, error) => {
              console.error('Error inserting historys data', error, historys);
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching historys data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const historys_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM historys`, // Query the historys table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying historys`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const historys_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM historys`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from historys:', resultSet);

          try {
            await historys_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from historys`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const human_issues_api = async () => {
  try {
    const response = await fetch(`${baseApi}/human_issues?token=${token}`);
    const data = await response.json();
    console.log('Total human_issues items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS human_issues',
          [],
          () => {
            // console.log('human_issues table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS human_issues (id TEXT, name TEXT, name_bn TEXT, code TEXT)',
          [],
          () => {
            //console.log('human_issues table created successfully');
          },
          reject,
        );

        data.forEach(human_issues => {
          tx.executeSql(
            'INSERT INTO human_issues VALUES (?, ?, ?, ?)',
            [
              human_issues.id || null,
              human_issues.name || null,
              human_issues.name_bn || null,
              human_issues.code || null,
            ],
            (_, resultSet) =>
              //console.log('human_issues data inserted successfully', resultSet),
              (_, error) => {
                console.error(
                  'Error inserting human_issues data',
                  error,
                  human_issues,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching human_issues data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const human_issues_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM human_issues`, // Query the human_issues table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying human_issues`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const human_issues_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM human_issues`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from human_issues:', resultSet);

          try {
            await human_issues_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from human_issues`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const index_maps_api = async () => {
  try {
    const response = await fetch(`${baseApi}/index_maps?token=${token}`);
    const data = await response.json();
    console.log('Total index_maps items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS index_maps',
          [],
          () => {
            console.log('index_maps table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS index_maps (id TEXT, file_path TEXT, beat_code TEXT, created_by TEXT, created_at TEXT, updated_by TEXT, updated_at TEXT, map_title TEXT, from_gis_unit TEXT)',
          [],
          () => {
            console.log('index_maps table created successfully');
          },
          reject,
        );

        data.forEach(index_maps => {
          tx.executeSql(
            'INSERT INTO index_maps VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              index_maps.id || null,
              index_maps.file_path || null,
              index_maps.beat_code || null,
              index_maps.created_by || null,
              index_maps.created_at || null,
              index_maps.updated_by || null,
              index_maps.updated_at || null,
              index_maps.map_title || null,
              index_maps.from_gis_unit || null,
            ],
            (_, resultSet) =>
              console.log('index_maps data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting index_maps data',
                error,
                index_maps,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching index_maps data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const index_maps_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM index_maps`, // Query the index_maps table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying index_maps`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const index_maps_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM index_maps`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from index_maps:', resultSet);

          try {
            await index_maps_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from index_maps`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const intervention_lists_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/intervention_lists?token=${token}`,
    );
    const data = await response.json();
    console.log('Total intervention_lists items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS intervention_lists',
          [],
          () => {
            console.log('intervention_lists table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS intervention_lists (id TEXT, name TEXT, name_bn TEXT, code TEXT, ecozone_code TEXT)',
          [],
          () => {
            console.log('intervention_lists table created successfully');
          },
          reject,
        );

        data.forEach(intervention_lists => {
          tx.executeSql(
            'INSERT INTO intervention_lists VALUES (?, ?, ?, ?, ?)',
            [
              intervention_lists.id || null,
              intervention_lists.name || null,
              intervention_lists.name_bn || null,
              intervention_lists.code || null,
              intervention_lists.ecozone_code || null,
            ],
            (_, resultSet) =>
              console.log(
                'intervention_lists data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting intervention_lists data',
                error,
                intervention_lists,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching intervention_lists data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const intervention_lists_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM intervention_lists`, // Query the intervention_lists table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying intervention_lists`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const intervention_lists_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM intervention_lists`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from intervention_lists:', resultSet);

          try {
            await intervention_lists_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from intervention_lists`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const intervention_sites_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/intervention_sites?token=${token}`,
    );
    const data = await response.json();
    console.log('Total intervention_sites items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS intervention_sites',
          [],
          () => {
            console.log('intervention_sites table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS intervention_sites (gid TEXT, et_id TEXT, name TEXT, year TEXT, beat TEXT, range TEXT, division TEXT, circle TEXT, plantation TEXT, beat_code TEXT, range_code TEXT, div_code TEXT, circ_code TEXT, geom TEXT)',
          [],
          () => {
            console.log('intervention_sites table created successfully');
          },
          reject,
        );

        data.forEach(intervention_sites => {
          tx.executeSql(
            'INSERT INTO intervention_sites VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              intervention_sites.gid || null,
              intervention_sites.et_id || null,
              intervention_sites.name || null,
              intervention_sites.year || null,
              intervention_sites.beat || null,
              intervention_sites.range || null,
              intervention_sites.division || null,
              intervention_sites.circle || null,
              intervention_sites.plantation || null,
              intervention_sites.beat_code || null,
              intervention_sites.range_code || null,
              intervention_sites.div_code || null,
              intervention_sites.circ_code || null,
              intervention_sites.geom || null,
            ],
            (_, resultSet) =>
              console.log(
                'intervention_sites data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting intervention_sites data',
                error,
                intervention_sites,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching intervention_sites data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const intervention_sites_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM intervention_sites`, // Query the intervention_sites table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying intervention_sites`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const intervention_sites_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM intervention_sites`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from intervention_sites:', resultSet);

          try {
            await intervention_sites_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from intervention_sites`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const intervention_sites_2d_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/intervention_sites_2d?token=${token}`,
    );
    const data = await response.json();
    console.log('Total intervention_sites_2d items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS intervention_sites_2d',
          [],
          () => {
            console.log('intervention_sites_2d table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS intervention_sites_2d (gid TEXT, et_id TEXT, name TEXT, year TEXT, beat TEXT, range TEXT, division TEXT, circle TEXT, plantation TEXT, beat_code TEXT, range_code TEXT, div_code TEXT, circ_code TEXT, geom TEXT)',
          [],
          () => {
            console.log('intervention_sites_2d table created successfully');
          },
          reject,
        );

        data.forEach(intervention_sites_2d => {
          tx.executeSql(
            'INSERT INTO intervention_sites_2d VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              intervention_sites_2d.gid || null,
              intervention_sites_2d.et_id || null,
              intervention_sites_2d.name || null,
              intervention_sites_2d.year || null,
              intervention_sites_2d.beat || null,
              intervention_sites_2d.range || null,
              intervention_sites_2d.division || null,
              intervention_sites_2d.circle || null,
              intervention_sites_2d.plantation || null,
              intervention_sites_2d.beat_code || null,
              intervention_sites_2d.range_code || null,
              intervention_sites_2d.div_code || null,
              intervention_sites_2d.circ_code || null,
              intervention_sites_2d.geom || null,
            ],
            (_, resultSet) =>
              console.log(
                'intervention_sites_2d data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting intervention_sites_2d data',
                error,
                intervention_sites_2d,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching intervention_sites_2d data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const intervention_sites_2d_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM intervention_sites_2d`, // Query the intervention_sites_2d table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying intervention_sites_2d`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const intervention_sites_2d_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM intervention_sites_2d`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from intervention_sites_2d:',
            resultSet,
          );

          try {
            await intervention_sites_2d_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from intervention_sites_2d`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const intervention_sites_bk_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/intervention_sites_bk?token=${token}`,
    );
    const data = await response.json();
    console.log('Total intervention_sites_bk items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS intervention_sites_bk',
          [],
          () => {
            console.log('intervention_sites_bk table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS intervention_sites_bk (gid TEXT, et_id TEXT, name TEXT, year TEXT, beat TEXT, range TEXT, division TEXT, circle TEXT, plantation TEXT, beat_code TEXT, range_code TEXT, div_code TEXT, circ_code TEXT, geom TEXT)',
          [],
          () => {
            console.log('intervention_sites_bk table created successfully');
          },
          reject,
        );

        data.forEach(intervention_sites_bk => {
          tx.executeSql(
            'INSERT INTO intervention_sites_bk VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              intervention_sites_bk.gid || null,
              intervention_sites_bk.et_id || null,
              intervention_sites_bk.name || null,
              intervention_sites_bk.year || null,
              intervention_sites_bk.beat || null,
              intervention_sites_bk.range || null,
              intervention_sites_bk.division || null,
              intervention_sites_bk.circle || null,
              intervention_sites_bk.plantation || null,
              intervention_sites_bk.beat_code || null,
              intervention_sites_bk.range_code || null,
              intervention_sites_bk.div_code || null,
              intervention_sites_bk.circ_code || null,
              intervention_sites_bk.geom || null,
            ],
            (_, resultSet) =>
              console.log(
                'intervention_sites_bk data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting intervention_sites_bk data',
                error,
                intervention_sites_bk,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching intervention_sites_bk data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const intervention_sites_bk_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM intervention_sites_bk`, // Query the intervention_sites_bk table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying intervention_sites_bk`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const intervention_sites_bk_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM intervention_sites_bk`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from intervention_sites_bk:',
            resultSet,
          );

          try {
            await intervention_sites_bk_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from intervention_sites_bk`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const land_cover_api = async () => {
  try {
    const response = await fetch(`${baseApi}/land_cover?token=${token}`);
    const data = await response.json();
    console.log('Total land_cover items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS land_cover',
          [],
          () => {
            console.log('land_cover table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS land_cover (gid TEXT, fid_lc_201 TEXT, code_r TEXT, class_r TEXT, cd_class_r TEXT, area_sqk TEXT, id TEXT, code_lc15 TEXT, desc_lc15_ TEXT, f_nf TEXT, f_s_nf TEXT, categories TEXT, fid_distri TEXT, distname TEXT, divname_1 TEXT, shape_leng TEXT, shape_le_1 TEXT, shape_area TEXT, geom TEXT)',
          [],
          () => {
            console.log('land_cover table created successfully');
          },
          reject,
        );

        data.forEach(land_cover => {
          tx.executeSql(
            'INSERT INTO land_cover VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              land_cover.gid || null,
              land_cover.fid_lc_201 || null,
              land_cover.code_r || null,
              land_cover.class_r || null,
              land_cover.cd_class_r || null,
              land_cover.area_sqk || null,
              land_cover.id || null,
              land_cover.code_lc15 || null,
              land_cover.desc_lc15_ || null,
              land_cover.f_nf || null,
              land_cover.f_s_nf || null,
              land_cover.categories || null,
              land_cover.fid_distri || null,
              land_cover.distname || null,
              land_cover.divname_1 || null,
              land_cover.shape_leng || null,
              land_cover.shape_le_1 || null,
              land_cover.shape_area || null,
              land_cover.geom || null,
            ],
            (_, resultSet) =>
              console.log('land_cover data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting land_cover data',
                error,
                land_cover,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching land_cover data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const land_cover_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM land_cover`, // Query the land_cover table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying land_cover`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const land_cover_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM land_cover`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from land_cover:', resultSet);

          try {
            await land_cover_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from land_cover`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const inundations_api = async () => {
  try {
    const response = await fetch(`${baseApi}/inundations?token=${token}`);
    const data = await response.json();
    console.log('Total inundations items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS inundations',
          [],
          () => {
            console.log('inundations table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS inundations (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('inundations table created successfully');
          },
          reject,
        );

        data.forEach(inundations => {
          tx.executeSql(
            'INSERT INTO inundations VALUES (?, ?, ?, ?, ?)',
            [
              inundations.id || null,
              inundations.name || null,
              inundations.name_bn || null,
              inundations.name_short || null,
              inundations.code || null,
            ],
            (_, resultSet) =>
              console.log('inundations data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting inundations data',
                error,
                inundations,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching inundations data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const inundations_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM inundations`, // Query the inundations table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying inundations`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const inundations_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM inundations`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from inundations:', resultSet);

          try {
            await inundations_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from inundations`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const jur_ad_districts_api = async () => {
  try {
    const response = await fetch(`${baseApi}/jur_ad_districts?token=${token}`);
    const data = await response.json();
    console.log('Total jur_ad_districts items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS jur_ad_districts',
          [],
          () => {
            //console.log('jur_ad_districts table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS jur_ad_districts (id TEXT, name TEXT, name_bn TEXT, code TEXT, division_code TEXT)',
          [],
          () => {
            //console.log('jur_ad_districts table created successfully');
          },
          reject,
        );

        data.forEach(jur_ad_districts => {
          tx.executeSql(
            'INSERT INTO jur_ad_districts VALUES (?, ?, ?, ?, ?)',
            [
              jur_ad_districts.id || null,
              jur_ad_districts.name || null,
              jur_ad_districts.name_bn || null,
              jur_ad_districts.code || null,
              jur_ad_districts.division_code || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'jur_ad_districts data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting jur_ad_districts data',
                  error,
                  jur_ad_districts,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching jur_ad_districts data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const jur_ad_districts_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM jur_ad_districts`, // Query the jur_ad_districts table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying jur_ad_districts`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const jur_ad_districts_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM jur_ad_districts`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from jur_ad_districts:', resultSet);

          try {
            await jur_ad_districts_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from jur_ad_districts`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const jur_ad_divisions_api = async () => {
  try {
    const response = await fetch(`${baseApi}/jur_ad_divisions?token=${token}`);
    const data = await response.json();
    console.log('Total jur_ad_divisions items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS jur_ad_divisions',
          [],
          () => {
            console.log('jur_ad_divisions table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS jur_ad_divisions (id TEXT, name TEXT, name_bn TEXT, code TEXT)',
          [],
          () => {
            console.log('jur_ad_divisions table created successfully');
          },
          reject,
        );

        data.forEach(jur_ad_divisions => {
          tx.executeSql(
            'INSERT INTO jur_ad_divisions VALUES (?, ?, ?, ?)',
            [
              jur_ad_divisions.id || null,
              jur_ad_divisions.name || null,
              jur_ad_divisions.name_bn || null,
              jur_ad_divisions.code || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'jur_ad_divisions data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting jur_ad_divisions data',
                  error,
                  jur_ad_divisions,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching jur_ad_divisions data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const jur_ad_divisions_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM jur_ad_divisions`, // Query the jur_ad_divisions table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying jur_ad_divisions`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const jur_ad_divisions_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM jur_ad_divisions`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from jur_ad_divisions:', resultSet);

          try {
            await jur_ad_divisions_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from jur_ad_divisions`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const jur_ad_upazillas_api = async () => {
  try {
    const response = await fetch(`${baseApi}/jur_ad_upazillas?token=${token}`);
    const data = await response.json();
    console.log('Total jur_ad_upazillas items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS jur_ad_upazillas',
          [],
          () => {
            //console.log('jur_ad_upazillas table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS jur_ad_upazillas (id TEXT, name TEXT, name_bn TEXT, code TEXT, district_code TEXT)',
          [],
          () => {
            //console.log('jur_ad_upazillas table created successfully');
          },
          reject,
        );

        data.forEach(jur_ad_upazillas => {
          tx.executeSql(
            'INSERT INTO jur_ad_upazillas VALUES (?, ?, ?, ?, ?)',
            [
              jur_ad_upazillas.id || null,
              jur_ad_upazillas.name || null,
              jur_ad_upazillas.name_bn || null,
              jur_ad_upazillas.code || null,
              jur_ad_upazillas.district_code || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'jur_ad_upazillas data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting jur_ad_upazillas data',
                  error,
                  jur_ad_upazillas,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching jur_ad_upazillas data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const jur_ad_upazillas_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM jur_ad_upazillas`, // Query the jur_ad_upazillas table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying jur_ad_upazillas`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const jur_ad_upazillas_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM jur_ad_upazillas`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from jur_ad_upazillas:', resultSet);

          try {
            await jur_ad_upazillas_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from jur_ad_upazillas`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const jur_fd_beats_api = async () => {
  try {
    const response = await fetch(`${baseApi}/jur_fd_beats?token=${token}`);
    const data = await response.json();
    console.log('Total jur_fd_beats items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS jur_fd_beats',
          [],
          () => {
            //console.log('jur_fd_beats table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS jur_fd_beats (id TEXT, name TEXT, name_bn TEXT, code TEXT, range_code TEXT)',
          [],
          () => {
            //console.log('jur_fd_beats table created successfully');
          },
          reject,
        );

        data.forEach(jur_fd_beats => {
          tx.executeSql(
            'INSERT INTO jur_fd_beats VALUES (?, ?, ?, ?, ?)',
            [
              jur_fd_beats.id || null,
              jur_fd_beats.name || null,
              jur_fd_beats.name_bn || null,
              jur_fd_beats.code || null,
              jur_fd_beats.range_code || null,
            ],
            (_, resultSet) =>
              // console.log('jur_fd_beats data inserted successfully', resultSet),
              (_, error) => {
                console.error(
                  'Error inserting jur_fd_beats data',
                  error,
                  jur_fd_beats,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching jur_fd_beats data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const jur_fd_beats_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM jur_fd_beats`, // Query the jur_fd_beats table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying jur_fd_beats`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const jur_fd_beats_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM jur_fd_beats`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from jur_fd_beats:', resultSet);

          try {
            await jur_fd_beats_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from jur_fd_beats`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const jur_fd_circles_api = async () => {
  try {
    const response = await fetch(`${baseApi}/jur_fd_circles?token=${token}`);
    const data = await response.json();
    console.log('Total jur_fd_circles items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS jur_fd_circles',
          [],
          () => {
            //console.log('jur_fd_circles table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS jur_fd_circles (id TEXT, name TEXT, name_bn TEXT, code TEXT)',
          [],
          () => {
            //console.log('jur_fd_circles table created successfully');
          },
          reject,
        );

        data.forEach(jur_fd_circles => {
          tx.executeSql(
            'INSERT INTO jur_fd_circles VALUES (?, ?, ?, ?)',
            [
              jur_fd_circles.id || null,
              jur_fd_circles.name || null,
              jur_fd_circles.name_bn || null,
              jur_fd_circles.code || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'jur_fd_circles data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting jur_fd_circles data',
                  error,
                  jur_fd_circles,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching jur_fd_circles data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const jur_fd_circles_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM jur_fd_circles`, // Query the jur_fd_circles table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying jur_fd_circles`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const jur_fd_circles_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM jur_fd_circles`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from jur_fd_circles:', resultSet);

          try {
            await jur_fd_circles_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from jur_fd_circles`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const jur_fd_divisions_api = async () => {
  try {
    const response = await fetch(`${baseApi}/jur_fd_divisions?token=${token}`);
    const data = await response.json();
    console.log('Total jur_fd_divisions items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS jur_fd_divisions',
          [],
          () => {
            //console.log('jur_fd_divisions table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS jur_fd_divisions (id TEXT, name TEXT, name_bn TEXT, code TEXT, circle_code TEXT)',
          [],
          () => {
            //console.log('jur_fd_divisions table created successfully');
          },
          reject,
        );

        data.forEach(jur_fd_divisions => {
          tx.executeSql(
            'INSERT INTO jur_fd_divisions VALUES (?, ?, ?, ?, ?)',
            [
              jur_fd_divisions.id || null,
              jur_fd_divisions.name || null,
              jur_fd_divisions.name_bn || null,
              jur_fd_divisions.code || null,
              jur_fd_divisions.circle_code || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'jur_fd_divisions data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting jur_fd_divisions data',
                  error,
                  jur_fd_divisions,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching jur_fd_divisions data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const jur_fd_divisions_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM jur_fd_divisions`, // Query the jur_fd_divisions table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying jur_fd_divisions`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const jur_fd_divisions_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM jur_fd_divisions`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from jur_fd_divisions:', resultSet);

          try {
            await jur_fd_divisions_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from jur_fd_divisions`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
// export const jur_fd_ecozones_api = async () => {
//   try {
// 	const response = await fetch(`${baseApi}/jur_fd_ecozones?token=${token}`);
// 	const data = await response.json();
// 	console.log('Total jur_fd_ecozones items from API:', data.length);

// 	await new Promise((resolve, reject) => {
// 	  database.transaction(tx => {
// 		tx.executeSql(
// 		  'DROP TABLE IF EXISTS jur_fd_ecozones',
// 		  [],
// 		  () => {
// 			console.log('jur_fd_ecozones table dropped successfully');
// 		  },
// 		  reject,
// 		);

// 		tx.executeSql(
// 		  'CREATE TABLE IF NOT EXISTS jur_fd_ecozones (id TEXT, name TEXT, name_bn TEXT, code TEXT, raw_code TEXT)',
// 		  [],
// 		  () => {
// 			console.log('jur_fd_ecozones table created successfully');
// 		  },
// 		  reject,
// 		);

// 		data.forEach(jur_fd_ecozones => {
// 		  tx.executeSql(
// 			'INSERT INTO jur_fd_ecozones VALUES (?, ?, ?, ?, ?)',
// 			[
// 			  jur_fd_ecozones.id || null,
// jur_fd_ecozones. name || null,
// jur_fd_ecozones. name_bn || null,
// jur_fd_ecozones. code || null,
// jur_fd_ecozones. raw_code || null,

// 			],
// 			(_, resultSet) =>
// 			  console.log('jur_fd_ecozones data inserted successfully', resultSet),
// 			(_, error) => {
// 			  console.error('Error inserting jur_fd_ecozones data', error, jur_fd_ecozones);
// 			},
// 		  );
// 		});
// 		resolve();
// 	  });
// 	});
//   } catch (error) {
// 	console.error('Error fetching jur_fd_ecozones data from API', error);
//   }
// };
//API End
//---------------------------------------------------------//
// List Start

// export const jur_fd_ecozones_list = async () => {
//   return new Promise((resolve, reject) => {
// 	database.transaction(tx => {
// 	  tx.executeSql(
// 		`SELECT * FROM jur_fd_ecozones`, // Query the jur_fd_ecozones table
// 		[],
// 		(_, resultSet) => {
// 		  console.log('ResultSet:', resultSet); // Log the resultSet to debug
// 		  const data = [];
// 		  for (let i = 0; i < resultSet.rows.length; i++) {
// 			const row = resultSet.rows.item(i);
// 			data.push(row);
// 		  }
// 		  resolve(data);
// 		},
// 		(_, error) => {
// 		  console.error(`Error querying jur_fd_ecozones`, error);
// 		  reject(error);
// 		},
// 	  );
// 	});
//   });
// };
// List End
//---------------------------------------------------------//
// Delete Start
// export const jur_fd_ecozones_delete = async () => {
//   return new Promise((resolve, reject) => {
//     database.transaction(tx => {
//       tx.executeSql(
//         `DELETE FROM jur_fd_ecozones`, // Correct SQL to delete all rows
//         [],
//         async (_, resultSet) => {
//           console.log('All data deleted from jur_fd_ecozones:', resultSet);

//           try {

//             await jur_fd_ecozones_api();
//             resolve(resultSet);
//           } catch (apiError) {
//             console.error('Error fetching data from API:', apiError);
//             reject(apiError);
//           }
//         },
//         (_, error) => {
//           console.error(`Error deleting data from jur_fd_ecozones`, error);
//           reject(error); // Reject in case of a SQL error
//         },
//       );
//     });
//   });
// };

// Delete End
//---------------------------------------------------------//
//API Start
export const jur_fd_levels_api = async () => {
  try {
    const response = await fetch(`${baseApi}/jur_fd_levels?token=${token}`);
    const data = await response.json();
    console.log('Total jur_fd_levels items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS jur_fd_levels',
          [],
          () => {
            console.log('jur_fd_levels table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS jur_fd_levels (id TEXT, name TEXT)',
          [],
          () => {
            console.log('jur_fd_levels table created successfully');
          },
          reject,
        );

        data.forEach(jur_fd_levels => {
          tx.executeSql(
            'INSERT INTO jur_fd_levels VALUES (?, ?)',
            [jur_fd_levels.id || null, jur_fd_levels.name || null],
            (_, resultSet) =>
              console.log(
                'jur_fd_levels data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting jur_fd_levels data',
                error,
                jur_fd_levels,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching jur_fd_levels data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const jur_fd_levels_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM jur_fd_levels`, // Query the jur_fd_levels table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying jur_fd_levels`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const jur_fd_levels_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM jur_fd_levels`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from jur_fd_levels:', resultSet);

          try {
            await jur_fd_levels_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from jur_fd_levels`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const jur_fd_ranges_api = async () => {
  try {
    const response = await fetch(`${baseApi}/jur_fd_ranges?token=${token}`);
    const data = await response.json();
    console.log('Total jur_fd_ranges items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS jur_fd_ranges',
          [],
          () => {
            // console.log('jur_fd_ranges table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS jur_fd_ranges (id TEXT, name TEXT, name_bn TEXT, code TEXT, division_code TEXT)',
          [],
          () => {
            // console.log('jur_fd_ranges table created successfully');
          },
          reject,
        );

        data.forEach(jur_fd_ranges => {
          tx.executeSql(
            'INSERT INTO jur_fd_ranges VALUES (?, ?, ?, ?, ?)',
            [
              jur_fd_ranges.id || null,
              jur_fd_ranges.name || null,
              jur_fd_ranges.name_bn || null,
              jur_fd_ranges.code || null,
              jur_fd_ranges.division_code || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'jur_fd_ranges data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting jur_fd_ranges data',
                  error,
                  jur_fd_ranges,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching jur_fd_ranges data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const jur_fd_ranges_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM jur_fd_ranges`, // Query the jur_fd_ranges table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying jur_fd_ranges`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const jur_fd_ranges_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM jur_fd_ranges`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from jur_fd_ranges:', resultSet);

          try {
            await jur_fd_ranges_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from jur_fd_ranges`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const landcover_class_lists_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/landcover_class_lists?token=${token}`,
    );
    const data = await response.json();
    console.log('Total landcover_class_lists items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS landcover_class_lists',
          [],
          () => {
            console.log('landcover_class_lists table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS landcover_class_lists (id TEXT, name TEXT, name_bn TEXT, code TEXT)',
          [],
          () => {
            console.log('landcover_class_lists table created successfully');
          },
          reject,
        );

        data.forEach(landcover_class_lists => {
          tx.executeSql(
            'INSERT INTO landcover_class_lists VALUES (?, ?, ?, ?)',
            [
              landcover_class_lists.id || null,
              landcover_class_lists.name || null,
              landcover_class_lists.name_bn || null,
              landcover_class_lists.code || null,
            ],
            (_, resultSet) =>
              console.log(
                'landcover_class_lists data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting landcover_class_lists data',
                error,
                landcover_class_lists,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching landcover_class_lists data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const landcover_class_lists_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM landcover_class_lists`, // Query the landcover_class_lists table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying landcover_class_lists`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const landcover_class_lists_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM landcover_class_lists`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from landcover_class_lists:',
            resultSet,
          );

          try {
            await landcover_class_lists_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from landcover_class_lists`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const lmvh_lists_api = async () => {
  try {
    const response = await fetch(`${baseApi}/lmvh_lists?token=${token}`);
    const data = await response.json();
    console.log('Total lmvh_lists items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS lmvh_lists',
          [],
          () => {
            console.log('lmvh_lists table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS lmvh_lists (id TEXT, name TEXT, name_bn TEXT, code TEXT)',
          [],
          () => {
            console.log('lmvh_lists table created successfully');
          },
          reject,
        );

        data.forEach(lmvh_lists => {
          tx.executeSql(
            'INSERT INTO lmvh_lists VALUES (?, ?, ?, ?)',
            [
              lmvh_lists.id || null,
              lmvh_lists.name || null,
              lmvh_lists.name_bn || null,
              lmvh_lists.code || null,
            ],
            (_, resultSet) =>
              console.log('lmvh_lists data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting lmvh_lists data',
                error,
                lmvh_lists,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching lmvh_lists data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const lmvh_lists_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM lmvh_lists`, // Query the lmvh_lists table
        [],
        (_, resultSet) => {
          // console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying lmvh_lists`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const lmvh_lists_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM lmvh_lists`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from lmvh_lists:', resultSet);

          try {
            await lmvh_lists_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from lmvh_lists`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const logistic_conditions_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/logistic_conditions?token=${token}`,
    );
    const data = await response.json();
    console.log('Total logistic_conditions items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS logistic_conditions',
          [],
          () => {
            console.log('logistic_conditions table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS logistic_conditions (id TEXT, name TEXT, name_bn TEXT, code TEXT)',
          [],
          () => {
            console.log('logistic_conditions table created successfully');
          },
          reject,
        );

        data.forEach(logistic_conditions => {
          tx.executeSql(
            'INSERT INTO logistic_conditions VALUES (?, ?, ?, ?)',
            [
              logistic_conditions.id || null,
              logistic_conditions.name || null,
              logistic_conditions.name_bn || null,
              logistic_conditions.code || null,
            ],
            (_, resultSet) =>
              console.log(
                'logistic_conditions data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting logistic_conditions data',
                error,
                logistic_conditions,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching logistic_conditions data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const logistic_conditions_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM logistic_conditions`, // Query the logistic_conditions table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying logistic_conditions`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const logistic_conditions_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM logistic_conditions`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from logistic_conditions:', resultSet);

          try {
            await logistic_conditions_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from logistic_conditions`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const migrations_api = async () => {
  try {
    const response = await fetch(`${baseApi}/migrations?token=${token}`);
    const data = await response.json();
    console.log('Total migrations items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS migrations',
          [],
          () => {
            console.log('migrations table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS migrations (id TEXT, migration TEXT, batch TEXT)',
          [],
          () => {
            console.log('migrations table created successfully');
          },
          reject,
        );

        data.forEach(migrations => {
          tx.executeSql(
            'INSERT INTO migrations VALUES (?, ?, ?)',
            [
              migrations.id || null,
              migrations.migration || null,
              migrations.batch || null,
            ],
            (_, resultSet) =>
              console.log('migrations data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting migrations data',
                error,
                migrations,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching migrations data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const migrations_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM migrations`, // Query the migrations table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying migrations`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const migrations_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM migrations`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from migrations:', resultSet);

          try {
            await migrations_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from migrations`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const month_inun_lists_api = async () => {
  try {
    const response = await fetch(`${baseApi}/month_inun_lists?token=${token}`);
    const data = await response.json();
    console.log('Total month_inun_lists items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS month_inun_lists',
          [],
          () => {
            console.log('month_inun_lists table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS month_inun_lists (id TEXT, name TEXT, name_bn TEXT, code TEXT)',
          [],
          () => {
            console.log('month_inun_lists table created successfully');
          },
          reject,
        );

        data.forEach(month_inun_lists => {
          tx.executeSql(
            'INSERT INTO month_inun_lists VALUES (?, ?, ?, ?)',
            [
              month_inun_lists.id || null,
              month_inun_lists.name || null,
              month_inun_lists.name_bn || null,
              month_inun_lists.code || null,
            ],
            (_, resultSet) =>
              console.log(
                'month_inun_lists data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting month_inun_lists data',
                error,
                month_inun_lists,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching month_inun_lists data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const month_inun_lists_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM month_inun_lists`, // Query the month_inun_lists table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying month_inun_lists`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const month_inun_lists_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM month_inun_lists`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from month_inun_lists:', resultSet);

          try {
            await month_inun_lists_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from month_inun_lists`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const months_api = async () => {
  try {
    const response = await fetch(`${baseApi}/months?token=${token}`);
    const data = await response.json();
    console.log('Total months items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS months',
          [],
          () => {
            //console.log('months table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS months (id TEXT, name TEXT, name_bn TEXT, code TEXT)',
          [],
          () => {
            //console.log('months table created successfully');
          },
          reject,
        );

        data.forEach(months => {
          tx.executeSql(
            'INSERT INTO months VALUES (?, ?, ?, ?)',
            [
              months.id || null,
              months.name || null,
              months.name_bn || null,
              months.code || null,
            ],
            (
                _,
                resultSet, //console.log('months data inserted successfully'),
              ) =>
              (_, error) => {
                console.error('Error inserting months data', error, months);
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching months data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const months_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM months`, // Query the months table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying months`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const months_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM months`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from months:', resultSet);

          try {
            await months_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from months`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const mouza_types_api = async () => {
  try {
    const response = await fetch(`${baseApi}/mouza_types?token=${token}`);
    const data = await response.json();
    console.log('Total mouza_types items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS mouza_types',
          [],
          () => {
            //console.log('mouza_types table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS mouza_types (id TEXT, name TEXT, name_bn TEXT, code TEXT)',
          [],
          () => {
            //console.log('mouza_types table created successfully');
          },
          reject,
        );

        data.forEach(mouza_types => {
          tx.executeSql(
            'INSERT INTO mouza_types VALUES (?, ?, ?, ?)',
            [
              mouza_types.id || null,
              mouza_types.name || null,
              mouza_types.name_bn || null,
              mouza_types.code || null,
            ],
            (_, resultSet) =>
              //console.log('mouza_types data inserted successfully', resultSet),
              (_, error) => {
                console.error(
                  'Error inserting mouza_types data',
                  error,
                  mouza_types,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching mouza_types data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const mouza_types_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM mouza_types`, // Query the mouza_types table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying mouza_types`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const mouza_types_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM mouza_types`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from mouza_types:', resultSet);

          try {
            await mouza_types_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from mouza_types`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const natural_issues_api = async () => {
  try {
    const response = await fetch(`${baseApi}/natural_issues?token=${token}`);
    const data = await response.json();
    console.log('Total natural_issues items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS natural_issues',
          [],
          () => {
            //console.log('natural_issues table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS natural_issues (id TEXT, name TEXT, name_bn TEXT, code TEXT)',
          [],
          () => {
            //console.log('natural_issues table created successfully');
          },
          reject,
        );

        data.forEach(natural_issues => {
          tx.executeSql(
            'INSERT INTO natural_issues VALUES (?, ?, ?, ?)',
            [
              natural_issues.id || null,
              natural_issues.name || null,
              natural_issues.name_bn || null,
              natural_issues.code || null,
            ],
            (_, resultSet) =>
              //console.log('natural_issues data inserted successfully'),
              (_, error) => {
                console.error(
                  'Error inserting natural_issues data',
                  error,
                  natural_issues,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching natural_issues data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const natural_issues_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM natural_issues`, // Query the natural_issues table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying natural_issues`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const natural_issues_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM natural_issues`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from natural_issues:', resultSet);

          try {
            await natural_issues_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from natural_issues`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const nursery_location_api = async () => {
  try {
    const response = await fetch(`${baseApi}/nursery_location?token=${token}`);
    const data = await response.json();
    console.log('Total nursery_location items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS nursery_location',
          [],
          () => {
            console.log('nursery_location table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS nursery_location (gid TEXT, core_uri TEXT, lat TEXT, lng TEXT, geom TEXT)',
          [],
          () => {
            console.log('nursery_location table created successfully');
          },
          reject,
        );

        data.forEach(nursery_location => {
          tx.executeSql(
            'INSERT INTO nursery_location VALUES (?, ?, ?, ?, ?)',
            [
              nursery_location.gid || null,
              nursery_location.core_uri || null,
              nursery_location.lat || null,
              nursery_location.lng || null,
              nursery_location.geom || null,
            ],
            (_, resultSet) =>
              console.log(
                'nursery_location data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting nursery_location data',
                error,
                nursery_location,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching nursery_location data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const nursery_location_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM nursery_location`, // Query the nursery_location table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying nursery_location`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const nursery_location_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM nursery_location`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from nursery_location:', resultSet);

          try {
            await nursery_location_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from nursery_location`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const occupation_coms_api = async () => {
  try {
    const response = await fetch(`${baseApi}/occupation_coms?token=${token}`);
    const data = await response.json();
    console.log('Total occupation_coms items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS occupation_coms',
          [],
          () => {
            console.log('occupation_coms table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS occupation_coms (id TEXT, name TEXT, name_bn TEXT, code TEXT)',
          [],
          () => {
            console.log('occupation_coms table created successfully');
          },
          reject,
        );

        data.forEach(occupation_coms => {
          tx.executeSql(
            'INSERT INTO occupation_coms VALUES (?, ?, ?, ?)',
            [
              occupation_coms.id || null,
              occupation_coms.name || null,
              occupation_coms.name_bn || null,
              occupation_coms.code || null,
            ],
            (_, resultSet) =>
              console.log(
                'occupation_coms data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting occupation_coms data',
                error,
                occupation_coms,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching occupation_coms data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const occupation_coms_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM occupation_coms`, // Query the occupation_coms table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying occupation_coms`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const occupation_coms_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM occupation_coms`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from occupation_coms:', resultSet);

          try {
            await occupation_coms_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from occupation_coms`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const origins_api = async () => {
  try {
    const response = await fetch(`${baseApi}/origins?token=${token}`);
    const data = await response.json();
    console.log('Total origins items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS origins',
          [],
          () => {
            console.log('origins table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS origins (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('origins table created successfully');
          },
          reject,
        );

        data.forEach(origins => {
          tx.executeSql(
            'INSERT INTO origins VALUES (?, ?, ?, ?, ?)',
            [
              origins.id || null,
              origins.name || null,
              origins.name_bn || null,
              origins.name_short || null,
              origins.code || null,
            ],
            (_, resultSet) =>
              console.log('origins data inserted successfully', resultSet),
            (_, error) => {
              console.error('Error inserting origins data', error, origins);
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching origins data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const origins_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM origins`, // Query the origins table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying origins`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const origins_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM origins`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from origins:', resultSet);

          try {
            await origins_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from origins`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const password_resets_api = async () => {
  try {
    const response = await fetch(`${baseApi}/password_resets?token=${token}`);
    const data = await response.json();
    console.log('Total password_resets items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS password_resets',
          [],
          () => {
            console.log('password_resets table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS password_resets (email TEXT, token TEXT, created_at TEXT)',
          [],
          () => {
            console.log('password_resets table created successfully');
          },
          reject,
        );

        data.forEach(password_resets => {
          tx.executeSql(
            'INSERT INTO password_resets VALUES (?, ?, ?)',
            [
              password_resets.email || null,
              password_resets.token || null,
              password_resets.created_at || null,
            ],
            (_, resultSet) =>
              console.log(
                'password_resets data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting password_resets data',
                error,
                password_resets,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching password_resets data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const password_resets_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM password_resets`, // Query the password_resets table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying password_resets`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const password_resets_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM password_resets`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from password_resets:', resultSet);

          try {
            await password_resets_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from password_resets`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const pct10_lists_api = async () => {
  try {
    const response = await fetch(`${baseApi}/pct10_lists?token=${token}`);
    const data = await response.json();
    console.log('Total pct10_lists items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS pct10_lists',
          [],
          () => {
            console.log('pct10_lists table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS pct10_lists (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('pct10_lists table created successfully');
          },
          reject,
        );

        data.forEach(pct10_lists => {
          tx.executeSql(
            'INSERT INTO pct10_lists VALUES (?, ?, ?, ?, ?)',
            [
              pct10_lists.id || null,
              pct10_lists.name || null,
              pct10_lists.name_bn || null,
              pct10_lists.name_short || null,
              pct10_lists.code || null,
            ],
            (_, resultSet) =>
              console.log('pct10_lists data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting pct10_lists data',
                error,
                pct10_lists,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching pct10_lists data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const pct10_lists_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM pct10_lists`, // Query the pct10_lists table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying pct10_lists`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const pct10_lists_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM pct10_lists`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from pct10_lists:', resultSet);

          try {
            await pct10_lists_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from pct10_lists`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const percents_api = async () => {
  try {
    const response = await fetch(`${baseApi}/percents?token=${token}`);
    const data = await response.json();
    console.log('Total percents items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS percents',
          [],
          () => {
            console.log('percents table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS percents (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('percents table created successfully');
          },
          reject,
        );

        data.forEach(percents => {
          tx.executeSql(
            'INSERT INTO percents VALUES (?, ?, ?, ?, ?)',
            [
              percents.id || null,
              percents.name || null,
              percents.name_bn || null,
              percents.name_short || null,
              percents.code || null,
            ],
            (_, resultSet) =>
              console.log('percents data inserted successfully', resultSet),
            (_, error) => {
              console.error('Error inserting percents data', error, percents);
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching percents data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const percents_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM percents`, // Query the percents table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying percents`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const percents_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM percents`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from percents:', resultSet);

          try {
            await percents_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from percents`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const personal_access_tokens_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/personal_access_tokens?token=${token}`,
    );
    const data = await response.json();
    console.log('Total personal_access_tokens items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS personal_access_tokens',
          [],
          () => {
            console.log('personal_access_tokens table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS personal_access_tokens (id TEXT, tokenable_type TEXT, tokenable_id TEXT, name TEXT, token TEXT, abilities TEXT, last_used_at TEXT, created_at TEXT, updated_at TEXT)',
          [],
          () => {
            console.log('personal_access_tokens table created successfully');
          },
          reject,
        );

        data.forEach(personal_access_tokens => {
          tx.executeSql(
            'INSERT INTO personal_access_tokens VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              personal_access_tokens.id || null,
              personal_access_tokens.tokenable_type || null,
              personal_access_tokens.tokenable_id || null,
              personal_access_tokens.name || null,
              personal_access_tokens.token || null,
              personal_access_tokens.abilities || null,
              personal_access_tokens.last_used_at || null,
              personal_access_tokens.created_at || null,
              personal_access_tokens.updated_at || null,
            ],
            (_, resultSet) =>
              console.log(
                'personal_access_tokens data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting personal_access_tokens data',
                error,
                personal_access_tokens,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching personal_access_tokens data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const personal_access_tokens_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM personal_access_tokens`, // Query the personal_access_tokens table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying personal_access_tokens`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const personal_access_tokens_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM personal_access_tokens`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from personal_access_tokens:',
            resultSet,
          );

          try {
            await personal_access_tokens_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from personal_access_tokens`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const plantation_journals_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plantation_journals?token=${token}`,
    );
    const data = await response.json();
    console.log('Total plantation_journals items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS plantation_journals',
          [],
          () => {
            console.log('plantation_journals table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS plantation_journals (id TEXT, title TEXT, description TEXT, file_name TEXT, file_path TEXT, file_type TEXT, file_cat TEXT, plantation_type TEXT, plantation_year TEXT, area_hactor TEXT, project TEXT, sort TEXT, status TEXT, circle_code TEXT, division_code TEXT, range_code TEXT, beat_code TEXT, created_at TEXT, created_by TEXT, updated_at TEXT, updated_by TEXT, deleted_at TEXT, deleted_by TEXT)',
          [],
          () => {
            console.log('plantation_journals table created successfully');
          },
          reject,
        );

        data.forEach(plantation_journals => {
          tx.executeSql(
            'INSERT INTO plantation_journals VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              plantation_journals.id || null,
              plantation_journals.title || null,
              plantation_journals.description || null,
              plantation_journals.file_name || null,
              plantation_journals.file_path || null,
              plantation_journals.file_type || null,
              plantation_journals.file_cat || null,
              plantation_journals.plantation_type || null,
              plantation_journals.plantation_year || null,
              plantation_journals.area_hactor || null,
              plantation_journals.project || null,
              plantation_journals.sort || null,
              plantation_journals.status || null,
              plantation_journals.circle_code || null,
              plantation_journals.division_code || null,
              plantation_journals.range_code || null,
              plantation_journals.beat_code || null,
              plantation_journals.created_at || null,
              plantation_journals.created_by || null,
              plantation_journals.updated_at || null,
              plantation_journals.updated_by || null,
              plantation_journals.deleted_at || null,
              plantation_journals.deleted_by || null,
            ],
            (_, resultSet) =>
              console.log(
                'plantation_journals data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plantation_journals data',
                error,
                plantation_journals,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching plantation_journals data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const plantation_journals_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plantation_journals`, // Query the plantation_journals table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying plantation_journals`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plantation_journals_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plantation_journals`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from plantation_journals:', resultSet);

          try {
            await plantation_journals_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from plantation_journals`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const planting_modes_api = async () => {
  try {
    const response = await fetch(`${baseApi}/planting_modes?token=${token}`);
    const data = await response.json();
    console.log('Total planting_modes items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS planting_modes',
          [],
          () => {
            console.log('planting_modes table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS planting_modes (id TEXT, name TEXT, name_bn TEXT, code TEXT)',
          [],
          () => {
            console.log('planting_modes table created successfully');
          },
          reject,
        );

        data.forEach(planting_modes => {
          tx.executeSql(
            'INSERT INTO planting_modes VALUES (?, ?, ?, ?)',
            [
              planting_modes.id || null,
              planting_modes.name || null,
              planting_modes.name_bn || null,
              planting_modes.code || null,
            ],
            (_, resultSet) =>
              console.log(
                'planting_modes data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting planting_modes data',
                error,
                planting_modes,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching planting_modes data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const planting_modes_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM planting_modes`, // Query the planting_modes table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying planting_modes`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const planting_modes_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM planting_modes`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from planting_modes:', resultSet);

          try {
            await planting_modes_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from planting_modes`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const plot_types_api = async () => {
  try {
    const response = await fetch(`${baseApi}/plot_types?token=${token}`);
    const data = await response.json();
    console.log('Total plot_types items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS plot_types',
          [],
          () => {
            console.log('plot_types table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS plot_types (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('plot_types table created successfully');
          },
          reject,
        );

        data.forEach(plot_types => {
          tx.executeSql(
            'INSERT INTO plot_types VALUES (?, ?, ?, ?, ?)',
            [
              plot_types.id || null,
              plot_types.name || null,
              plot_types.name_bn || null,
              plot_types.name_short || null,
              plot_types.code || null,
            ],
            (_, resultSet) =>
              console.log('plot_types data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting plot_types data',
                error,
                plot_types,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching plot_types data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const plot_types_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plot_types`, // Query the plot_types table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying plot_types`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plot_types_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plot_types`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from plot_types:', resultSet);

          try {
            await plot_types_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from plot_types`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const polytypes_api = async () => {
  try {
    const response = await fetch(`${baseApi}/polytypes?token=${token}`);
    const data = await response.json();
    console.log('Total polytypes items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS polytypes',
          [],
          () => {
            console.log('polytypes table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS polytypes (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('polytypes table created successfully');
          },
          reject,
        );

        data.forEach(polytypes => {
          tx.executeSql(
            'INSERT INTO polytypes VALUES (?, ?, ?, ?, ?)',
            [
              polytypes.id || null,
              polytypes.name || null,
              polytypes.name_bn || null,
              polytypes.name_short || null,
              polytypes.code || null,
            ],
            (_, resultSet) =>
              console.log('polytypes data inserted successfully', resultSet),
            (_, error) => {
              console.error('Error inserting polytypes data', error, polytypes);
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching polytypes data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const polytypes_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM polytypes`, // Query the polytypes table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying polytypes`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const polytypes_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM polytypes`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from polytypes:', resultSet);

          try {
            await polytypes_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from polytypes`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const repro_types_api = async () => {
  try {
    const response = await fetch(`${baseApi}/repro_types?token=${token}`);
    const data = await response.json();
    console.log('Total repro_types items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS repro_types',
          [],
          () => {
            console.log('repro_types table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS repro_types (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('repro_types table created successfully');
          },
          reject,
        );

        data.forEach(repro_types => {
          tx.executeSql(
            'INSERT INTO repro_types VALUES (?, ?, ?, ?, ?)',
            [
              repro_types.id || null,
              repro_types.name || null,
              repro_types.name_bn || null,
              repro_types.name_short || null,
              repro_types.code || null,
            ],
            (_, resultSet) =>
              console.log('repro_types data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting repro_types data',
                error,
                repro_types,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching repro_types data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const repro_types_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM repro_types`, // Query the repro_types table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying repro_types`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const repro_types_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM repro_types`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from repro_types:', resultSet);

          try {
            await repro_types_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from repro_types`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const resources_api = async () => {
  try {
    const response = await fetch(`${baseApi}/resources?token=${token}`);
    const data = await response.json();
    console.log('Total resources items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS resources',
          [],
          () => {
            console.log('resources table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS resources (id TEXT, title TEXT, description TEXT, file_name TEXT, file_path TEXT, file_type TEXT, file_cat TEXT, sort TEXT, status TEXT, circle_code TEXT, division_code TEXT, range_code TEXT, beat_code TEXT, created_at TEXT, created_by TEXT, updated_at TEXT, updated_by TEXT, deleted_at TEXT, deleted_by TEXT)',
          [],
          () => {
            console.log('resources table created successfully');
          },
          reject,
        );

        data.forEach(resources => {
          tx.executeSql(
            'INSERT INTO resources VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              resources.id || null,
              resources.title || null,
              resources.description || null,
              resources.file_name || null,
              resources.file_path || null,
              resources.file_type || null,
              resources.file_cat || null,
              resources.sort || null,
              resources.status || null,
              resources.circle_code || null,
              resources.division_code || null,
              resources.range_code || null,
              resources.beat_code || null,
              resources.created_at || null,
              resources.created_by || null,
              resources.updated_at || null,
              resources.updated_by || null,
              resources.deleted_at || null,
              resources.deleted_by || null,
            ],
            (_, resultSet) =>
              console.log('resources data inserted successfully', resultSet),
            (_, error) => {
              console.error('Error inserting resources data', error, resources);
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching resources data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const resources_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM resources`, // Query the resources table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying resources`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const resources_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM resources`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from resources:', resultSet);

          try {
            await resources_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from resources`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const roles_api = async () => {
  try {
    const response = await fetch(`${baseApi}/roles?token=${token}`);
    const data = await response.json();
    console.log('Total roles items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS roles',
          [],
          () => {
            console.log('roles table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS roles (id TEXT, name TEXT, code TEXT, order TEXT, is_active TEXT)',
          [],
          () => {
            console.log('roles table created successfully');
          },
          reject,
        );

        data.forEach(roles => {
          tx.executeSql(
            'INSERT INTO roles VALUES (?, ?, ?, ?, ?)',
            [
              roles.id || null,
              roles.name || null,
              roles.code || null,
              roles.order || null,
              roles.is_active || null,
            ],
            (_, resultSet) =>
              console.log('roles data inserted successfully', resultSet),
            (_, error) => {
              console.error('Error inserting roles data', error, roles);
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching roles data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const roles_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM roles`, // Query the roles table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying roles`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const roles_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM roles`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from roles:', resultSet);

          try {
            await roles_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from roles`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const sessions_api = async () => {
  try {
    const response = await fetch(`${baseApi}/sessions?token=${token}`);
    const data = await response.json();
    console.log('Total sessions items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS sessions',
          [],
          () => {
            console.log('sessions table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS sessions (id TEXT, user_id TEXT, ip_address TEXT, user_agent TEXT, payload TEXT, last_activity TEXT)',
          [],
          () => {
            console.log('sessions table created successfully');
          },
          reject,
        );

        data.forEach(sessions => {
          tx.executeSql(
            'INSERT INTO sessions VALUES (?, ?, ?, ?, ?, ?)',
            [
              sessions.id || null,
              sessions.user_id || null,
              sessions.ip_address || null,
              sessions.user_agent || null,
              sessions.payload || null,
              sessions.last_activity || null,
            ],
            (_, resultSet) =>
              console.log('sessions data inserted successfully', resultSet),
            (_, error) => {
              console.error('Error inserting sessions data', error, sessions);
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching sessions data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const sessions_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sessions`, // Query the sessions table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying sessions`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sessions_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sessions`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from sessions:', resultSet);

          try {
            await sessions_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from sessions`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const slopes_api = async () => {
  try {
    const response = await fetch(`${baseApi}/slopes?token=${token}`);
    const data = await response.json();
    console.log('Total slopes items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS slopes',
          [],
          () => {
            console.log('slopes table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS slopes (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('slopes table created successfully');
          },
          reject,
        );

        data.forEach(slopes => {
          tx.executeSql(
            'INSERT INTO slopes VALUES (?, ?, ?, ?, ?)',
            [
              slopes.id || null,
              slopes.name || null,
              slopes.name_bn || null,
              slopes.name_short || null,
              slopes.code || null,
            ],
            (_, resultSet) =>
              console.log('slopes data inserted successfully', resultSet),
            (_, error) => {
              console.error('Error inserting slopes data', error, slopes);
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching slopes data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const slopes_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM slopes`, // Query the slopes table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying slopes`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const slopes_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM slopes`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from slopes:', resultSet);

          try {
            await slopes_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from slopes`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const soils_api = async () => {
  try {
    const response = await fetch(`${baseApi}/soils?token=${token}`);
    const data = await response.json();
    console.log('Total soils items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS soils',
          [],
          () => {
            console.log('soils table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS soils (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('soils table created successfully');
          },
          reject,
        );

        data.forEach(soils => {
          tx.executeSql(
            'INSERT INTO soils VALUES (?, ?, ?, ?, ?)',
            [
              soils.id || null,
              soils.name || null,
              soils.name_bn || null,
              soils.name_short || null,
              soils.code || null,
            ],
            (_, resultSet) =>
              console.log('soils data inserted successfully', resultSet),
            (_, error) => {
              console.error('Error inserting soils data', error, soils);
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching soils data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const soils_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM soils`, // Query the soils table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying soils`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const soils_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM soils`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from soils:', resultSet);

          try {
            await soils_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from soils`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const project_lists_api = async () => {
  try {
    const response = await fetch(`${baseApi}/project_lists?token=${token}`);
    const data = await response.json();
    console.log('Total project_lists items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS project_lists',
          [],
          () => {
            console.log('project_lists table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS project_lists (id TEXT, name_en TEXT, name_bn TEXT, description TEXT, logo TEXT, project_type TEXT, extra1 TEXT, extra2 TEXT, sort TEXT, status TEXT, created_at TEXT, created_by TEXT, updated_at TEXT, updated_by TEXT)',
          [],
          () => {
            console.log('project_lists table created successfully');
          },
          reject,
        );

        data.forEach(project_lists => {
          tx.executeSql(
            'INSERT INTO project_lists VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              project_lists.id || null,
              project_lists.name_en || null,
              project_lists.name_bn || null,
              project_lists.description || null,
              project_lists.logo || null,
              project_lists.project_type || null,
              project_lists.extra1 || null,
              project_lists.extra2 || null,
              project_lists.sort || null,
              project_lists.status || null,
              project_lists.created_at || null,
              project_lists.created_by || null,
              project_lists.updated_at || null,
              project_lists.updated_by || null,
            ],
            (_, resultSet) =>
              console.log(
                'project_lists data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting project_lists data',
                error,
                project_lists,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching project_lists data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const project_lists_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM project_lists`, // Query the project_lists table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying project_lists`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const project_lists_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM project_lists`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from project_lists:', resultSet);

          try {
            await project_lists_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from project_lists`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const ssp_gpx_upload_api = async () => {
  try {
    const response = await fetch(`${baseApi}/ssp_gpx_upload?token=${token}`);
    const data = await response.json();
    console.log('Total ssp_gpx_upload items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS ssp_gpx_upload',
          [],
          () => {
            console.log('ssp_gpx_upload table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS ssp_gpx_upload (id TEXT, beat_code TEXT, ssp_uri TEXT, file_name TEXT, loc TEXT, created_by TEXT, created_at TEXT, updated_by TEXT, updated_at TEXT)',
          [],
          () => {
            console.log('ssp_gpx_upload table created successfully');
          },
          reject,
        );

        data.forEach(ssp_gpx_upload => {
          tx.executeSql(
            'INSERT INTO ssp_gpx_upload VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              ssp_gpx_upload.id || null,
              ssp_gpx_upload.beat_code || null,
              ssp_gpx_upload.ssp_uri || null,
              ssp_gpx_upload.file_name || null,
              ssp_gpx_upload.loc || null,
              ssp_gpx_upload.created_by || null,
              ssp_gpx_upload.created_at || null,
              ssp_gpx_upload.updated_by || null,
              ssp_gpx_upload.updated_at || null,
            ],
            (_, resultSet) =>
              console.log(
                'ssp_gpx_upload data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting ssp_gpx_upload data',
                error,
                ssp_gpx_upload,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching ssp_gpx_upload data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const ssp_gpx_upload_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM ssp_gpx_upload`, // Query the ssp_gpx_upload table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying ssp_gpx_upload`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const ssp_gpx_upload_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM ssp_gpx_upload`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from ssp_gpx_upload:', resultSet);

          try {
            await ssp_gpx_upload_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from ssp_gpx_upload`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const structures_api = async () => {
  try {
    const response = await fetch(`${baseApi}/structures?token=${token}`);
    const data = await response.json();
    console.log('Total structures items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS structures',
          [],
          () => {
            console.log('structures table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS structures (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('structures table created successfully');
          },
          reject,
        );

        data.forEach(structures => {
          tx.executeSql(
            'INSERT INTO structures VALUES (?, ?, ?, ?, ?)',
            [
              structures.id || null,
              structures.name || null,
              structures.name_bn || null,
              structures.name_short || null,
              structures.code || null,
            ],
            (_, resultSet) =>
              console.log('structures data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting structures data',
                error,
                structures,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching structures data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const structures_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM structures`, // Query the structures table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying structures`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const structures_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM structures`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from structures:', resultSet);

          try {
            await structures_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from structures`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const survey_types_api = async () => {
  try {
    const response = await fetch(`${baseApi}/survey_types?token=${token}`);
    const data = await response.json();
    console.log('Total survey_types items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS survey_types',
          [],
          () => {
            console.log('survey_types table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS survey_types (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('survey_types table created successfully');
          },
          reject,
        );

        data.forEach(survey_types => {
          tx.executeSql(
            'INSERT INTO survey_types VALUES (?, ?, ?, ?, ?)',
            [
              survey_types.id || null,
              survey_types.name || null,
              survey_types.name_bn || null,
              survey_types.name_short || null,
              survey_types.code || null,
            ],
            (_, resultSet) =>
              console.log('survey_types data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting survey_types data',
                error,
                survey_types,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching survey_types data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const survey_types_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM survey_types`, // Query the survey_types table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying survey_types`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const survey_types_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM survey_types`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from survey_types:', resultSet);

          try {
            await survey_types_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from survey_types`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const team_user_api = async () => {
  try {
    const response = await fetch(`${baseApi}/team_user?token=${token}`);
    const data = await response.json();
    console.log('Total team_user items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS team_user',
          [],
          () => {
            console.log('team_user table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS team_user (id TEXT, team_id TEXT, user_id TEXT, role TEXT, created_at TEXT, updated_at TEXT)',
          [],
          () => {
            console.log('team_user table created successfully');
          },
          reject,
        );

        data.forEach(team_user => {
          tx.executeSql(
            'INSERT INTO team_user VALUES (?, ?, ?, ?, ?, ?)',
            [
              team_user.id || null,
              team_user.team_id || null,
              team_user.user_id || null,
              team_user.role || null,
              team_user.created_at || null,
              team_user.updated_at || null,
            ],
            (_, resultSet) =>
              console.log('team_user data inserted successfully', resultSet),
            (_, error) => {
              console.error('Error inserting team_user data', error, team_user);
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching team_user data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const team_user_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM team_user`, // Query the team_user table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying team_user`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const team_user_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM team_user`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from team_user:', resultSet);

          try {
            await team_user_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from team_user`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const th_plants_api = async () => {
  try {
    const response = await fetch(`${baseApi}/th_plants?token=${token}`);
    const data = await response.json();
    console.log('Total th_plants items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS th_plants',
          [],
          () => {
            console.log('th_plants table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS th_plants (id TEXT, name TEXT, name_bn TEXT, code TEXT)',
          [],
          () => {
            console.log('th_plants table created successfully');
          },
          reject,
        );

        data.forEach(th_plants => {
          tx.executeSql(
            'INSERT INTO th_plants VALUES (?, ?, ?, ?)',
            [
              th_plants.id || null,
              th_plants.name || null,
              th_plants.name_bn || null,
              th_plants.code || null,
            ],
            (_, resultSet) =>
              console.log('th_plants data inserted successfully', resultSet),
            (_, error) => {
              console.error('Error inserting th_plants data', error, th_plants);
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching th_plants data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const th_plants_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM th_plants`, // Query the th_plants table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying th_plants`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const th_plants_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM th_plants`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from th_plants:', resultSet);

          try {
            await th_plants_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from th_plants`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const topographies_api = async () => {
  try {
    const response = await fetch(`${baseApi}/topographies?token=${token}`);
    const data = await response.json();
    console.log('Total topographies items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS topographies',
          [],
          () => {
            console.log('topographies table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS topographies (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('topographies table created successfully');
          },
          reject,
        );

        data.forEach(topographies => {
          tx.executeSql(
            'INSERT INTO topographies VALUES (?, ?, ?, ?, ?)',
            [
              topographies.id || null,
              topographies.name || null,
              topographies.name_bn || null,
              topographies.name_short || null,
              topographies.code || null,
            ],
            (_, resultSet) =>
              console.log('topographies data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting topographies data',
                error,
                topographies,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching topographies data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const topographies_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM topographies`, // Query the topographies table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying topographies`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const topographies_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM topographies`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from topographies:', resultSet);

          try {
            await topographies_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from topographies`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const treesperha_lists_api = async () => {
  try {
    const response = await fetch(`${baseApi}/treesperha_lists?token=${token}`);
    const data = await response.json();
    console.log('Total treesperha_lists items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS treesperha_lists',
          [],
          () => {
            console.log('treesperha_lists table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS treesperha_lists (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('treesperha_lists table created successfully');
          },
          reject,
        );

        data.forEach(treesperha_lists => {
          tx.executeSql(
            'INSERT INTO treesperha_lists VALUES (?, ?, ?, ?, ?)',
            [
              treesperha_lists.id || null,
              treesperha_lists.name || null,
              treesperha_lists.name_bn || null,
              treesperha_lists.name_short || null,
              treesperha_lists.code || null,
            ],
            (_, resultSet) =>
              console.log(
                'treesperha_lists data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting treesperha_lists data',
                error,
                treesperha_lists,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching treesperha_lists data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const treesperha_lists_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM treesperha_lists`, // Query the treesperha_lists table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying treesperha_lists`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const treesperha_lists_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM treesperha_lists`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from treesperha_lists:', resultSet);

          try {
            await treesperha_lists_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from treesperha_lists`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const user_logs_api = async () => {
  try {
    const response = await fetch(`${baseApi}/user_logs?token=${token}`);
    const data = await response.json();
    console.log('Total user_logs items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS user_logs',
          [],
          () => {
            console.log('user_logs table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS user_logs (id TEXT, log_types TEXT, work_parts TEXT, description TEXT, table_name TEXT, table_uri TEXT, table_id TEXT, ip_address TEXT, mac_address TEXT, sort TEXT, status TEXT, status_id TEXT, created_at TEXT, created_by TEXT, updated_at TEXT, updated_by TEXT)',
          [],
          () => {
            console.log('user_logs table created successfully');
          },
          reject,
        );

        data.forEach(user_logs => {
          tx.executeSql(
            'INSERT INTO user_logs VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              user_logs.id || null,
              user_logs.log_types || null,
              user_logs.work_parts || null,
              user_logs.description || null,
              user_logs.table_name || null,
              user_logs.table_uri || null,
              user_logs.table_id || null,
              user_logs.ip_address || null,
              user_logs.mac_address || null,
              user_logs.sort || null,
              user_logs.status || null,
              user_logs.status_id || null,
              user_logs.created_at || null,
              user_logs.created_by || null,
              user_logs.updated_at || null,
              user_logs.updated_by || null,
            ],
            (_, resultSet) =>
              console.log('user_logs data inserted successfully', resultSet),
            (_, error) => {
              console.error('Error inserting user_logs data', error, user_logs);
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching user_logs data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const user_logs_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM user_logs`, // Query the user_logs table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying user_logs`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const user_logs_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM user_logs`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from user_logs:', resultSet);

          try {
            await user_logs_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from user_logs`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const users_api = async () => {
  try {
    const response = await fetch(`${baseApi}/users?token=${token}`);
    const data = await response.json();
    console.log('Total users items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS users',
          [],
          () => {
            //console.log('users table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS users (id TEXT, name TEXT, email TEXT, email_verified_at TEXT, password TEXT, remember_token TEXT, current_team_id TEXT, profile_photo_path TEXT, created_at TEXT, updated_at TEXT, two_factor_secret TEXT, two_factor_recovery_codes TEXT, role_id TEXT, office_level_id TEXT, is_active TEXT, beat_code TEXT, range_code TEXT, division_code TEXT, circle_code TEXT, created_by TEXT, updated_by TEXT)',
          [],
          () => {
            //console.log('users table created successfully');
          },
          reject,
        );

        data.forEach(users => {
          tx.executeSql(
            'INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [
              users.id || null,
              users.name || null,
              users.email || null,
              users.email_verified_at || null,
              users.password || null,
              users.remember_token || null,
              users.current_team_id || null,
              users.profile_photo_path || null,
              users.created_at || null,
              users.updated_at || null,
              users.two_factor_secret || null,
              users.two_factor_recovery_codes || null,
              users.role_id || null,
              users.office_level_id || null,
              users.is_active || null,
              users.beat_code || null,
              users.range_code || null,
              users.division_code || null,
              users.circle_code || null,
              users.created_by || null,
              users.updated_by || null,
            ],
            (
                _,
                resultSet, //console.log('users data inserted successfully'),
              ) =>
              (_, error) => {
                console.error('Error inserting users data', error, users);
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching users data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const users_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM users`, // Query the users table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying users`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const users_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM users`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from users:', resultSet);

          try {
            await users_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from users`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const vegpct_lists_api = async () => {
  try {
    const response = await fetch(`${baseApi}/vegpct_lists?token=${token}`);
    const data = await response.json();
    console.log('Total vegpct_lists items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS vegpct_lists',
          [],
          () => {
            console.log('vegpct_lists table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS vegpct_lists (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('vegpct_lists table created successfully');
          },
          reject,
        );

        data.forEach(vegpct_lists => {
          tx.executeSql(
            'INSERT INTO vegpct_lists VALUES (?, ?, ?, ?, ?)',
            [
              vegpct_lists.id || null,
              vegpct_lists.name || null,
              vegpct_lists.name_bn || null,
              vegpct_lists.name_short || null,
              vegpct_lists.code || null,
            ],
            (_, resultSet) =>
              console.log('vegpct_lists data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting vegpct_lists data',
                error,
                vegpct_lists,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching vegpct_lists data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const vegpct_lists_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM vegpct_lists`, // Query the vegpct_lists table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying vegpct_lists`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const vegpct_lists_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM vegpct_lists`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from vegpct_lists:', resultSet);

          try {
            await vegpct_lists_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from vegpct_lists`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const yes_no_lists_api = async () => {
  try {
    const response = await fetch(`${baseApi}/yes_no_lists?token=${token}`);
    const data = await response.json();
    console.log('Total yes_no_lists items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS yes_no_lists',
          [],
          () => {
            console.log('yes_no_lists table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS yes_no_lists (id TEXT, name TEXT, name_bn TEXT, name_short TEXT, code TEXT)',
          [],
          () => {
            console.log('yes_no_lists table created successfully');
          },
          reject,
        );

        data.forEach(yes_no_lists => {
          tx.executeSql(
            'INSERT INTO yes_no_lists VALUES (?, ?, ?, ?, ?)',
            [
              yes_no_lists.id || null,
              yes_no_lists.name || null,
              yes_no_lists.name_bn || null,
              yes_no_lists.name_short || null,
              yes_no_lists.code || null,
            ],
            (_, resultSet) =>
              console.log('yes_no_lists data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting yes_no_lists data',
                error,
                yes_no_lists,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching yes_no_lists data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const yes_no_lists_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM yes_no_lists`, // Query the yes_no_lists table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying yes_no_lists`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const yes_no_lists_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM yes_no_lists`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from yes_no_lists:', resultSet);

          try {
            await yes_no_lists_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from yes_no_lists`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
//API Start
export const team_invitations_api = async () => {
  try {
    const response = await fetch(`${baseApi}/team_invitations?token=${token}`);
    const data = await response.json();
    console.log('Total team_invitations items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          'DROP TABLE IF EXISTS team_invitations',
          [],
          () => {
            console.log('team_invitations table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS team_invitations (id TEXT, team_id TEXT, email TEXT, role TEXT, created_at TEXT, updated_at TEXT)',
          [],
          () => {
            console.log('team_invitations table created successfully');
          },
          reject,
        );

        data.forEach(team_invitations => {
          tx.executeSql(
            'INSERT INTO team_invitations VALUES (?, ?, ?, ?, ?, ?)',
            [
              team_invitations.id || null,
              team_invitations.team_id || null,
              team_invitations.email || null,
              team_invitations.role || null,
              team_invitations.created_at || null,
              team_invitations.updated_at || null,
            ],
            (_, resultSet) =>
              console.log(
                'team_invitations data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting team_invitations data',
                error,
                team_invitations,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching team_invitations data from API', error);
  }
};
//API End
//---------------------------------------------------------//
// List Start

export const team_invitations_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM team_invitations`, // Query the team_invitations table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying team_invitations`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const team_invitations_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM team_invitations`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from team_invitations:', resultSet);

          try {
            await team_invitations_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from team_invitations`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//

//---------------------11/5/2024---------------------------------

//----------------------11/20/2021-----------------------------------------

//API Start
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_blb_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_attendence_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total com202021_conslttn_ttndnc_pctre_consultation_attendence_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS com202021_conslttn_ttndnc_pctre_consultation_attendence_blb`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_attendence_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS com202021_conslttn_ttndnc_pctre_consultation_attendence_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_attendence_blb table created successfully',
              );
            },
            reject,
          );

          data.forEach(
            com202021_conslttn_ttndnc_pctre_consultation_attendence_blb => {
              tx.executeSql(
                `INSERT INTO com202021_conslttn_ttndnc_pctre_consultation_attendence_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
                [
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_blb._URI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_blb._CREATOR_URI_USER ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_blb._CREATION_DATE ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_blb._LAST_UPDATE_URI_USER ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_blb._LAST_UPDATE_DATE ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_blb._TOP_LEVEL_AURI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_blb.VALUE ||
                    null,
                ],
                (_, resultSet) =>
                  console.log(
                    'com202021_conslttn_ttndnc_pctre_consultation_attendence_blb data inserted successfully',
                    resultSet,
                  ),
                (_, error) => {
                  console.error(
                    'Error inserting com202021_conslttn_ttndnc_pctre_consultation_attendence_blb data',
                    error,
                    com202021_conslttn_ttndnc_pctre_consultation_attendence_blb,
                  );
                },
              );
            },
          );
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching com202021_conslttn_ttndnc_pctre_consultation_attendence_blb data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_blb_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_attendence_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total com202021_conslttn_ttndnc_pctre_consultation_attendence_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS com202021_conslttn_ttndnc_pctre_consultation_attendence_blb`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_attendence_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS com202021_conslttn_ttndnc_pctre_consultation_attendence_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_attendence_blb table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching com202021_conslttn_ttndnc_pctre_consultation_attendence_blb data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const com202021_conslttn_ttndnc_pctre_consultation_attendence_blb_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM com202021_conslttn_ttndnc_pctre_consultation_attendence_blb`, // Query the com202021_conslttn_ttndnc_pctre_consultation_attendence_blb table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying com202021_conslttn_ttndnc_pctre_consultation_attendence_blb`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_blb_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM com202021_conslttn_ttndnc_pctre_consultation_attendence_blb`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from com202021_conslttn_ttndnc_pctre_consultation_attendence_blb:',
              resultSet,
            );

            try {
              await com202021_conslttn_ttndnc_pctre_consultation_attendence_blb_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from com202021_conslttn_ttndnc_pctre_consultation_attendence_blb`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_blb_create =
  com202021_conslttn_ttndnc_pctre_consultation_attendence_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert com202021_conslttn_ttndnc_pctre_consultation_attendence_blb
        tx.executeSql(
          `INSERT INTO com202021_conslttn_ttndnc_pctre_consultation_attendence_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            com202021_conslttn_ttndnc_pctre_consultation_attendence_blb._URI ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_blb._CREATOR_URI_USER ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_blb._CREATION_DATE ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_blb._LAST_UPDATE_URI_USER ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_blb._LAST_UPDATE_DATE ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_blb._TOP_LEVEL_AURI ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_blb.VALUE ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_bn_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_attendence_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total com202021_conslttn_ttndnc_pctre_consultation_attendence_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS com202021_conslttn_ttndnc_pctre_consultation_attendence_bn`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_attendence_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS com202021_conslttn_ttndnc_pctre_consultation_attendence_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_attendence_bn table created successfully',
              );
            },
            reject,
          );

          data.forEach(
            com202021_conslttn_ttndnc_pctre_consultation_attendence_bn => {
              tx.executeSql(
                `INSERT INTO com202021_conslttn_ttndnc_pctre_consultation_attendence_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                [
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_bn._URI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_bn._CREATOR_URI_USER ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_bn._CREATION_DATE ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_bn._LAST_UPDATE_URI_USER ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_bn._LAST_UPDATE_DATE ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_bn._PARENT_AURI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_bn._ORDINAL_NUMBER ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_bn._TOP_LEVEL_AURI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_bn.UNROOTED_FILE_PATH ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_bn.CONTENT_TYPE ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_bn.CONTENT_LENGTH ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_bn.CONTENT_HASH ||
                    null,
                ],
                (_, resultSet) =>
                  console.log(
                    'com202021_conslttn_ttndnc_pctre_consultation_attendence_bn data inserted successfully',
                    resultSet,
                  ),
                (_, error) => {
                  console.error(
                    'Error inserting com202021_conslttn_ttndnc_pctre_consultation_attendence_bn data',
                    error,
                    com202021_conslttn_ttndnc_pctre_consultation_attendence_bn,
                  );
                },
              );
            },
          );
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching com202021_conslttn_ttndnc_pctre_consultation_attendence_bn data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_bn_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_attendence_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total com202021_conslttn_ttndnc_pctre_consultation_attendence_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS com202021_conslttn_ttndnc_pctre_consultation_attendence_bn`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_attendence_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS com202021_conslttn_ttndnc_pctre_consultation_attendence_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_attendence_bn table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching com202021_conslttn_ttndnc_pctre_consultation_attendence_bn data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const com202021_conslttn_ttndnc_pctre_consultation_attendence_bn_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM com202021_conslttn_ttndnc_pctre_consultation_attendence_bn`, // Query the com202021_conslttn_ttndnc_pctre_consultation_attendence_bn table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying com202021_conslttn_ttndnc_pctre_consultation_attendence_bn`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_bn_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM com202021_conslttn_ttndnc_pctre_consultation_attendence_bn`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from com202021_conslttn_ttndnc_pctre_consultation_attendence_bn:',
              resultSet,
            );

            try {
              await com202021_conslttn_ttndnc_pctre_consultation_attendence_bn_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from com202021_conslttn_ttndnc_pctre_consultation_attendence_bn`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_bn_create =
  com202021_conslttn_ttndnc_pctre_consultation_attendence_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert com202021_conslttn_ttndnc_pctre_consultation_attendence_bn
        tx.executeSql(
          `INSERT INTO com202021_conslttn_ttndnc_pctre_consultation_attendence_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            com202021_conslttn_ttndnc_pctre_consultation_attendence_bn._URI ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_bn._CREATOR_URI_USER ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_bn._CREATION_DATE ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_bn._LAST_UPDATE_URI_USER ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_bn._LAST_UPDATE_DATE ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_bn._PARENT_AURI ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_bn._ORDINAL_NUMBER ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_bn._TOP_LEVEL_AURI ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_bn.UNROOTED_FILE_PATH ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_bn.CONTENT_TYPE ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_bn.CONTENT_LENGTH ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_bn.CONTENT_HASH ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_ref_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_attendence_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total com202021_conslttn_ttndnc_pctre_consultation_attendence_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS com202021_conslttn_ttndnc_pctre_consultation_attendence_ref`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_attendence_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS com202021_conslttn_ttndnc_pctre_consultation_attendence_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_attendence_ref table created successfully',
              );
            },
            reject,
          );

          data.forEach(
            com202021_conslttn_ttndnc_pctre_consultation_attendence_ref => {
              tx.executeSql(
                `INSERT INTO com202021_conslttn_ttndnc_pctre_consultation_attendence_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                [
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_ref._URI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_ref._CREATOR_URI_USER ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_ref._CREATION_DATE ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_ref._LAST_UPDATE_URI_USER ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_ref._LAST_UPDATE_DATE ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_ref._DOM_AURI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_ref._SUB_AURI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_ref._TOP_LEVEL_AURI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_attendence_ref.PART ||
                    null,
                ],
                (_, resultSet) =>
                  console.log(
                    'com202021_conslttn_ttndnc_pctre_consultation_attendence_ref data inserted successfully',
                    resultSet,
                  ),
                (_, error) => {
                  console.error(
                    'Error inserting com202021_conslttn_ttndnc_pctre_consultation_attendence_ref data',
                    error,
                    com202021_conslttn_ttndnc_pctre_consultation_attendence_ref,
                  );
                },
              );
            },
          );
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching com202021_conslttn_ttndnc_pctre_consultation_attendence_ref data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_ref_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_attendence_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total com202021_conslttn_ttndnc_pctre_consultation_attendence_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS com202021_conslttn_ttndnc_pctre_consultation_attendence_ref`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_attendence_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS com202021_conslttn_ttndnc_pctre_consultation_attendence_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_attendence_ref table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching com202021_conslttn_ttndnc_pctre_consultation_attendence_ref data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const com202021_conslttn_ttndnc_pctre_consultation_attendence_ref_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM com202021_conslttn_ttndnc_pctre_consultation_attendence_ref`, // Query the com202021_conslttn_ttndnc_pctre_consultation_attendence_ref table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying com202021_conslttn_ttndnc_pctre_consultation_attendence_ref`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_ref_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM com202021_conslttn_ttndnc_pctre_consultation_attendence_ref`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from com202021_conslttn_ttndnc_pctre_consultation_attendence_ref:',
              resultSet,
            );

            try {
              await com202021_conslttn_ttndnc_pctre_consultation_attendence_ref_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from com202021_conslttn_ttndnc_pctre_consultation_attendence_ref`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_ref_create =
  com202021_conslttn_ttndnc_pctre_consultation_attendence_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert com202021_conslttn_ttndnc_pctre_consultation_attendence_ref
        tx.executeSql(
          `INSERT INTO com202021_conslttn_ttndnc_pctre_consultation_attendence_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            com202021_conslttn_ttndnc_pctre_consultation_attendence_ref._URI ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_ref._CREATOR_URI_USER ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_ref._CREATION_DATE ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_ref._LAST_UPDATE_URI_USER ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_ref._LAST_UPDATE_DATE ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_ref._DOM_AURI ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_ref._SUB_AURI ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_ref._TOP_LEVEL_AURI ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_attendence_ref.PART ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const com202021_consultation_picture_bn_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/com202021_consultation_picture_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total com202021_consultation_picture_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_consultation_picture_bn`,
          [],
          () => {
            console.log(
              'com202021_consultation_picture_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_consultation_picture_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'com202021_consultation_picture_bn table created successfully',
            );
          },
          reject,
        );

        data.forEach(com202021_consultation_picture_bn => {
          tx.executeSql(
            `INSERT INTO com202021_consultation_picture_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              com202021_consultation_picture_bn._URI || null,
              com202021_consultation_picture_bn._CREATOR_URI_USER || null,
              com202021_consultation_picture_bn._CREATION_DATE || null,
              com202021_consultation_picture_bn._LAST_UPDATE_URI_USER || null,
              com202021_consultation_picture_bn._LAST_UPDATE_DATE || null,
              com202021_consultation_picture_bn._PARENT_AURI || null,
              com202021_consultation_picture_bn._ORDINAL_NUMBER || null,
              com202021_consultation_picture_bn._TOP_LEVEL_AURI || null,
              com202021_consultation_picture_bn.UNROOTED_FILE_PATH || null,
              com202021_consultation_picture_bn.CONTENT_TYPE || null,
              com202021_consultation_picture_bn.CONTENT_LENGTH || null,
              com202021_consultation_picture_bn.CONTENT_HASH || null,
            ],
            (_, resultSet) =>
              console.log(
                'com202021_consultation_picture_bn data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting com202021_consultation_picture_bn data',
                error,
                com202021_consultation_picture_bn,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching com202021_consultation_picture_bn data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const com202021_consultation_picture_bn_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/com202021_consultation_picture_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total com202021_consultation_picture_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_consultation_picture_bn`,
          [],
          () => {
            console.log(
              'com202021_consultation_picture_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_consultation_picture_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'com202021_consultation_picture_bn table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching com202021_consultation_picture_bn data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const com202021_consultation_picture_bn_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM com202021_consultation_picture_bn`, // Query the com202021_consultation_picture_bn table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying com202021_consultation_picture_bn`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const com202021_consultation_picture_bn_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM com202021_consultation_picture_bn`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from com202021_consultation_picture_bn:',
            resultSet,
          );

          try {
            await com202021_consultation_picture_bn_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from com202021_consultation_picture_bn`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const com202021_consultation_picture_bn_create =
  com202021_consultation_picture_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert com202021_consultation_picture_bn
        tx.executeSql(
          `INSERT INTO com202021_consultation_picture_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            com202021_consultation_picture_bn._URI || null,
            com202021_consultation_picture_bn._CREATOR_URI_USER || null,
            com202021_consultation_picture_bn._CREATION_DATE || null,
            com202021_consultation_picture_bn._LAST_UPDATE_URI_USER || null,
            com202021_consultation_picture_bn._LAST_UPDATE_DATE || null,
            com202021_consultation_picture_bn._PARENT_AURI || null,
            com202021_consultation_picture_bn._ORDINAL_NUMBER || null,
            com202021_consultation_picture_bn._TOP_LEVEL_AURI || null,
            com202021_consultation_picture_bn.UNROOTED_FILE_PATH || null,
            com202021_consultation_picture_bn.CONTENT_TYPE || null,
            com202021_consultation_picture_bn.CONTENT_LENGTH || null,
            com202021_consultation_picture_bn.CONTENT_HASH || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const com202021_consultation_picture_ref_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/com202021_consultation_picture_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total com202021_consultation_picture_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_consultation_picture_ref`,
          [],
          () => {
            console.log(
              'com202021_consultation_picture_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_consultation_picture_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'com202021_consultation_picture_ref table created successfully',
            );
          },
          reject,
        );

        data.forEach(com202021_consultation_picture_ref => {
          tx.executeSql(
            `INSERT INTO com202021_consultation_picture_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              com202021_consultation_picture_ref._URI || null,
              com202021_consultation_picture_ref._CREATOR_URI_USER || null,
              com202021_consultation_picture_ref._CREATION_DATE || null,
              com202021_consultation_picture_ref._LAST_UPDATE_URI_USER || null,
              com202021_consultation_picture_ref._LAST_UPDATE_DATE || null,
              com202021_consultation_picture_ref._DOM_AURI || null,
              com202021_consultation_picture_ref._SUB_AURI || null,
              com202021_consultation_picture_ref._TOP_LEVEL_AURI || null,
              com202021_consultation_picture_ref.PART || null,
            ],
            (_, resultSet) =>
              console.log(
                'com202021_consultation_picture_ref data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting com202021_consultation_picture_ref data',
                error,
                com202021_consultation_picture_ref,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching com202021_consultation_picture_ref data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const com202021_consultation_picture_ref_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/com202021_consultation_picture_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total com202021_consultation_picture_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_consultation_picture_ref`,
          [],
          () => {
            console.log(
              'com202021_consultation_picture_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_consultation_picture_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'com202021_consultation_picture_ref table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching com202021_consultation_picture_ref data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const com202021_consultation_picture_ref_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM com202021_consultation_picture_ref`, // Query the com202021_consultation_picture_ref table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying com202021_consultation_picture_ref`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const com202021_consultation_picture_ref_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM com202021_consultation_picture_ref`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from com202021_consultation_picture_ref:',
            resultSet,
          );

          try {
            await com202021_consultation_picture_ref_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from com202021_consultation_picture_ref`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const com202021_consultation_picture_ref_create =
  com202021_consultation_picture_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert com202021_consultation_picture_ref
        tx.executeSql(
          `INSERT INTO com202021_consultation_picture_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            com202021_consultation_picture_ref._URI || null,
            com202021_consultation_picture_ref._CREATOR_URI_USER || null,
            com202021_consultation_picture_ref._CREATION_DATE || null,
            com202021_consultation_picture_ref._LAST_UPDATE_URI_USER || null,
            com202021_consultation_picture_ref._LAST_UPDATE_DATE || null,
            com202021_consultation_picture_ref._DOM_AURI || null,
            com202021_consultation_picture_ref._SUB_AURI || null,
            com202021_consultation_picture_ref._TOP_LEVEL_AURI || null,
            com202021_consultation_picture_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const com202021_core_audit_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/com202021_core_audit?token=${token}`,
    );
    const data = await response.json();
    console.log('Total com202021_core_audit items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_core_audit`,
          [],
          () => {
            console.log('com202021_core_audit table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_core_audit (id TEXT,_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,LOCATION_DATA_TLOC_FD_BEAT_TXT TEXT,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE TEXT,CONSULTATION_GENERATED_NOTE_NAME_11 TEXT,CONSULTATION_USER_CELL TEXT,LOCATION_DATA_TLOC_FD_CHAR TEXT,CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47 TEXT,CONSULTATION_CONSULTATION_PLACE TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY TEXT,CONSULTATION_DCONSULTATION TEXT,LOCATION_DATA_TLOC_ENTER_DIV TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_22 TEXT,LOCATION_DATA_TLOC_FD_RANGE TEXT,END_RAW TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_24 TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION TEXT,CONSULTATION_DCONSULTATION_START TEXT,LOCATION_DATA_TLOC_FD_BEAT TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4 TEXT,SUBSCRIBERID TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1 TEXT,CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2 TEXT,CONSULTATION_DCONSULTATION_END_RAW TEXT,LOCATION_DATA_TLOC_ECOZONE TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51 TEXT,LOCATION_DATA_TLOC_FD_BLOCK TEXT,CONSULTATION_DCONSULTATION_END TEXT,DEVICEID TEXT,LOCATION_DATA_TLOC_FD_DIVISION TEXT,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE TEXT,END TEXT,CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79 TEXT,PHONENUMBER TEXT,CONSULTATION_THOC_UNION TEXT,LOCATION_DATA_TLOC_ENTER_RANGE TEXT,START_RAW TEXT,CONSULTATION_USER_EMAIL TEXT,META_INSTANCE_ID TEXT,SIMSERIAL TEXT,NOTES TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS TEXT,CONSULTATION_DCONSULTATION_START_RAW TEXT,CONSULTATION_USER_NAME TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO TEXT,TODAY TEXT,LOCATION_DATA_TLOC_FD_CIR TEXT,START TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41 TEXT,TODAY_RAW TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69 TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT,UserName TEXT,AdditionTime TEXT)`,
          [],
          () => {
            console.log('com202021_core_audit table created successfully');
          },
          reject,
        );

        data.forEach(com202021_core_audit => {
          tx.executeSql(
            `INSERT INTO com202021_core_audit VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              com202021_core_audit.id || null,
              com202021_core_audit._URI || null,
              com202021_core_audit._CREATOR_URI_USER || null,
              com202021_core_audit._CREATION_DATE || null,
              com202021_core_audit._LAST_UPDATE_URI_USER || null,
              com202021_core_audit._LAST_UPDATE_DATE || null,
              com202021_core_audit._MODEL_VERSION || null,
              com202021_core_audit._UI_VERSION || null,
              com202021_core_audit._IS_COMPLETE || null,
              com202021_core_audit._SUBMISSION_DATE || null,
              com202021_core_audit._MARKED_AS_COMPLETE_DATE || null,
              com202021_core_audit.LOCATION_DATA_TLOC_FD_BEAT_TXT || null,
              com202021_core_audit.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE ||
                null,
              com202021_core_audit.CONSULTATION_GENERATED_NOTE_NAME_11 || null,
              com202021_core_audit.CONSULTATION_USER_CELL || null,
              com202021_core_audit.LOCATION_DATA_TLOC_FD_CHAR || null,
              com202021_core_audit.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47 ||
                null,
              com202021_core_audit.CONSULTATION_CONSULTATION_PLACE || null,
              com202021_core_audit.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY ||
                null,
              com202021_core_audit.CONSULTATION_DCONSULTATION || null,
              com202021_core_audit.LOCATION_DATA_TLOC_ENTER_DIV || null,
              com202021_core_audit.LOCATION_DATA_GENERATED_NOTE_NAME_22 || null,
              com202021_core_audit.LOCATION_DATA_TLOC_FD_RANGE || null,
              com202021_core_audit.END_RAW || null,
              com202021_core_audit.LOCATION_DATA_GENERATED_NOTE_NAME_24 || null,
              com202021_core_audit.CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION ||
                null,
              com202021_core_audit.CONSULTATION_DCONSULTATION_START || null,
              com202021_core_audit.LOCATION_DATA_TLOC_FD_BEAT || null,
              com202021_core_audit.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8 || null,
              com202021_core_audit.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5 || null,
              com202021_core_audit.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6 || null,
              com202021_core_audit.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3 || null,
              com202021_core_audit.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4 || null,
              com202021_core_audit.SUBSCRIBERID || null,
              com202021_core_audit.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1 || null,
              com202021_core_audit.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES ||
                null,
              com202021_core_audit.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2 || null,
              com202021_core_audit.CONSULTATION_DCONSULTATION_END_RAW || null,
              com202021_core_audit.LOCATION_DATA_TLOC_ECOZONE || null,
              com202021_core_audit.CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51 ||
                null,
              com202021_core_audit.LOCATION_DATA_TLOC_FD_BLOCK || null,
              com202021_core_audit.CONSULTATION_DCONSULTATION_END || null,
              com202021_core_audit.DEVICEID || null,
              com202021_core_audit.LOCATION_DATA_TLOC_FD_DIVISION || null,
              com202021_core_audit.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE ||
                null,
              com202021_core_audit.END || null,
              com202021_core_audit.CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79 ||
                null,
              com202021_core_audit.PHONENUMBER || null,
              com202021_core_audit.CONSULTATION_THOC_UNION || null,
              com202021_core_audit.LOCATION_DATA_TLOC_ENTER_RANGE || null,
              com202021_core_audit.START_RAW || null,
              com202021_core_audit.CONSULTATION_USER_EMAIL || null,
              com202021_core_audit.META_INSTANCE_ID || null,
              com202021_core_audit.SIMSERIAL || null,
              com202021_core_audit.NOTES || null,
              com202021_core_audit.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS ||
                null,
              com202021_core_audit.CONSULTATION_DCONSULTATION_START_RAW || null,
              com202021_core_audit.CONSULTATION_USER_NAME || null,
              com202021_core_audit.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO ||
                null,
              com202021_core_audit.TODAY || null,
              com202021_core_audit.LOCATION_DATA_TLOC_FD_CIR || null,
              com202021_core_audit.START || null,
              com202021_core_audit.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41 ||
                null,
              com202021_core_audit.TODAY_RAW || null,
              com202021_core_audit.SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69 ||
                null,
              com202021_core_audit.CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT ||
                null,
              com202021_core_audit.project_id || null,
              com202021_core_audit.sort || null,
              com202021_core_audit.last_log_id || null,
              com202021_core_audit.restore_id || null,
              com202021_core_audit.created_at || null,
              com202021_core_audit.created_by || null,
              com202021_core_audit.updated_at || null,
              com202021_core_audit.updated_by || null,
              com202021_core_audit.deleted_at || null,
              com202021_core_audit.deleted_by || null,
              com202021_core_audit.deleted_status || null,
              com202021_core_audit.status || null,
              com202021_core_audit.UserName || null,
              com202021_core_audit.AdditionTime || null,
            ],
            (_, resultSet) =>
              console.log(
                'com202021_core_audit data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting com202021_core_audit data',
                error,
                com202021_core_audit,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching com202021_core_audit data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const com202021_core_audit_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/com202021_core_audit?token=${token}`,
    );
    const data = await response.json();
    console.log('Total com202021_core_audit items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_core_audit`,
          [],
          () => {
            console.log('com202021_core_audit table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_core_audit (id TEXT,_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,LOCATION_DATA_TLOC_FD_BEAT_TXT TEXT,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE TEXT,CONSULTATION_GENERATED_NOTE_NAME_11 TEXT,CONSULTATION_USER_CELL TEXT,LOCATION_DATA_TLOC_FD_CHAR TEXT,CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47 TEXT,CONSULTATION_CONSULTATION_PLACE TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY TEXT,CONSULTATION_DCONSULTATION TEXT,LOCATION_DATA_TLOC_ENTER_DIV TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_22 TEXT,LOCATION_DATA_TLOC_FD_RANGE TEXT,END_RAW TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_24 TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION TEXT,CONSULTATION_DCONSULTATION_START TEXT,LOCATION_DATA_TLOC_FD_BEAT TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4 TEXT,SUBSCRIBERID TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1 TEXT,CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2 TEXT,CONSULTATION_DCONSULTATION_END_RAW TEXT,LOCATION_DATA_TLOC_ECOZONE TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51 TEXT,LOCATION_DATA_TLOC_FD_BLOCK TEXT,CONSULTATION_DCONSULTATION_END TEXT,DEVICEID TEXT,LOCATION_DATA_TLOC_FD_DIVISION TEXT,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE TEXT,END TEXT,CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79 TEXT,PHONENUMBER TEXT,CONSULTATION_THOC_UNION TEXT,LOCATION_DATA_TLOC_ENTER_RANGE TEXT,START_RAW TEXT,CONSULTATION_USER_EMAIL TEXT,META_INSTANCE_ID TEXT,SIMSERIAL TEXT,NOTES TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS TEXT,CONSULTATION_DCONSULTATION_START_RAW TEXT,CONSULTATION_USER_NAME TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO TEXT,TODAY TEXT,LOCATION_DATA_TLOC_FD_CIR TEXT,START TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41 TEXT,TODAY_RAW TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69 TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT,UserName TEXT,AdditionTime TEXT)`,
          [],
          () => {
            console.log('com202021_core_audit table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching com202021_core_audit data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const com202021_core_audit_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM com202021_core_audit`, // Query the com202021_core_audit table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying com202021_core_audit`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const com202021_core_audit_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM com202021_core_audit`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from com202021_core_audit:', resultSet);

          try {
            await com202021_core_audit_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from com202021_core_audit`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const com202021_core_audit_create = com202021_core_audit => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert com202021_core_audit
      tx.executeSql(
        `INSERT INTO com202021_core_audit (id,_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_MODEL_VERSION,_UI_VERSION,_IS_COMPLETE,_SUBMISSION_DATE,_MARKED_AS_COMPLETE_DATE,LOCATION_DATA_TLOC_FD_BEAT_TXT,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE,CONSULTATION_GENERATED_NOTE_NAME_11,CONSULTATION_USER_CELL,LOCATION_DATA_TLOC_FD_CHAR,CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47,CONSULTATION_CONSULTATION_PLACE,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY,CONSULTATION_DCONSULTATION,LOCATION_DATA_TLOC_ENTER_DIV,LOCATION_DATA_GENERATED_NOTE_NAME_22,LOCATION_DATA_TLOC_FD_RANGE,END_RAW,LOCATION_DATA_GENERATED_NOTE_NAME_24,CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION,CONSULTATION_DCONSULTATION_START,LOCATION_DATA_TLOC_FD_BEAT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4,SUBSCRIBERID,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1,CONSUL
TATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2,CONSULTATION_DCONSULTATION_END_RAW,LOCATION_DATA_TLOC_ECOZONE,CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51,LOCATION_DATA_TLOC_FD_BLOCK,CONSULTATION_DCONSULTATION_END,DEVICEID,LOCATION_DATA_TLOC_FD_DIVISION,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE,END,CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79,PHONENUMBER,CONSULTATION_THOC_UNION,LOCATION_DATA_TLOC_ENTER_RANGE,START_RAW,CONSULTATION_USER_EMAIL,META_INSTANCE_ID,SIMSERIAL,NOTES,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS,CONSULTATION_DCONSULTATION_START_RAW,CONSULTATION_USER_NAME,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO,TODAY,LOCATION_DATA_TLOC_FD_CIR,START,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41,TODAY_RAW,SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69,CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT,project_id,sort,last_log_id,restore_id,created_at,cre
ated_by,updated_at,updated_by,deleted_at,deleted_by,deleted_status,status,UserName,AdditionTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          com202021_core_audit.id || null,
          com202021_core_audit._URI || null,
          com202021_core_audit._CREATOR_URI_USER || null,
          com202021_core_audit._CREATION_DATE || null,
          com202021_core_audit._LAST_UPDATE_URI_USER || null,
          com202021_core_audit._LAST_UPDATE_DATE || null,
          com202021_core_audit._MODEL_VERSION || null,
          com202021_core_audit._UI_VERSION || null,
          com202021_core_audit._IS_COMPLETE || null,
          com202021_core_audit._SUBMISSION_DATE || null,
          com202021_core_audit._MARKED_AS_COMPLETE_DATE || null,
          com202021_core_audit.LOCATION_DATA_TLOC_FD_BEAT_TXT || null,
          com202021_core_audit.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE ||
            null,
          com202021_core_audit.CONSULTATION_GENERATED_NOTE_NAME_11 || null,
          com202021_core_audit.CONSULTATION_USER_CELL || null,
          com202021_core_audit.LOCATION_DATA_TLOC_FD_CHAR || null,
          com202021_core_audit.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47 ||
            null,
          com202021_core_audit.CONSULTATION_CONSULTATION_PLACE || null,
          com202021_core_audit.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY ||
            null,
          com202021_core_audit.CONSULTATION_DCONSULTATION || null,
          com202021_core_audit.LOCATION_DATA_TLOC_ENTER_DIV || null,
          com202021_core_audit.LOCATION_DATA_GENERATED_NOTE_NAME_22 || null,
          com202021_core_audit.LOCATION_DATA_TLOC_FD_RANGE || null,
          com202021_core_audit.END_RAW || null,
          com202021_core_audit.LOCATION_DATA_GENERATED_NOTE_NAME_24 || null,
          com202021_core_audit.CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION ||
            null,
          com202021_core_audit.CONSULTATION_DCONSULTATION_START || null,
          com202021_core_audit.LOCATION_DATA_TLOC_FD_BEAT || null,
          com202021_core_audit.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8 || null,
          com202021_core_audit.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5 || null,
          com202021_core_audit.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6 || null,
          com202021_core_audit.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3 || null,
          com202021_core_audit.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4 || null,
          com202021_core_audit.SUBSCRIBERID || null,
          com202021_core_audit.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1 || null,
          com202021_core_audit.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES ||
            null,
          com202021_core_audit.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2 || null,
          com202021_core_audit.CONSULTATION_DCONSULTATION_END_RAW || null,
          com202021_core_audit.LOCATION_DATA_TLOC_ECOZONE || null,
          com202021_core_audit.CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51 ||
            null,
          com202021_core_audit.LOCATION_DATA_TLOC_FD_BLOCK || null,
          com202021_core_audit.CONSULTATION_DCONSULTATION_END || null,
          com202021_core_audit.DEVICEID || null,
          com202021_core_audit.LOCATION_DATA_TLOC_FD_DIVISION || null,
          com202021_core_audit.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE ||
            null,
          com202021_core_audit.END || null,
          com202021_core_audit.CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79 ||
            null,
          com202021_core_audit.PHONENUMBER || null,
          com202021_core_audit.CONSULTATION_THOC_UNION || null,
          com202021_core_audit.LOCATION_DATA_TLOC_ENTER_RANGE || null,
          com202021_core_audit.START_RAW || null,
          com202021_core_audit.CONSULTATION_USER_EMAIL || null,
          com202021_core_audit.META_INSTANCE_ID || null,
          com202021_core_audit.SIMSERIAL || null,
          com202021_core_audit.NOTES || null,
          com202021_core_audit.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS ||
            null,
          com202021_core_audit.CONSULTATION_DCONSULTATION_START_RAW || null,
          com202021_core_audit.CONSULTATION_USER_NAME || null,
          com202021_core_audit.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO ||
            null,
          com202021_core_audit.TODAY || null,
          com202021_core_audit.LOCATION_DATA_TLOC_FD_CIR || null,
          com202021_core_audit.START || null,
          com202021_core_audit.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41 ||
            null,
          com202021_core_audit.TODAY_RAW || null,
          com202021_core_audit.SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69 ||
            null,
          com202021_core_audit.CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT ||
            null,
          com202021_core_audit.project_id || null,
          com202021_core_audit.sort || null,
          com202021_core_audit.last_log_id || null,
          com202021_core_audit.restore_id || null,
          com202021_core_audit.created_at || null,
          com202021_core_audit.created_by || null,
          com202021_core_audit.updated_at || null,
          com202021_core_audit.updated_by || null,
          com202021_core_audit.deleted_at || null,
          com202021_core_audit.deleted_by || null,
          com202021_core_audit.deleted_status || null,
          com202021_core_audit.status || null,
          com202021_core_audit.UserName || null,
          com202021_core_audit.AdditionTime || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const com202021_core_test_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/com202021_core_test?token=${token}`,
    );
    const data = await response.json();
    console.log('Total com202021_core_test items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_core_test`,
          [],
          () => {
            console.log('com202021_core_test table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_core_test (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,LOCATION_DATA_TLOC_FD_BEAT_TXT TEXT,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE TEXT,CONSULTATION_GENERATED_NOTE_NAME_11 TEXT,CONSULTATION_USER_CELL TEXT,LOCATION_DATA_TLOC_FD_CHAR TEXT,CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47 TEXT,CONSULTATION_CONSULTATION_PLACE TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY TEXT,CONSULTATION_DCONSULTATION TEXT,LOCATION_DATA_TLOC_ENTER_DIV TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_22 TEXT,LOCATION_DATA_TLOC_FD_RANGE TEXT,END_RAW TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_24 TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION TEXT,CONSULTATION_DCONSULTATION_START TEXT,LOCATION_DATA_TLOC_FD_BEAT TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4 TEXT,SUBSCRIBERID TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1 TEXT,CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2 TEXT,CONSULTATION_DCONSULTATION_END_RAW TEXT,LOCATION_DATA_TLOC_ECOZONE TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51 TEXT,LOCATION_DATA_TLOC_FD_BLOCK TEXT,CONSULTATION_DCONSULTATION_END TEXT,DEVICEID TEXT,LOCATION_DATA_TLOC_FD_DIVISION TEXT,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE TEXT,END TEXT,CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79 TEXT,PHONENUMBER TEXT,CONSULTATION_THOC_UNION TEXT,LOCATION_DATA_TLOC_ENTER_RANGE TEXT,START_RAW TEXT,CONSULTATION_USER_EMAIL TEXT,META_INSTANCE_ID TEXT,SIMSERIAL TEXT,NOTES TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS TEXT,CONSULTATION_DCONSULTATION_START_RAW TEXT,CONSULTATION_USER_NAME TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO TEXT,TODAY TEXT,LOCATION_DATA_TLOC_FD_CIR TEXT,START TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41 TEXT,TODAY_RAW TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69 TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT)`,
          [],
          () => {
            console.log('com202021_core_test table created successfully');
          },
          reject,
        );

        data.forEach(com202021_core_test => {
          tx.executeSql(
            `INSERT INTO com202021_core_test VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              com202021_core_test._URI || null,
              com202021_core_test._CREATOR_URI_USER || null,
              com202021_core_test._CREATION_DATE || null,
              com202021_core_test._LAST_UPDATE_URI_USER || null,
              com202021_core_test._LAST_UPDATE_DATE || null,
              com202021_core_test._MODEL_VERSION || null,
              com202021_core_test._UI_VERSION || null,
              com202021_core_test._IS_COMPLETE || null,
              com202021_core_test._SUBMISSION_DATE || null,
              com202021_core_test._MARKED_AS_COMPLETE_DATE || null,
              com202021_core_test.LOCATION_DATA_TLOC_FD_BEAT_TXT || null,
              com202021_core_test.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE ||
                null,
              com202021_core_test.CONSULTATION_GENERATED_NOTE_NAME_11 || null,
              com202021_core_test.CONSULTATION_USER_CELL || null,
              com202021_core_test.LOCATION_DATA_TLOC_FD_CHAR || null,
              com202021_core_test.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47 ||
                null,
              com202021_core_test.CONSULTATION_CONSULTATION_PLACE || null,
              com202021_core_test.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY ||
                null,
              com202021_core_test.CONSULTATION_DCONSULTATION || null,
              com202021_core_test.LOCATION_DATA_TLOC_ENTER_DIV || null,
              com202021_core_test.LOCATION_DATA_GENERATED_NOTE_NAME_22 || null,
              com202021_core_test.LOCATION_DATA_TLOC_FD_RANGE || null,
              com202021_core_test.END_RAW || null,
              com202021_core_test.LOCATION_DATA_GENERATED_NOTE_NAME_24 || null,
              com202021_core_test.CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION ||
                null,
              com202021_core_test.CONSULTATION_DCONSULTATION_START || null,
              com202021_core_test.LOCATION_DATA_TLOC_FD_BEAT || null,
              com202021_core_test.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8 || null,
              com202021_core_test.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5 || null,
              com202021_core_test.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6 || null,
              com202021_core_test.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3 || null,
              com202021_core_test.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4 || null,
              com202021_core_test.SUBSCRIBERID || null,
              com202021_core_test.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1 || null,
              com202021_core_test.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES ||
                null,
              com202021_core_test.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2 || null,
              com202021_core_test.CONSULTATION_DCONSULTATION_END_RAW || null,
              com202021_core_test.LOCATION_DATA_TLOC_ECOZONE || null,
              com202021_core_test.CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51 ||
                null,
              com202021_core_test.LOCATION_DATA_TLOC_FD_BLOCK || null,
              com202021_core_test.CONSULTATION_DCONSULTATION_END || null,
              com202021_core_test.DEVICEID || null,
              com202021_core_test.LOCATION_DATA_TLOC_FD_DIVISION || null,
              com202021_core_test.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE ||
                null,
              com202021_core_test.END || null,
              com202021_core_test.CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79 ||
                null,
              com202021_core_test.PHONENUMBER || null,
              com202021_core_test.CONSULTATION_THOC_UNION || null,
              com202021_core_test.LOCATION_DATA_TLOC_ENTER_RANGE || null,
              com202021_core_test.START_RAW || null,
              com202021_core_test.CONSULTATION_USER_EMAIL || null,
              com202021_core_test.META_INSTANCE_ID || null,
              com202021_core_test.SIMSERIAL || null,
              com202021_core_test.NOTES || null,
              com202021_core_test.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS ||
                null,
              com202021_core_test.CONSULTATION_DCONSULTATION_START_RAW || null,
              com202021_core_test.CONSULTATION_USER_NAME || null,
              com202021_core_test.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO ||
                null,
              com202021_core_test.TODAY || null,
              com202021_core_test.LOCATION_DATA_TLOC_FD_CIR || null,
              com202021_core_test.START || null,
              com202021_core_test.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41 ||
                null,
              com202021_core_test.TODAY_RAW || null,
              com202021_core_test.SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69 ||
                null,
              com202021_core_test.CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT ||
                null,
              com202021_core_test.project_id || null,
              com202021_core_test.sort || null,
              com202021_core_test.last_log_id || null,
              com202021_core_test.restore_id || null,
              com202021_core_test.created_at || null,
              com202021_core_test.created_by || null,
              com202021_core_test.updated_at || null,
              com202021_core_test.updated_by || null,
              com202021_core_test.deleted_at || null,
              com202021_core_test.deleted_by || null,
              com202021_core_test.deleted_status || null,
              com202021_core_test.status || null,
            ],
            (_, resultSet) =>
              console.log(
                'com202021_core_test data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting com202021_core_test data',
                error,
                com202021_core_test,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching com202021_core_test data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const com202021_core_test_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/com202021_core_test?token=${token}`,
    );
    const data = await response.json();
    console.log('Total com202021_core_test items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_core_test`,
          [],
          () => {
            console.log('com202021_core_test table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_core_test (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,LOCATION_DATA_TLOC_FD_BEAT_TXT TEXT,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE TEXT,CONSULTATION_GENERATED_NOTE_NAME_11 TEXT,CONSULTATION_USER_CELL TEXT,LOCATION_DATA_TLOC_FD_CHAR TEXT,CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47 TEXT,CONSULTATION_CONSULTATION_PLACE TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY TEXT,CONSULTATION_DCONSULTATION TEXT,LOCATION_DATA_TLOC_ENTER_DIV TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_22 TEXT,LOCATION_DATA_TLOC_FD_RANGE TEXT,END_RAW TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_24 TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION TEXT,CONSULTATION_DCONSULTATION_START TEXT,LOCATION_DATA_TLOC_FD_BEAT TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4 TEXT,SUBSCRIBERID TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1 TEXT,CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2 TEXT,CONSULTATION_DCONSULTATION_END_RAW TEXT,LOCATION_DATA_TLOC_ECOZONE TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51 TEXT,LOCATION_DATA_TLOC_FD_BLOCK TEXT,CONSULTATION_DCONSULTATION_END TEXT,DEVICEID TEXT,LOCATION_DATA_TLOC_FD_DIVISION TEXT,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE TEXT,END TEXT,CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79 TEXT,PHONENUMBER TEXT,CONSULTATION_THOC_UNION TEXT,LOCATION_DATA_TLOC_ENTER_RANGE TEXT,START_RAW TEXT,CONSULTATION_USER_EMAIL TEXT,META_INSTANCE_ID TEXT,SIMSERIAL TEXT,NOTES TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS TEXT,CONSULTATION_DCONSULTATION_START_RAW TEXT,CONSULTATION_USER_NAME TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO TEXT,TODAY TEXT,LOCATION_DATA_TLOC_FD_CIR TEXT,START TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41 TEXT,TODAY_RAW TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69 TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT)`,
          [],
          () => {
            console.log('com202021_core_test table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching com202021_core_test data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const com202021_core_test_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM com202021_core_test`, // Query the com202021_core_test table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying com202021_core_test`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const com202021_core_test_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM com202021_core_test`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from com202021_core_test:', resultSet);

          try {
            await com202021_core_test_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from com202021_core_test`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const com202021_core_test_create = com202021_core_test => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert com202021_core_test
      tx.executeSql(
        `INSERT INTO com202021_core_test (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_MODEL_VERSION,_UI_VERSION,_IS_COMPLETE,_SUBMISSION_DATE,_MARKED_AS_COMPLETE_DATE,LOCATION_DATA_TLOC_FD_BEAT_TXT,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE,CONSULTATION_GENERATED_NOTE_NAME_11,CONSULTATION_USER_CELL,LOCATION_DATA_TLOC_FD_CHAR,CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47,CONSULTATION_CONSULTATION_PLACE,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY,CONSULTATION_DCONSULTATION,LOCATION_DATA_TLOC_ENTER_DIV,LOCATION_DATA_GENERATED_NOTE_NAME_22,LOCATION_DATA_TLOC_FD_RANGE,END_RAW,LOCATION_DATA_GENERATED_NOTE_NAME_24,CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION,CONSULTATION_DCONSULTATION_START,LOCATION_DATA_TLOC_FD_BEAT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4,SUBSCRIBERID,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1,CONSULTAT
ION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2,CONSULTATION_DCONSULTATION_END_RAW,LOCATION_DATA_TLOC_ECOZONE,CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51,LOCATION_DATA_TLOC_FD_BLOCK,CONSULTATION_DCONSULTATION_END,DEVICEID,LOCATION_DATA_TLOC_FD_DIVISION,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE,END,CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79,PHONENUMBER,CONSULTATION_THOC_UNION,LOCATION_DATA_TLOC_ENTER_RANGE,START_RAW,CONSULTATION_USER_EMAIL,META_INSTANCE_ID,SIMSERIAL,NOTES,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS,CONSULTATION_DCONSULTATION_START_RAW,CONSULTATION_USER_NAME,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO,TODAY,LOCATION_DATA_TLOC_FD_CIR,START,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41,TODAY_RAW,SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69,CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT,project_id,sort,last_log_id,restore_id,created_at,create
d_by,updated_at,updated_by,deleted_at,deleted_by,deleted_status,status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          com202021_core_test._URI || null,
          com202021_core_test._CREATOR_URI_USER || null,
          com202021_core_test._CREATION_DATE || null,
          com202021_core_test._LAST_UPDATE_URI_USER || null,
          com202021_core_test._LAST_UPDATE_DATE || null,
          com202021_core_test._MODEL_VERSION || null,
          com202021_core_test._UI_VERSION || null,
          com202021_core_test._IS_COMPLETE || null,
          com202021_core_test._SUBMISSION_DATE || null,
          com202021_core_test._MARKED_AS_COMPLETE_DATE || null,
          com202021_core_test.LOCATION_DATA_TLOC_FD_BEAT_TXT || null,
          com202021_core_test.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE ||
            null,
          com202021_core_test.CONSULTATION_GENERATED_NOTE_NAME_11 || null,
          com202021_core_test.CONSULTATION_USER_CELL || null,
          com202021_core_test.LOCATION_DATA_TLOC_FD_CHAR || null,
          com202021_core_test.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47 ||
            null,
          com202021_core_test.CONSULTATION_CONSULTATION_PLACE || null,
          com202021_core_test.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY ||
            null,
          com202021_core_test.CONSULTATION_DCONSULTATION || null,
          com202021_core_test.LOCATION_DATA_TLOC_ENTER_DIV || null,
          com202021_core_test.LOCATION_DATA_GENERATED_NOTE_NAME_22 || null,
          com202021_core_test.LOCATION_DATA_TLOC_FD_RANGE || null,
          com202021_core_test.END_RAW || null,
          com202021_core_test.LOCATION_DATA_GENERATED_NOTE_NAME_24 || null,
          com202021_core_test.CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION ||
            null,
          com202021_core_test.CONSULTATION_DCONSULTATION_START || null,
          com202021_core_test.LOCATION_DATA_TLOC_FD_BEAT || null,
          com202021_core_test.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8 || null,
          com202021_core_test.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5 || null,
          com202021_core_test.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6 || null,
          com202021_core_test.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3 || null,
          com202021_core_test.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4 || null,
          com202021_core_test.SUBSCRIBERID || null,
          com202021_core_test.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1 || null,
          com202021_core_test.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES ||
            null,
          com202021_core_test.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2 || null,
          com202021_core_test.CONSULTATION_DCONSULTATION_END_RAW || null,
          com202021_core_test.LOCATION_DATA_TLOC_ECOZONE || null,
          com202021_core_test.CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51 ||
            null,
          com202021_core_test.LOCATION_DATA_TLOC_FD_BLOCK || null,
          com202021_core_test.CONSULTATION_DCONSULTATION_END || null,
          com202021_core_test.DEVICEID || null,
          com202021_core_test.LOCATION_DATA_TLOC_FD_DIVISION || null,
          com202021_core_test.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE ||
            null,
          com202021_core_test.END || null,
          com202021_core_test.CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79 ||
            null,
          com202021_core_test.PHONENUMBER || null,
          com202021_core_test.CONSULTATION_THOC_UNION || null,
          com202021_core_test.LOCATION_DATA_TLOC_ENTER_RANGE || null,
          com202021_core_test.START_RAW || null,
          com202021_core_test.CONSULTATION_USER_EMAIL || null,
          com202021_core_test.META_INSTANCE_ID || null,
          com202021_core_test.SIMSERIAL || null,
          com202021_core_test.NOTES || null,
          com202021_core_test.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS ||
            null,
          com202021_core_test.CONSULTATION_DCONSULTATION_START_RAW || null,
          com202021_core_test.CONSULTATION_USER_NAME || null,
          com202021_core_test.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO ||
            null,
          com202021_core_test.TODAY || null,
          com202021_core_test.LOCATION_DATA_TLOC_FD_CIR || null,
          com202021_core_test.START || null,
          com202021_core_test.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41 ||
            null,
          com202021_core_test.TODAY_RAW || null,
          com202021_core_test.SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69 ||
            null,
          com202021_core_test.CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT ||
            null,
          com202021_core_test.project_id || null,
          com202021_core_test.sort || null,
          com202021_core_test.last_log_id || null,
          com202021_core_test.restore_id || null,
          com202021_core_test.created_at || null,
          com202021_core_test.created_by || null,
          com202021_core_test.updated_at || null,
          com202021_core_test.updated_by || null,
          com202021_core_test.deleted_at || null,
          com202021_core_test.deleted_by || null,
          com202021_core_test.deleted_status || null,
          com202021_core_test.status || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const gener43_2021_core_api = async () => {
  try {
    const response = await fetch(`${baseApi}/gener43_2021_core?token=${token}`);
    const data = await response.json();
    console.log('Total gener43_2021_core items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_core`,
          [],
          () => {
            //console.log('gener43_2021_core table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_core (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_LNG TEXT,FBLI_FA_TLOC_FD_BEAT TEXT,LOGISTICS3_COUNTRYBOAT_CONDITION TEXT,LOGISTICS4_GFIREARMS_303RIFLE TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA TEXT,LOGISTICS4_OTHERS_WATER_TRA TEXT,BO_INFO_BO_CELL TEXT,LOGISTICS3_TVESSEL_CONDITION TEXT,RO_INFO_RO_CELL TEXT,LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL TEXT,LOGISTICS3_TVESSEL_AVAIL TEXT,FBLI_FA_TLOC_FD_BEAT_TXT TEXT,LOGISTICS3_SPEEDBOAT_CONDITION TEXT,FBLI_FA_TLOC_FD_DIVISION TEXT,LAND_TRANSPORTS_BICYCLE_AVAIL TEXT,LOGISTICS3_OTHERS_WATER_TRA_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA TEXT,SUBSCRIBERID TEXT,GUSER_USER TEXT,RO_INFO_NAME_OF_RO TEXT,FBLI_FA_TLOC_FD_BLOCK TEXT,DEVICEID TEXT,LAND_TRANSPORTS_MOTORB_CONDITION TEXT,FBLI_GENERATED_NOTE_NAME_18 TEXT,LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74 TEXT,LOGISTICS4_CHINESERIFLE_CONDITION TEXT,LOGISTICS3_SPEEDBOAT_AVAIL TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA TEXT,LOGISTICS4_GENERATED_NOTE_NAME_152 TEXT,LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA TEXT,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA TEXT,SIMSERIAL TEXT,GUSER_DCOLLECTION_RAW TEXT,LAND_TRANSPORTS_BICYCLE_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA TEXT,GUSER_GENERATED_NOTE_NAME_10 TEXT,LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA TEXT,BO_INFO_BO_NID TEXT,LAND_TRANSPORTS_GBI_CYCLE TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA TEXT,LOGISTICS3_GCOUNTRY_BOAT TEXT,LOGISTICS4_GFIREARMS_SLR TEXT,FBLI_FA_TLOC_FD_CIR TEXT,LAND_TRANSPORTS_MOTORB_AVAIL TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION TEXT,RO_INFO_RO_JOINING_DATE TEXT,LOGISTICS4_OTHERS_WATER_TRA_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA TEXT,RO_INFO_RO_RANK TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA TEXT,BO_INFO_BO_JOINING_DATE TEXT,GUSER_USER_CELL TEXT,RO_INFO_RO_NID TEXT,GUSER_TLOC_FD_BEAT_POINT_ALT TEXT,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_LAT TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA TEXT,LOGISTICS4_RIFLE303_CONDITION TEXT,GUSER_DCOLLECTION TEXT,END_RAW TEXT,BO_INFO_GENERATED_NOTE_NAME_106 TEXT,GENERATED_NOTE_NAME_81 TEXT,RO_INFO_GENERATED_NOTE_NAME_97 TEXT,FBLI_FA_GENERATED_NOTE_NAME_21 TEXT,LAND_TRANSPORTS_GENERATED_NOTE_NAME_125 TEXT,GUSER_BEAT_ADDRESS TEXT,LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA TEXT,BO_INFO_BO_JOINING_DATE_RAW TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_ACC TEXT,LOGISTICS3_COUNTRYBOAT_AVAIL TEXT,FBLI_CA_TLOC_AD_DISTRICT TEXT,BO_INFO_NAME_OF_BO TEXT,LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53 TEXT,LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA TEXT,LOGISTICS3_OTHERS_WATER_TRA TEXT,FBLI_TLOC_ECOZONE TEXT,BO_INFO_BO_RANK TEXT,LOGISTICS4_SLR_CONDITION TEXT,END TEXT,FBLI_FA_TLOC_FD_RANGE TEXT,RO_INFO_RO_JOINING_DATE_RAW TEXT,PHONENUMBER TEXT,LOGISTICS3_TRAWLER TEXT,LOGISTICS4_GFIREARMS_SHORTGUN TEXT,LOGISTICS4_SHORTGUN_CONDITION TEXT,START_RAW TEXT,LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS TEXT,BO_INFO_BO_MAIL TEXT,META_INSTANCE_ID TEXT,LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL TEXT,FBLI_CA_GENERATED_NOTE_NAME_33 TEXT,FBLI_CA_TLOC_AD_DIVISION TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65 TEXT,LOGISTICS4_OTHERS_WATER_TRA_AVAIL TEXT,LOGISTICS3_GSPEED_BOAT TEXT,LOGISTICS4_TFIREARMS_303RIFLE_AVAIL TEXT,LOGISTICS4_GFIREARMS_CHINESERIFLE TEXT,TODAY TEXT,FBLI_FA_TLOC_FD_CHAR TEXT,LAND_TRANSPORTS_GMOTORBIKE TEXT,LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA TEXT,FBLI_FA_TLOC_ENTER_RANGE TEXT,LAND_STATISTICS_AREA_SUM TEXT,RO_INFO_RO_MAIL TEXT,GENERATED_NOTE_NAME_123 TEXT,START TEXT,FBLI_CA_UNION TEXT,FBLI_FA_TLOC_ENTER_DIV TEXT,TODAY_RAW TEXT,GENERATED_NOTE_NAME_94 TEXT,LOGISTICS3_OTHERS_WATER_TRA_AVAIL TEXT,GENERATED_NOTE_NAME_95 TEXT,LOGISTICS4_TFIREARMS_SLR_AVAIL TEXT,LOGISTICS3_GENERATED_NOTE_NAME_137 TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT,LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_SKM TEXT,LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_SKM TEXT,LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_SKM TEXT)`,
          [],
          () => {
            //console.log('gener43_2021_core table created successfully');
          },
          reject,
        );

        data.forEach(gener43_2021_core => {
          tx.executeSql(
            `INSERT INTO gener43_2021_core VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              gener43_2021_core._URI || null,
              gener43_2021_core._CREATOR_URI_USER || null,
              gener43_2021_core._CREATION_DATE || null,
              gener43_2021_core._LAST_UPDATE_URI_USER || null,
              gener43_2021_core._LAST_UPDATE_DATE || null,
              gener43_2021_core._MODEL_VERSION || null,
              gener43_2021_core._UI_VERSION || null,
              gener43_2021_core._IS_COMPLETE || null,
              gener43_2021_core._SUBMISSION_DATE || null,
              gener43_2021_core._MARKED_AS_COMPLETE_DATE || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA ||
                null,
              gener43_2021_core.GUSER_TLOC_FD_BEAT_POINT_LNG || null,
              gener43_2021_core.FBLI_FA_TLOC_FD_BEAT || null,
              gener43_2021_core.LOGISTICS3_COUNTRYBOAT_CONDITION || null,
              gener43_2021_core.LOGISTICS4_GFIREARMS_303RIFLE || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA ||
                null,
              gener43_2021_core.LOGISTICS4_OTHERS_WATER_TRA || null,
              gener43_2021_core.BO_INFO_BO_CELL || null,
              gener43_2021_core.LOGISTICS3_TVESSEL_CONDITION || null,
              gener43_2021_core.RO_INFO_RO_CELL || null,
              gener43_2021_core.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL || null,
              gener43_2021_core.LOGISTICS3_TVESSEL_AVAIL || null,
              gener43_2021_core.FBLI_FA_TLOC_FD_BEAT_TXT || null,
              gener43_2021_core.LOGISTICS3_SPEEDBOAT_CONDITION || null,
              gener43_2021_core.FBLI_FA_TLOC_FD_DIVISION || null,
              gener43_2021_core.LAND_TRANSPORTS_BICYCLE_AVAIL || null,
              gener43_2021_core.LOGISTICS3_OTHERS_WATER_TRA_CONDITION || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA ||
                null,
              gener43_2021_core.SUBSCRIBERID || null,
              gener43_2021_core.GUSER_USER || null,
              gener43_2021_core.RO_INFO_NAME_OF_RO || null,
              gener43_2021_core.FBLI_FA_TLOC_FD_BLOCK || null,
              gener43_2021_core.DEVICEID || null,
              gener43_2021_core.LAND_TRANSPORTS_MOTORB_CONDITION || null,
              gener43_2021_core.FBLI_GENERATED_NOTE_NAME_18 || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74 ||
                null,
              gener43_2021_core.LOGISTICS4_CHINESERIFLE_CONDITION || null,
              gener43_2021_core.LOGISTICS3_SPEEDBOAT_AVAIL || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA ||
                null,
              gener43_2021_core.LOGISTICS4_GENERATED_NOTE_NAME_152 || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA ||
                null,
              gener43_2021_core.SIMSERIAL || null,
              gener43_2021_core.GUSER_DCOLLECTION_RAW || null,
              gener43_2021_core.LAND_TRANSPORTS_BICYCLE_CONDITION || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA ||
                null,
              gener43_2021_core.GUSER_GENERATED_NOTE_NAME_10 || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA ||
                null,
              gener43_2021_core.BO_INFO_BO_NID || null,
              gener43_2021_core.LAND_TRANSPORTS_GBI_CYCLE || null,
              gener43_2021_core.LAND_TRANSPORTS_OTHERS_LAND_TRA || null,
              gener43_2021_core.LOGISTICS3_GCOUNTRY_BOAT || null,
              gener43_2021_core.LOGISTICS4_GFIREARMS_SLR || null,
              gener43_2021_core.FBLI_FA_TLOC_FD_CIR || null,
              gener43_2021_core.LAND_TRANSPORTS_MOTORB_AVAIL || null,
              gener43_2021_core.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION ||
                null,
              gener43_2021_core.RO_INFO_RO_JOINING_DATE || null,
              gener43_2021_core.LOGISTICS4_OTHERS_WATER_TRA_CONDITION || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA ||
                null,
              gener43_2021_core.RO_INFO_RO_RANK || null,
              gener43_2021_core.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA ||
                null,
              gener43_2021_core.BO_INFO_BO_JOINING_DATE || null,
              gener43_2021_core.GUSER_USER_CELL || null,
              gener43_2021_core.RO_INFO_RO_NID || null,
              gener43_2021_core.GUSER_TLOC_FD_BEAT_POINT_ALT || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA ||
                null,
              gener43_2021_core.GUSER_TLOC_FD_BEAT_POINT_LAT || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA ||
                null,
              gener43_2021_core.LOGISTICS4_RIFLE303_CONDITION || null,
              gener43_2021_core.GUSER_DCOLLECTION || null,
              gener43_2021_core.END_RAW || null,
              gener43_2021_core.BO_INFO_GENERATED_NOTE_NAME_106 || null,
              gener43_2021_core.GENERATED_NOTE_NAME_81 || null,
              gener43_2021_core.RO_INFO_GENERATED_NOTE_NAME_97 || null,
              gener43_2021_core.FBLI_FA_GENERATED_NOTE_NAME_21 || null,
              gener43_2021_core.LAND_TRANSPORTS_GENERATED_NOTE_NAME_125 || null,
              gener43_2021_core.GUSER_BEAT_ADDRESS || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA ||
                null,
              gener43_2021_core.BO_INFO_BO_JOINING_DATE_RAW || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA ||
                null,
              gener43_2021_core.GUSER_TLOC_FD_BEAT_POINT_ACC || null,
              gener43_2021_core.LOGISTICS3_COUNTRYBOAT_AVAIL || null,
              gener43_2021_core.FBLI_CA_TLOC_AD_DISTRICT || null,
              gener43_2021_core.BO_INFO_NAME_OF_BO || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53 ||
                null,
              gener43_2021_core.LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA ||
                null,
              gener43_2021_core.LOGISTICS3_OTHERS_WATER_TRA || null,
              gener43_2021_core.FBLI_TLOC_ECOZONE || null,
              gener43_2021_core.BO_INFO_BO_RANK || null,
              gener43_2021_core.LOGISTICS4_SLR_CONDITION || null,
              gener43_2021_core.END || null,
              gener43_2021_core.FBLI_FA_TLOC_FD_RANGE || null,
              gener43_2021_core.RO_INFO_RO_JOINING_DATE_RAW || null,
              gener43_2021_core.PHONENUMBER || null,
              gener43_2021_core.LOGISTICS3_TRAWLER || null,
              gener43_2021_core.LOGISTICS4_GFIREARMS_SHORTGUN || null,
              gener43_2021_core.LOGISTICS4_SHORTGUN_CONDITION || null,
              gener43_2021_core.START_RAW || null,
              gener43_2021_core.LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS || null,
              gener43_2021_core.BO_INFO_BO_MAIL || null,
              gener43_2021_core.META_INSTANCE_ID || null,
              gener43_2021_core.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL || null,
              gener43_2021_core.FBLI_CA_GENERATED_NOTE_NAME_33 || null,
              gener43_2021_core.FBLI_CA_TLOC_AD_DIVISION || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65 ||
                null,
              gener43_2021_core.LOGISTICS4_OTHERS_WATER_TRA_AVAIL || null,
              gener43_2021_core.LOGISTICS3_GSPEED_BOAT || null,
              gener43_2021_core.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL || null,
              gener43_2021_core.LOGISTICS4_GFIREARMS_CHINESERIFLE || null,
              gener43_2021_core.TODAY || null,
              gener43_2021_core.FBLI_FA_TLOC_FD_CHAR || null,
              gener43_2021_core.LAND_TRANSPORTS_GMOTORBIKE || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA ||
                null,
              gener43_2021_core.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA ||
                null,
              gener43_2021_core.FBLI_FA_TLOC_ENTER_RANGE || null,
              gener43_2021_core.LAND_STATISTICS_AREA_SUM || null,
              gener43_2021_core.RO_INFO_RO_MAIL || null,
              gener43_2021_core.GENERATED_NOTE_NAME_123 || null,
              gener43_2021_core.START || null,
              gener43_2021_core.FBLI_CA_UNION || null,
              gener43_2021_core.FBLI_FA_TLOC_ENTER_DIV || null,
              gener43_2021_core.TODAY_RAW || null,
              gener43_2021_core.GENERATED_NOTE_NAME_94 || null,
              gener43_2021_core.LOGISTICS3_OTHERS_WATER_TRA_AVAIL || null,
              gener43_2021_core.GENERATED_NOTE_NAME_95 || null,
              gener43_2021_core.LOGISTICS4_TFIREARMS_SLR_AVAIL || null,
              gener43_2021_core.LOGISTICS3_GENERATED_NOTE_NAME_137 || null,
              gener43_2021_core.project_id || null,
              gener43_2021_core.sort || null,
              gener43_2021_core.last_log_id || null,
              gener43_2021_core.restore_id || null,
              gener43_2021_core.created_at || null,
              gener43_2021_core.created_by || null,
              gener43_2021_core.updated_at || null,
              gener43_2021_core.updated_by || null,
              gener43_2021_core.deleted_at || null,
              gener43_2021_core.deleted_by || null,
              gener43_2021_core.deleted_status || null,
              gener43_2021_core.status || null,
              gener43_2021_core.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_SKM ||
                null,
              gener43_2021_core.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_SKM ||
                null,
              gener43_2021_core.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_SKM ||
                null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'gener43_2021_core data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting gener43_2021_core data',
                  error,
                  gener43_2021_core,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching gener43_2021_core data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const gener43_2021_core_api2 = async () => {
  try {
    const response = await fetch(`${baseApi}/gener43_2021_core?token=${token}`);
    const data = await response.json();
    console.log('Total gener43_2021_core items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_core`,
          [],
          () => {
            console.log('gener43_2021_core table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_core (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_LNG TEXT,FBLI_FA_TLOC_FD_BEAT TEXT,LOGISTICS3_COUNTRYBOAT_CONDITION TEXT,LOGISTICS4_GFIREARMS_303RIFLE TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA TEXT,LOGISTICS4_OTHERS_WATER_TRA TEXT,BO_INFO_BO_CELL TEXT,LOGISTICS3_TVESSEL_CONDITION TEXT,RO_INFO_RO_CELL TEXT,LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL TEXT,LOGISTICS3_TVESSEL_AVAIL TEXT,FBLI_FA_TLOC_FD_BEAT_TXT TEXT,LOGISTICS3_SPEEDBOAT_CONDITION TEXT,FBLI_FA_TLOC_FD_DIVISION TEXT,LAND_TRANSPORTS_BICYCLE_AVAIL TEXT,LOGISTICS3_OTHERS_WATER_TRA_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA TEXT,SUBSCRIBERID TEXT,GUSER_USER TEXT,RO_INFO_NAME_OF_RO TEXT,FBLI_FA_TLOC_FD_BLOCK TEXT,DEVICEID TEXT,LAND_TRANSPORTS_MOTORB_CONDITION TEXT,FBLI_GENERATED_NOTE_NAME_18 TEXT,LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74 TEXT,LOGISTICS4_CHINESERIFLE_CONDITION TEXT,LOGISTICS3_SPEEDBOAT_AVAIL TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA TEXT,LOGISTICS4_GENERATED_NOTE_NAME_152 TEXT,LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA TEXT,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA TEXT,SIMSERIAL TEXT,GUSER_DCOLLECTION_RAW TEXT,LAND_TRANSPORTS_BICYCLE_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA TEXT,GUSER_GENERATED_NOTE_NAME_10 TEXT,LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA TEXT,BO_INFO_BO_NID TEXT,LAND_TRANSPORTS_GBI_CYCLE TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA TEXT,LOGISTICS3_GCOUNTRY_BOAT TEXT,LOGISTICS4_GFIREARMS_SLR TEXT,FBLI_FA_TLOC_FD_CIR TEXT,LAND_TRANSPORTS_MOTORB_AVAIL TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION TEXT,RO_INFO_RO_JOINING_DATE TEXT,LOGISTICS4_OTHERS_WATER_TRA_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA TEXT,RO_INFO_RO_RANK TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA TEXT,BO_INFO_BO_JOINING_DATE TEXT,GUSER_USER_CELL TEXT,RO_INFO_RO_NID TEXT,GUSER_TLOC_FD_BEAT_POINT_ALT TEXT,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_LAT TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA TEXT,LOGISTICS4_RIFLE303_CONDITION TEXT,GUSER_DCOLLECTION TEXT,END_RAW TEXT,BO_INFO_GENERATED_NOTE_NAME_106 TEXT,GENERATED_NOTE_NAME_81 TEXT,RO_INFO_GENERATED_NOTE_NAME_97 TEXT,FBLI_FA_GENERATED_NOTE_NAME_21 TEXT,LAND_TRANSPORTS_GENERATED_NOTE_NAME_125 TEXT,GUSER_BEAT_ADDRESS TEXT,LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA TEXT,BO_INFO_BO_JOINING_DATE_RAW TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_ACC TEXT,LOGISTICS3_COUNTRYBOAT_AVAIL TEXT,FBLI_CA_TLOC_AD_DISTRICT TEXT,BO_INFO_NAME_OF_BO TEXT,LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53 TEXT,LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA TEXT,LOGISTICS3_OTHERS_WATER_TRA TEXT,FBLI_TLOC_ECOZONE TEXT,BO_INFO_BO_RANK TEXT,LOGISTICS4_SLR_CONDITION TEXT,END TEXT,FBLI_FA_TLOC_FD_RANGE TEXT,RO_INFO_RO_JOINING_DATE_RAW TEXT,PHONENUMBER TEXT,LOGISTICS3_TRAWLER TEXT,LOGISTICS4_GFIREARMS_SHORTGUN TEXT,LOGISTICS4_SHORTGUN_CONDITION TEXT,START_RAW TEXT,LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS TEXT,BO_INFO_BO_MAIL TEXT,META_INSTANCE_ID TEXT,LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL TEXT,FBLI_CA_GENERATED_NOTE_NAME_33 TEXT,FBLI_CA_TLOC_AD_DIVISION TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65 TEXT,LOGISTICS4_OTHERS_WATER_TRA_AVAIL TEXT,LOGISTICS3_GSPEED_BOAT TEXT,LOGISTICS4_TFIREARMS_303RIFLE_AVAIL TEXT,LOGISTICS4_GFIREARMS_CHINESERIFLE TEXT,TODAY TEXT,FBLI_FA_TLOC_FD_CHAR TEXT,LAND_TRANSPORTS_GMOTORBIKE TEXT,LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA TEXT,FBLI_FA_TLOC_ENTER_RANGE TEXT,LAND_STATISTICS_AREA_SUM TEXT,RO_INFO_RO_MAIL TEXT,GENERATED_NOTE_NAME_123 TEXT,START TEXT,FBLI_CA_UNION TEXT,FBLI_FA_TLOC_ENTER_DIV TEXT,TODAY_RAW TEXT,GENERATED_NOTE_NAME_94 TEXT,LOGISTICS3_OTHERS_WATER_TRA_AVAIL TEXT,GENERATED_NOTE_NAME_95 TEXT,LOGISTICS4_TFIREARMS_SLR_AVAIL TEXT,LOGISTICS3_GENERATED_NOTE_NAME_137 TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT,LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_SKM TEXT,LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_SKM TEXT,LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_SKM TEXT)`,
          [],
          () => {
            console.log('gener43_2021_core table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching gener43_2021_core data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const gener43_2021_core_list = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM gener43_2021_core where _URI=?`, // Query the gener43_2021_core table
        [uri],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          console.log(data);
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying gener43_2021_core`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const gener43_2021_core_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM gener43_2021_core`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from gener43_2021_core:', resultSet);

          try {
            await gener43_2021_core_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from gener43_2021_core`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
// export const gener43_2021_core_create = gener43_2021_core => {
//   return new Promise((resolve, reject) => {
//     database.transaction(tx => {
//       // Insert gener43_2021_core
//       tx.executeSql(
//         `INSERT INTO gener43_2021_core (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_MODEL_VERSION,_UI_VERSION,_IS_COMPLETE,_SUBMISSION_DATE,_MARKED_AS_COMPLETE_DATE,LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA,GUSER_TLOC_FD_BEAT_POINT_LNG,FBLI_FA_TLOC_FD_BEAT,LOGISTICS3_COUNTRYBOAT_CONDITION,LOGISTICS4_GFIREARMS_303RIFLE,LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA,LOGISTICS4_OTHERS_WATER_TRA,BO_INFO_BO_CELL,LOGISTICS3_TVESSEL_CONDITION,RO_INFO_RO_CELL,LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL,LOGISTICS3_TVESSEL_AVAIL,FBLI_FA_TLOC_FD_BEAT_TXT,LOGISTICS3_SPEEDBOAT_CONDITION,FBLI_FA_TLOC_FD_DIVISION,LAND_TRANSPORTS_BICYCLE_AVAIL,LOGISTICS3_OTHERS_WATER_TRA_CONDITION,LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA,SUBSCRIBERID,GUSER_USER,RO_INFO_NAME_OF_RO,FBLI_FA_TLOC_FD_BLOCK,DEVICEID,LAND_TRANSPORTS_MOTORB_CONDITION,FBLI_GENERATED_NOTE_NAME_18,LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74,LOGISTICS4_CHINESERIFLE_CONDITION,LOGISTICS3_SPEEDBOAT_AVAIL,LAND_STATISTICS_BEAT_MGT_APP
// ROACH_PA_WS_HA,LOGISTICS4_GENERATED_NOTE_NAME_152,LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA,SIMSERIAL,GUSER_DCOLLECTION_RAW,LAND_TRANSPORTS_BICYCLE_CONDITION,LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA,GUSER_GENERATED_NOTE_NAME_10,LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA,BO_INFO_BO_NID,LAND_TRANSPORTS_GBI_CYCLE,LAND_TRANSPORTS_OTHERS_LAND_TRA,LOGISTICS3_GCOUNTRY_BOAT,LOGISTICS4_GFIREARMS_SLR,FBLI_FA_TLOC_FD_CIR,LAND_TRANSPORTS_MOTORB_AVAIL,LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION,RO_INFO_RO_JOINING_DATE,LOGISTICS4_OTHERS_WATER_TRA_CONDITION,LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA,RO_INFO_RO_RANK,LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA,BO_INFO_BO_JOINING_DATE,GUSER_USER_CELL,RO_INFO_RO_NID,GUSER_TLOC_FD_BEAT_POINT_ALT,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA,GUSER_TLOC_FD_BEAT_POINT_LAT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA,LOGISTICS4_RIFLE303_CONDITION,GUSER_DCO
// LLECTION,END_RAW,BO_INFO_GENERATED_NOTE_NAME_106,GENERATED_NOTE_NAME_81,RO_INFO_GENERATED_NOTE_NAME_97,FBLI_FA_GENERATED_NOTE_NAME_21,LAND_TRANSPORTS_GENERATED_NOTE_NAME_125,GUSER_BEAT_ADDRESS,LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA,BO_INFO_BO_JOINING_DATE_RAW,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA,GUSER_TLOC_FD_BEAT_POINT_ACC,LOGISTICS3_COUNTRYBOAT_AVAIL,FBLI_CA_TLOC_AD_DISTRICT,BO_INFO_NAME_OF_BO,LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53,LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA,LOGISTICS3_OTHERS_WATER_TRA,FBLI_TLOC_ECOZONE,BO_INFO_BO_RANK,LOGISTICS4_SLR_CONDITION,END,FBLI_FA_TLOC_FD_RANGE,RO_INFO_RO_JOINING_DATE_RAW,PHONENUMBER,LOGISTICS3_TRAWLER,LOGISTICS4_GFIREARMS_SHORTGUN,LOGISTICS4_SHORTGUN_CONDITION,START_RAW,LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS,BO_INFO_BO_MAIL,META_INSTANCE_ID,LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL,FBLI_CA_GENERATED_NOTE_NAME_33,FBLI_CA_TLOC_AD_DIVISION,LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65,LOGISTICS4_OTHER
// S_WATER_TRA_AVAIL,LOGISTICS3_GSPEED_BOAT,LOGISTICS4_TFIREARMS_303RIFLE_AVAIL,LOGISTICS4_GFIREARMS_CHINESERIFLE,TODAY,FBLI_FA_TLOC_FD_CHAR,LAND_TRANSPORTS_GMOTORBIKE,LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA,FBLI_FA_TLOC_ENTER_RANGE,LAND_STATISTICS_AREA_SUM,RO_INFO_RO_MAIL,GENERATED_NOTE_NAME_123,START,FBLI_CA_UNION,FBLI_FA_TLOC_ENTER_DIV,TODAY_RAW,GENERATED_NOTE_NAME_94,LOGISTICS3_OTHERS_WATER_TRA_AVAIL,GENERATED_NOTE_NAME_95,LOGISTICS4_TFIREARMS_SLR_AVAIL,LOGISTICS3_GENERATED_NOTE_NAME_137,project_id,sort,last_log_id,restore_id,created_at,created_by,updated_at,updated_by,deleted_at,deleted_by,deleted_status,status,LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_SKM,LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_SKM,LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_SKM) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
//         [
//           gener43_2021_core._URI || null,
//           gener43_2021_core._CREATOR_URI_USER || null,
//           gener43_2021_core._CREATION_DATE || null,
//           gener43_2021_core._LAST_UPDATE_URI_USER || null,
//           gener43_2021_core._LAST_UPDATE_DATE || null,
//           gener43_2021_core._MODEL_VERSION || null,
//           gener43_2021_core._UI_VERSION || null,
//           gener43_2021_core._IS_COMPLETE || null,
//           gener43_2021_core._SUBMISSION_DATE || null,
//           gener43_2021_core._MARKED_AS_COMPLETE_DATE || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA ||
//             null,
//           gener43_2021_core.GUSER_TLOC_FD_BEAT_POINT_LNG || null,
//           gener43_2021_core.FBLI_FA_TLOC_FD_BEAT || null,
//           gener43_2021_core.LOGISTICS3_COUNTRYBOAT_CONDITION || null,
//           gener43_2021_core.LOGISTICS4_GFIREARMS_303RIFLE || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA ||
//             null,
//           gener43_2021_core.LOGISTICS4_OTHERS_WATER_TRA || null,
//           gener43_2021_core.BO_INFO_BO_CELL || null,
//           gener43_2021_core.LOGISTICS3_TVESSEL_CONDITION || null,
//           gener43_2021_core.RO_INFO_RO_CELL || null,
//           gener43_2021_core.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL || null,
//           gener43_2021_core.LOGISTICS3_TVESSEL_AVAIL || null,
//           gener43_2021_core.FBLI_FA_TLOC_FD_BEAT_TXT || null,
//           gener43_2021_core.LOGISTICS3_SPEEDBOAT_CONDITION || null,
//           gener43_2021_core.FBLI_FA_TLOC_FD_DIVISION || null,
//           gener43_2021_core.LAND_TRANSPORTS_BICYCLE_AVAIL || null,
//           gener43_2021_core.LOGISTICS3_OTHERS_WATER_TRA_CONDITION || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA ||
//             null,
//           gener43_2021_core.SUBSCRIBERID || null,
//           gener43_2021_core.GUSER_USER || null,
//           gener43_2021_core.RO_INFO_NAME_OF_RO || null,
//           gener43_2021_core.FBLI_FA_TLOC_FD_BLOCK || null,
//           gener43_2021_core.DEVICEID || null,
//           gener43_2021_core.LAND_TRANSPORTS_MOTORB_CONDITION || null,
//           gener43_2021_core.FBLI_GENERATED_NOTE_NAME_18 || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74 ||
//             null,
//           gener43_2021_core.LOGISTICS4_CHINESERIFLE_CONDITION || null,
//           gener43_2021_core.LOGISTICS3_SPEEDBOAT_AVAIL || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA || null,
//           gener43_2021_core.LOGISTICS4_GENERATED_NOTE_NAME_152 || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA || null,
//           gener43_2021_core.SIMSERIAL || null,
//           gener43_2021_core.GUSER_DCOLLECTION_RAW || null,
//           gener43_2021_core.LAND_TRANSPORTS_BICYCLE_CONDITION || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA ||
//             null,
//           gener43_2021_core.GUSER_GENERATED_NOTE_NAME_10 || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA ||
//             null,
//           gener43_2021_core.BO_INFO_BO_NID || null,
//           gener43_2021_core.LAND_TRANSPORTS_GBI_CYCLE || null,
//           gener43_2021_core.LAND_TRANSPORTS_OTHERS_LAND_TRA || null,
//           gener43_2021_core.LOGISTICS3_GCOUNTRY_BOAT || null,
//           gener43_2021_core.LOGISTICS4_GFIREARMS_SLR || null,
//           gener43_2021_core.FBLI_FA_TLOC_FD_CIR || null,
//           gener43_2021_core.LAND_TRANSPORTS_MOTORB_AVAIL || null,
//           gener43_2021_core.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION || null,
//           gener43_2021_core.RO_INFO_RO_JOINING_DATE || null,
//           gener43_2021_core.LOGISTICS4_OTHERS_WATER_TRA_CONDITION || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA ||
//             null,
//           gener43_2021_core.RO_INFO_RO_RANK || null,
//           gener43_2021_core.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA ||
//             null,
//           gener43_2021_core.BO_INFO_BO_JOINING_DATE || null,
//           gener43_2021_core.GUSER_USER_CELL || null,
//           gener43_2021_core.RO_INFO_RO_NID || null,
//           gener43_2021_core.GUSER_TLOC_FD_BEAT_POINT_ALT || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA || null,
//           gener43_2021_core.GUSER_TLOC_FD_BEAT_POINT_LAT || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA ||
//             null,
//           gener43_2021_core.LOGISTICS4_RIFLE303_CONDITION || null,
//           gener43_2021_core.GUSER_DCOLLECTION || null,
//           gener43_2021_core.END_RAW || null,
//           gener43_2021_core.BO_INFO_GENERATED_NOTE_NAME_106 || null,
//           gener43_2021_core.GENERATED_NOTE_NAME_81 || null,
//           gener43_2021_core.RO_INFO_GENERATED_NOTE_NAME_97 || null,
//           gener43_2021_core.FBLI_FA_GENERATED_NOTE_NAME_21 || null,
//           gener43_2021_core.LAND_TRANSPORTS_GENERATED_NOTE_NAME_125 || null,
//           gener43_2021_core.GUSER_BEAT_ADDRESS || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA ||
//             null,
//           gener43_2021_core.BO_INFO_BO_JOINING_DATE_RAW || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA || null,
//           gener43_2021_core.GUSER_TLOC_FD_BEAT_POINT_ACC || null,
//           gener43_2021_core.LOGISTICS3_COUNTRYBOAT_AVAIL || null,
//           gener43_2021_core.FBLI_CA_TLOC_AD_DISTRICT || null,
//           gener43_2021_core.BO_INFO_NAME_OF_BO || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53 ||
//             null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA ||
//             null,
//           gener43_2021_core.LOGISTICS3_OTHERS_WATER_TRA || null,
//           gener43_2021_core.FBLI_TLOC_ECOZONE || null,
//           gener43_2021_core.BO_INFO_BO_RANK || null,
//           gener43_2021_core.LOGISTICS4_SLR_CONDITION || null,
//           gener43_2021_core.END || null,
//           gener43_2021_core.FBLI_FA_TLOC_FD_RANGE || null,
//           gener43_2021_core.RO_INFO_RO_JOINING_DATE_RAW || null,
//           gener43_2021_core.PHONENUMBER || null,
//           gener43_2021_core.LOGISTICS3_TRAWLER || null,
//           gener43_2021_core.LOGISTICS4_GFIREARMS_SHORTGUN || null,
//           gener43_2021_core.LOGISTICS4_SHORTGUN_CONDITION || null,
//           gener43_2021_core.START_RAW || null,
//           gener43_2021_core.LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS || null,
//           gener43_2021_core.BO_INFO_BO_MAIL || null,
//           gener43_2021_core.META_INSTANCE_ID || null,
//           gener43_2021_core.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL || null,
//           gener43_2021_core.FBLI_CA_GENERATED_NOTE_NAME_33 || null,
//           gener43_2021_core.FBLI_CA_TLOC_AD_DIVISION || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65 ||
//             null,
//           gener43_2021_core.LOGISTICS4_OTHERS_WATER_TRA_AVAIL || null,
//           gener43_2021_core.LOGISTICS3_GSPEED_BOAT || null,
//           gener43_2021_core.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL || null,
//           gener43_2021_core.LOGISTICS4_GFIREARMS_CHINESERIFLE || null,
//           gener43_2021_core.TODAY || null,
//           gener43_2021_core.FBLI_FA_TLOC_FD_CHAR || null,
//           gener43_2021_core.LAND_TRANSPORTS_GMOTORBIKE || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA ||
//             null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA ||
//             null,
//           gener43_2021_core.FBLI_FA_TLOC_ENTER_RANGE || null,
//           gener43_2021_core.LAND_STATISTICS_AREA_SUM || null,
//           gener43_2021_core.RO_INFO_RO_MAIL || null,
//           gener43_2021_core.GENERATED_NOTE_NAME_123 || null,
//           gener43_2021_core.START || null,
//           gener43_2021_core.FBLI_CA_UNION || null,
//           gener43_2021_core.FBLI_FA_TLOC_ENTER_DIV || null,
//           gener43_2021_core.TODAY_RAW || null,
//           gener43_2021_core.GENERATED_NOTE_NAME_94 || null,
//           gener43_2021_core.LOGISTICS3_OTHERS_WATER_TRA_AVAIL || null,
//           gener43_2021_core.GENERATED_NOTE_NAME_95 || null,
//           gener43_2021_core.LOGISTICS4_TFIREARMS_SLR_AVAIL || null,
//           gener43_2021_core.LOGISTICS3_GENERATED_NOTE_NAME_137 || null,
//           gener43_2021_core.project_id || null,
//           gener43_2021_core.sort || null,
//           gener43_2021_core.last_log_id || null,
//           gener43_2021_core.restore_id || null,
//           gener43_2021_core.created_at || null,
//           gener43_2021_core.created_by || null,
//           gener43_2021_core.updated_at || null,
//           gener43_2021_core.updated_by || null,
//           gener43_2021_core.deleted_at || null,
//           gener43_2021_core.deleted_by || null,
//           gener43_2021_core.deleted_status || null,
//           gener43_2021_core.status || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_SKM ||
//             null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_SKM || null,
//           gener43_2021_core.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_SKM ||
//             null,
//         ],
//         (tx, results) => {
//           console.log('Data inserted successfully:', results);
//           resolve(results);
//         },
//         (tx, error) => {
//           console.error('Error inserting data:', error);
//           reject(error);
//         },
//       );
//     });
//   });
// };
export const gener43_2021_core_create = (gener43_2021_core) => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction...');
    database.transaction(
      tx => {
        console.log('Inside transaction...');

        // Create table if it does not exist
        // tx.executeSql(
        //   `CREATE TABLE IF NOT EXISTS gener43_2021_core (
        //     id INTEGER PRIMARY KEY AUTOINCREMENT,
        //     _uri TEXT
        //   )
        //   ;`,
        //   [],
        //   () => console.log('Table dropeed.'),
        //   (tx, error) => {
        //     console.error('Error creating table:', error.message || error);
        //     reject(error); // Stop if table creation fails
        //   },
        // );

        // Insert gener43_2021_core
        tx.executeSql(
          `INSERT INTO gener43_2021_core (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_DATE,_LAST_UPDATE_URI_USER,GUSER_DCOLLECTION_RAW,GUSER_USER,GUSER_USER_CELL,GUSER_BEAT_ADDRESS,GUSER_TLOC_FD_BEAT_POINT_LAT,GUSER_TLOC_FD_BEAT_POINT_LNG,FBLI_TLOC_ECOZONE,FBLI_FA_TLOC_FD_CIR,FBLI_FA_TLOC_FD_DIVISION,FBLI_FA_TLOC_FD_RANGE,FBLI_FA_TLOC_FD_BEAT,FBLI_FA_TLOC_FD_BLOCK,FBLI_FA_TLOC_FD_CHAR,FBLI_CA_TLOC_AD_DIVISION,FBLI_CA_TLOC_AD_DISTRICT,FBLI_CA_UNION,CREATED_BY,UPDATED_BY)
           VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
          [
            gener43_2021_core._URI || '',
            gener43_2021_core._CREATOR_URI_USER || '',
            gener43_2021_core._CREATION_DATE || '',
            gener43_2021_core._LAST_UPDATE_DATE || '',
            gener43_2021_core._LAST_UPDATE_URI_USER || '',
            gener43_2021_core.GUSER_DCOLLECTION_RAW || '',
            gener43_2021_core.GUSER_USER || '',
            gener43_2021_core.GUSER_USER_CELL || '',
            gener43_2021_core.GUSER_BEAT_ADDRESS || '',
            gener43_2021_core.GUSER_TLOC_FD_BEAT_POINT_LAT || '',
            gener43_2021_core.GUSER_TLOC_FD_BEAT_POINT_LNG || '',
            gener43_2021_core.FBLI_TLOC_ECOZONE || '',
            gener43_2021_core.FBLI_FA_TLOC_FD_CIR || '',
            gener43_2021_core.FBLI_FA_TLOC_FD_DIVISION || '',
            gener43_2021_core.FBLI_FA_TLOC_FD_RANGE || '',
            gener43_2021_core.FBLI_FA_TLOC_FD_BEAT || '',
            gener43_2021_core.FBLI_FA_TLOC_FD_BLOCK || '',
            gener43_2021_core.FBLI_FA_TLOC_FD_CHAR || '',
            gener43_2021_core.FBLI_CA_TLOC_AD_DIVISION || '',
            gener43_2021_core.FBLI_CA_TLOC_AD_DISTRICT || '',
            gener43_2021_core.FBLI_CA_UNION || '',
            gener43_2021_core.CREATED_BY || '',
              
              gener43_2021_core.UPDATED_BY || '',
          ],

          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error.message || error);
            reject(error);
          },
        );
      },
      error => {
        console.error('Transaction error:', error.message || error); // Log transaction-level errors
        reject(error);
      },
      () => {
        console.log('Transaction completed successfully.');
      },
    );
  });
};

export const gener43_2021_core_update = (uuid, updatedValues) => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for update...');
    database.transaction(
      tx => {
        console.log('Inside transaction...');

        // Update the record based on uuid with the provided values
        tx.executeSql(
          `UPDATE gener43_2021_core 
           SET 
             LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA = ?,
             LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA=?,
             LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA=?,
             LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA=?,
             LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA=?,
             LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA=?,
             LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA=?,
             LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS=?,

             LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA=?,
             LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA=?,
             LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA=?,
             LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA=?,
             LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA=?,
             LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA=?,

             LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA=?,
             LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA=?,
             LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_SKM=?,
             LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA=?,
             LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_SKM=?,
             LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA=?,
             LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_SKM=?
             
           WHERE _uri = ?`,
          [
            updatedValues.LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA ||
              '',
            updatedValues.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA || '',
            updatedValues.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA || '',
            updatedValues.LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA ||
              '',
            updatedValues.LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA || '',
            updatedValues.LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA ||
              '',
              updatedValues.LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA ||
              '',
              updatedValues.LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS ||
              '',






            updatedValues.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA || '',
            updatedValues.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA || '',
            updatedValues.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA || '',
            updatedValues.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA ||
              '',
            updatedValues.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA || '',
            updatedValues.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA ||
              '',




            updatedValues.LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA || '',
            updatedValues.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA ||
              '',
            updatedValues.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_SKM ||
              '',
            updatedValues.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA || '',
            updatedValues.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_SKM || '',
            updatedValues.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA || '',
            updatedValues.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_SKM || '',

            uuid, // Use uuid to match the correct record
          ],
          (tx, results) => {
            console.log('Data updated successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error updating data:', error.message || error);
            reject(error);
          },
        );
      },
      error => {
        console.error('Transaction error:', error.message || error);
        reject(error);
      },
      () => {
        console.log('Transaction completed successfully.');
      },
    );
  });
};

export const gener43_2021_core_update2 = (uuid, updatedValues) => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for update...');
    console.log(updatedValues, 'updated values.');
    database.transaction(
      tx => {
        console.log('Inside transaction...');

        // Update the record based on uuid with the provided values
        tx.executeSql(
          `UPDATE gener43_2021_core 
           SET 

            RO_INFO_NAME_OF_RO=?,
            RO_INFO_RO_RANK=?,
            RO_INFO_RO_JOINING_DATE_RAW=?,
            RO_INFO_RO_CELL=?,
            RO_INFO_RO_NID=?,
            RO_INFO_RO_MAIL=?,
            BO_INFO_NAME_OF_BO=?,
            BO_INFO_BO_RANK=?,
            BO_INFO_BO_JOINING_DATE_RAW=?,
            BO_INFO_BO_CELL=?,
            BO_INFO_BO_NID=?,
            BO_INFO_BO_MAIL=?,

            LAND_TRANSPORTS_MOTORB_AVAIL=?,
            LAND_TRANSPORTS_MOTORB_CONDITION=?,
            LAND_TRANSPORTS_BICYCLE_AVAIL=?,
            LAND_TRANSPORTS_BICYCLE_CONDITION=?,
            LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL=?,
            LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION=?,


            LOGISTICS3_SPEEDBOAT_AVAIL=?,
            LOGISTICS3_SPEEDBOAT_CONDITION=?,
            LOGISTICS3_TVESSEL_AVAIL=?,
            LOGISTICS3_TVESSEL_CONDITION=?,
            LOGISTICS3_COUNTRYBOAT_AVAIL=?,
            LOGISTICS3_COUNTRYBOAT_CONDITION=?,
            LOGISTICS3_OTHERS_WATER_TRA_AVAIL=?,
            LOGISTICS3_OTHERS_WATER_TRA_CONDITION=?,


            LOGISTICS4_TFIREARMS_303RIFLE_AVAIL=?,
            LOGISTICS4_RIFLE303_CONDITION=?,
            LOGISTICS4_TFIREARMS_SLR_AVAIL=?,
            LOGISTICS4_SLR_CONDITION=?,
            LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL=?,
            LOGISTICS4_SHORTGUN_CONDITION=?,
            LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL=?,
            LOGISTICS4_CHINESERIFLE_CONDITION=?,
            LOGISTICS4_OTHERS_WATER_TRA_AVAIL=?,
            LOGISTICS4_OTHERS_WATER_TRA_CONDITION=?

             
             
           WHERE _uri = ?`,
          [
            updatedValues.RO_INFO_NAME_OF_RO || '',
            updatedValues.RO_INFO_RO_RANK || '',
            updatedValues.RO_INFO_RO_JOINING_DATE_RAW || '',
            updatedValues.RO_INFO_RO_CELL || '',
            updatedValues.RO_INFO_RO_NID || '',
            updatedValues.RO_INFO_RO_MAIL || '',
            updatedValues.BO_INFO_NAME_OF_BO || '',
            updatedValues.BO_INFO_BO_RANK || '',
            updatedValues.BO_INFO_BO_JOINING_DATE_RAW || '',
            updatedValues.BO_INFO_BO_CELL || '',
            updatedValues.BO_INFO_BO_NID || '',
            updatedValues.BO_INFO_BO_MAIL || '',

            updatedValues.LAND_TRANSPORTS_MOTORB_AVAIL || '',
            updatedValues.LAND_TRANSPORTS_MOTORB_CONDITION || '',
            updatedValues.LAND_TRANSPORTS_BICYCLE_AVAIL || '',
            updatedValues.LAND_TRANSPORTS_BICYCLE_CONDITION || '',
            updatedValues.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL || '',
            updatedValues.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION || '',

            updatedValues.LOGISTICS3_SPEEDBOAT_AVAIL || '',
            updatedValues.LOGISTICS3_SPEEDBOAT_CONDITION || '',
            updatedValues.LOGISTICS3_TVESSEL_AVAIL || '',
            updatedValues.LOGISTICS3_TVESSEL_CONDITION || '',
            updatedValues.LOGISTICS3_COUNTRYBOAT_AVAIL || '',
            updatedValues.LOGISTICS3_COUNTRYBOAT_CONDITION || '',
            updatedValues.LOGISTICS3_OTHERS_WATER_TRA_AVAIL || '',
            updatedValues.LOGISTICS3_OTHERS_WATER_TRA_CONDITION || '',

            updatedValues.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL || '',
            updatedValues.LOGISTICS4_RIFLE303_CONDITION || '',
            updatedValues.LOGISTICS4_TFIREARMS_SLR_AVAIL || '',
            updatedValues.LOGISTICS4_SLR_CONDITION || '',
            updatedValues.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL || '',
            updatedValues.LOGISTICS4_SHORTGUN_CONDITION || '',
            updatedValues.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL || '',
            updatedValues.LOGISTICS4_CHINESERIFLE_CONDITION || '',
            updatedValues.LOGISTICS4_OTHERS_WATER_TRA_AVAIL || '',
            updatedValues.LOGISTICS4_OTHERS_WATER_TRA_CONDITION || '',

            uuid, // Use uuid to match the correct record
          ],
          (tx, results) => {
            console.log('Data updated successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error updating data:', error.message || error);
            reject(error);
          },
        );
      },
      error => {
        console.error('Transaction error:', error.message || error);
        reject(error);
      },
      () => {
        console.log('Transaction completed successfully.');
      },
    );
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const gener43_2021_fbli_ca_tloc_ad_upzilla_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_fbli_ca_tloc_ad_upzilla?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total gener43_2021_fbli_ca_tloc_ad_upzilla items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_fbli_ca_tloc_ad_upzilla`,
          [],
          () => {
            // console.log(
            //   'gener43_2021_fbli_ca_tloc_ad_upzilla table dropped successfully',
            // );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_fbli_ca_tloc_ad_upzilla (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            // console.log(
            //   'gener43_2021_fbli_ca_tloc_ad_upzilla table created successfully',
            // );
          },
          reject,
        );

        data.forEach(gener43_2021_fbli_ca_tloc_ad_upzilla => {
          tx.executeSql(
            `INSERT INTO gener43_2021_fbli_ca_tloc_ad_upzilla VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              gener43_2021_fbli_ca_tloc_ad_upzilla._URI || null,
              gener43_2021_fbli_ca_tloc_ad_upzilla._CREATOR_URI_USER || null,
              gener43_2021_fbli_ca_tloc_ad_upzilla._CREATION_DATE || null,
              gener43_2021_fbli_ca_tloc_ad_upzilla._LAST_UPDATE_URI_USER ||
                null,
              gener43_2021_fbli_ca_tloc_ad_upzilla._LAST_UPDATE_DATE || null,
              gener43_2021_fbli_ca_tloc_ad_upzilla._PARENT_AURI || null,
              gener43_2021_fbli_ca_tloc_ad_upzilla._ORDINAL_NUMBER || null,
              gener43_2021_fbli_ca_tloc_ad_upzilla._TOP_LEVEL_AURI || null,
              gener43_2021_fbli_ca_tloc_ad_upzilla.VALUE || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'gener43_2021_fbli_ca_tloc_ad_upzilla data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting gener43_2021_fbli_ca_tloc_ad_upzilla data',
                  error,
                  gener43_2021_fbli_ca_tloc_ad_upzilla,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_fbli_ca_tloc_ad_upzilla data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const gener43_2021_fbli_ca_tloc_ad_upzilla_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_fbli_ca_tloc_ad_upzilla?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total gener43_2021_fbli_ca_tloc_ad_upzilla items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_fbli_ca_tloc_ad_upzilla`,
          [],
          () => {
            console.log(
              'gener43_2021_fbli_ca_tloc_ad_upzilla table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_fbli_ca_tloc_ad_upzilla (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'gener43_2021_fbli_ca_tloc_ad_upzilla table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_fbli_ca_tloc_ad_upzilla data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const gener43_2021_fbli_ca_tloc_ad_upzilla_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM gener43_2021_fbli_ca_tloc_ad_upzilla`, // Query the gener43_2021_fbli_ca_tloc_ad_upzilla table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying gener43_2021_fbli_ca_tloc_ad_upzilla`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const gener43_2021_fbli_ca_tloc_ad_upzilla_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM gener43_2021_fbli_ca_tloc_ad_upzilla`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from gener43_2021_fbli_ca_tloc_ad_upzilla:',
            resultSet,
          );

          try {
            await gener43_2021_fbli_ca_tloc_ad_upzilla_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from gener43_2021_fbli_ca_tloc_ad_upzilla`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const gener43_2021_fbli_ca_tloc_ad_upzilla_create =
  gener43_2021_fbli_ca_tloc_ad_upzilla => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert gener43_2021_fbli_ca_tloc_ad_upzilla
        tx.executeSql(
          `INSERT INTO gener43_2021_fbli_ca_tloc_ad_upzilla (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            gener43_2021_fbli_ca_tloc_ad_upzilla._URI || '',
            gener43_2021_fbli_ca_tloc_ad_upzilla._CREATOR_URI_USER || '',
            gener43_2021_fbli_ca_tloc_ad_upzilla._CREATION_DATE || '',
            gener43_2021_fbli_ca_tloc_ad_upzilla._LAST_UPDATE_URI_USER || '',
            gener43_2021_fbli_ca_tloc_ad_upzilla._LAST_UPDATE_DATE || '',
            gener43_2021_fbli_ca_tloc_ad_upzilla._PARENT_AURI || '',
            gener43_2021_fbli_ca_tloc_ad_upzilla._ORDINAL_NUMBER || '',
            gener43_2021_fbli_ca_tloc_ad_upzilla._TOP_LEVEL_AURI || '',
            gener43_2021_fbli_ca_tloc_ad_upzilla.VALUE || '',
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const gener43_2021_others_info1_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_others_info1?token=${token}`,
    );
    const data = await response.json();
    console.log('Total gener43_2021_others_info1 items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_others_info1`,
          [],
          () => {
            //console.log('gener43_2021_others_info1 table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_others_info1 (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GENERATED_NOTE_NAME_115 TEXT,OTHERS_JOINING_DATE TEXT,OTHERS_NID TEXT,OTHERS_RANK TEXT,OTHERS_CELL TEXT,NAME_OF_OTHERS TEXT,OTHERS_JOINING_DATE_RAW TEXT,OTHERS_MAIL TEXT)`,
          [],
          () => {
            //console.log('gener43_2021_others_info1 table created successfully');
          },
          reject,
        );

        data.forEach(gener43_2021_others_info1 => {
          tx.executeSql(
            `INSERT INTO gener43_2021_others_info1 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              gener43_2021_others_info1._URI || null,
              gener43_2021_others_info1._CREATOR_URI_USER || null,
              gener43_2021_others_info1._CREATION_DATE || null,
              gener43_2021_others_info1._LAST_UPDATE_URI_USER || null,
              gener43_2021_others_info1._LAST_UPDATE_DATE || null,
              gener43_2021_others_info1._PARENT_AURI || null,
              gener43_2021_others_info1._ORDINAL_NUMBER || null,
              gener43_2021_others_info1._TOP_LEVEL_AURI || null,
              gener43_2021_others_info1.GENERATED_NOTE_NAME_115 || null,
              gener43_2021_others_info1.OTHERS_JOINING_DATE || null,
              gener43_2021_others_info1.OTHERS_NID || null,
              gener43_2021_others_info1.OTHERS_RANK || null,
              gener43_2021_others_info1.OTHERS_CELL || null,
              gener43_2021_others_info1.NAME_OF_OTHERS || null,
              gener43_2021_others_info1.OTHERS_JOINING_DATE_RAW || null,
              gener43_2021_others_info1.OTHERS_MAIL || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'gener43_2021_others_info1 data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting gener43_2021_others_info1 data',
                  error,
                  gener43_2021_others_info1,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_others_info1 data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const gener43_2021_others_info1_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_others_info1?token=${token}`,
    );
    const data = await response.json();
    console.log('Total gener43_2021_others_info1 items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_others_info1`,
          [],
          () => {
            console.log('gener43_2021_others_info1 table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_others_info1 (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GENERATED_NOTE_NAME_115 TEXT,OTHERS_JOINING_DATE TEXT,OTHERS_NID TEXT,OTHERS_RANK TEXT,OTHERS_CELL TEXT,NAME_OF_OTHERS TEXT,OTHERS_JOINING_DATE_RAW TEXT,OTHERS_MAIL TEXT)`,
          [],
          () => {
            console.log('gener43_2021_others_info1 table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_others_info1 data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const gener43_2021_others_info1_list = async (uri) => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM gener43_2021_others_info1 WHERE _PARENT_AURI =? OR _TOP_LEVEL_AURI = ?`, // Query the gener43_2021_others_info1 table
        [uri],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying gener43_2021_others_info1`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const gener43_2021_others_info1_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM gener43_2021_others_info1`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from gener43_2021_others_info1:',
            resultSet,
          );

          try {
            await gener43_2021_others_info1_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from gener43_2021_others_info1`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const gener43_2021_others_info1_create = gener43_2021_others_info1 => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert gener43_2021_others_info1
      tx.executeSql(
        `INSERT INTO gener43_2021_others_info1 (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,GENERATED_NOTE_NAME_115,OTHERS_JOINING_DATE,OTHERS_NID,OTHERS_RANK,OTHERS_CELL,NAME_OF_OTHERS,OTHERS_JOINING_DATE_RAW,OTHERS_MAIL) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          gener43_2021_others_info1._URI || '',
          gener43_2021_others_info1._CREATOR_URI_USER || '',
          gener43_2021_others_info1._CREATION_DATE || '',
          gener43_2021_others_info1._LAST_UPDATE_URI_USER || '',
          gener43_2021_others_info1._LAST_UPDATE_DATE || '',
          gener43_2021_others_info1._PARENT_AURI || '',
          gener43_2021_others_info1._ORDINAL_NUMBER || '',
          gener43_2021_others_info1._TOP_LEVEL_AURI || '',
          gener43_2021_others_info1.GENERATED_NOTE_NAME_115 || '',
          gener43_2021_others_info1.OTHERS_JOINING_DATE || '',
          gener43_2021_others_info1.OTHERS_NID || '',
          gener43_2021_others_info1.OTHERS_RANK || '',
          gener43_2021_others_info1.OTHERS_CELL || '',
          gener43_2021_others_info1.NAME_OF_OTHERS || '',
          gener43_2021_others_info1.OTHERS_JOINING_DATE_RAW || '',
          gener43_2021_others_info1.OTHERS_MAIL || '',
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const gener43_2021_overallnotes_ima_blb_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_overallnotes_ima_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total gener43_2021_overallnotes_ima_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_overallnotes_ima_blb`,
          [],
          () => {
            // console.log(
            //   'gener43_2021_overallnotes_ima_blb table dropped successfully',
            // );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_overallnotes_ima_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            // console.log(
            //   'gener43_2021_overallnotes_ima_blb table created successfully',
            // );
          },
          reject,
        );

        data.forEach(gener43_2021_overallnotes_ima_blb => {
          tx.executeSql(
            `INSERT INTO gener43_2021_overallnotes_ima_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              gener43_2021_overallnotes_ima_blb._URI || null,
              gener43_2021_overallnotes_ima_blb._CREATOR_URI_USER || null,
              gener43_2021_overallnotes_ima_blb._CREATION_DATE || null,
              gener43_2021_overallnotes_ima_blb._LAST_UPDATE_URI_USER || null,
              gener43_2021_overallnotes_ima_blb._LAST_UPDATE_DATE || null,
              gener43_2021_overallnotes_ima_blb._TOP_LEVEL_AURI || null,
              gener43_2021_overallnotes_ima_blb.VALUE || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'gener43_2021_overallnotes_ima_blb data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting gener43_2021_overallnotes_ima_blb data',
                  error,
                  gener43_2021_overallnotes_ima_blb,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_overallnotes_ima_blb data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const gener43_2021_overallnotes_ima_blb_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_overallnotes_ima_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total gener43_2021_overallnotes_ima_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_overallnotes_ima_blb`,
          [],
          () => {
            console.log(
              'gener43_2021_overallnotes_ima_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_overallnotes_ima_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'gener43_2021_overallnotes_ima_blb table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_overallnotes_ima_blb data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const gener43_2021_overallnotes_ima_blb_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM gener43_2021_overallnotes_ima_blb`, // Query the gener43_2021_overallnotes_ima_blb table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying gener43_2021_overallnotes_ima_blb`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const gener43_2021_overallnotes_ima_blb_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM gener43_2021_overallnotes_ima_blb`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from gener43_2021_overallnotes_ima_blb:',
            resultSet,
          );

          try {
            await gener43_2021_overallnotes_ima_blb_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from gener43_2021_overallnotes_ima_blb`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const gener43_2021_overallnotes_ima_blb_create =
  gener43_2021_overallnotes_ima_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert gener43_2021_overallnotes_ima_blb
        tx.executeSql(
          `INSERT INTO gener43_2021_overallnotes_ima_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            gener43_2021_overallnotes_ima_blb._URI || '',
            gener43_2021_overallnotes_ima_blb._CREATOR_URI_USER || '',
            gener43_2021_overallnotes_ima_blb._CREATION_DATE || '',
            gener43_2021_overallnotes_ima_blb._LAST_UPDATE_URI_USER || '',
            gener43_2021_overallnotes_ima_blb._LAST_UPDATE_DATE || '',
            gener43_2021_overallnotes_ima_blb._TOP_LEVEL_AURI || '',
            gener43_2021_overallnotes_ima_blb.VALUE || '',
          ],
          (tx, results) => {
            console.log('Data inserted successfully in over blb..:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_core_api = async () => {
  try {
    const response = await fetch(`${baseApi}/plant27_2021_core?token=${token}`);
    const data = await response.json();
    console.log('Total plant27_2021_core items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_core`,
          [],
          () => {
            console.log('plant27_2021_core table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_core (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173 TEXT,REG_AVG_SEEDLING_ALL_PLOTS TEXT,PLANTING_PLAN_GRPSTOCKS_NTE_1 TEXT,PLANTING_PLAN_GRPSTOCKS_NTE_2 TEXT,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174 TEXT,LOCATION_DATA_CA_TLOC_AD_DISTRICT TEXT,MAGROVE_PLANT_WIND_DIR TEXT,GSITE_HISTORY TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_20 TEXT,GTRTS_PLANTING_PLANTING_YEAR TEXT,INTERVENTION_DETAILS_PATCHES_PLANT TEXT,INTERVENTION_DETAILS_SEEDING_PLANT TEXT,PLANTING_PLAN_GPLANTING_SPACING TEXT,MAGROVE_PLANT_MAN_AFF_CLAY_LAYER TEXT,GTRTS_OTHER_TREATMENT_OTHER_YEAR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT TEXT,MAGROVE_PLANT_CRABS_HOLE TEXT,REG_AVG_SEEDLING_PER_HA_ALL_PLOTS TEXT,LOCATION_DATA_CA_UNION TEXT,SUBSCRIBERID TEXT,GTRTS_PLANTING_PLANTING_YEAR_RAW TEXT,GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW TEXT,DEVICEID TEXT,PLANTING_PLAN_GENERATED_NOTE_NAME_151 TEXT,INTERVENTION_DETAILS_TLOC_PLANT_YEAR TEXT,NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179 TEXT,INTERVENTION_DETAILS_TLOC_PLANT_TYPE TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT TEXT,LOCATION_DATA_ECOZONE TEXT,GTRTS_PLANTATION_SITE_YEAR TEXT,GUSER_TUSER_CELL TEXT,REG_AVG_TREES_PER_HA_ALL_PLOTS TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA TEXT,GTRTS_NUERSERY_RAISING_NURSERY_YEAR TEXT,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT TEXT,GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221 TEXT,PLANTING_PLAN_SEEDLINGS_PER_HA TEXT,GTRTS_COMPOST_COMPOST_YEAR_RAW TEXT,NURSERY_NURSERY_SITE_NURSERY_LOCATION TEXT,GSITE_LAND_COV_DESC TEXT,SIMSERIAL TEXT,GUSER_GENERATED_NOTE_NAME_13 TEXT,GUSER_DCOLLECTION_RAW TEXT,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR TEXT,GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND TEXT,MAGROVE_PLANT_MAN_AFF_LEVEL_INUND TEXT,ALLPATCHES TEXT,GENERATED_NOTE_NAME_63 TEXT,GUSER_TUSER_EMAIL TEXT,CHECKED_BY TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CIR TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2 TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190 TEXT,LOCATION_DATA_TLOCATION TEXT,MAGROVE_PLANT_FACING_ISLAND TEXT,GUSER_TUSER TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME TEXT,LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23 TEXT,GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC TEXT,GTRTS_PLANTATION_SITE_YEAR_RAW TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_115 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_114 TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR TEXT,GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_119 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_118 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_117 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_116 TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK TEXT,GTRTS_COMPOST_GENERATED_NOTE_NAME_247 TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION TEXT,GTRTS_COMPOST_COMPOST_YEAR TEXT,GTRTS_PLANTING_GENERATED_NOTE_NAME_231 TEXT,GUSER_DCOLLECTION TEXT,CHECKED TEXT,GSITE_HIST_OTHER TEXT,MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137 TEXT,INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122 TEXT,MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133 TEXT,PLANTING_PLAN_TXT_BUILD1 TEXT,PLANTING_PLAN_TXT_BUILD2 TEXT,GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252 TEXT,END_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS TEXT,PLANTING_PLAN_BPLANTING TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC TEXT,LOCATION_DATA_CA_GENERATED_NOTE_NAME_36 TEXT,INTERVENTION_DETAILS_LLOC_PLANT_AREA TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2 TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140 TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE TEXT,REG_PLOT_NO TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3 TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4 TEXT,END TEXT,PLANTING_PLAN_MAX_SEEDLINGS TEXT,PHONENUMBER TEXT,GTRTS_PLANTATION_GENERATED_NOTE_NAME_226 TEXT,START_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212 TEXT,META_INSTANCE_ID TEXT,INTERVENTION_DETAILS_TLOC_PLANT_OTHERS TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG TEXT,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT TEXT,MAGROVE_PLANT_FACING_DIR TEXT,NURSERY_NURSERY_SITE_TPOLYTYPE_NUR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT TEXT,MAGROVE_PLANT_MAN_AFF_PIONEERS_SP TEXT,TODAY TEXT,LOCATION_DATA_CA_TLOC_AD_DIVISION TEXT,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV TEXT,LOCATION_DATA_CA_VILLAGE TEXT,MAGROVE_PLANT_WAVE_DIR TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199 TEXT,GSITE_GENERATED_NOTE_NAME_72 TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE TEXT,START TEXT,REG_AVG_TREES_ALL_PLOTS TEXT,TODAY_RAW TEXT,APPROVED TEXT,MAGROVE_PLANT_GENERATED_NOTE_NAME_131 TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT)`,
          [],
          () => {
            console.log('plant27_2021_core table created successfully');
          },
          reject,
        );

        data.forEach(plant27_2021_core => {
          tx.executeSql(
            `INSERT INTO plant27_2021_core VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_core._URI || null,
              plant27_2021_core._CREATOR_URI_USER || null,
              plant27_2021_core._CREATION_DATE || null,
              plant27_2021_core._LAST_UPDATE_URI_USER || null,
              plant27_2021_core._LAST_UPDATE_DATE || null,
              plant27_2021_core._MODEL_VERSION || null,
              plant27_2021_core._UI_VERSION || null,
              plant27_2021_core._IS_COMPLETE || null,
              plant27_2021_core._SUBMISSION_DATE || null,
              plant27_2021_core._MARKED_AS_COMPLETE_DATE || null,
              plant27_2021_core.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173 ||
                null,
              plant27_2021_core.REG_AVG_SEEDLING_ALL_PLOTS || null,
              plant27_2021_core.PLANTING_PLAN_GRPSTOCKS_NTE_1 || null,
              plant27_2021_core.PLANTING_PLAN_GRPSTOCKS_NTE_2 || null,
              plant27_2021_core.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174 ||
                null,
              plant27_2021_core.LOCATION_DATA_CA_TLOC_AD_DISTRICT || null,
              plant27_2021_core.MAGROVE_PLANT_WIND_DIR || null,
              plant27_2021_core.GSITE_HISTORY || null,
              plant27_2021_core.LOCATION_DATA_GENERATED_NOTE_NAME_20 || null,
              plant27_2021_core.GTRTS_PLANTING_PLANTING_YEAR || null,
              plant27_2021_core.INTERVENTION_DETAILS_PATCHES_PLANT || null,
              plant27_2021_core.INTERVENTION_DETAILS_SEEDING_PLANT || null,
              plant27_2021_core.PLANTING_PLAN_GPLANTING_SPACING || null,
              plant27_2021_core.MAGROVE_PLANT_MAN_AFF_CLAY_LAYER || null,
              plant27_2021_core.GTRTS_OTHER_TREATMENT_OTHER_YEAR || null,
              plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT ||
                null,
              plant27_2021_core.MAGROVE_PLANT_CRABS_HOLE || null,
              plant27_2021_core.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS || null,
              plant27_2021_core.LOCATION_DATA_CA_UNION || null,
              plant27_2021_core.SUBSCRIBERID || null,
              plant27_2021_core.GTRTS_PLANTING_PLANTING_YEAR_RAW || null,
              plant27_2021_core.GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW || null,
              plant27_2021_core.DEVICEID || null,
              plant27_2021_core.PLANTING_PLAN_GENERATED_NOTE_NAME_151 || null,
              plant27_2021_core.INTERVENTION_DETAILS_TLOC_PLANT_YEAR || null,
              plant27_2021_core.NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179 ||
                null,
              plant27_2021_core.INTERVENTION_DETAILS_TLOC_PLANT_TYPE || null,
              plant27_2021_core.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT ||
                null,
              plant27_2021_core.LOCATION_DATA_ECOZONE || null,
              plant27_2021_core.GTRTS_PLANTATION_SITE_YEAR || null,
              plant27_2021_core.GUSER_TUSER_CELL || null,
              plant27_2021_core.REG_AVG_TREES_PER_HA_ALL_PLOTS || null,
              plant27_2021_core.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA ||
                null,
              plant27_2021_core.GTRTS_NUERSERY_RAISING_NURSERY_YEAR || null,
              plant27_2021_core.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR || null,
              plant27_2021_core.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT || null,
              plant27_2021_core.GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221 ||
                null,
              plant27_2021_core.PLANTING_PLAN_SEEDLINGS_PER_HA || null,
              plant27_2021_core.GTRTS_COMPOST_COMPOST_YEAR_RAW || null,
              plant27_2021_core.NURSERY_NURSERY_SITE_NURSERY_LOCATION || null,
              plant27_2021_core.GSITE_LAND_COV_DESC || null,
              plant27_2021_core.SIMSERIAL || null,
              plant27_2021_core.GUSER_GENERATED_NOTE_NAME_13 || null,
              plant27_2021_core.GUSER_DCOLLECTION_RAW || null,
              plant27_2021_core.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR ||
                null,
              plant27_2021_core.GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED || null,
              plant27_2021_core.NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND ||
                null,
              plant27_2021_core.MAGROVE_PLANT_MAN_AFF_LEVEL_INUND || null,
              plant27_2021_core.ALLPATCHES || null,
              plant27_2021_core.GENERATED_NOTE_NAME_63 || null,
              plant27_2021_core.GUSER_TUSER_EMAIL || null,
              plant27_2021_core.CHECKED_BY || null,
              plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_FD_CIR || null,
              plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2 ||
                null,
              plant27_2021_core.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT || null,
              plant27_2021_core.NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190 ||
                null,
              plant27_2021_core.LOCATION_DATA_TLOCATION || null,
              plant27_2021_core.MAGROVE_PLANT_FACING_ISLAND || null,
              plant27_2021_core.GUSER_TUSER || null,
              plant27_2021_core.MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH ||
                null,
              plant27_2021_core.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME ||
                null,
              plant27_2021_core.LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23 ||
                null,
              plant27_2021_core.GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW || null,
              plant27_2021_core.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC || null,
              plant27_2021_core.GTRTS_PLANTATION_SITE_YEAR_RAW || null,
              plant27_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_115 || null,
              plant27_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_114 || null,
              plant27_2021_core.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID ||
                null,
              plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR || null,
              plant27_2021_core.GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262 ||
                null,
              plant27_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_119 || null,
              plant27_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_118 || null,
              plant27_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_117 || null,
              plant27_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_116 || null,
              plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK || null,
              plant27_2021_core.GTRTS_COMPOST_GENERATED_NOTE_NAME_247 || null,
              plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION ||
                null,
              plant27_2021_core.GTRTS_COMPOST_COMPOST_YEAR || null,
              plant27_2021_core.GTRTS_PLANTING_GENERATED_NOTE_NAME_231 || null,
              plant27_2021_core.GUSER_DCOLLECTION || null,
              plant27_2021_core.CHECKED || null,
              plant27_2021_core.GSITE_HIST_OTHER || null,
              plant27_2021_core.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137 ||
                null,
              plant27_2021_core.INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122 ||
                null,
              plant27_2021_core.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133 ||
                null,
              plant27_2021_core.PLANTING_PLAN_TXT_BUILD1 || null,
              plant27_2021_core.PLANTING_PLAN_TXT_BUILD2 || null,
              plant27_2021_core.GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252 ||
                null,
              plant27_2021_core.END_RAW || null,
              plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE ||
                null,
              plant27_2021_core.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS ||
                null,
              plant27_2021_core.PLANTING_PLAN_BPLANTING || null,
              plant27_2021_core.NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC ||
                null,
              plant27_2021_core.LOCATION_DATA_CA_GENERATED_NOTE_NAME_36 || null,
              plant27_2021_core.INTERVENTION_DETAILS_LLOC_PLANT_AREA || null,
              plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1 ||
                null,
              plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2 ||
                null,
              plant27_2021_core.MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140 ||
                null,
              plant27_2021_core.NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE ||
                null,
              plant27_2021_core.REG_PLOT_NO || null,
              plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7 ||
                null,
              plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5 ||
                null,
              plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6 ||
                null,
              plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3 ||
                null,
              plant27_2021_core.MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE ||
                null,
              plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4 ||
                null,
              plant27_2021_core.END || null,
              plant27_2021_core.PLANTING_PLAN_MAX_SEEDLINGS || null,
              plant27_2021_core.PHONENUMBER || null,
              plant27_2021_core.GTRTS_PLANTATION_GENERATED_NOTE_NAME_226 ||
                null,
              plant27_2021_core.START_RAW || null,
              plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE || null,
              plant27_2021_core.NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212 ||
                null,
              plant27_2021_core.META_INSTANCE_ID || null,
              plant27_2021_core.INTERVENTION_DETAILS_TLOC_PLANT_OTHERS || null,
              plant27_2021_core.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG || null,
              plant27_2021_core.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR ||
                null,
              plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT || null,
              plant27_2021_core.MAGROVE_PLANT_FACING_DIR || null,
              plant27_2021_core.NURSERY_NURSERY_SITE_TPOLYTYPE_NUR || null,
              plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT ||
                null,
              plant27_2021_core.MAGROVE_PLANT_MAN_AFF_PIONEERS_SP || null,
              plant27_2021_core.TODAY || null,
              plant27_2021_core.LOCATION_DATA_CA_TLOC_AD_DIVISION || null,
              plant27_2021_core.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW || null,
              plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV || null,
              plant27_2021_core.LOCATION_DATA_CA_VILLAGE || null,
              plant27_2021_core.MAGROVE_PLANT_WAVE_DIR || null,
              plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199 ||
                null,
              plant27_2021_core.GSITE_GENERATED_NOTE_NAME_72 || null,
              plant27_2021_core.NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE ||
                null,
              plant27_2021_core.START || null,
              plant27_2021_core.REG_AVG_TREES_ALL_PLOTS || null,
              plant27_2021_core.TODAY_RAW || null,
              plant27_2021_core.APPROVED || null,
              plant27_2021_core.MAGROVE_PLANT_GENERATED_NOTE_NAME_131 || null,
              plant27_2021_core.project_id || null,
              plant27_2021_core.sort || null,
              plant27_2021_core.last_log_id || null,
              plant27_2021_core.restore_id || null,
              plant27_2021_core.created_at || null,
              plant27_2021_core.created_by || null,
              plant27_2021_core.updated_at || null,
              plant27_2021_core.updated_by || null,
              plant27_2021_core.deleted_at || null,
              plant27_2021_core.deleted_by || null,
              plant27_2021_core.deleted_status || null,
              plant27_2021_core.status || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_core data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_core data',
                error,
                plant27_2021_core,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching plant27_2021_core data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_core_api2 = async () => {
  try {
    const response = await fetch(`${baseApi}/plant27_2021_core?token=${token}`);
    const data = await response.json();
    console.log('Total plant27_2021_core items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_core`,
          [],
          () => {
            console.log('plant27_2021_core table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_core (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173 TEXT,REG_AVG_SEEDLING_ALL_PLOTS TEXT,PLANTING_PLAN_GRPSTOCKS_NTE_1 TEXT,PLANTING_PLAN_GRPSTOCKS_NTE_2 TEXT,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174 TEXT,LOCATION_DATA_CA_TLOC_AD_DISTRICT TEXT,MAGROVE_PLANT_WIND_DIR TEXT,GSITE_HISTORY TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_20 TEXT,GTRTS_PLANTING_PLANTING_YEAR TEXT,INTERVENTION_DETAILS_PATCHES_PLANT TEXT,INTERVENTION_DETAILS_SEEDING_PLANT TEXT,PLANTING_PLAN_GPLANTING_SPACING TEXT,MAGROVE_PLANT_MAN_AFF_CLAY_LAYER TEXT,GTRTS_OTHER_TREATMENT_OTHER_YEAR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT TEXT,MAGROVE_PLANT_CRABS_HOLE TEXT,REG_AVG_SEEDLING_PER_HA_ALL_PLOTS TEXT,LOCATION_DATA_CA_UNION TEXT,SUBSCRIBERID TEXT,GTRTS_PLANTING_PLANTING_YEAR_RAW TEXT,GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW TEXT,DEVICEID TEXT,PLANTING_PLAN_GENERATED_NOTE_NAME_151 TEXT,INTERVENTION_DETAILS_TLOC_PLANT_YEAR TEXT,NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179 TEXT,INTERVENTION_DETAILS_TLOC_PLANT_TYPE TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT TEXT,LOCATION_DATA_ECOZONE TEXT,GTRTS_PLANTATION_SITE_YEAR TEXT,GUSER_TUSER_CELL TEXT,REG_AVG_TREES_PER_HA_ALL_PLOTS TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA TEXT,GTRTS_NUERSERY_RAISING_NURSERY_YEAR TEXT,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT TEXT,GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221 TEXT,PLANTING_PLAN_SEEDLINGS_PER_HA TEXT,GTRTS_COMPOST_COMPOST_YEAR_RAW TEXT,NURSERY_NURSERY_SITE_NURSERY_LOCATION TEXT,GSITE_LAND_COV_DESC TEXT,SIMSERIAL TEXT,GUSER_GENERATED_NOTE_NAME_13 TEXT,GUSER_DCOLLECTION_RAW TEXT,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR TEXT,GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND TEXT,MAGROVE_PLANT_MAN_AFF_LEVEL_INUND TEXT,ALLPATCHES TEXT,GENERATED_NOTE_NAME_63 TEXT,GUSER_TUSER_EMAIL TEXT,CHECKED_BY TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CIR TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2 TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190 TEXT,LOCATION_DATA_TLOCATION TEXT,MAGROVE_PLANT_FACING_ISLAND TEXT,GUSER_TUSER TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME TEXT,LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23 TEXT,GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC TEXT,GTRTS_PLANTATION_SITE_YEAR_RAW TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_115 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_114 TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR TEXT,GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_119 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_118 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_117 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_116 TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK TEXT,GTRTS_COMPOST_GENERATED_NOTE_NAME_247 TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION TEXT,GTRTS_COMPOST_COMPOST_YEAR TEXT,GTRTS_PLANTING_GENERATED_NOTE_NAME_231 TEXT,GUSER_DCOLLECTION TEXT,CHECKED TEXT,GSITE_HIST_OTHER TEXT,MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137 TEXT,INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122 TEXT,MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133 TEXT,PLANTING_PLAN_TXT_BUILD1 TEXT,PLANTING_PLAN_TXT_BUILD2 TEXT,GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252 TEXT,END_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS TEXT,PLANTING_PLAN_BPLANTING TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC TEXT,LOCATION_DATA_CA_GENERATED_NOTE_NAME_36 TEXT,INTERVENTION_DETAILS_LLOC_PLANT_AREA TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2 TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140 TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE TEXT,REG_PLOT_NO TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3 TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4 TEXT,END TEXT,PLANTING_PLAN_MAX_SEEDLINGS TEXT,PHONENUMBER TEXT,GTRTS_PLANTATION_GENERATED_NOTE_NAME_226 TEXT,START_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212 TEXT,META_INSTANCE_ID TEXT,INTERVENTION_DETAILS_TLOC_PLANT_OTHERS TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG TEXT,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT TEXT,MAGROVE_PLANT_FACING_DIR TEXT,NURSERY_NURSERY_SITE_TPOLYTYPE_NUR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT TEXT,MAGROVE_PLANT_MAN_AFF_PIONEERS_SP TEXT,TODAY TEXT,LOCATION_DATA_CA_TLOC_AD_DIVISION TEXT,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV TEXT,LOCATION_DATA_CA_VILLAGE TEXT,MAGROVE_PLANT_WAVE_DIR TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199 TEXT,GSITE_GENERATED_NOTE_NAME_72 TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE TEXT,START TEXT,REG_AVG_TREES_ALL_PLOTS TEXT,TODAY_RAW TEXT,APPROVED TEXT,MAGROVE_PLANT_GENERATED_NOTE_NAME_131 TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT)`,
          [],
          () => {
            console.log('plant27_2021_core table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching plant27_2021_core data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_core_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_core`, // Query the plant27_2021_core table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying plant27_2021_core`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_core_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_core`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from plant27_2021_core:', resultSet);

          try {
            await plant27_2021_core_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from plant27_2021_core`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_core_create = plant27_2021_core => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert plant27_2021_core
      tx.executeSql(
        `INSERT INTO plant27_2021_core (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_MODEL_VERSION,_UI_VERSION,_IS_COMPLETE,_SUBMISSION_DATE,_MARKED_AS_COMPLETE_DATE,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173,REG_AVG_SEEDLING_ALL_PLOTS,PLANTING_PLAN_GRPSTOCKS_NTE_1,PLANTING_PLAN_GRPSTOCKS_NTE_2,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174,LOCATION_DATA_CA_TLOC_AD_DISTRICT,MAGROVE_PLANT_WIND_DIR,GSITE_HISTORY,LOCATION_DATA_GENERATED_NOTE_NAME_20,GTRTS_PLANTING_PLANTING_YEAR,INTERVENTION_DETAILS_PATCHES_PLANT,INTERVENTION_DETAILS_SEEDING_PLANT,PLANTING_PLAN_GPLANTING_SPACING,MAGROVE_PLANT_MAN_AFF_CLAY_LAYER,GTRTS_OTHER_TREATMENT_OTHER_YEAR,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT,MAGROVE_PLANT_CRABS_HOLE,REG_AVG_SEEDLING_PER_HA_ALL_PLOTS,LOCATION_DATA_CA_UNION,SUBSCRIBERID,GTRTS_PLANTING_PLANTING_YEAR_RAW,GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW,DEVICEID,PLANTING_PLAN_GENERATED_NOTE_NAME_151,INTERVENTION_DETAILS_TLOC_PLANT_YEAR,NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179,INTERVE
NTION_DETAILS_TLOC_PLANT_TYPE,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT,LOCATION_DATA_ECOZONE,GTRTS_PLANTATION_SITE_YEAR,GUSER_TUSER_CELL,REG_AVG_TREES_PER_HA_ALL_PLOTS,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA,GTRTS_NUERSERY_RAISING_NURSERY_YEAR,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT,GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221,PLANTING_PLAN_SEEDLINGS_PER_HA,GTRTS_COMPOST_COMPOST_YEAR_RAW,NURSERY_NURSERY_SITE_NURSERY_LOCATION,GSITE_LAND_COV_DESC,SIMSERIAL,GUSER_GENERATED_NOTE_NAME_13,GUSER_DCOLLECTION_RAW,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR,GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED,NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND,MAGROVE_PLANT_MAN_AFF_LEVEL_INUND,ALLPATCHES,GENERATED_NOTE_NAME_63,GUSER_TUSER_EMAIL,CHECKED_BY,LOCATION_DATA_FOREST_AD_TLOC_FD_CIR,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190,LOCATION_DAT
A_TLOCATION,MAGROVE_PLANT_FACING_ISLAND,GUSER_TUSER,MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME,LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23,GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC,GTRTS_PLANTATION_SITE_YEAR_RAW,REGIN_NOTE_GENERATED_NOTE_NAME_115,REGIN_NOTE_GENERATED_NOTE_NAME_114,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID,LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR,GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262,REGIN_NOTE_GENERATED_NOTE_NAME_119,REGIN_NOTE_GENERATED_NOTE_NAME_118,REGIN_NOTE_GENERATED_NOTE_NAME_117,REGIN_NOTE_GENERATED_NOTE_NAME_116,LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK,GTRTS_COMPOST_GENERATED_NOTE_NAME_247,LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION,GTRTS_COMPOST_COMPOST_YEAR,GTRTS_PLANTING_GENERATED_NOTE_NAME_231,GUSER_DCOLLECTION,CHECKED,GSITE_HIST_OTHER,MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137,INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122,MAGROVE_PLANT_MAN_AFF_GENERATED_
NOTE_NAME_133,PLANTING_PLAN_TXT_BUILD1,PLANTING_PLAN_TXT_BUILD2,GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252,END_RAW,LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS,PLANTING_PLAN_BPLANTING,NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC,LOCATION_DATA_CA_GENERATED_NOTE_NAME_36,INTERVENTION_DETAILS_LLOC_PLANT_AREA,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2,MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140,NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE,REG_PLOT_NO,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3,MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4,END,PLANTING_PLAN_MAX_SEEDLINGS,PHONENUMBER,GTRTS_PLANTATION_GENERATED_NOTE_NAME_226,START_RAW,LOCAT
ION_DATA_FOREST_AD_TLOC_FD_RANGE,NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212,META_INSTANCE_ID,INTERVENTION_DETAILS_TLOC_PLANT_OTHERS,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT,MAGROVE_PLANT_FACING_DIR,NURSERY_NURSERY_SITE_TPOLYTYPE_NUR,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT,MAGROVE_PLANT_MAN_AFF_PIONEERS_SP,TODAY,LOCATION_DATA_CA_TLOC_AD_DIVISION,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW,LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV,LOCATION_DATA_CA_VILLAGE,MAGROVE_PLANT_WAVE_DIR,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199,GSITE_GENERATED_NOTE_NAME_72,NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE,START,REG_AVG_TREES_ALL_PLOTS,TODAY_RAW,APPROVED,MAGROVE_PLANT_GENERATED_NOTE_NAME_131,project_id,sort,last_log_id,restore_id,created_at,created_by,updated_at,updated_by,deleted_at,deleted_by,deleted_status,status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          plant27_2021_core._URI || null,
          plant27_2021_core._CREATOR_URI_USER || null,
          plant27_2021_core._CREATION_DATE || null,
          plant27_2021_core._LAST_UPDATE_URI_USER || null,
          plant27_2021_core._LAST_UPDATE_DATE || null,
          plant27_2021_core._MODEL_VERSION || null,
          plant27_2021_core._UI_VERSION || null,
          plant27_2021_core._IS_COMPLETE || null,
          plant27_2021_core._SUBMISSION_DATE || null,
          plant27_2021_core._MARKED_AS_COMPLETE_DATE || null,
          plant27_2021_core.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173 ||
            null,
          plant27_2021_core.REG_AVG_SEEDLING_ALL_PLOTS || null,
          plant27_2021_core.PLANTING_PLAN_GRPSTOCKS_NTE_1 || null,
          plant27_2021_core.PLANTING_PLAN_GRPSTOCKS_NTE_2 || null,
          plant27_2021_core.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174 ||
            null,
          plant27_2021_core.LOCATION_DATA_CA_TLOC_AD_DISTRICT || null,
          plant27_2021_core.MAGROVE_PLANT_WIND_DIR || null,
          plant27_2021_core.GSITE_HISTORY || null,
          plant27_2021_core.LOCATION_DATA_GENERATED_NOTE_NAME_20 || null,
          plant27_2021_core.GTRTS_PLANTING_PLANTING_YEAR || null,
          plant27_2021_core.INTERVENTION_DETAILS_PATCHES_PLANT || null,
          plant27_2021_core.INTERVENTION_DETAILS_SEEDING_PLANT || null,
          plant27_2021_core.PLANTING_PLAN_GPLANTING_SPACING || null,
          plant27_2021_core.MAGROVE_PLANT_MAN_AFF_CLAY_LAYER || null,
          plant27_2021_core.GTRTS_OTHER_TREATMENT_OTHER_YEAR || null,
          plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT || null,
          plant27_2021_core.MAGROVE_PLANT_CRABS_HOLE || null,
          plant27_2021_core.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS || null,
          plant27_2021_core.LOCATION_DATA_CA_UNION || null,
          plant27_2021_core.SUBSCRIBERID || null,
          plant27_2021_core.GTRTS_PLANTING_PLANTING_YEAR_RAW || null,
          plant27_2021_core.GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW || null,
          plant27_2021_core.DEVICEID || null,
          plant27_2021_core.PLANTING_PLAN_GENERATED_NOTE_NAME_151 || null,
          plant27_2021_core.INTERVENTION_DETAILS_TLOC_PLANT_YEAR || null,
          plant27_2021_core.NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179 ||
            null,
          plant27_2021_core.INTERVENTION_DETAILS_TLOC_PLANT_TYPE || null,
          plant27_2021_core.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT ||
            null,
          plant27_2021_core.LOCATION_DATA_ECOZONE || null,
          plant27_2021_core.GTRTS_PLANTATION_SITE_YEAR || null,
          plant27_2021_core.GUSER_TUSER_CELL || null,
          plant27_2021_core.REG_AVG_TREES_PER_HA_ALL_PLOTS || null,
          plant27_2021_core.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA ||
            null,
          plant27_2021_core.GTRTS_NUERSERY_RAISING_NURSERY_YEAR || null,
          plant27_2021_core.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR || null,
          plant27_2021_core.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT || null,
          plant27_2021_core.GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221 ||
            null,
          plant27_2021_core.PLANTING_PLAN_SEEDLINGS_PER_HA || null,
          plant27_2021_core.GTRTS_COMPOST_COMPOST_YEAR_RAW || null,
          plant27_2021_core.NURSERY_NURSERY_SITE_NURSERY_LOCATION || null,
          plant27_2021_core.GSITE_LAND_COV_DESC || null,
          plant27_2021_core.SIMSERIAL || null,
          plant27_2021_core.GUSER_GENERATED_NOTE_NAME_13 || null,
          plant27_2021_core.GUSER_DCOLLECTION_RAW || null,
          plant27_2021_core.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR ||
            null,
          plant27_2021_core.GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED || null,
          plant27_2021_core.NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND ||
            null,
          plant27_2021_core.MAGROVE_PLANT_MAN_AFF_LEVEL_INUND || null,
          plant27_2021_core.ALLPATCHES || null,
          plant27_2021_core.GENERATED_NOTE_NAME_63 || null,
          plant27_2021_core.GUSER_TUSER_EMAIL || null,
          plant27_2021_core.CHECKED_BY || null,
          plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_FD_CIR || null,
          plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2 ||
            null,
          plant27_2021_core.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT || null,
          plant27_2021_core.NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190 ||
            null,
          plant27_2021_core.LOCATION_DATA_TLOCATION || null,
          plant27_2021_core.MAGROVE_PLANT_FACING_ISLAND || null,
          plant27_2021_core.GUSER_TUSER || null,
          plant27_2021_core.MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH ||
            null,
          plant27_2021_core.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME ||
            null,
          plant27_2021_core.LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23 ||
            null,
          plant27_2021_core.GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW || null,
          plant27_2021_core.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC || null,
          plant27_2021_core.GTRTS_PLANTATION_SITE_YEAR_RAW || null,
          plant27_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_115 || null,
          plant27_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_114 || null,
          plant27_2021_core.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID ||
            null,
          plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR || null,
          plant27_2021_core.GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262 ||
            null,
          plant27_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_119 || null,
          plant27_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_118 || null,
          plant27_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_117 || null,
          plant27_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_116 || null,
          plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK || null,
          plant27_2021_core.GTRTS_COMPOST_GENERATED_NOTE_NAME_247 || null,
          plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION || null,
          plant27_2021_core.GTRTS_COMPOST_COMPOST_YEAR || null,
          plant27_2021_core.GTRTS_PLANTING_GENERATED_NOTE_NAME_231 || null,
          plant27_2021_core.GUSER_DCOLLECTION || null,
          plant27_2021_core.CHECKED || null,
          plant27_2021_core.GSITE_HIST_OTHER || null,
          plant27_2021_core.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137 ||
            null,
          plant27_2021_core.INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122 ||
            null,
          plant27_2021_core.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133 ||
            null,
          plant27_2021_core.PLANTING_PLAN_TXT_BUILD1 || null,
          plant27_2021_core.PLANTING_PLAN_TXT_BUILD2 || null,
          plant27_2021_core.GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252 ||
            null,
          plant27_2021_core.END_RAW || null,
          plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE || null,
          plant27_2021_core.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS ||
            null,
          plant27_2021_core.PLANTING_PLAN_BPLANTING || null,
          plant27_2021_core.NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC ||
            null,
          plant27_2021_core.LOCATION_DATA_CA_GENERATED_NOTE_NAME_36 || null,
          plant27_2021_core.INTERVENTION_DETAILS_LLOC_PLANT_AREA || null,
          plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1 ||
            null,
          plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2 ||
            null,
          plant27_2021_core.MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140 ||
            null,
          plant27_2021_core.NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE ||
            null,
          plant27_2021_core.REG_PLOT_NO || null,
          plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7 ||
            null,
          plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5 ||
            null,
          plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6 ||
            null,
          plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3 ||
            null,
          plant27_2021_core.MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE ||
            null,
          plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4 ||
            null,
          plant27_2021_core.END || null,
          plant27_2021_core.PLANTING_PLAN_MAX_SEEDLINGS || null,
          plant27_2021_core.PHONENUMBER || null,
          plant27_2021_core.GTRTS_PLANTATION_GENERATED_NOTE_NAME_226 || null,
          plant27_2021_core.START_RAW || null,
          plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE || null,
          plant27_2021_core.NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212 ||
            null,
          plant27_2021_core.META_INSTANCE_ID || null,
          plant27_2021_core.INTERVENTION_DETAILS_TLOC_PLANT_OTHERS || null,
          plant27_2021_core.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG || null,
          plant27_2021_core.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR ||
            null,
          plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT || null,
          plant27_2021_core.MAGROVE_PLANT_FACING_DIR || null,
          plant27_2021_core.NURSERY_NURSERY_SITE_TPOLYTYPE_NUR || null,
          plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT || null,
          plant27_2021_core.MAGROVE_PLANT_MAN_AFF_PIONEERS_SP || null,
          plant27_2021_core.TODAY || null,
          plant27_2021_core.LOCATION_DATA_CA_TLOC_AD_DIVISION || null,
          plant27_2021_core.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW || null,
          plant27_2021_core.LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV || null,
          plant27_2021_core.LOCATION_DATA_CA_VILLAGE || null,
          plant27_2021_core.MAGROVE_PLANT_WAVE_DIR || null,
          plant27_2021_core.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199 ||
            null,
          plant27_2021_core.GSITE_GENERATED_NOTE_NAME_72 || null,
          plant27_2021_core.NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE ||
            null,
          plant27_2021_core.START || null,
          plant27_2021_core.REG_AVG_TREES_ALL_PLOTS || null,
          plant27_2021_core.TODAY_RAW || null,
          plant27_2021_core.APPROVED || null,
          plant27_2021_core.MAGROVE_PLANT_GENERATED_NOTE_NAME_131 || null,
          plant27_2021_core.project_id || null,
          plant27_2021_core.sort || null,
          plant27_2021_core.last_log_id || null,
          plant27_2021_core.restore_id || null,
          plant27_2021_core.created_at || null,
          plant27_2021_core.created_by || null,
          plant27_2021_core.updated_at || null,
          plant27_2021_core.updated_by || null,
          plant27_2021_core.deleted_at || null,
          plant27_2021_core.deleted_by || null,
          plant27_2021_core.deleted_status || null,
          plant27_2021_core.status || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_filling_month_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_filling_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_filling_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_filling_month`,
          [],
          () => {
            console.log(
              'plant27_2021_filling_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_filling_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_filling_month table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_filling_month => {
          tx.executeSql(
            `INSERT INTO plant27_2021_filling_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_filling_month._URI || null,
              plant27_2021_filling_month._CREATOR_URI_USER || null,
              plant27_2021_filling_month._CREATION_DATE || null,
              plant27_2021_filling_month._LAST_UPDATE_URI_USER || null,
              plant27_2021_filling_month._LAST_UPDATE_DATE || null,
              plant27_2021_filling_month._PARENT_AURI || null,
              plant27_2021_filling_month._ORDINAL_NUMBER || null,
              plant27_2021_filling_month._TOP_LEVEL_AURI || null,
              plant27_2021_filling_month.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_filling_month data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_filling_month data',
                error,
                plant27_2021_filling_month,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_filling_month data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_filling_month_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_filling_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_filling_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_filling_month`,
          [],
          () => {
            console.log(
              'plant27_2021_filling_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_filling_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_filling_month table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_filling_month data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_filling_month_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_filling_month`, // Query the plant27_2021_filling_month table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying plant27_2021_filling_month`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_filling_month_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_filling_month`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_filling_month:',
            resultSet,
          );

          try {
            await plant27_2021_filling_month_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_filling_month`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_filling_month_create = plant27_2021_filling_month => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert plant27_2021_filling_month
      tx.executeSql(
        `INSERT INTO plant27_2021_filling_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          plant27_2021_filling_month._URI || null,
          plant27_2021_filling_month._CREATOR_URI_USER || null,
          plant27_2021_filling_month._CREATION_DATE || null,
          plant27_2021_filling_month._LAST_UPDATE_URI_USER || null,
          plant27_2021_filling_month._LAST_UPDATE_DATE || null,
          plant27_2021_filling_month._PARENT_AURI || null,
          plant27_2021_filling_month._ORDINAL_NUMBER || null,
          plant27_2021_filling_month._TOP_LEVEL_AURI || null,
          plant27_2021_filling_month.VALUE || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb table created successfully',
              );
            },
            reject,
          );

          data.forEach(plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb => {
            tx.executeSql(
              `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
              [
                plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb._URI || null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb._CREATOR_URI_USER ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb._CREATION_DATE ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb._LAST_UPDATE_URI_USER ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb._LAST_UPDATE_DATE ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb._TOP_LEVEL_AURI ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb.VALUE || null,
              ],
              (_, resultSet) =>
                console.log(
                  'plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb data',
                  error,
                  plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb`, // Query the plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb:',
              resultSet,
            );

            try {
              await plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb_create =
  plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb => {
    console.log(
      plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb.VALUE,
      'from backend',
    );
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb
        tx.executeSql(
          `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb._URI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb._CREATOR_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb._CREATION_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb._LAST_UPDATE_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb._TOP_LEVEL_AURI ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully: cen blb', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data: cen blb', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const odk_b39_2022_core_api = async () => {
  try {
    const response = await fetch(`${baseApi}/odk_b39_2022_core?token=${token}`);
    const data = await response.json();
    console.log('Total odk_b39_2022_core items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS odk_b39_2022_core`,
          [],
          () => {
            console.log('odk_b39_2022_core table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS odk_b39_2022_core (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,PHONENUMBER TEXT,GUSER_USER_CELL TEXT,TODAY TEXT,GUSER_TLOC_ENTER_RANGE TEXT,START_RAW TEXT,SUBSCRIBERID TEXT,GUSER_DCOLLECTION TEXT,GUSER_TLOC_FD_DIVISION TEXT,GUSER_TLOC_FD_RANGE TEXT,GUSER_USER TEXT,GUSER_TLOC_FD_BEAT TEXT,META_INSTANCE_ID TEXT,GUSER_DESIGNATION TEXT,SIMSERIAL TEXT,GUSER_DCOLLECTION_RAW TEXT,DEVICEID TEXT,END_RAW TEXT,GUSER_TLOC_FD_BEAT_TXT TEXT,GUSER_GENERATED_NOTE_NAME_10 TEXT,START TEXT,END TEXT,GUSER_TLOC_ECOZONE TEXT,TODAY_RAW TEXT,GUSER_TLOC_FD_CIR TEXT)`,
          [],
          () => {
            console.log('odk_b39_2022_core table created successfully');
          },
          reject,
        );

        data.forEach(odk_b39_2022_core => {
          tx.executeSql(
            `INSERT INTO odk_b39_2022_core VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              odk_b39_2022_core._URI || null,
              odk_b39_2022_core._CREATOR_URI_USER || null,
              odk_b39_2022_core._CREATION_DATE || null,
              odk_b39_2022_core._LAST_UPDATE_URI_USER || null,
              odk_b39_2022_core._LAST_UPDATE_DATE || null,
              odk_b39_2022_core._MODEL_VERSION || null,
              odk_b39_2022_core._UI_VERSION || null,
              odk_b39_2022_core._IS_COMPLETE || null,
              odk_b39_2022_core._SUBMISSION_DATE || null,
              odk_b39_2022_core._MARKED_AS_COMPLETE_DATE || null,
              odk_b39_2022_core.PHONENUMBER || null,
              odk_b39_2022_core.GUSER_USER_CELL || null,
              odk_b39_2022_core.TODAY || null,
              odk_b39_2022_core.GUSER_TLOC_ENTER_RANGE || null,
              odk_b39_2022_core.START_RAW || null,
              odk_b39_2022_core.SUBSCRIBERID || null,
              odk_b39_2022_core.GUSER_DCOLLECTION || null,
              odk_b39_2022_core.GUSER_TLOC_FD_DIVISION || null,
              odk_b39_2022_core.GUSER_TLOC_FD_RANGE || null,
              odk_b39_2022_core.GUSER_USER || null,
              odk_b39_2022_core.GUSER_TLOC_FD_BEAT || null,
              odk_b39_2022_core.META_INSTANCE_ID || null,
              odk_b39_2022_core.GUSER_DESIGNATION || null,
              odk_b39_2022_core.SIMSERIAL || null,
              odk_b39_2022_core.GUSER_DCOLLECTION_RAW || null,
              odk_b39_2022_core.DEVICEID || null,
              odk_b39_2022_core.END_RAW || null,
              odk_b39_2022_core.GUSER_TLOC_FD_BEAT_TXT || null,
              odk_b39_2022_core.GUSER_GENERATED_NOTE_NAME_10 || null,
              odk_b39_2022_core.START || null,
              odk_b39_2022_core.END || null,
              odk_b39_2022_core.GUSER_TLOC_ECOZONE || null,
              odk_b39_2022_core.TODAY_RAW || null,
              odk_b39_2022_core.GUSER_TLOC_FD_CIR || null,
            ],
            (_, resultSet) =>
              console.log(
                'odk_b39_2022_core data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting odk_b39_2022_core data',
                error,
                odk_b39_2022_core,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching odk_b39_2022_core data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const odk_b39_2022_core_api2 = async () => {
  try {
    const response = await fetch(`${baseApi}/odk_b39_2022_core?token=${token}`);
    const data = await response.json();
    console.log('Total odk_b39_2022_core items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS odk_b39_2022_core`,
          [],
          () => {
            console.log('odk_b39_2022_core table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS odk_b39_2022_core (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,PHONENUMBER TEXT,GUSER_USER_CELL TEXT,TODAY TEXT,GUSER_TLOC_ENTER_RANGE TEXT,START_RAW TEXT,SUBSCRIBERID TEXT,GUSER_DCOLLECTION TEXT,GUSER_TLOC_FD_DIVISION TEXT,GUSER_TLOC_FD_RANGE TEXT,GUSER_USER TEXT,GUSER_TLOC_FD_BEAT TEXT,META_INSTANCE_ID TEXT,GUSER_DESIGNATION TEXT,SIMSERIAL TEXT,GUSER_DCOLLECTION_RAW TEXT,DEVICEID TEXT,END_RAW TEXT,GUSER_TLOC_FD_BEAT_TXT TEXT,GUSER_GENERATED_NOTE_NAME_10 TEXT,START TEXT,END TEXT,GUSER_TLOC_ECOZONE TEXT,TODAY_RAW TEXT,GUSER_TLOC_FD_CIR TEXT)`,
          [],
          () => {
            console.log('odk_b39_2022_core table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching odk_b39_2022_core data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const odk_b39_2022_core_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM odk_b39_2022_core`, // Query the odk_b39_2022_core table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying odk_b39_2022_core`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const odk_b39_2022_core_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM odk_b39_2022_core`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from odk_b39_2022_core:', resultSet);

          try {
            await odk_b39_2022_core_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from odk_b39_2022_core`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const odk_b39_2022_core_create = odk_b39_2022_core => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert odk_b39_2022_core
      tx.executeSql(
        `INSERT INTO odk_b39_2022_core (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_MODEL_VERSION,_UI_VERSION,_IS_COMPLETE,_SUBMISSION_DATE,_MARKED_AS_COMPLETE_DATE,PHONENUMBER,GUSER_USER_CELL,TODAY,GUSER_TLOC_ENTER_RANGE,START_RAW,SUBSCRIBERID,GUSER_DCOLLECTION,GUSER_TLOC_FD_DIVISION,GUSER_TLOC_FD_RANGE,GUSER_USER,GUSER_TLOC_FD_BEAT,META_INSTANCE_ID,GUSER_DESIGNATION,SIMSERIAL,GUSER_DCOLLECTION_RAW,DEVICEID,END_RAW,GUSER_TLOC_FD_BEAT_TXT,GUSER_GENERATED_NOTE_NAME_10,START,END,GUSER_TLOC_ECOZONE,TODAY_RAW,GUSER_TLOC_FD_CIR) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          odk_b39_2022_core._URI || null,
          odk_b39_2022_core._CREATOR_URI_USER || null,
          odk_b39_2022_core._CREATION_DATE || null,
          odk_b39_2022_core._LAST_UPDATE_URI_USER || null,
          odk_b39_2022_core._LAST_UPDATE_DATE || null,
          odk_b39_2022_core._MODEL_VERSION || null,
          odk_b39_2022_core._UI_VERSION || null,
          odk_b39_2022_core._IS_COMPLETE || null,
          odk_b39_2022_core._SUBMISSION_DATE || null,
          odk_b39_2022_core._MARKED_AS_COMPLETE_DATE || null,
          odk_b39_2022_core.PHONENUMBER || null,
          odk_b39_2022_core.GUSER_USER_CELL || null,
          odk_b39_2022_core.TODAY || null,
          odk_b39_2022_core.GUSER_TLOC_ENTER_RANGE || null,
          odk_b39_2022_core.START_RAW || null,
          odk_b39_2022_core.SUBSCRIBERID || null,
          odk_b39_2022_core.GUSER_DCOLLECTION || null,
          odk_b39_2022_core.GUSER_TLOC_FD_DIVISION || null,
          odk_b39_2022_core.GUSER_TLOC_FD_RANGE || null,
          odk_b39_2022_core.GUSER_USER || null,
          odk_b39_2022_core.GUSER_TLOC_FD_BEAT || null,
          odk_b39_2022_core.META_INSTANCE_ID || null,
          odk_b39_2022_core.GUSER_DESIGNATION || null,
          odk_b39_2022_core.SIMSERIAL || null,
          odk_b39_2022_core.GUSER_DCOLLECTION_RAW || null,
          odk_b39_2022_core.DEVICEID || null,
          odk_b39_2022_core.END_RAW || null,
          odk_b39_2022_core.GUSER_TLOC_FD_BEAT_TXT || null,
          odk_b39_2022_core.GUSER_GENERATED_NOTE_NAME_10 || null,
          odk_b39_2022_core.START || null,
          odk_b39_2022_core.END || null,
          odk_b39_2022_core.GUSER_TLOC_ECOZONE || null,
          odk_b39_2022_core.TODAY_RAW || null,
          odk_b39_2022_core.GUSER_TLOC_FD_CIR || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn`,
          [],
          () => {
            console.log(
              'plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn => {
          tx.executeSql(
            `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn._URI || null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn._CREATOR_URI_USER ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn._CREATION_DATE ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn._LAST_UPDATE_URI_USER ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn._LAST_UPDATE_DATE ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn._PARENT_AURI ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn._ORDINAL_NUMBER ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn._TOP_LEVEL_AURI ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn.UNROOTED_FILE_PATH ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn.CONTENT_TYPE ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn.CONTENT_LENGTH ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn.CONTENT_HASH ||
                null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn data',
                error,
                plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn`, // Query the plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn:',
              resultSet,
            );

            try {
              await plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn_create =
  plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn
        tx.executeSql(
          `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn._URI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn._CREATOR_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn._CREATION_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn._LAST_UPDATE_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn._PARENT_AURI ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn._ORDINAL_NUMBER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn._TOP_LEVEL_AURI ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn.UNROOTED_FILE_PATH ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn.CONTENT_TYPE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn.CONTENT_LENGTH ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn.CONTENT_HASH ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref table created successfully',
              );
            },
            reject,
          );

          data.forEach(plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref => {
            tx.executeSql(
              `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref._URI || null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref._CREATOR_URI_USER ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref._CREATION_DATE ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref._LAST_UPDATE_URI_USER ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref._LAST_UPDATE_DATE ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref._DOM_AURI ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref._SUB_AURI ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref._TOP_LEVEL_AURI ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref.PART || null,
              ],
              (_, resultSet) =>
                console.log(
                  'plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref data',
                  error,
                  plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref`, // Query the plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref:',
              resultSet,
            );

            try {
              await plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref_create =
  plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref
        tx.executeSql(
          `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref._URI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref._CREATOR_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref._CREATION_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref._LAST_UPDATE_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref._DOM_AURI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref._SUB_AURI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref._TOP_LEVEL_AURI ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gtrts_planting_planting_month_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gtrts_planting_planting_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gtrts_planting_planting_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gtrts_planting_planting_month`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_planting_planting_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_planting_planting_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_planting_planting_month table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_gtrts_planting_planting_month => {
          tx.executeSql(
            `INSERT INTO plant27_2021_gtrts_planting_planting_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_gtrts_planting_planting_month._URI || null,
              plant27_2021_gtrts_planting_planting_month._CREATOR_URI_USER ||
                null,
              plant27_2021_gtrts_planting_planting_month._CREATION_DATE || null,
              plant27_2021_gtrts_planting_planting_month._LAST_UPDATE_URI_USER ||
                null,
              plant27_2021_gtrts_planting_planting_month._LAST_UPDATE_DATE ||
                null,
              plant27_2021_gtrts_planting_planting_month._PARENT_AURI || null,
              plant27_2021_gtrts_planting_planting_month._ORDINAL_NUMBER ||
                null,
              plant27_2021_gtrts_planting_planting_month._TOP_LEVEL_AURI ||
                null,
              plant27_2021_gtrts_planting_planting_month.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_gtrts_planting_planting_month data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_gtrts_planting_planting_month data',
                error,
                plant27_2021_gtrts_planting_planting_month,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gtrts_planting_planting_month data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gtrts_planting_planting_month_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gtrts_planting_planting_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gtrts_planting_planting_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gtrts_planting_planting_month`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_planting_planting_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_planting_planting_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_planting_planting_month table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gtrts_planting_planting_month data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gtrts_planting_planting_month_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_gtrts_planting_planting_month`, // Query the plant27_2021_gtrts_planting_planting_month table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying plant27_2021_gtrts_planting_planting_month`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gtrts_planting_planting_month_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_gtrts_planting_planting_month`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_gtrts_planting_planting_month:',
            resultSet,
          );

          try {
            await plant27_2021_gtrts_planting_planting_month_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_gtrts_planting_planting_month`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gtrts_planting_planting_month_create =
  plant27_2021_gtrts_planting_planting_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gtrts_planting_planting_month
        tx.executeSql(
          `INSERT INTO plant27_2021_gtrts_planting_planting_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gtrts_planting_planting_month._URI || null,
            plant27_2021_gtrts_planting_planting_month._CREATOR_URI_USER ||
              null,
            plant27_2021_gtrts_planting_planting_month._CREATION_DATE || null,
            plant27_2021_gtrts_planting_planting_month._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gtrts_planting_planting_month._LAST_UPDATE_DATE ||
              null,
            plant27_2021_gtrts_planting_planting_month._PARENT_AURI || null,
            plant27_2021_gtrts_planting_planting_month._ORDINAL_NUMBER || null,
            plant27_2021_gtrts_planting_planting_month._TOP_LEVEL_AURI || null,
            plant27_2021_gtrts_planting_planting_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gtrts_vacancy_filling_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gtrts_vacancy_filling?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gtrts_vacancy_filling items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gtrts_vacancy_filling`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_vacancy_filling table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_vacancy_filling (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GENERATED_NOTE_NAME_242 TEXT,FILLING_YEAR_RAW TEXT,FILLING_YEAR TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_vacancy_filling table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_gtrts_vacancy_filling => {
          tx.executeSql(
            `INSERT INTO plant27_2021_gtrts_vacancy_filling VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_gtrts_vacancy_filling._URI || null,
              plant27_2021_gtrts_vacancy_filling._CREATOR_URI_USER || null,
              plant27_2021_gtrts_vacancy_filling._CREATION_DATE || null,
              plant27_2021_gtrts_vacancy_filling._LAST_UPDATE_URI_USER || null,
              plant27_2021_gtrts_vacancy_filling._LAST_UPDATE_DATE || null,
              plant27_2021_gtrts_vacancy_filling._PARENT_AURI || null,
              plant27_2021_gtrts_vacancy_filling._ORDINAL_NUMBER || null,
              plant27_2021_gtrts_vacancy_filling._TOP_LEVEL_AURI || null,
              plant27_2021_gtrts_vacancy_filling.GENERATED_NOTE_NAME_242 ||
                null,
              plant27_2021_gtrts_vacancy_filling.FILLING_YEAR_RAW || null,
              plant27_2021_gtrts_vacancy_filling.FILLING_YEAR || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_gtrts_vacancy_filling data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_gtrts_vacancy_filling data',
                error,
                plant27_2021_gtrts_vacancy_filling,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gtrts_vacancy_filling data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gtrts_vacancy_filling_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gtrts_vacancy_filling?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gtrts_vacancy_filling items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gtrts_vacancy_filling`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_vacancy_filling table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_vacancy_filling (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GENERATED_NOTE_NAME_242 TEXT,FILLING_YEAR_RAW TEXT,FILLING_YEAR TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_vacancy_filling table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gtrts_vacancy_filling data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gtrts_vacancy_filling_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_gtrts_vacancy_filling`, // Query the plant27_2021_gtrts_vacancy_filling table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying plant27_2021_gtrts_vacancy_filling`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gtrts_vacancy_filling_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_gtrts_vacancy_filling`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_gtrts_vacancy_filling:',
            resultSet,
          );

          try {
            await plant27_2021_gtrts_vacancy_filling_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_gtrts_vacancy_filling`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gtrts_vacancy_filling_create =
  plant27_2021_gtrts_vacancy_filling => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gtrts_vacancy_filling
        tx.executeSql(
          `INSERT INTO plant27_2021_gtrts_vacancy_filling (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,GENERATED_NOTE_NAME_242,FILLING_YEAR_RAW,FILLING_YEAR) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gtrts_vacancy_filling._URI || null,
            plant27_2021_gtrts_vacancy_filling._CREATOR_URI_USER || null,
            plant27_2021_gtrts_vacancy_filling._CREATION_DATE || null,
            plant27_2021_gtrts_vacancy_filling._LAST_UPDATE_URI_USER || null,
            plant27_2021_gtrts_vacancy_filling._LAST_UPDATE_DATE || null,
            plant27_2021_gtrts_vacancy_filling._PARENT_AURI || null,
            plant27_2021_gtrts_vacancy_filling._ORDINAL_NUMBER || null,
            plant27_2021_gtrts_vacancy_filling._TOP_LEVEL_AURI || null,
            plant27_2021_gtrts_vacancy_filling.GENERATED_NOTE_NAME_242 || null,
            plant27_2021_gtrts_vacancy_filling.FILLING_YEAR_RAW || null,
            plant27_2021_gtrts_vacancy_filling.FILLING_YEAR || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gtrts_weeding_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gtrts_weeding?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gtrts_weeding items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gtrts_weeding`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_weeding table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_weeding (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GENERATED_NOTE_NAME_236 TEXT,WEEDING_CYCLE TEXT,WEEDING_YEAR TEXT,WEEDING_YEAR_RAW TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_weeding table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_gtrts_weeding => {
          tx.executeSql(
            `INSERT INTO plant27_2021_gtrts_weeding VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_gtrts_weeding._URI || null,
              plant27_2021_gtrts_weeding._CREATOR_URI_USER || null,
              plant27_2021_gtrts_weeding._CREATION_DATE || null,
              plant27_2021_gtrts_weeding._LAST_UPDATE_URI_USER || null,
              plant27_2021_gtrts_weeding._LAST_UPDATE_DATE || null,
              plant27_2021_gtrts_weeding._PARENT_AURI || null,
              plant27_2021_gtrts_weeding._ORDINAL_NUMBER || null,
              plant27_2021_gtrts_weeding._TOP_LEVEL_AURI || null,
              plant27_2021_gtrts_weeding.GENERATED_NOTE_NAME_236 || null,
              plant27_2021_gtrts_weeding.WEEDING_CYCLE || null,
              plant27_2021_gtrts_weeding.WEEDING_YEAR || null,
              plant27_2021_gtrts_weeding.WEEDING_YEAR_RAW || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_gtrts_weeding data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_gtrts_weeding data',
                error,
                plant27_2021_gtrts_weeding,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gtrts_weeding data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gtrts_weeding_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gtrts_weeding?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gtrts_weeding items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gtrts_weeding`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_weeding table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_weeding (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GENERATED_NOTE_NAME_236 TEXT,WEEDING_CYCLE TEXT,WEEDING_YEAR TEXT,WEEDING_YEAR_RAW TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_weeding table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gtrts_weeding data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gtrts_weeding_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_gtrts_weeding`, // Query the plant27_2021_gtrts_weeding table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying plant27_2021_gtrts_weeding`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gtrts_weeding_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_gtrts_weeding`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_gtrts_weeding:',
            resultSet,
          );

          try {
            await plant27_2021_gtrts_weeding_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_gtrts_weeding`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gtrts_weeding_create = plant27_2021_gtrts_weeding => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert plant27_2021_gtrts_weeding
      tx.executeSql(
        `INSERT INTO plant27_2021_gtrts_weeding (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,GENERATED_NOTE_NAME_236,WEEDING_CYCLE,WEEDING_YEAR,WEEDING_YEAR_RAW) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          plant27_2021_gtrts_weeding._URI || null,
          plant27_2021_gtrts_weeding._CREATOR_URI_USER || null,
          plant27_2021_gtrts_weeding._CREATION_DATE || null,
          plant27_2021_gtrts_weeding._LAST_UPDATE_URI_USER || null,
          plant27_2021_gtrts_weeding._LAST_UPDATE_DATE || null,
          plant27_2021_gtrts_weeding._PARENT_AURI || null,
          plant27_2021_gtrts_weeding._ORDINAL_NUMBER || null,
          plant27_2021_gtrts_weeding._TOP_LEVEL_AURI || null,
          plant27_2021_gtrts_weeding.GENERATED_NOTE_NAME_236 || null,
          plant27_2021_gtrts_weeding.WEEDING_CYCLE || null,
          plant27_2021_gtrts_weeding.WEEDING_YEAR || null,
          plant27_2021_gtrts_weeding.WEEDING_YEAR_RAW || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_overallnotes_ima_bn_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_overallnotes_ima_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_overallnotes_ima_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_overallnotes_ima_bn`,
          [],
          () => {
            console.log(
              'sufal192020_overallnotes_ima_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_overallnotes_ima_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_overallnotes_ima_bn table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_overallnotes_ima_bn => {
          tx.executeSql(
            `INSERT INTO sufal192020_overallnotes_ima_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_overallnotes_ima_bn._URI || null,
              sufal192020_overallnotes_ima_bn._CREATOR_URI_USER || null,
              sufal192020_overallnotes_ima_bn._CREATION_DATE || null,
              sufal192020_overallnotes_ima_bn._LAST_UPDATE_URI_USER || null,
              sufal192020_overallnotes_ima_bn._LAST_UPDATE_DATE || null,
              sufal192020_overallnotes_ima_bn._PARENT_AURI || null,
              sufal192020_overallnotes_ima_bn._ORDINAL_NUMBER || null,
              sufal192020_overallnotes_ima_bn._TOP_LEVEL_AURI || null,
              sufal192020_overallnotes_ima_bn.UNROOTED_FILE_PATH || null,
              sufal192020_overallnotes_ima_bn.CONTENT_TYPE || null,
              sufal192020_overallnotes_ima_bn.CONTENT_LENGTH || null,
              sufal192020_overallnotes_ima_bn.CONTENT_HASH || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_overallnotes_ima_bn data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_overallnotes_ima_bn data',
                error,
                sufal192020_overallnotes_ima_bn,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_overallnotes_ima_bn data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_overallnotes_ima_bn_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_overallnotes_ima_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_overallnotes_ima_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_overallnotes_ima_bn`,
          [],
          () => {
            console.log(
              'sufal192020_overallnotes_ima_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_overallnotes_ima_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_overallnotes_ima_bn table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_overallnotes_ima_bn data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_overallnotes_ima_bn_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_overallnotes_ima_bn`, // Query the sufal192020_overallnotes_ima_bn table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_overallnotes_ima_bn`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_overallnotes_ima_bn_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_overallnotes_ima_bn`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_overallnotes_ima_bn:',
            resultSet,
          );

          try {
            await sufal192020_overallnotes_ima_bn_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_overallnotes_ima_bn`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_overallnotes_ima_bn_create =
  sufal192020_overallnotes_ima_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_overallnotes_ima_bn
        tx.executeSql(
          `INSERT INTO sufal192020_overallnotes_ima_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_overallnotes_ima_bn._URI || null,
            sufal192020_overallnotes_ima_bn._CREATOR_URI_USER || null,
            sufal192020_overallnotes_ima_bn._CREATION_DATE || null,
            sufal192020_overallnotes_ima_bn._LAST_UPDATE_URI_USER || null,
            sufal192020_overallnotes_ima_bn._LAST_UPDATE_DATE || null,
            sufal192020_overallnotes_ima_bn._PARENT_AURI || null,
            sufal192020_overallnotes_ima_bn._ORDINAL_NUMBER || null,
            sufal192020_overallnotes_ima_bn._TOP_LEVEL_AURI || null,
            sufal192020_overallnotes_ima_bn.UNROOTED_FILE_PATH || null,
            sufal192020_overallnotes_ima_bn.CONTENT_TYPE || null,
            sufal192020_overallnotes_ima_bn.CONTENT_LENGTH || null,
            sufal192020_overallnotes_ima_bn.CONTENT_HASH || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_overallnotes_ima_ref_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_overallnotes_ima_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_overallnotes_ima_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_overallnotes_ima_ref`,
          [],
          () => {
            console.log(
              'sufal192020_overallnotes_ima_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_overallnotes_ima_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_overallnotes_ima_ref table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_overallnotes_ima_ref => {
          tx.executeSql(
            `INSERT INTO sufal192020_overallnotes_ima_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_overallnotes_ima_ref._URI || null,
              sufal192020_overallnotes_ima_ref._CREATOR_URI_USER || null,
              sufal192020_overallnotes_ima_ref._CREATION_DATE || null,
              sufal192020_overallnotes_ima_ref._LAST_UPDATE_URI_USER || null,
              sufal192020_overallnotes_ima_ref._LAST_UPDATE_DATE || null,
              sufal192020_overallnotes_ima_ref._DOM_AURI || null,
              sufal192020_overallnotes_ima_ref._SUB_AURI || null,
              sufal192020_overallnotes_ima_ref._TOP_LEVEL_AURI || null,
              sufal192020_overallnotes_ima_ref.PART || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_overallnotes_ima_ref data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_overallnotes_ima_ref data',
                error,
                sufal192020_overallnotes_ima_ref,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_overallnotes_ima_ref data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_overallnotes_ima_ref_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_overallnotes_ima_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_overallnotes_ima_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_overallnotes_ima_ref`,
          [],
          () => {
            console.log(
              'sufal192020_overallnotes_ima_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_overallnotes_ima_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_overallnotes_ima_ref table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_overallnotes_ima_ref data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_overallnotes_ima_ref_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_overallnotes_ima_ref`, // Query the sufal192020_overallnotes_ima_ref table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_overallnotes_ima_ref`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_overallnotes_ima_ref_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_overallnotes_ima_ref`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_overallnotes_ima_ref:',
            resultSet,
          );

          try {
            await sufal192020_overallnotes_ima_ref_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_overallnotes_ima_ref`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_overallnotes_ima_ref_create =
  sufal192020_overallnotes_ima_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_overallnotes_ima_ref
        tx.executeSql(
          `INSERT INTO sufal192020_overallnotes_ima_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_overallnotes_ima_ref._URI || null,
            sufal192020_overallnotes_ima_ref._CREATOR_URI_USER || null,
            sufal192020_overallnotes_ima_ref._CREATION_DATE || null,
            sufal192020_overallnotes_ima_ref._LAST_UPDATE_URI_USER || null,
            sufal192020_overallnotes_ima_ref._LAST_UPDATE_DATE || null,
            sufal192020_overallnotes_ima_ref._DOM_AURI || null,
            sufal192020_overallnotes_ima_ref._SUB_AURI || null,
            sufal192020_overallnotes_ima_ref._TOP_LEVEL_AURI || null,
            sufal192020_overallnotes_ima_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_planting_plan_gplanting_gspp_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_planting_plan_gplanting_gspp?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_planting_plan_gplanting_gspp items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_planting_plan_gplanting_gspp`,
          [],
          () => {
            console.log(
              'sufal192020_planting_plan_gplanting_gspp table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_planting_plan_gplanting_gspp (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,PREF_SOURCE TEXT,PREF_OTHER_SOURCE TEXT,PREF_SPECIES TEXT,PREF_REPRO_TYPE TEXT,PREF_NRSEEDLINGS TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_planting_plan_gplanting_gspp table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_planting_plan_gplanting_gspp => {
          tx.executeSql(
            `INSERT INTO sufal192020_planting_plan_gplanting_gspp VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_planting_plan_gplanting_gspp._URI || null,
              sufal192020_planting_plan_gplanting_gspp._CREATOR_URI_USER ||
                null,
              sufal192020_planting_plan_gplanting_gspp._CREATION_DATE || null,
              sufal192020_planting_plan_gplanting_gspp._LAST_UPDATE_URI_USER ||
                null,
              sufal192020_planting_plan_gplanting_gspp._LAST_UPDATE_DATE ||
                null,
              sufal192020_planting_plan_gplanting_gspp._PARENT_AURI || null,
              sufal192020_planting_plan_gplanting_gspp._ORDINAL_NUMBER || null,
              sufal192020_planting_plan_gplanting_gspp._TOP_LEVEL_AURI || null,
              sufal192020_planting_plan_gplanting_gspp.PREF_SOURCE || null,
              sufal192020_planting_plan_gplanting_gspp.PREF_OTHER_SOURCE ||
                null,
              sufal192020_planting_plan_gplanting_gspp.PREF_SPECIES || null,
              sufal192020_planting_plan_gplanting_gspp.PREF_REPRO_TYPE || null,
              sufal192020_planting_plan_gplanting_gspp.PREF_NRSEEDLINGS || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_planting_plan_gplanting_gspp data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_planting_plan_gplanting_gspp data',
                error,
                sufal192020_planting_plan_gplanting_gspp,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_planting_plan_gplanting_gspp data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_planting_plan_gplanting_gspp_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_planting_plan_gplanting_gspp?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_planting_plan_gplanting_gspp items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_planting_plan_gplanting_gspp`,
          [],
          () => {
            console.log(
              'sufal192020_planting_plan_gplanting_gspp table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_planting_plan_gplanting_gspp (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,PREF_SOURCE TEXT,PREF_OTHER_SOURCE TEXT,PREF_SPECIES TEXT,PREF_REPRO_TYPE TEXT,PREF_NRSEEDLINGS TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_planting_plan_gplanting_gspp table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_planting_plan_gplanting_gspp data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_planting_plan_gplanting_gspp_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_planting_plan_gplanting_gspp`, // Query the sufal192020_planting_plan_gplanting_gspp table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_planting_plan_gplanting_gspp`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_planting_plan_gplanting_gspp_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_planting_plan_gplanting_gspp`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_planting_plan_gplanting_gspp:',
            resultSet,
          );

          try {
            await sufal192020_planting_plan_gplanting_gspp_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_planting_plan_gplanting_gspp`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_planting_plan_gplanting_gspp_create =
  sufal192020_planting_plan_gplanting_gspp => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_planting_plan_gplanting_gspp
        tx.executeSql(
          `INSERT INTO sufal192020_planting_plan_gplanting_gspp (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,PREF_SOURCE,PREF_OTHER_SOURCE,PREF_SPECIES,PREF_REPRO_TYPE,PREF_NRSEEDLINGS) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_planting_plan_gplanting_gspp._URI || null,
            sufal192020_planting_plan_gplanting_gspp._CREATOR_URI_USER || null,
            sufal192020_planting_plan_gplanting_gspp._CREATION_DATE || null,
            sufal192020_planting_plan_gplanting_gspp._LAST_UPDATE_URI_USER ||
              null,
            sufal192020_planting_plan_gplanting_gspp._LAST_UPDATE_DATE || null,
            sufal192020_planting_plan_gplanting_gspp._PARENT_AURI || null,
            sufal192020_planting_plan_gplanting_gspp._ORDINAL_NUMBER || null,
            sufal192020_planting_plan_gplanting_gspp._TOP_LEVEL_AURI || null,
            sufal192020_planting_plan_gplanting_gspp.PREF_SOURCE || null,
            sufal192020_planting_plan_gplanting_gspp.PREF_OTHER_SOURCE || null,
            sufal192020_planting_plan_gplanting_gspp.PREF_SPECIES || null,
            sufal192020_planting_plan_gplanting_gspp.PREF_REPRO_TYPE || null,
            sufal192020_planting_plan_gplanting_gspp.PREF_NRSEEDLINGS || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_plantngplngplntnggnrsry_spp_repeat_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_plantngplngplntnggnrsry_spp_repeat?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_plantngplngplntnggnrsry_spp_repeat items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_plantngplngplntnggnrsry_spp_repeat`,
          [],
          () => {
            console.log(
              'sufal192020_plantngplngplntnggnrsry_spp_repeat table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_plantngplngplntnggnrsry_spp_repeat (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GNURS_SPP_GSPP_NAME TEXT,GNURS_SPP_SPP_NR TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_plantngplngplntnggnrsry_spp_repeat table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_plantngplngplntnggnrsry_spp_repeat => {
          tx.executeSql(
            `INSERT INTO sufal192020_plantngplngplntnggnrsry_spp_repeat VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_plantngplngplntnggnrsry_spp_repeat._URI || null,
              sufal192020_plantngplngplntnggnrsry_spp_repeat._CREATOR_URI_USER ||
                null,
              sufal192020_plantngplngplntnggnrsry_spp_repeat._CREATION_DATE ||
                null,
              sufal192020_plantngplngplntnggnrsry_spp_repeat._LAST_UPDATE_URI_USER ||
                null,
              sufal192020_plantngplngplntnggnrsry_spp_repeat._LAST_UPDATE_DATE ||
                null,
              sufal192020_plantngplngplntnggnrsry_spp_repeat._PARENT_AURI ||
                null,
              sufal192020_plantngplngplntnggnrsry_spp_repeat._ORDINAL_NUMBER ||
                null,
              sufal192020_plantngplngplntnggnrsry_spp_repeat._TOP_LEVEL_AURI ||
                null,
              sufal192020_plantngplngplntnggnrsry_spp_repeat.GNURS_SPP_GSPP_NAME ||
                null,
              sufal192020_plantngplngplntnggnrsry_spp_repeat.GNURS_SPP_SPP_NR ||
                null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_plantngplngplntnggnrsry_spp_repeat data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_plantngplngplntnggnrsry_spp_repeat data',
                error,
                sufal192020_plantngplngplntnggnrsry_spp_repeat,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_plantngplngplntnggnrsry_spp_repeat data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_plantngplngplntnggnrsry_spp_repeat_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_plantngplngplntnggnrsry_spp_repeat?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_plantngplngplntnggnrsry_spp_repeat items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_plantngplngplntnggnrsry_spp_repeat`,
          [],
          () => {
            console.log(
              'sufal192020_plantngplngplntnggnrsry_spp_repeat table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_plantngplngplntnggnrsry_spp_repeat (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GNURS_SPP_GSPP_NAME TEXT,GNURS_SPP_SPP_NR TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_plantngplngplntnggnrsry_spp_repeat table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_plantngplngplntnggnrsry_spp_repeat data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_plantngplngplntnggnrsry_spp_repeat_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_plantngplngplntnggnrsry_spp_repeat`, // Query the sufal192020_plantngplngplntnggnrsry_spp_repeat table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_plantngplngplntnggnrsry_spp_repeat`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_plantngplngplntnggnrsry_spp_repeat_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal192020_plantngplngplntnggnrsry_spp_repeat`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal192020_plantngplngplntnggnrsry_spp_repeat:',
              resultSet,
            );

            try {
              await sufal192020_plantngplngplntnggnrsry_spp_repeat_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal192020_plantngplngplntnggnrsry_spp_repeat`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_plantngplngplntnggnrsry_spp_repeat_create =
  sufal192020_plantngplngplntnggnrsry_spp_repeat => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_plantngplngplntnggnrsry_spp_repeat
        tx.executeSql(
          `INSERT INTO sufal192020_plantngplngplntnggnrsry_spp_repeat (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,GNURS_SPP_GSPP_NAME,GNURS_SPP_SPP_NR) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_plantngplngplntnggnrsry_spp_repeat._URI || null,
            sufal192020_plantngplngplntnggnrsry_spp_repeat._CREATOR_URI_USER ||
              null,
            sufal192020_plantngplngplntnggnrsry_spp_repeat._CREATION_DATE ||
              null,
            sufal192020_plantngplngplntnggnrsry_spp_repeat._LAST_UPDATE_URI_USER ||
              null,
            sufal192020_plantngplngplntnggnrsry_spp_repeat._LAST_UPDATE_DATE ||
              null,
            sufal192020_plantngplngplntnggnrsry_spp_repeat._PARENT_AURI || null,
            sufal192020_plantngplngplntnggnrsry_spp_repeat._ORDINAL_NUMBER ||
              null,
            sufal192020_plantngplngplntnggnrsry_spp_repeat._TOP_LEVEL_AURI ||
              null,
            sufal192020_plantngplngplntnggnrsry_spp_repeat.GNURS_SPP_GSPP_NAME ||
              null,
            sufal192020_plantngplngplntnggnrsry_spp_repeat.GNURS_SPP_SPP_NR ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_rphotoextra_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_rphotoextra?token=${token}`,
    );
    const data = await response.json();
    console.log('Total sufal192020_rphotoextra items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_rphotoextra`,
          [],
          () => {
            console.log('sufal192020_rphotoextra table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_rphotoextra (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,PPICLOCATIONEXTRA_ALT TEXT,XPIC_BEARING TEXT,PPICLOCATIONEXTRA_LNG TEXT,PPICLOCATIONEXTRA_ACC TEXT,PPICLOCATIONEXTRA_LAT TEXT)`,
          [],
          () => {
            console.log('sufal192020_rphotoextra table created successfully');
          },
          reject,
        );

        data.forEach(sufal192020_rphotoextra => {
          tx.executeSql(
            `INSERT INTO sufal192020_rphotoextra VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_rphotoextra._URI || null,
              sufal192020_rphotoextra._CREATOR_URI_USER || null,
              sufal192020_rphotoextra._CREATION_DATE || null,
              sufal192020_rphotoextra._LAST_UPDATE_URI_USER || null,
              sufal192020_rphotoextra._LAST_UPDATE_DATE || null,
              sufal192020_rphotoextra._PARENT_AURI || null,
              sufal192020_rphotoextra._ORDINAL_NUMBER || null,
              sufal192020_rphotoextra._TOP_LEVEL_AURI || null,
              sufal192020_rphotoextra.PPICLOCATIONEXTRA_ALT || null,
              sufal192020_rphotoextra.XPIC_BEARING || null,
              sufal192020_rphotoextra.PPICLOCATIONEXTRA_LNG || null,
              sufal192020_rphotoextra.PPICLOCATIONEXTRA_ACC || null,
              sufal192020_rphotoextra.PPICLOCATIONEXTRA_LAT || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_rphotoextra data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_rphotoextra data',
                error,
                sufal192020_rphotoextra,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_rphotoextra data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_rphotoextra_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_rphotoextra?token=${token}`,
    );
    const data = await response.json();
    console.log('Total sufal192020_rphotoextra items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_rphotoextra`,
          [],
          () => {
            console.log('sufal192020_rphotoextra table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_rphotoextra (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,PPICLOCATIONEXTRA_ALT TEXT,XPIC_BEARING TEXT,PPICLOCATIONEXTRA_LNG TEXT,PPICLOCATIONEXTRA_ACC TEXT,PPICLOCATIONEXTRA_LAT TEXT)`,
          [],
          () => {
            console.log('sufal192020_rphotoextra table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_rphotoextra data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_rphotoextra_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_rphotoextra`, // Query the sufal192020_rphotoextra table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying sufal192020_rphotoextra`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_rphotoextra_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_rphotoextra`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_rphotoextra:',
            resultSet,
          );

          try {
            await sufal192020_rphotoextra_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_rphotoextra`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_rphotoextra_create = sufal192020_rphotoextra => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert sufal192020_rphotoextra
      tx.executeSql(
        `INSERT INTO sufal192020_rphotoextra (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,PPICLOCATIONEXTRA_ALT,XPIC_BEARING,PPICLOCATIONEXTRA_LNG,PPICLOCATIONEXTRA_ACC,PPICLOCATIONEXTRA_LAT) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          sufal192020_rphotoextra._URI || null,
          sufal192020_rphotoextra._CREATOR_URI_USER || null,
          sufal192020_rphotoextra._CREATION_DATE || null,
          sufal192020_rphotoextra._LAST_UPDATE_URI_USER || null,
          sufal192020_rphotoextra._LAST_UPDATE_DATE || null,
          sufal192020_rphotoextra._PARENT_AURI || null,
          sufal192020_rphotoextra._ORDINAL_NUMBER || null,
          sufal192020_rphotoextra._TOP_LEVEL_AURI || null,
          sufal192020_rphotoextra.PPICLOCATIONEXTRA_ALT || null,
          sufal192020_rphotoextra.XPIC_BEARING || null,
          sufal192020_rphotoextra.PPICLOCATIONEXTRA_LNG || null,
          sufal192020_rphotoextra.PPICLOCATIONEXTRA_ACC || null,
          sufal192020_rphotoextra.PPICLOCATIONEXTRA_LAT || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_s_site_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_s_site?token=${token}`,
    );
    const data = await response.json();
    console.log('Total sufal192020_s_site items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_s_site`,
          [],
          () => {
            console.log('sufal192020_s_site table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_s_site (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,TRACE_GPX TEXT,POLYLINE TEXT,TOTAREA_HA TEXT,TMAIN_POLYTYPE TEXT,POLYTRACE TEXT,TOTAREA_AC TEXT)`,
          [],
          () => {
            console.log('sufal192020_s_site table created successfully');
          },
          reject,
        );

        data.forEach(sufal192020_s_site => {
          tx.executeSql(
            `INSERT INTO sufal192020_s_site VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_s_site._URI || null,
              sufal192020_s_site._CREATOR_URI_USER || null,
              sufal192020_s_site._CREATION_DATE || null,
              sufal192020_s_site._LAST_UPDATE_URI_USER || null,
              sufal192020_s_site._LAST_UPDATE_DATE || null,
              sufal192020_s_site._PARENT_AURI || null,
              sufal192020_s_site._ORDINAL_NUMBER || null,
              sufal192020_s_site._TOP_LEVEL_AURI || null,
              sufal192020_s_site.TRACE_GPX || null,
              sufal192020_s_site.POLYLINE || null,
              sufal192020_s_site.TOTAREA_HA || null,
              sufal192020_s_site.TMAIN_POLYTYPE || null,
              sufal192020_s_site.POLYTRACE || null,
              sufal192020_s_site.TOTAREA_AC || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_s_site data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_s_site data',
                error,
                sufal192020_s_site,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching sufal192020_s_site data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_s_site_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_s_site?token=${token}`,
    );
    const data = await response.json();
    console.log('Total sufal192020_s_site items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_s_site`,
          [],
          () => {
            console.log('sufal192020_s_site table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_s_site (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,TRACE_GPX TEXT,POLYLINE TEXT,TOTAREA_HA TEXT,TMAIN_POLYTYPE TEXT,POLYTRACE TEXT,TOTAREA_AC TEXT)`,
          [],
          () => {
            console.log('sufal192020_s_site table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching sufal192020_s_site data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_s_site_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_s_site`, // Query the sufal192020_s_site table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying sufal192020_s_site`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_s_site_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_s_site`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from sufal192020_s_site:', resultSet);

          try {
            await sufal192020_s_site_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from sufal192020_s_site`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_s_site_create = sufal192020_s_site => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert sufal192020_s_site
      tx.executeSql(
        `INSERT INTO sufal192020_s_site (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,TRACE_GPX,POLYLINE,TOTAREA_HA,TMAIN_POLYTYPE,POLYTRACE,TOTAREA_AC) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          sufal192020_s_site._URI || null,
          sufal192020_s_site._CREATOR_URI_USER || null,
          sufal192020_s_site._CREATION_DATE || null,
          sufal192020_s_site._LAST_UPDATE_URI_USER || null,
          sufal192020_s_site._LAST_UPDATE_DATE || null,
          sufal192020_s_site._PARENT_AURI || null,
          sufal192020_s_site._ORDINAL_NUMBER || null,
          sufal192020_s_site._TOP_LEVEL_AURI || null,
          sufal192020_s_site.TRACE_GPX || null,
          sufal192020_s_site.POLYLINE || null,
          sufal192020_s_site.TOTAREA_HA || null,
          sufal192020_s_site.TMAIN_POLYTYPE || null,
          sufal192020_s_site.POLYTRACE || null,
          sufal192020_s_site.TOTAREA_AC || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn table created successfully',
              );
            },
            reject,
          );

          data.forEach(sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn => {
            tx.executeSql(
              `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn._URI || null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn._CREATOR_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn._CREATION_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn._LAST_UPDATE_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn._LAST_UPDATE_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn._PARENT_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn._ORDINAL_NUMBER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn._TOP_LEVEL_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn.UNROOTED_FILE_PATH ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn.CONTENT_TYPE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn.CONTENT_LENGTH ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn.CONTENT_HASH ||
                  null,
              ],
              (_, resultSet) =>
                console.log(
                  'sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn data',
                  error,
                  sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn`, // Query the sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn:',
              resultSet,
            );

            try {
              await sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn_create =
  sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn
        tx.executeSql(
          `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn._URI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn._CREATOR_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn._CREATION_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn._LAST_UPDATE_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn._LAST_UPDATE_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn._PARENT_AURI ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn._ORDINAL_NUMBER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn._TOP_LEVEL_AURI ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn.UNROOTED_FILE_PATH ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn.CONTENT_TYPE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn.CONTENT_LENGTH ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn.CONTENT_HASH ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref table created successfully',
              );
            },
            reject,
          );

          data.forEach(sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref => {
            tx.executeSql(
              `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref._URI || null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref._CREATOR_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref._CREATION_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref._LAST_UPDATE_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref._LAST_UPDATE_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref._DOM_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref._SUB_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref._TOP_LEVEL_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref.PART || null,
              ],
              (_, resultSet) =>
                console.log(
                  'sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref data',
                  error,
                  sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref`, // Query the sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref:',
              resultSet,
            );

            try {
              await sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref_create =
  sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref
        tx.executeSql(
          `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref._URI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref._CREATOR_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref._CREATION_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref._LAST_UPDATE_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref._LAST_UPDATE_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref._DOM_AURI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref._SUB_AURI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref._TOP_LEVEL_AURI ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const _form_info_xform_blb_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_info_xform_blb?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _form_info_xform_blb items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info_xform_blb`,
          [],
          () => {
            console.log('_form_info_xform_blb table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info_xform_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log('_form_info_xform_blb table created successfully');
          },
          reject,
        );

        data.forEach(_form_info_xform_blb => {
          tx.executeSql(
            `INSERT INTO _form_info_xform_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              _form_info_xform_blb._URI || null,
              _form_info_xform_blb._CREATOR_URI_USER || null,
              _form_info_xform_blb._CREATION_DATE || null,
              _form_info_xform_blb._LAST_UPDATE_URI_USER || null,
              _form_info_xform_blb._LAST_UPDATE_DATE || null,
              _form_info_xform_blb._TOP_LEVEL_AURI || null,
              _form_info_xform_blb.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                '_form_info_xform_blb data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _form_info_xform_blb data',
                error,
                _form_info_xform_blb,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _form_info_xform_blb data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _form_info_xform_blb_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_info_xform_blb?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _form_info_xform_blb items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info_xform_blb`,
          [],
          () => {
            console.log('_form_info_xform_blb table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info_xform_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log('_form_info_xform_blb table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _form_info_xform_blb data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _form_info_xform_blb_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info_xform_blb`, // Query the _form_info_xform_blb table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _form_info_xform_blb`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _form_info_xform_blb_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _form_info_xform_blb`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from _form_info_xform_blb:', resultSet);

          try {
            await _form_info_xform_blb_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from _form_info_xform_blb`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _form_info_xform_blb_create = _form_info_xform_blb => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _form_info_xform_blb
      tx.executeSql(
        `INSERT INTO _form_info_xform_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
        [
          _form_info_xform_blb._URI || null,
          _form_info_xform_blb._CREATOR_URI_USER || null,
          _form_info_xform_blb._CREATION_DATE || null,
          _form_info_xform_blb._LAST_UPDATE_URI_USER || null,
          _form_info_xform_blb._LAST_UPDATE_DATE || null,
          _form_info_xform_blb._TOP_LEVEL_AURI || null,
          _form_info_xform_blb.VALUE || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const _form_info_manifest_bin_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_info_manifest_bin?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _form_info_manifest_bin items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info_manifest_bin`,
          [],
          () => {
            console.log('_form_info_manifest_bin table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info_manifest_bin (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log('_form_info_manifest_bin table created successfully');
          },
          reject,
        );

        data.forEach(_form_info_manifest_bin => {
          tx.executeSql(
            `INSERT INTO _form_info_manifest_bin VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              _form_info_manifest_bin._URI || null,
              _form_info_manifest_bin._CREATOR_URI_USER || null,
              _form_info_manifest_bin._CREATION_DATE || null,
              _form_info_manifest_bin._LAST_UPDATE_URI_USER || null,
              _form_info_manifest_bin._LAST_UPDATE_DATE || null,
              _form_info_manifest_bin._PARENT_AURI || null,
              _form_info_manifest_bin._ORDINAL_NUMBER || null,
              _form_info_manifest_bin._TOP_LEVEL_AURI || null,
              _form_info_manifest_bin.UNROOTED_FILE_PATH || null,
              _form_info_manifest_bin.CONTENT_TYPE || null,
              _form_info_manifest_bin.CONTENT_LENGTH || null,
              _form_info_manifest_bin.CONTENT_HASH || null,
            ],
            (_, resultSet) =>
              console.log(
                '_form_info_manifest_bin data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _form_info_manifest_bin data',
                error,
                _form_info_manifest_bin,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _form_info_manifest_bin data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _form_info_manifest_bin_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_info_manifest_bin?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _form_info_manifest_bin items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info_manifest_bin`,
          [],
          () => {
            console.log('_form_info_manifest_bin table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info_manifest_bin (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log('_form_info_manifest_bin table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _form_info_manifest_bin data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _form_info_manifest_bin_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info_manifest_bin`, // Query the _form_info_manifest_bin table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _form_info_manifest_bin`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _form_info_manifest_bin_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _form_info_manifest_bin`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from _form_info_manifest_bin:',
            resultSet,
          );

          try {
            await _form_info_manifest_bin_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from _form_info_manifest_bin`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _form_info_manifest_bin_create = _form_info_manifest_bin => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _form_info_manifest_bin
      tx.executeSql(
        `INSERT INTO _form_info_manifest_bin (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          _form_info_manifest_bin._URI || null,
          _form_info_manifest_bin._CREATOR_URI_USER || null,
          _form_info_manifest_bin._CREATION_DATE || null,
          _form_info_manifest_bin._LAST_UPDATE_URI_USER || null,
          _form_info_manifest_bin._LAST_UPDATE_DATE || null,
          _form_info_manifest_bin._PARENT_AURI || null,
          _form_info_manifest_bin._ORDINAL_NUMBER || null,
          _form_info_manifest_bin._TOP_LEVEL_AURI || null,
          _form_info_manifest_bin.UNROOTED_FILE_PATH || null,
          _form_info_manifest_bin.CONTENT_TYPE || null,
          _form_info_manifest_bin.CONTENT_LENGTH || null,
          _form_info_manifest_bin.CONTENT_HASH || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const _form_info_manifest_blb_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_info_manifest_blb?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _form_info_manifest_blb items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info_manifest_blb`,
          [],
          () => {
            console.log('_form_info_manifest_blb table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info_manifest_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log('_form_info_manifest_blb table created successfully');
          },
          reject,
        );

        data.forEach(_form_info_manifest_blb => {
          tx.executeSql(
            `INSERT INTO _form_info_manifest_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              _form_info_manifest_blb._URI || null,
              _form_info_manifest_blb._CREATOR_URI_USER || null,
              _form_info_manifest_blb._CREATION_DATE || null,
              _form_info_manifest_blb._LAST_UPDATE_URI_USER || null,
              _form_info_manifest_blb._LAST_UPDATE_DATE || null,
              _form_info_manifest_blb._TOP_LEVEL_AURI || null,
              _form_info_manifest_blb.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                '_form_info_manifest_blb data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _form_info_manifest_blb data',
                error,
                _form_info_manifest_blb,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _form_info_manifest_blb data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _form_info_manifest_blb_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_info_manifest_blb?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _form_info_manifest_blb items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info_manifest_blb`,
          [],
          () => {
            console.log('_form_info_manifest_blb table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info_manifest_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log('_form_info_manifest_blb table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _form_info_manifest_blb data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _form_info_manifest_blb_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info_manifest_blb`, // Query the _form_info_manifest_blb table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _form_info_manifest_blb`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _form_info_manifest_blb_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _form_info_manifest_blb`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from _form_info_manifest_blb:',
            resultSet,
          );

          try {
            await _form_info_manifest_blb_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from _form_info_manifest_blb`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _form_info_manifest_blb_create = _form_info_manifest_blb => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _form_info_manifest_blb
      tx.executeSql(
        `INSERT INTO _form_info_manifest_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
        [
          _form_info_manifest_blb._URI || null,
          _form_info_manifest_blb._CREATOR_URI_USER || null,
          _form_info_manifest_blb._CREATION_DATE || null,
          _form_info_manifest_blb._LAST_UPDATE_URI_USER || null,
          _form_info_manifest_blb._LAST_UPDATE_DATE || null,
          _form_info_manifest_blb._TOP_LEVEL_AURI || null,
          _form_info_manifest_blb.VALUE || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const _form_info_manifest_ref_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_info_manifest_ref?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _form_info_manifest_ref items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info_manifest_ref`,
          [],
          () => {
            console.log('_form_info_manifest_ref table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info_manifest_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log('_form_info_manifest_ref table created successfully');
          },
          reject,
        );

        data.forEach(_form_info_manifest_ref => {
          tx.executeSql(
            `INSERT INTO _form_info_manifest_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              _form_info_manifest_ref._URI || null,
              _form_info_manifest_ref._CREATOR_URI_USER || null,
              _form_info_manifest_ref._CREATION_DATE || null,
              _form_info_manifest_ref._LAST_UPDATE_URI_USER || null,
              _form_info_manifest_ref._LAST_UPDATE_DATE || null,
              _form_info_manifest_ref._DOM_AURI || null,
              _form_info_manifest_ref._SUB_AURI || null,
              _form_info_manifest_ref._TOP_LEVEL_AURI || null,
              _form_info_manifest_ref.PART || null,
            ],
            (_, resultSet) =>
              console.log(
                '_form_info_manifest_ref data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _form_info_manifest_ref data',
                error,
                _form_info_manifest_ref,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _form_info_manifest_ref data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _form_info_manifest_ref_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_info_manifest_ref?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _form_info_manifest_ref items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info_manifest_ref`,
          [],
          () => {
            console.log('_form_info_manifest_ref table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info_manifest_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log('_form_info_manifest_ref table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _form_info_manifest_ref data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _form_info_manifest_ref_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info_manifest_ref`, // Query the _form_info_manifest_ref table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _form_info_manifest_ref`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _form_info_manifest_ref_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _form_info_manifest_ref`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from _form_info_manifest_ref:',
            resultSet,
          );

          try {
            await _form_info_manifest_ref_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from _form_info_manifest_ref`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _form_info_manifest_ref_create = _form_info_manifest_ref => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _form_info_manifest_ref
      tx.executeSql(
        `INSERT INTO _form_info_manifest_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          _form_info_manifest_ref._URI || null,
          _form_info_manifest_ref._CREATOR_URI_USER || null,
          _form_info_manifest_ref._CREATION_DATE || null,
          _form_info_manifest_ref._LAST_UPDATE_URI_USER || null,
          _form_info_manifest_ref._LAST_UPDATE_DATE || null,
          _form_info_manifest_ref._DOM_AURI || null,
          _form_info_manifest_ref._SUB_AURI || null,
          _form_info_manifest_ref._TOP_LEVEL_AURI || null,
          _form_info_manifest_ref.PART || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gregen_reg_cen_to_w_bn_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_w_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_w_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_w_bn`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_w_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_w_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_w_bn table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gregen_reg_cen_to_w_bn => {
          tx.executeSql(
            `INSERT INTO sufal192020_gregen_reg_cen_to_w_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gregen_reg_cen_to_w_bn._URI || null,
              sufal192020_gregen_reg_cen_to_w_bn._CREATOR_URI_USER || null,
              sufal192020_gregen_reg_cen_to_w_bn._CREATION_DATE || null,
              sufal192020_gregen_reg_cen_to_w_bn._LAST_UPDATE_URI_USER || null,
              sufal192020_gregen_reg_cen_to_w_bn._LAST_UPDATE_DATE || null,
              sufal192020_gregen_reg_cen_to_w_bn._PARENT_AURI || null,
              sufal192020_gregen_reg_cen_to_w_bn._ORDINAL_NUMBER || null,
              sufal192020_gregen_reg_cen_to_w_bn._TOP_LEVEL_AURI || null,
              sufal192020_gregen_reg_cen_to_w_bn.UNROOTED_FILE_PATH || null,
              sufal192020_gregen_reg_cen_to_w_bn.CONTENT_TYPE || null,
              sufal192020_gregen_reg_cen_to_w_bn.CONTENT_LENGTH || null,
              sufal192020_gregen_reg_cen_to_w_bn.CONTENT_HASH || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gregen_reg_cen_to_w_bn data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gregen_reg_cen_to_w_bn data',
                error,
                sufal192020_gregen_reg_cen_to_w_bn,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_w_bn data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gregen_reg_cen_to_w_bn_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_w_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_w_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_w_bn`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_w_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_w_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_w_bn table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_w_bn data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gregen_reg_cen_to_w_bn_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gregen_reg_cen_to_w_bn`, // Query the sufal192020_gregen_reg_cen_to_w_bn table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gregen_reg_cen_to_w_bn`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gregen_reg_cen_to_w_bn_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gregen_reg_cen_to_w_bn`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gregen_reg_cen_to_w_bn:',
            resultSet,
          );

          try {
            await sufal192020_gregen_reg_cen_to_w_bn_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gregen_reg_cen_to_w_bn`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gregen_reg_cen_to_w_bn_create =
  sufal192020_gregen_reg_cen_to_w_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gregen_reg_cen_to_w_bn
        tx.executeSql(
          `INSERT INTO sufal192020_gregen_reg_cen_to_w_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gregen_reg_cen_to_w_bn._URI || null,
            sufal192020_gregen_reg_cen_to_w_bn._CREATOR_URI_USER || null,
            sufal192020_gregen_reg_cen_to_w_bn._CREATION_DATE || null,
            sufal192020_gregen_reg_cen_to_w_bn._LAST_UPDATE_URI_USER || null,
            sufal192020_gregen_reg_cen_to_w_bn._LAST_UPDATE_DATE || null,
            sufal192020_gregen_reg_cen_to_w_bn._PARENT_AURI || null,
            sufal192020_gregen_reg_cen_to_w_bn._ORDINAL_NUMBER || null,
            sufal192020_gregen_reg_cen_to_w_bn._TOP_LEVEL_AURI || null,
            sufal192020_gregen_reg_cen_to_w_bn.UNROOTED_FILE_PATH || null,
            sufal192020_gregen_reg_cen_to_w_bn.CONTENT_TYPE || null,
            sufal192020_gregen_reg_cen_to_w_bn.CONTENT_LENGTH || null,
            sufal192020_gregen_reg_cen_to_w_bn.CONTENT_HASH || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gregen_reg_cen_to_w_ref_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_w_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_w_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_w_ref`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_w_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_w_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_w_ref table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gregen_reg_cen_to_w_ref => {
          tx.executeSql(
            `INSERT INTO sufal192020_gregen_reg_cen_to_w_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gregen_reg_cen_to_w_ref._URI || null,
              sufal192020_gregen_reg_cen_to_w_ref._CREATOR_URI_USER || null,
              sufal192020_gregen_reg_cen_to_w_ref._CREATION_DATE || null,
              sufal192020_gregen_reg_cen_to_w_ref._LAST_UPDATE_URI_USER || null,
              sufal192020_gregen_reg_cen_to_w_ref._LAST_UPDATE_DATE || null,
              sufal192020_gregen_reg_cen_to_w_ref._DOM_AURI || null,
              sufal192020_gregen_reg_cen_to_w_ref._SUB_AURI || null,
              sufal192020_gregen_reg_cen_to_w_ref._TOP_LEVEL_AURI || null,
              sufal192020_gregen_reg_cen_to_w_ref.PART || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gregen_reg_cen_to_w_ref data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gregen_reg_cen_to_w_ref data',
                error,
                sufal192020_gregen_reg_cen_to_w_ref,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_w_ref data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gregen_reg_cen_to_w_ref_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_w_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_w_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_w_ref`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_w_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_w_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_w_ref table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_w_ref data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gregen_reg_cen_to_w_ref_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gregen_reg_cen_to_w_ref`, // Query the sufal192020_gregen_reg_cen_to_w_ref table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gregen_reg_cen_to_w_ref`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gregen_reg_cen_to_w_ref_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gregen_reg_cen_to_w_ref`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gregen_reg_cen_to_w_ref:',
            resultSet,
          );

          try {
            await sufal192020_gregen_reg_cen_to_w_ref_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gregen_reg_cen_to_w_ref`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gregen_reg_cen_to_w_ref_create =
  sufal192020_gregen_reg_cen_to_w_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gregen_reg_cen_to_w_ref
        tx.executeSql(
          `INSERT INTO sufal192020_gregen_reg_cen_to_w_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gregen_reg_cen_to_w_ref._URI || null,
            sufal192020_gregen_reg_cen_to_w_ref._CREATOR_URI_USER || null,
            sufal192020_gregen_reg_cen_to_w_ref._CREATION_DATE || null,
            sufal192020_gregen_reg_cen_to_w_ref._LAST_UPDATE_URI_USER || null,
            sufal192020_gregen_reg_cen_to_w_ref._LAST_UPDATE_DATE || null,
            sufal192020_gregen_reg_cen_to_w_ref._DOM_AURI || null,
            sufal192020_gregen_reg_cen_to_w_ref._SUB_AURI || null,
            sufal192020_gregen_reg_cen_to_w_ref._TOP_LEVEL_AURI || null,
            sufal192020_gregen_reg_cen_to_w_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const com202021_conslttn_ttndnc_pctre_consultation_notes_blb_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_notes_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total com202021_conslttn_ttndnc_pctre_consultation_notes_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS com202021_conslttn_ttndnc_pctre_consultation_notes_blb`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_notes_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS com202021_conslttn_ttndnc_pctre_consultation_notes_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_notes_blb table created successfully',
              );
            },
            reject,
          );

          data.forEach(
            com202021_conslttn_ttndnc_pctre_consultation_notes_blb => {
              tx.executeSql(
                `INSERT INTO com202021_conslttn_ttndnc_pctre_consultation_notes_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
                [
                  com202021_conslttn_ttndnc_pctre_consultation_notes_blb._URI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_blb._CREATOR_URI_USER ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_blb._CREATION_DATE ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_blb._LAST_UPDATE_URI_USER ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_blb._LAST_UPDATE_DATE ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_blb._TOP_LEVEL_AURI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_blb.VALUE ||
                    null,
                ],
                (_, resultSet) =>
                  console.log(
                    'com202021_conslttn_ttndnc_pctre_consultation_notes_blb data inserted successfully',
                    resultSet,
                  ),
                (_, error) => {
                  console.error(
                    'Error inserting com202021_conslttn_ttndnc_pctre_consultation_notes_blb data',
                    error,
                    com202021_conslttn_ttndnc_pctre_consultation_notes_blb,
                  );
                },
              );
            },
          );
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching com202021_conslttn_ttndnc_pctre_consultation_notes_blb data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const com202021_conslttn_ttndnc_pctre_consultation_notes_blb_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_notes_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total com202021_conslttn_ttndnc_pctre_consultation_notes_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS com202021_conslttn_ttndnc_pctre_consultation_notes_blb`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_notes_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS com202021_conslttn_ttndnc_pctre_consultation_notes_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_notes_blb table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching com202021_conslttn_ttndnc_pctre_consultation_notes_blb data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const com202021_conslttn_ttndnc_pctre_consultation_notes_blb_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM com202021_conslttn_ttndnc_pctre_consultation_notes_blb`, // Query the com202021_conslttn_ttndnc_pctre_consultation_notes_blb table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying com202021_conslttn_ttndnc_pctre_consultation_notes_blb`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const com202021_conslttn_ttndnc_pctre_consultation_notes_blb_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM com202021_conslttn_ttndnc_pctre_consultation_notes_blb`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from com202021_conslttn_ttndnc_pctre_consultation_notes_blb:',
              resultSet,
            );

            try {
              await com202021_conslttn_ttndnc_pctre_consultation_notes_blb_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from com202021_conslttn_ttndnc_pctre_consultation_notes_blb`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const com202021_conslttn_ttndnc_pctre_consultation_notes_blb_create =
  com202021_conslttn_ttndnc_pctre_consultation_notes_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert com202021_conslttn_ttndnc_pctre_consultation_notes_blb
        tx.executeSql(
          `INSERT INTO com202021_conslttn_ttndnc_pctre_consultation_notes_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            com202021_conslttn_ttndnc_pctre_consultation_notes_blb._URI || null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_blb._CREATOR_URI_USER ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_blb._CREATION_DATE ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_blb._LAST_UPDATE_URI_USER ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_blb._LAST_UPDATE_DATE ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_blb._TOP_LEVEL_AURI ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_blb.VALUE ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref table created successfully',
              );
            },
            reject,
          );

          data.forEach(sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref => {
            tx.executeSql(
              `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref._URI || null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref._CREATOR_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref._CREATION_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref._LAST_UPDATE_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref._LAST_UPDATE_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref._DOM_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref._SUB_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref._TOP_LEVEL_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref.PART || null,
              ],
              (_, resultSet) =>
                console.log(
                  'sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref data',
                  error,
                  sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref`, // Query the sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref:',
              resultSet,
            );

            try {
              await sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref_create =
  sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref
        tx.executeSql(
          `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref._URI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref._CREATOR_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref._CREATION_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref._LAST_UPDATE_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref._LAST_UPDATE_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref._DOM_AURI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref._SUB_AURI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref._TOP_LEVEL_AURI ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb table created successfully',
              );
            },
            reject,
          );

          data.forEach(sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb => {
            tx.executeSql(
              `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
              [
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb._URI || null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb._CREATOR_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb._CREATION_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb._LAST_UPDATE_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb._LAST_UPDATE_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb._TOP_LEVEL_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb.VALUE || null,
              ],
              (_, resultSet) =>
                console.log(
                  'sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb data',
                  error,
                  sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb`, // Query the sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb:',
              resultSet,
            );

            try {
              await sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb_create =
  sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb
        tx.executeSql(
          `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb._URI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb._CREATOR_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb._CREATION_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb._LAST_UPDATE_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb._LAST_UPDATE_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb._TOP_LEVEL_AURI ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb table created successfully',
              );
            },
            reject,
          );

          data.forEach(sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb => {
            tx.executeSql(
              `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
              [
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb._URI || null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb._CREATOR_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb._CREATION_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb._LAST_UPDATE_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb._LAST_UPDATE_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb._TOP_LEVEL_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb.VALUE || null,
              ],
              (_, resultSet) =>
                console.log(
                  'sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb data',
                  error,
                  sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb`, // Query the sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb:',
              resultSet,
            );

            try {
              await sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb_create =
  sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb
        tx.executeSql(
          `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb._URI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb._CREATOR_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb._CREATION_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb._LAST_UPDATE_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb._LAST_UPDATE_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb._TOP_LEVEL_AURI ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn table created successfully',
              );
            },
            reject,
          );

          data.forEach(sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn => {
            tx.executeSql(
              `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn._URI || null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn._CREATOR_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn._CREATION_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn._LAST_UPDATE_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn._LAST_UPDATE_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn._PARENT_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn._ORDINAL_NUMBER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn._TOP_LEVEL_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn.UNROOTED_FILE_PATH ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn.CONTENT_TYPE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn.CONTENT_LENGTH ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn.CONTENT_HASH ||
                  null,
              ],
              (_, resultSet) =>
                console.log(
                  'sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn data',
                  error,
                  sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn`, // Query the sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn:',
              resultSet,
            );

            try {
              await sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn_create =
  sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn
        tx.executeSql(
          `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn._URI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn._CREATOR_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn._CREATION_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn._LAST_UPDATE_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn._LAST_UPDATE_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn._PARENT_AURI ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn._ORDINAL_NUMBER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn._TOP_LEVEL_AURI ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn.UNROOTED_FILE_PATH ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn.CONTENT_TYPE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn.CONTENT_LENGTH ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn.CONTENT_HASH ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref table created successfully',
              );
            },
            reject,
          );

          data.forEach(sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref => {
            tx.executeSql(
              `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref._URI || null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref._CREATOR_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref._CREATION_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref._LAST_UPDATE_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref._LAST_UPDATE_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref._DOM_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref._SUB_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref._TOP_LEVEL_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref.PART || null,
              ],
              (_, resultSet) =>
                console.log(
                  'sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref data',
                  error,
                  sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref`, // Query the sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref:',
              resultSet,
            );

            try {
              await sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref_create =
  sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref
        tx.executeSql(
          `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref._URI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref._CREATOR_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref._CREATION_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref._LAST_UPDATE_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref._LAST_UPDATE_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref._DOM_AURI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref._SUB_AURI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref._TOP_LEVEL_AURI ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal_13_2021_gregen_spp_regen_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal_13_2021_gregen_spp_regen?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal_13_2021_gregen_spp_regen items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal_13_2021_gregen_spp_regen`,
          [],
          () => {
            console.log(
              'sufal_13_2021_gregen_spp_regen table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_spp_regen (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,NUM_TREES TEXT,GENERATED_NOTE_NAME_43 TEXT,RSPP_NAME TEXT,RSPP_NR_NAT TEXT)`,
          [],
          () => {
            console.log(
              'sufal_13_2021_gregen_spp_regen table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal_13_2021_gregen_spp_regen => {
          tx.executeSql(
            `INSERT INTO sufal_13_2021_gregen_spp_regen VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal_13_2021_gregen_spp_regen._URI || null,
              sufal_13_2021_gregen_spp_regen._CREATOR_URI_USER || null,
              sufal_13_2021_gregen_spp_regen._CREATION_DATE || null,
              sufal_13_2021_gregen_spp_regen._LAST_UPDATE_URI_USER || null,
              sufal_13_2021_gregen_spp_regen._LAST_UPDATE_DATE || null,
              sufal_13_2021_gregen_spp_regen._PARENT_AURI || null,
              sufal_13_2021_gregen_spp_regen._ORDINAL_NUMBER || null,
              sufal_13_2021_gregen_spp_regen._TOP_LEVEL_AURI || null,
              sufal_13_2021_gregen_spp_regen.NUM_TREES || null,
              sufal_13_2021_gregen_spp_regen.GENERATED_NOTE_NAME_43 || null,
              sufal_13_2021_gregen_spp_regen.RSPP_NAME || null,
              sufal_13_2021_gregen_spp_regen.RSPP_NR_NAT || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal_13_2021_gregen_spp_regen data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal_13_2021_gregen_spp_regen data',
                error,
                sufal_13_2021_gregen_spp_regen,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal_13_2021_gregen_spp_regen data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal_13_2021_gregen_spp_regen_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal_13_2021_gregen_spp_regen?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal_13_2021_gregen_spp_regen items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal_13_2021_gregen_spp_regen`,
          [],
          () => {
            console.log(
              'sufal_13_2021_gregen_spp_regen table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_spp_regen (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,NUM_TREES TEXT,GENERATED_NOTE_NAME_43 TEXT,RSPP_NAME TEXT,RSPP_NR_NAT TEXT)`,
          [],
          () => {
            console.log(
              'sufal_13_2021_gregen_spp_regen table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal_13_2021_gregen_spp_regen data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal_13_2021_gregen_spp_regen_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal_13_2021_gregen_spp_regen`, // Query the sufal_13_2021_gregen_spp_regen table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying sufal_13_2021_gregen_spp_regen`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal_13_2021_gregen_spp_regen_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal_13_2021_gregen_spp_regen`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal_13_2021_gregen_spp_regen:',
            resultSet,
          );

          try {
            await sufal_13_2021_gregen_spp_regen_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal_13_2021_gregen_spp_regen`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal_13_2021_gregen_spp_regen_create =
  sufal_13_2021_gregen_spp_regen => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal_13_2021_gregen_spp_regen
        tx.executeSql(
          `INSERT INTO sufal_13_2021_gregen_spp_regen (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,NUM_TREES,GENERATED_NOTE_NAME_43,RSPP_NAME,RSPP_NR_NAT) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal_13_2021_gregen_spp_regen._URI || null,
            sufal_13_2021_gregen_spp_regen._CREATOR_URI_USER || null,
            sufal_13_2021_gregen_spp_regen._CREATION_DATE || null,
            sufal_13_2021_gregen_spp_regen._LAST_UPDATE_URI_USER || null,
            sufal_13_2021_gregen_spp_regen._LAST_UPDATE_DATE || null,
            sufal_13_2021_gregen_spp_regen._PARENT_AURI || null,
            sufal_13_2021_gregen_spp_regen._ORDINAL_NUMBER || null,
            sufal_13_2021_gregen_spp_regen._TOP_LEVEL_AURI || null,
            sufal_13_2021_gregen_spp_regen.NUM_TREES || null,
            sufal_13_2021_gregen_spp_regen.GENERATED_NOTE_NAME_43 || null,
            sufal_13_2021_gregen_spp_regen.RSPP_NAME || null,
            sufal_13_2021_gregen_spp_regen.RSPP_NR_NAT || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal_13_2021_gr_regen_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal_13_2021_gr_regen?token=${token}`,
    );
    const data = await response.json();
    console.log('Total sufal_13_2021_gr_regen items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal_13_2021_gr_regen`,
          [],
          () => {
            console.log('sufal_13_2021_gr_regen table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal_13_2021_gr_regen (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,REG_AVG_SEEDLING_PER_HA_PER_PLOT TEXT,GREGEN_GREGEN_PLOT_CROWN_CLOSURE TEXT,REG_AVG_SEEDLING_PER_PLOT TEXT,REG_AVG_TREES_PER_HA_PER_PLOT TEXT,GREGEN_GREGEN_PLOT_RSITEPOINT_ALT TEXT,GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST TEXT,GREGEN_GREGEN_PLOT_RSITEPOINT_LNG TEXT,GENERATED_NOTE_NAME_54 TEXT,GREGEN_GREGEN_PLOT_REGEN_PLOT_NO TEXT,GREGEN_GREGEN_PLOT_RSITEPOINT_LAT TEXT,GREGEN_GREGEN_PLOT_RSITEPOINT_ACC TEXT,GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_28 TEXT,GENERATED_NOTE_NAME_51 TEXT,REG_AVG_TREES_PER_PLOT TEXT,GREGEN_GREGEN_PLOT_RRECORD_HOW TEXT,GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH TEXT)`,
          [],
          () => {
            console.log('sufal_13_2021_gr_regen table created successfully');
          },
          reject,
        );

        data.forEach(sufal_13_2021_gr_regen => {
          tx.executeSql(
            `INSERT INTO sufal_13_2021_gr_regen VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal_13_2021_gr_regen._URI || null,
              sufal_13_2021_gr_regen._CREATOR_URI_USER || null,
              sufal_13_2021_gr_regen._CREATION_DATE || null,
              sufal_13_2021_gr_regen._LAST_UPDATE_URI_USER || null,
              sufal_13_2021_gr_regen._LAST_UPDATE_DATE || null,
              sufal_13_2021_gr_regen._PARENT_AURI || null,
              sufal_13_2021_gr_regen._ORDINAL_NUMBER || null,
              sufal_13_2021_gr_regen._TOP_LEVEL_AURI || null,
              sufal_13_2021_gr_regen.REG_AVG_SEEDLING_PER_HA_PER_PLOT || null,
              sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_CROWN_CLOSURE || null,
              sufal_13_2021_gr_regen.REG_AVG_SEEDLING_PER_PLOT || null,
              sufal_13_2021_gr_regen.REG_AVG_TREES_PER_HA_PER_PLOT || null,
              sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_RSITEPOINT_ALT || null,
              sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST ||
                null,
              sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_RSITEPOINT_LNG || null,
              sufal_13_2021_gr_regen.GENERATED_NOTE_NAME_54 || null,
              sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_REGEN_PLOT_NO || null,
              sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_RSITEPOINT_LAT || null,
              sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_RSITEPOINT_ACC || null,
              sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_28 ||
                null,
              sufal_13_2021_gr_regen.GENERATED_NOTE_NAME_51 || null,
              sufal_13_2021_gr_regen.REG_AVG_TREES_PER_PLOT || null,
              sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_RRECORD_HOW || null,
              sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH ||
                null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal_13_2021_gr_regen data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal_13_2021_gr_regen data',
                error,
                sufal_13_2021_gr_regen,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching sufal_13_2021_gr_regen data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal_13_2021_gr_regen_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal_13_2021_gr_regen?token=${token}`,
    );
    const data = await response.json();
    console.log('Total sufal_13_2021_gr_regen items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal_13_2021_gr_regen`,
          [],
          () => {
            console.log('sufal_13_2021_gr_regen table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal_13_2021_gr_regen (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,REG_AVG_SEEDLING_PER_HA_PER_PLOT TEXT,GREGEN_GREGEN_PLOT_CROWN_CLOSURE TEXT,REG_AVG_SEEDLING_PER_PLOT TEXT,REG_AVG_TREES_PER_HA_PER_PLOT TEXT,GREGEN_GREGEN_PLOT_RSITEPOINT_ALT TEXT,GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST TEXT,GREGEN_GREGEN_PLOT_RSITEPOINT_LNG TEXT,GENERATED_NOTE_NAME_54 TEXT,GREGEN_GREGEN_PLOT_REGEN_PLOT_NO TEXT,GREGEN_GREGEN_PLOT_RSITEPOINT_LAT TEXT,GREGEN_GREGEN_PLOT_RSITEPOINT_ACC TEXT,GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_28 TEXT,GENERATED_NOTE_NAME_51 TEXT,REG_AVG_TREES_PER_PLOT TEXT,GREGEN_GREGEN_PLOT_RRECORD_HOW TEXT,GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH TEXT)`,
          [],
          () => {
            console.log('sufal_13_2021_gr_regen table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching sufal_13_2021_gr_regen data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal_13_2021_gr_regen_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal_13_2021_gr_regen`, // Query the sufal_13_2021_gr_regen table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying sufal_13_2021_gr_regen`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal_13_2021_gr_regen_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal_13_2021_gr_regen`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal_13_2021_gr_regen:',
            resultSet,
          );

          try {
            await sufal_13_2021_gr_regen_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal_13_2021_gr_regen`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal_13_2021_gr_regen_create = sufal_13_2021_gr_regen => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert sufal_13_2021_gr_regen
      tx.executeSql(
        `INSERT INTO sufal_13_2021_gr_regen (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,REG_AVG_SEEDLING_PER_HA_PER_PLOT,GREGEN_GREGEN_PLOT_CROWN_CLOSURE,REG_AVG_SEEDLING_PER_PLOT,REG_AVG_TREES_PER_HA_PER_PLOT,GREGEN_GREGEN_PLOT_RSITEPOINT_ALT,GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST,GREGEN_GREGEN_PLOT_RSITEPOINT_LNG,GENERATED_NOTE_NAME_54,GREGEN_GREGEN_PLOT_REGEN_PLOT_NO,GREGEN_GREGEN_PLOT_RSITEPOINT_LAT,GREGEN_GREGEN_PLOT_RSITEPOINT_ACC,GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_28,GENERATED_NOTE_NAME_51,REG_AVG_TREES_PER_PLOT,GREGEN_GREGEN_PLOT_RRECORD_HOW,GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          sufal_13_2021_gr_regen._URI || null,
          sufal_13_2021_gr_regen._CREATOR_URI_USER || null,
          sufal_13_2021_gr_regen._CREATION_DATE || null,
          sufal_13_2021_gr_regen._LAST_UPDATE_URI_USER || null,
          sufal_13_2021_gr_regen._LAST_UPDATE_DATE || null,
          sufal_13_2021_gr_regen._PARENT_AURI || null,
          sufal_13_2021_gr_regen._ORDINAL_NUMBER || null,
          sufal_13_2021_gr_regen._TOP_LEVEL_AURI || null,
          sufal_13_2021_gr_regen.REG_AVG_SEEDLING_PER_HA_PER_PLOT || null,
          sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_CROWN_CLOSURE || null,
          sufal_13_2021_gr_regen.REG_AVG_SEEDLING_PER_PLOT || null,
          sufal_13_2021_gr_regen.REG_AVG_TREES_PER_HA_PER_PLOT || null,
          sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_RSITEPOINT_ALT || null,
          sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST ||
            null,
          sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_RSITEPOINT_LNG || null,
          sufal_13_2021_gr_regen.GENERATED_NOTE_NAME_54 || null,
          sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_REGEN_PLOT_NO || null,
          sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_RSITEPOINT_LAT || null,
          sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_RSITEPOINT_ACC || null,
          sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_28 ||
            null,
          sufal_13_2021_gr_regen.GENERATED_NOTE_NAME_51 || null,
          sufal_13_2021_gr_regen.REG_AVG_TREES_PER_PLOT || null,
          sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_RRECORD_HOW || null,
          sufal_13_2021_gr_regen.GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH ||
            null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const _backend_actions_api = async () => {
  try {
    const response = await fetch(`${baseApi}/_backend_actions?token=${token}`);
    const data = await response.json();
    console.log('Total _backend_actions items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _backend_actions`,
          [],
          () => {
            console.log('_backend_actions table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _backend_actions (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,LAST_REVISION TEXT)`,
          [],
          () => {
            console.log('_backend_actions table created successfully');
          },
          reject,
        );

        data.forEach(_backend_actions => {
          tx.executeSql(
            `INSERT INTO _backend_actions VALUES (?, ?, ?, ?, ?, ?)`,
            [
              _backend_actions._URI || null,
              _backend_actions._CREATOR_URI_USER || null,
              _backend_actions._CREATION_DATE || null,
              _backend_actions._LAST_UPDATE_URI_USER || null,
              _backend_actions._LAST_UPDATE_DATE || null,
              _backend_actions.LAST_REVISION || null,
            ],
            (_, resultSet) =>
              console.log(
                '_backend_actions data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _backend_actions data',
                error,
                _backend_actions,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _backend_actions data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _backend_actions_api2 = async () => {
  try {
    const response = await fetch(`${baseApi}/_backend_actions?token=${token}`);
    const data = await response.json();
    console.log('Total _backend_actions items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _backend_actions`,
          [],
          () => {
            console.log('_backend_actions table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _backend_actions (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,LAST_REVISION TEXT)`,
          [],
          () => {
            console.log('_backend_actions table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _backend_actions data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _backend_actions_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _backend_actions`, // Query the _backend_actions table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _backend_actions`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _backend_actions_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _backend_actions`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from _backend_actions:', resultSet);

          try {
            await _backend_actions_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from _backend_actions`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _backend_actions_create = _backend_actions => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _backend_actions
      tx.executeSql(
        `INSERT INTO _backend_actions (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,LAST_REVISION) VALUES (?, ?, ?, ?, ?, ?)`,
        [
          _backend_actions._URI || null,
          _backend_actions._CREATOR_URI_USER || null,
          _backend_actions._CREATION_DATE || null,
          _backend_actions._LAST_UPDATE_URI_USER || null,
          _backend_actions._LAST_UPDATE_DATE || null,
          _backend_actions.LAST_REVISION || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const _filter_group_api = async () => {
  try {
    const response = await fetch(`${baseApi}/_filter_group?token=${token}`);
    const data = await response.json();
    console.log('Total _filter_group items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _filter_group`,
          [],
          () => {
            console.log('_filter_group table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _filter_group (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,FORM_ID TEXT,NAME TEXT,URI_USER TEXT,IS_PUBLIC TEXT,INCLUDE_METADATA TEXT)`,
          [],
          () => {
            console.log('_filter_group table created successfully');
          },
          reject,
        );

        data.forEach(_filter_group => {
          tx.executeSql(
            `INSERT INTO _filter_group VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              _filter_group._URI || null,
              _filter_group._CREATOR_URI_USER || null,
              _filter_group._CREATION_DATE || null,
              _filter_group._LAST_UPDATE_URI_USER || null,
              _filter_group._LAST_UPDATE_DATE || null,
              _filter_group.FORM_ID || null,
              _filter_group.NAME || null,
              _filter_group.URI_USER || null,
              _filter_group.IS_PUBLIC || null,
              _filter_group.INCLUDE_METADATA || null,
            ],
            (_, resultSet) =>
              console.log(
                '_filter_group data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _filter_group data',
                error,
                _filter_group,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _filter_group data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _filter_group_api2 = async () => {
  try {
    const response = await fetch(`${baseApi}/_filter_group?token=${token}`);
    const data = await response.json();
    console.log('Total _filter_group items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _filter_group`,
          [],
          () => {
            console.log('_filter_group table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _filter_group (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,FORM_ID TEXT,NAME TEXT,URI_USER TEXT,IS_PUBLIC TEXT,INCLUDE_METADATA TEXT)`,
          [],
          () => {
            console.log('_filter_group table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _filter_group data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _filter_group_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _filter_group`, // Query the _filter_group table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _filter_group`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _filter_group_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _filter_group`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from _filter_group:', resultSet);

          try {
            await _filter_group_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from _filter_group`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _filter_group_create = _filter_group => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _filter_group
      tx.executeSql(
        `INSERT INTO _filter_group (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,FORM_ID,NAME,URI_USER,IS_PUBLIC,INCLUDE_METADATA) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          _filter_group._URI || null,
          _filter_group._CREATOR_URI_USER || null,
          _filter_group._CREATION_DATE || null,
          _filter_group._LAST_UPDATE_URI_USER || null,
          _filter_group._LAST_UPDATE_DATE || null,
          _filter_group.FORM_ID || null,
          _filter_group.NAME || null,
          _filter_group.URI_USER || null,
          _filter_group.IS_PUBLIC || null,
          _filter_group.INCLUDE_METADATA || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const _form_data_model_api = async () => {
  try {
    const response = await fetch(`${baseApi}/_form_data_model?token=${token}`);
    const data = await response.json();
    console.log('Total _form_data_model items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_data_model`,
          [],
          () => {
            console.log('_form_data_model table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_data_model (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,URI_SUBMISSION_DATA_MODEL TEXT,PARENT_URI_FORM_DATA_MODEL TEXT,ORDINAL_NUMBER TEXT,ELEMENT_TYPE TEXT,ELEMENT_NAME TEXT,PERSIST_AS_COLUMN_NAME TEXT,PERSIST_AS_TABLE_NAME TEXT,PERSIST_AS_SCHEMA_NAME TEXT)`,
          [],
          () => {
            console.log('_form_data_model table created successfully');
          },
          reject,
        );

        data.forEach(_form_data_model => {
          tx.executeSql(
            `INSERT INTO _form_data_model VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              _form_data_model._URI || null,
              _form_data_model._CREATOR_URI_USER || null,
              _form_data_model._CREATION_DATE || null,
              _form_data_model._LAST_UPDATE_URI_USER || null,
              _form_data_model._LAST_UPDATE_DATE || null,
              _form_data_model.URI_SUBMISSION_DATA_MODEL || null,
              _form_data_model.PARENT_URI_FORM_DATA_MODEL || null,
              _form_data_model.ORDINAL_NUMBER || null,
              _form_data_model.ELEMENT_TYPE || null,
              _form_data_model.ELEMENT_NAME || null,
              _form_data_model.PERSIST_AS_COLUMN_NAME || null,
              _form_data_model.PERSIST_AS_TABLE_NAME || null,
              _form_data_model.PERSIST_AS_SCHEMA_NAME || null,
            ],
            (_, resultSet) =>
              console.log(
                '_form_data_model data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _form_data_model data',
                error,
                _form_data_model,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _form_data_model data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _form_data_model_api2 = async () => {
  try {
    const response = await fetch(`${baseApi}/_form_data_model?token=${token}`);
    const data = await response.json();
    console.log('Total _form_data_model items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_data_model`,
          [],
          () => {
            console.log('_form_data_model table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_data_model (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,URI_SUBMISSION_DATA_MODEL TEXT,PARENT_URI_FORM_DATA_MODEL TEXT,ORDINAL_NUMBER TEXT,ELEMENT_TYPE TEXT,ELEMENT_NAME TEXT,PERSIST_AS_COLUMN_NAME TEXT,PERSIST_AS_TABLE_NAME TEXT,PERSIST_AS_SCHEMA_NAME TEXT)`,
          [],
          () => {
            console.log('_form_data_model table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _form_data_model data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _form_data_model_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_data_model`, // Query the _form_data_model table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _form_data_model`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _form_data_model_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _form_data_model`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from _form_data_model:', resultSet);

          try {
            await _form_data_model_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from _form_data_model`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _form_data_model_create = _form_data_model => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _form_data_model
      tx.executeSql(
        `INSERT INTO _form_data_model (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,URI_SUBMISSION_DATA_MODEL,PARENT_URI_FORM_DATA_MODEL,ORDINAL_NUMBER,ELEMENT_TYPE,ELEMENT_NAME,PERSIST_AS_COLUMN_NAME,PERSIST_AS_TABLE_NAME,PERSIST_AS_SCHEMA_NAME) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          _form_data_model._URI || null,
          _form_data_model._CREATOR_URI_USER || null,
          _form_data_model._CREATION_DATE || null,
          _form_data_model._LAST_UPDATE_URI_USER || null,
          _form_data_model._LAST_UPDATE_DATE || null,
          _form_data_model.URI_SUBMISSION_DATA_MODEL || null,
          _form_data_model.PARENT_URI_FORM_DATA_MODEL || null,
          _form_data_model.ORDINAL_NUMBER || null,
          _form_data_model.ELEMENT_TYPE || null,
          _form_data_model.ELEMENT_NAME || null,
          _form_data_model.PERSIST_AS_COLUMN_NAME || null,
          _form_data_model.PERSIST_AS_TABLE_NAME || null,
          _form_data_model.PERSIST_AS_SCHEMA_NAME || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const _form_info_api = async () => {
  try {
    const response = await fetch(`${baseApi}/_form_info?token=${token}`);
    const data = await response.json();
    console.log('Total _form_info items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info`,
          [],
          () => {
            console.log('_form_info table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,FORM_ID TEXT)`,
          [],
          () => {
            console.log('_form_info table created successfully');
          },
          reject,
        );

        data.forEach(_form_info => {
          tx.executeSql(
            `INSERT INTO _form_info VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              _form_info._URI || null,
              _form_info._CREATOR_URI_USER || null,
              _form_info._CREATION_DATE || null,
              _form_info._LAST_UPDATE_URI_USER || null,
              _form_info._LAST_UPDATE_DATE || null,
              _form_info._MODEL_VERSION || null,
              _form_info._UI_VERSION || null,
              _form_info._IS_COMPLETE || null,
              _form_info._SUBMISSION_DATE || null,
              _form_info._MARKED_AS_COMPLETE_DATE || null,
              _form_info.FORM_ID || null,
            ],
            (_, resultSet) =>
              console.log('_form_info data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting _form_info data',
                error,
                _form_info,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _form_info data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _form_info_api2 = async () => {
  try {
    const response = await fetch(`${baseApi}/_form_info?token=${token}`);
    const data = await response.json();
    console.log('Total _form_info items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info`,
          [],
          () => {
            console.log('_form_info table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,FORM_ID TEXT)`,
          [],
          () => {
            console.log('_form_info table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _form_info data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _form_info_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info`, // Query the _form_info table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _form_info`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _form_info_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _form_info`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from _form_info:', resultSet);

          try {
            await _form_info_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from _form_info`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _form_info_create = _form_info => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _form_info
      tx.executeSql(
        `INSERT INTO _form_info (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_MODEL_VERSION,_UI_VERSION,_IS_COMPLETE,_SUBMISSION_DATE,_MARKED_AS_COMPLETE_DATE,FORM_ID) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          _form_info._URI || null,
          _form_info._CREATOR_URI_USER || null,
          _form_info._CREATION_DATE || null,
          _form_info._LAST_UPDATE_URI_USER || null,
          _form_info._LAST_UPDATE_DATE || null,
          _form_info._MODEL_VERSION || null,
          _form_info._UI_VERSION || null,
          _form_info._IS_COMPLETE || null,
          _form_info._SUBMISSION_DATE || null,
          _form_info._MARKED_AS_COMPLETE_DATE || null,
          _form_info.FORM_ID || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const _form_info_fileset_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_info_fileset?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _form_info_fileset items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info_fileset`,
          [],
          () => {
            console.log('_form_info_fileset table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info_fileset (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,ROOT_ELEMENT_MODEL_VERSION TEXT,IS_ENCRYPTED_FORM TEXT,IS_DOWNLOAD_ALLOWED TEXT,LANGUAGE_CODE TEXT,FORM_NAME TEXT,DESCRIPTION TEXT,DESCRIPTION_URL TEXT)`,
          [],
          () => {
            console.log('_form_info_fileset table created successfully');
          },
          reject,
        );

        data.forEach(_form_info_fileset => {
          tx.executeSql(
            `INSERT INTO _form_info_fileset VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              _form_info_fileset._URI || null,
              _form_info_fileset._CREATOR_URI_USER || null,
              _form_info_fileset._CREATION_DATE || null,
              _form_info_fileset._LAST_UPDATE_URI_USER || null,
              _form_info_fileset._LAST_UPDATE_DATE || null,
              _form_info_fileset._PARENT_AURI || null,
              _form_info_fileset._ORDINAL_NUMBER || null,
              _form_info_fileset._TOP_LEVEL_AURI || null,
              _form_info_fileset.ROOT_ELEMENT_MODEL_VERSION || null,
              _form_info_fileset.IS_ENCRYPTED_FORM || null,
              _form_info_fileset.IS_DOWNLOAD_ALLOWED || null,
              _form_info_fileset.LANGUAGE_CODE || null,
              _form_info_fileset.FORM_NAME || null,
              _form_info_fileset.DESCRIPTION || null,
              _form_info_fileset.DESCRIPTION_URL || null,
            ],
            (_, resultSet) =>
              console.log(
                '_form_info_fileset data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _form_info_fileset data',
                error,
                _form_info_fileset,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _form_info_fileset data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _form_info_fileset_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_info_fileset?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _form_info_fileset items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info_fileset`,
          [],
          () => {
            console.log('_form_info_fileset table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info_fileset (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,ROOT_ELEMENT_MODEL_VERSION TEXT,IS_ENCRYPTED_FORM TEXT,IS_DOWNLOAD_ALLOWED TEXT,LANGUAGE_CODE TEXT,FORM_NAME TEXT,DESCRIPTION TEXT,DESCRIPTION_URL TEXT)`,
          [],
          () => {
            console.log('_form_info_fileset table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _form_info_fileset data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _form_info_fileset_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info_fileset`, // Query the _form_info_fileset table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _form_info_fileset`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _form_info_fileset_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _form_info_fileset`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from _form_info_fileset:', resultSet);

          try {
            await _form_info_fileset_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from _form_info_fileset`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _form_info_fileset_create = _form_info_fileset => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _form_info_fileset
      tx.executeSql(
        `INSERT INTO _form_info_fileset (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,ROOT_ELEMENT_MODEL_VERSION,IS_ENCRYPTED_FORM,IS_DOWNLOAD_ALLOWED,LANGUAGE_CODE,FORM_NAME,DESCRIPTION,DESCRIPTION_URL) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          _form_info_fileset._URI || null,
          _form_info_fileset._CREATOR_URI_USER || null,
          _form_info_fileset._CREATION_DATE || null,
          _form_info_fileset._LAST_UPDATE_URI_USER || null,
          _form_info_fileset._LAST_UPDATE_DATE || null,
          _form_info_fileset._PARENT_AURI || null,
          _form_info_fileset._ORDINAL_NUMBER || null,
          _form_info_fileset._TOP_LEVEL_AURI || null,
          _form_info_fileset.ROOT_ELEMENT_MODEL_VERSION || null,
          _form_info_fileset.IS_ENCRYPTED_FORM || null,
          _form_info_fileset.IS_DOWNLOAD_ALLOWED || null,
          _form_info_fileset.LANGUAGE_CODE || null,
          _form_info_fileset.FORM_NAME || null,
          _form_info_fileset.DESCRIPTION || null,
          _form_info_fileset.DESCRIPTION_URL || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const _form_info_submission_association_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_info_submission_association?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total _form_info_submission_association items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info_submission_association`,
          [],
          () => {
            console.log(
              '_form_info_submission_association table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info_submission_association (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,URI_MD5_SUBMISSION_FORM_ID TEXT,URI_MD5_FORM_ID TEXT,SUBMISSION_FORM_ID TEXT,IS_PERSISTENCE_MODEL_COMPLETE TEXT,IS_SUBMISSION_ALLOWED TEXT,URI_SUBMISSION_DATA_MODEL TEXT)`,
          [],
          () => {
            console.log(
              '_form_info_submission_association table created successfully',
            );
          },
          reject,
        );

        data.forEach(_form_info_submission_association => {
          tx.executeSql(
            `INSERT INTO _form_info_submission_association VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              _form_info_submission_association._URI || null,
              _form_info_submission_association._CREATOR_URI_USER || null,
              _form_info_submission_association._CREATION_DATE || null,
              _form_info_submission_association._LAST_UPDATE_URI_USER || null,
              _form_info_submission_association._LAST_UPDATE_DATE || null,
              _form_info_submission_association.URI_MD5_SUBMISSION_FORM_ID ||
                null,
              _form_info_submission_association.URI_MD5_FORM_ID || null,
              _form_info_submission_association.SUBMISSION_FORM_ID || null,
              _form_info_submission_association.IS_PERSISTENCE_MODEL_COMPLETE ||
                null,
              _form_info_submission_association.IS_SUBMISSION_ALLOWED || null,
              _form_info_submission_association.URI_SUBMISSION_DATA_MODEL ||
                null,
            ],
            (_, resultSet) =>
              console.log(
                '_form_info_submission_association data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _form_info_submission_association data',
                error,
                _form_info_submission_association,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _form_info_submission_association data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _form_info_submission_association_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_info_submission_association?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total _form_info_submission_association items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info_submission_association`,
          [],
          () => {
            console.log(
              '_form_info_submission_association table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info_submission_association (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,URI_MD5_SUBMISSION_FORM_ID TEXT,URI_MD5_FORM_ID TEXT,SUBMISSION_FORM_ID TEXT,IS_PERSISTENCE_MODEL_COMPLETE TEXT,IS_SUBMISSION_ALLOWED TEXT,URI_SUBMISSION_DATA_MODEL TEXT)`,
          [],
          () => {
            console.log(
              '_form_info_submission_association table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _form_info_submission_association data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _form_info_submission_association_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info_submission_association`, // Query the _form_info_submission_association table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying _form_info_submission_association`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _form_info_submission_association_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _form_info_submission_association`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from _form_info_submission_association:',
            resultSet,
          );

          try {
            await _form_info_submission_association_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from _form_info_submission_association`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _form_info_submission_association_create =
  _form_info_submission_association => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert _form_info_submission_association
        tx.executeSql(
          `INSERT INTO _form_info_submission_association (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,URI_MD5_SUBMISSION_FORM_ID,URI_MD5_FORM_ID,SUBMISSION_FORM_ID,IS_PERSISTENCE_MODEL_COMPLETE,IS_SUBMISSION_ALLOWED,URI_SUBMISSION_DATA_MODEL) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            _form_info_submission_association._URI || null,
            _form_info_submission_association._CREATOR_URI_USER || null,
            _form_info_submission_association._CREATION_DATE || null,
            _form_info_submission_association._LAST_UPDATE_URI_USER || null,
            _form_info_submission_association._LAST_UPDATE_DATE || null,
            _form_info_submission_association.URI_MD5_SUBMISSION_FORM_ID ||
              null,
            _form_info_submission_association.URI_MD5_FORM_ID || null,
            _form_info_submission_association.SUBMISSION_FORM_ID || null,
            _form_info_submission_association.IS_PERSISTENCE_MODEL_COMPLETE ||
              null,
            _form_info_submission_association.IS_SUBMISSION_ALLOWED || null,
            _form_info_submission_association.URI_SUBMISSION_DATA_MODEL || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const _form_info_xform_bin_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_info_xform_bin?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _form_info_xform_bin items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info_xform_bin`,
          [],
          () => {
            console.log('_form_info_xform_bin table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info_xform_bin (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log('_form_info_xform_bin table created successfully');
          },
          reject,
        );

        data.forEach(_form_info_xform_bin => {
          tx.executeSql(
            `INSERT INTO _form_info_xform_bin VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              _form_info_xform_bin._URI || null,
              _form_info_xform_bin._CREATOR_URI_USER || null,
              _form_info_xform_bin._CREATION_DATE || null,
              _form_info_xform_bin._LAST_UPDATE_URI_USER || null,
              _form_info_xform_bin._LAST_UPDATE_DATE || null,
              _form_info_xform_bin._PARENT_AURI || null,
              _form_info_xform_bin._ORDINAL_NUMBER || null,
              _form_info_xform_bin._TOP_LEVEL_AURI || null,
              _form_info_xform_bin.UNROOTED_FILE_PATH || null,
              _form_info_xform_bin.CONTENT_TYPE || null,
              _form_info_xform_bin.CONTENT_LENGTH || null,
              _form_info_xform_bin.CONTENT_HASH || null,
            ],
            (_, resultSet) =>
              console.log(
                '_form_info_xform_bin data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _form_info_xform_bin data',
                error,
                _form_info_xform_bin,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _form_info_xform_bin data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _form_info_xform_bin_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_info_xform_bin?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _form_info_xform_bin items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info_xform_bin`,
          [],
          () => {
            console.log('_form_info_xform_bin table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info_xform_bin (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log('_form_info_xform_bin table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _form_info_xform_bin data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _form_info_xform_bin_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info_xform_bin`, // Query the _form_info_xform_bin table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _form_info_xform_bin`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _form_info_xform_bin_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _form_info_xform_bin`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from _form_info_xform_bin:', resultSet);

          try {
            await _form_info_xform_bin_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from _form_info_xform_bin`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _form_info_xform_bin_create = _form_info_xform_bin => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _form_info_xform_bin
      tx.executeSql(
        `INSERT INTO _form_info_xform_bin (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          _form_info_xform_bin._URI || null,
          _form_info_xform_bin._CREATOR_URI_USER || null,
          _form_info_xform_bin._CREATION_DATE || null,
          _form_info_xform_bin._LAST_UPDATE_URI_USER || null,
          _form_info_xform_bin._LAST_UPDATE_DATE || null,
          _form_info_xform_bin._PARENT_AURI || null,
          _form_info_xform_bin._ORDINAL_NUMBER || null,
          _form_info_xform_bin._TOP_LEVEL_AURI || null,
          _form_info_xform_bin.UNROOTED_FILE_PATH || null,
          _form_info_xform_bin.CONTENT_TYPE || null,
          _form_info_xform_bin.CONTENT_LENGTH || null,
          _form_info_xform_bin.CONTENT_HASH || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const _form_info_xform_ref_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_info_xform_ref?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _form_info_xform_ref items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info_xform_ref`,
          [],
          () => {
            console.log('_form_info_xform_ref table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info_xform_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log('_form_info_xform_ref table created successfully');
          },
          reject,
        );

        data.forEach(_form_info_xform_ref => {
          tx.executeSql(
            `INSERT INTO _form_info_xform_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              _form_info_xform_ref._URI || null,
              _form_info_xform_ref._CREATOR_URI_USER || null,
              _form_info_xform_ref._CREATION_DATE || null,
              _form_info_xform_ref._LAST_UPDATE_URI_USER || null,
              _form_info_xform_ref._LAST_UPDATE_DATE || null,
              _form_info_xform_ref._DOM_AURI || null,
              _form_info_xform_ref._SUB_AURI || null,
              _form_info_xform_ref._TOP_LEVEL_AURI || null,
              _form_info_xform_ref.PART || null,
            ],
            (_, resultSet) =>
              console.log(
                '_form_info_xform_ref data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _form_info_xform_ref data',
                error,
                _form_info_xform_ref,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _form_info_xform_ref data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _form_info_xform_ref_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_info_xform_ref?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _form_info_xform_ref items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_info_xform_ref`,
          [],
          () => {
            console.log('_form_info_xform_ref table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_info_xform_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log('_form_info_xform_ref table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _form_info_xform_ref data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _form_info_xform_ref_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info_xform_ref`, // Query the _form_info_xform_ref table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _form_info_xform_ref`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _form_info_xform_ref_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _form_info_xform_ref`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from _form_info_xform_ref:', resultSet);

          try {
            await _form_info_xform_ref_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from _form_info_xform_ref`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _form_info_xform_ref_create = _form_info_xform_ref => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _form_info_xform_ref
      tx.executeSql(
        `INSERT INTO _form_info_xform_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          _form_info_xform_ref._URI || null,
          _form_info_xform_ref._CREATOR_URI_USER || null,
          _form_info_xform_ref._CREATION_DATE || null,
          _form_info_xform_ref._LAST_UPDATE_URI_USER || null,
          _form_info_xform_ref._LAST_UPDATE_DATE || null,
          _form_info_xform_ref._DOM_AURI || null,
          _form_info_xform_ref._SUB_AURI || null,
          _form_info_xform_ref._TOP_LEVEL_AURI || null,
          _form_info_xform_ref.PART || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const _form_service_cursor_2_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_service_cursor_2?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _form_service_cursor_2 items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_service_cursor_2`,
          [],
          () => {
            console.log('_form_service_cursor_2 table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_service_cursor_2 (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,URI_MD5_FORM_ID TEXT,AURI_SERVICE TEXT,EXT_SERVICE_TYPE TEXT,EXTERNAL_SERVICE_OPTION TEXT,IS_EXTERNAL_SERVICE_PREPARED TEXT,OPERATIONAL_STATUS TEXT,RETRY_STATUS TEXT,ESTABLISHMENT_DATETIME TEXT,UPLOAD_COMPLETED TEXT,LAST_UPLOAD_PERSISTENCE_CURSOR TEXT,LAST_UPLOAD_KEY TEXT,LAST_STREAMING_PERSISTENCE_CURSOR TEXT,LAST_STREAMING_KEY TEXT,FORM_ID TEXT)`,
          [],
          () => {
            console.log('_form_service_cursor_2 table created successfully');
          },
          reject,
        );

        data.forEach(_form_service_cursor_2 => {
          tx.executeSql(
            `INSERT INTO _form_service_cursor_2 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              _form_service_cursor_2._URI || null,
              _form_service_cursor_2._CREATOR_URI_USER || null,
              _form_service_cursor_2._CREATION_DATE || null,
              _form_service_cursor_2._LAST_UPDATE_URI_USER || null,
              _form_service_cursor_2._LAST_UPDATE_DATE || null,
              _form_service_cursor_2.URI_MD5_FORM_ID || null,
              _form_service_cursor_2.AURI_SERVICE || null,
              _form_service_cursor_2.EXT_SERVICE_TYPE || null,
              _form_service_cursor_2.EXTERNAL_SERVICE_OPTION || null,
              _form_service_cursor_2.IS_EXTERNAL_SERVICE_PREPARED || null,
              _form_service_cursor_2.OPERATIONAL_STATUS || null,
              _form_service_cursor_2.RETRY_STATUS || null,
              _form_service_cursor_2.ESTABLISHMENT_DATETIME || null,
              _form_service_cursor_2.UPLOAD_COMPLETED || null,
              _form_service_cursor_2.LAST_UPLOAD_PERSISTENCE_CURSOR || null,
              _form_service_cursor_2.LAST_UPLOAD_KEY || null,
              _form_service_cursor_2.LAST_STREAMING_PERSISTENCE_CURSOR || null,
              _form_service_cursor_2.LAST_STREAMING_KEY || null,
              _form_service_cursor_2.FORM_ID || null,
            ],
            (_, resultSet) =>
              console.log(
                '_form_service_cursor_2 data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _form_service_cursor_2 data',
                error,
                _form_service_cursor_2,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _form_service_cursor_2 data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _form_service_cursor_2_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_form_service_cursor_2?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _form_service_cursor_2 items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _form_service_cursor_2`,
          [],
          () => {
            console.log('_form_service_cursor_2 table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _form_service_cursor_2 (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,URI_MD5_FORM_ID TEXT,AURI_SERVICE TEXT,EXT_SERVICE_TYPE TEXT,EXTERNAL_SERVICE_OPTION TEXT,IS_EXTERNAL_SERVICE_PREPARED TEXT,OPERATIONAL_STATUS TEXT,RETRY_STATUS TEXT,ESTABLISHMENT_DATETIME TEXT,UPLOAD_COMPLETED TEXT,LAST_UPLOAD_PERSISTENCE_CURSOR TEXT,LAST_UPLOAD_KEY TEXT,LAST_STREAMING_PERSISTENCE_CURSOR TEXT,LAST_STREAMING_KEY TEXT,FORM_ID TEXT)`,
          [],
          () => {
            console.log('_form_service_cursor_2 table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _form_service_cursor_2 data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _form_service_cursor_2_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_service_cursor_2`, // Query the _form_service_cursor_2 table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _form_service_cursor_2`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _form_service_cursor_2_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _form_service_cursor_2`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from _form_service_cursor_2:',
            resultSet,
          );

          try {
            await _form_service_cursor_2_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from _form_service_cursor_2`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _form_service_cursor_2_create = _form_service_cursor_2 => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _form_service_cursor_2
      tx.executeSql(
        `INSERT INTO _form_service_cursor_2 (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,URI_MD5_FORM_ID,AURI_SERVICE,EXT_SERVICE_TYPE,EXTERNAL_SERVICE_OPTION,IS_EXTERNAL_SERVICE_PREPARED,OPERATIONAL_STATUS,RETRY_STATUS,ESTABLISHMENT_DATETIME,UPLOAD_COMPLETED,LAST_UPLOAD_PERSISTENCE_CURSOR,LAST_UPLOAD_KEY,LAST_STREAMING_PERSISTENCE_CURSOR,LAST_STREAMING_KEY,FORM_ID) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          _form_service_cursor_2._URI || null,
          _form_service_cursor_2._CREATOR_URI_USER || null,
          _form_service_cursor_2._CREATION_DATE || null,
          _form_service_cursor_2._LAST_UPDATE_URI_USER || null,
          _form_service_cursor_2._LAST_UPDATE_DATE || null,
          _form_service_cursor_2.URI_MD5_FORM_ID || null,
          _form_service_cursor_2.AURI_SERVICE || null,
          _form_service_cursor_2.EXT_SERVICE_TYPE || null,
          _form_service_cursor_2.EXTERNAL_SERVICE_OPTION || null,
          _form_service_cursor_2.IS_EXTERNAL_SERVICE_PREPARED || null,
          _form_service_cursor_2.OPERATIONAL_STATUS || null,
          _form_service_cursor_2.RETRY_STATUS || null,
          _form_service_cursor_2.ESTABLISHMENT_DATETIME || null,
          _form_service_cursor_2.UPLOAD_COMPLETED || null,
          _form_service_cursor_2.LAST_UPLOAD_PERSISTENCE_CURSOR || null,
          _form_service_cursor_2.LAST_UPLOAD_KEY || null,
          _form_service_cursor_2.LAST_STREAMING_PERSISTENCE_CURSOR || null,
          _form_service_cursor_2.LAST_STREAMING_KEY || null,
          _form_service_cursor_2.FORM_ID || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const _granted_authority_hierarchy_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_granted_authority_hierarchy?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total _granted_authority_hierarchy items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _granted_authority_hierarchy`,
          [],
          () => {
            console.log(
              '_granted_authority_hierarchy table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _granted_authority_hierarchy (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,DOMINATING_GRANTED_AUTHORITY TEXT,SUBORDINATE_GRANTED_AUTHORITY TEXT)`,
          [],
          () => {
            console.log(
              '_granted_authority_hierarchy table created successfully',
            );
          },
          reject,
        );

        data.forEach(_granted_authority_hierarchy => {
          tx.executeSql(
            `INSERT INTO _granted_authority_hierarchy VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              _granted_authority_hierarchy._URI || null,
              _granted_authority_hierarchy._CREATOR_URI_USER || null,
              _granted_authority_hierarchy._CREATION_DATE || null,
              _granted_authority_hierarchy._LAST_UPDATE_URI_USER || null,
              _granted_authority_hierarchy._LAST_UPDATE_DATE || null,
              _granted_authority_hierarchy.DOMINATING_GRANTED_AUTHORITY || null,
              _granted_authority_hierarchy.SUBORDINATE_GRANTED_AUTHORITY ||
                null,
            ],
            (_, resultSet) =>
              console.log(
                '_granted_authority_hierarchy data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _granted_authority_hierarchy data',
                error,
                _granted_authority_hierarchy,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _granted_authority_hierarchy data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _granted_authority_hierarchy_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_granted_authority_hierarchy?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total _granted_authority_hierarchy items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _granted_authority_hierarchy`,
          [],
          () => {
            console.log(
              '_granted_authority_hierarchy table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _granted_authority_hierarchy (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,DOMINATING_GRANTED_AUTHORITY TEXT,SUBORDINATE_GRANTED_AUTHORITY TEXT)`,
          [],
          () => {
            console.log(
              '_granted_authority_hierarchy table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _granted_authority_hierarchy data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _granted_authority_hierarchy_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _granted_authority_hierarchy`, // Query the _granted_authority_hierarchy table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _granted_authority_hierarchy`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _granted_authority_hierarchy_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _granted_authority_hierarchy`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from _granted_authority_hierarchy:',
            resultSet,
          );

          try {
            await _granted_authority_hierarchy_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from _granted_authority_hierarchy`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _granted_authority_hierarchy_create =
  _granted_authority_hierarchy => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert _granted_authority_hierarchy
        tx.executeSql(
          `INSERT INTO _granted_authority_hierarchy (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,DOMINATING_GRANTED_AUTHORITY,SUBORDINATE_GRANTED_AUTHORITY) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            _granted_authority_hierarchy._URI || null,
            _granted_authority_hierarchy._CREATOR_URI_USER || null,
            _granted_authority_hierarchy._CREATION_DATE || null,
            _granted_authority_hierarchy._LAST_UPDATE_URI_USER || null,
            _granted_authority_hierarchy._LAST_UPDATE_DATE || null,
            _granted_authority_hierarchy.DOMINATING_GRANTED_AUTHORITY || null,
            _granted_authority_hierarchy.SUBORDINATE_GRANTED_AUTHORITY || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const _misc_tasks_api = async () => {
  try {
    const response = await fetch(`${baseApi}/_misc_tasks?token=${token}`);
    const data = await response.json();
    console.log('Total _misc_tasks items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _misc_tasks`,
          [],
          () => {
            console.log('_misc_tasks table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _misc_tasks (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,FORM_ID TEXT,REQUESTING_USER TEXT,REQUEST_DATE TEXT,REQUEST_PARAMETERS TEXT,LAST_ACTIVITY_DATE TEXT,ATTEMPT_COUNT TEXT,STATUS TEXT,TASK_TYPE TEXT,COMPLETION_DATE TEXT)`,
          [],
          () => {
            console.log('_misc_tasks table created successfully');
          },
          reject,
        );

        data.forEach(_misc_tasks => {
          tx.executeSql(
            `INSERT INTO _misc_tasks VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              _misc_tasks._URI || null,
              _misc_tasks._CREATOR_URI_USER || null,
              _misc_tasks._CREATION_DATE || null,
              _misc_tasks._LAST_UPDATE_URI_USER || null,
              _misc_tasks._LAST_UPDATE_DATE || null,
              _misc_tasks.FORM_ID || null,
              _misc_tasks.REQUESTING_USER || null,
              _misc_tasks.REQUEST_DATE || null,
              _misc_tasks.REQUEST_PARAMETERS || null,
              _misc_tasks.LAST_ACTIVITY_DATE || null,
              _misc_tasks.ATTEMPT_COUNT || null,
              _misc_tasks.STATUS || null,
              _misc_tasks.TASK_TYPE || null,
              _misc_tasks.COMPLETION_DATE || null,
            ],
            (_, resultSet) =>
              console.log('_misc_tasks data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting _misc_tasks data',
                error,
                _misc_tasks,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _misc_tasks data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _misc_tasks_api2 = async () => {
  try {
    const response = await fetch(`${baseApi}/_misc_tasks?token=${token}`);
    const data = await response.json();
    console.log('Total _misc_tasks items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _misc_tasks`,
          [],
          () => {
            console.log('_misc_tasks table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _misc_tasks (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,FORM_ID TEXT,REQUESTING_USER TEXT,REQUEST_DATE TEXT,REQUEST_PARAMETERS TEXT,LAST_ACTIVITY_DATE TEXT,ATTEMPT_COUNT TEXT,STATUS TEXT,TASK_TYPE TEXT,COMPLETION_DATE TEXT)`,
          [],
          () => {
            console.log('_misc_tasks table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _misc_tasks data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _misc_tasks_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _misc_tasks`, // Query the _misc_tasks table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _misc_tasks`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _misc_tasks_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _misc_tasks`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from _misc_tasks:', resultSet);

          try {
            await _misc_tasks_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from _misc_tasks`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _misc_tasks_create = _misc_tasks => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _misc_tasks
      tx.executeSql(
        `INSERT INTO _misc_tasks (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,FORM_ID,REQUESTING_USER,REQUEST_DATE,REQUEST_PARAMETERS,LAST_ACTIVITY_DATE,ATTEMPT_COUNT,STATUS,TASK_TYPE,COMPLETION_DATE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          _misc_tasks._URI || null,
          _misc_tasks._CREATOR_URI_USER || null,
          _misc_tasks._CREATION_DATE || null,
          _misc_tasks._LAST_UPDATE_URI_USER || null,
          _misc_tasks._LAST_UPDATE_DATE || null,
          _misc_tasks.FORM_ID || null,
          _misc_tasks.REQUESTING_USER || null,
          _misc_tasks.REQUEST_DATE || null,
          _misc_tasks.REQUEST_PARAMETERS || null,
          _misc_tasks.LAST_ACTIVITY_DATE || null,
          _misc_tasks.ATTEMPT_COUNT || null,
          _misc_tasks.STATUS || null,
          _misc_tasks.TASK_TYPE || null,
          _misc_tasks.COMPLETION_DATE || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const _persistent_result_file_bin_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_persistent_result_file_bin?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total _persistent_result_file_bin items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _persistent_result_file_bin`,
          [],
          () => {
            console.log(
              '_persistent_result_file_bin table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _persistent_result_file_bin (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              '_persistent_result_file_bin table created successfully',
            );
          },
          reject,
        );

        data.forEach(_persistent_result_file_bin => {
          tx.executeSql(
            `INSERT INTO _persistent_result_file_bin VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              _persistent_result_file_bin._URI || null,
              _persistent_result_file_bin._CREATOR_URI_USER || null,
              _persistent_result_file_bin._CREATION_DATE || null,
              _persistent_result_file_bin._LAST_UPDATE_URI_USER || null,
              _persistent_result_file_bin._LAST_UPDATE_DATE || null,
              _persistent_result_file_bin._PARENT_AURI || null,
              _persistent_result_file_bin._ORDINAL_NUMBER || null,
              _persistent_result_file_bin._TOP_LEVEL_AURI || null,
              _persistent_result_file_bin.UNROOTED_FILE_PATH || null,
              _persistent_result_file_bin.CONTENT_TYPE || null,
              _persistent_result_file_bin.CONTENT_LENGTH || null,
              _persistent_result_file_bin.CONTENT_HASH || null,
            ],
            (_, resultSet) =>
              console.log(
                '_persistent_result_file_bin data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _persistent_result_file_bin data',
                error,
                _persistent_result_file_bin,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _persistent_result_file_bin data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _persistent_result_file_bin_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_persistent_result_file_bin?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total _persistent_result_file_bin items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _persistent_result_file_bin`,
          [],
          () => {
            console.log(
              '_persistent_result_file_bin table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _persistent_result_file_bin (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              '_persistent_result_file_bin table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _persistent_result_file_bin data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _persistent_result_file_bin_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _persistent_result_file_bin`, // Query the _persistent_result_file_bin table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _persistent_result_file_bin`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _persistent_result_file_bin_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _persistent_result_file_bin`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from _persistent_result_file_bin:',
            resultSet,
          );

          try {
            await _persistent_result_file_bin_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from _persistent_result_file_bin`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _persistent_result_file_bin_create =
  _persistent_result_file_bin => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert _persistent_result_file_bin
        tx.executeSql(
          `INSERT INTO _persistent_result_file_bin (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            _persistent_result_file_bin._URI || null,
            _persistent_result_file_bin._CREATOR_URI_USER || null,
            _persistent_result_file_bin._CREATION_DATE || null,
            _persistent_result_file_bin._LAST_UPDATE_URI_USER || null,
            _persistent_result_file_bin._LAST_UPDATE_DATE || null,
            _persistent_result_file_bin._PARENT_AURI || null,
            _persistent_result_file_bin._ORDINAL_NUMBER || null,
            _persistent_result_file_bin._TOP_LEVEL_AURI || null,
            _persistent_result_file_bin.UNROOTED_FILE_PATH || null,
            _persistent_result_file_bin.CONTENT_TYPE || null,
            _persistent_result_file_bin.CONTENT_LENGTH || null,
            _persistent_result_file_bin.CONTENT_HASH || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const _persistent_result_file_blb_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_persistent_result_file_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total _persistent_result_file_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _persistent_result_file_blb`,
          [],
          () => {
            console.log(
              '_persistent_result_file_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _persistent_result_file_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              '_persistent_result_file_blb table created successfully',
            );
          },
          reject,
        );

        data.forEach(_persistent_result_file_blb => {
          tx.executeSql(
            `INSERT INTO _persistent_result_file_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              _persistent_result_file_blb._URI || null,
              _persistent_result_file_blb._CREATOR_URI_USER || null,
              _persistent_result_file_blb._CREATION_DATE || null,
              _persistent_result_file_blb._LAST_UPDATE_URI_USER || null,
              _persistent_result_file_blb._LAST_UPDATE_DATE || null,
              _persistent_result_file_blb._TOP_LEVEL_AURI || null,
              _persistent_result_file_blb.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                '_persistent_result_file_blb data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _persistent_result_file_blb data',
                error,
                _persistent_result_file_blb,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _persistent_result_file_blb data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _persistent_result_file_blb_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_persistent_result_file_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total _persistent_result_file_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _persistent_result_file_blb`,
          [],
          () => {
            console.log(
              '_persistent_result_file_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _persistent_result_file_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              '_persistent_result_file_blb table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _persistent_result_file_blb data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _persistent_result_file_blb_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _persistent_result_file_blb`, // Query the _persistent_result_file_blb table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _persistent_result_file_blb`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _persistent_result_file_blb_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _persistent_result_file_blb`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from _persistent_result_file_blb:',
            resultSet,
          );

          try {
            await _persistent_result_file_blb_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from _persistent_result_file_blb`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _persistent_result_file_blb_create =
  _persistent_result_file_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert _persistent_result_file_blb
        tx.executeSql(
          `INSERT INTO _persistent_result_file_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            _persistent_result_file_blb._URI || null,
            _persistent_result_file_blb._CREATOR_URI_USER || null,
            _persistent_result_file_blb._CREATION_DATE || null,
            _persistent_result_file_blb._LAST_UPDATE_URI_USER || null,
            _persistent_result_file_blb._LAST_UPDATE_DATE || null,
            _persistent_result_file_blb._TOP_LEVEL_AURI || null,
            _persistent_result_file_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const _persistent_result_file_ref_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_persistent_result_file_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total _persistent_result_file_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _persistent_result_file_ref`,
          [],
          () => {
            console.log(
              '_persistent_result_file_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _persistent_result_file_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              '_persistent_result_file_ref table created successfully',
            );
          },
          reject,
        );

        data.forEach(_persistent_result_file_ref => {
          tx.executeSql(
            `INSERT INTO _persistent_result_file_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              _persistent_result_file_ref._URI || null,
              _persistent_result_file_ref._CREATOR_URI_USER || null,
              _persistent_result_file_ref._CREATION_DATE || null,
              _persistent_result_file_ref._LAST_UPDATE_URI_USER || null,
              _persistent_result_file_ref._LAST_UPDATE_DATE || null,
              _persistent_result_file_ref._DOM_AURI || null,
              _persistent_result_file_ref._SUB_AURI || null,
              _persistent_result_file_ref._TOP_LEVEL_AURI || null,
              _persistent_result_file_ref.PART || null,
            ],
            (_, resultSet) =>
              console.log(
                '_persistent_result_file_ref data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _persistent_result_file_ref data',
                error,
                _persistent_result_file_ref,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _persistent_result_file_ref data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _persistent_result_file_ref_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_persistent_result_file_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total _persistent_result_file_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _persistent_result_file_ref`,
          [],
          () => {
            console.log(
              '_persistent_result_file_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _persistent_result_file_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              '_persistent_result_file_ref table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _persistent_result_file_ref data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _persistent_result_file_ref_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _persistent_result_file_ref`, // Query the _persistent_result_file_ref table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _persistent_result_file_ref`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _persistent_result_file_ref_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _persistent_result_file_ref`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from _persistent_result_file_ref:',
            resultSet,
          );

          try {
            await _persistent_result_file_ref_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from _persistent_result_file_ref`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _persistent_result_file_ref_create =
  _persistent_result_file_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert _persistent_result_file_ref
        tx.executeSql(
          `INSERT INTO _persistent_result_file_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            _persistent_result_file_ref._URI || null,
            _persistent_result_file_ref._CREATOR_URI_USER || null,
            _persistent_result_file_ref._CREATION_DATE || null,
            _persistent_result_file_ref._LAST_UPDATE_URI_USER || null,
            _persistent_result_file_ref._LAST_UPDATE_DATE || null,
            _persistent_result_file_ref._DOM_AURI || null,
            _persistent_result_file_ref._SUB_AURI || null,
            _persistent_result_file_ref._TOP_LEVEL_AURI || null,
            _persistent_result_file_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const _persistent_results_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_persistent_results?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _persistent_results items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _persistent_results`,
          [],
          () => {
            console.log('_persistent_results table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _persistent_results (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,REQUESTING_USER TEXT,REQUEST_DATE TEXT,REQUEST_PARAMETERS TEXT,LAST_RETRY_DATE TEXT,ATTEMPT_COUNT TEXT,STATUS TEXT,RESULT_TYPE TEXT,COMPLETION_DATE TEXT,FORM_ID_KEY TEXT,URI_FILTER_GROUP TEXT)`,
          [],
          () => {
            console.log('_persistent_results table created successfully');
          },
          reject,
        );

        data.forEach(_persistent_results => {
          tx.executeSql(
            `INSERT INTO _persistent_results VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              _persistent_results._URI || null,
              _persistent_results._CREATOR_URI_USER || null,
              _persistent_results._CREATION_DATE || null,
              _persistent_results._LAST_UPDATE_URI_USER || null,
              _persistent_results._LAST_UPDATE_DATE || null,
              _persistent_results.REQUESTING_USER || null,
              _persistent_results.REQUEST_DATE || null,
              _persistent_results.REQUEST_PARAMETERS || null,
              _persistent_results.LAST_RETRY_DATE || null,
              _persistent_results.ATTEMPT_COUNT || null,
              _persistent_results.STATUS || null,
              _persistent_results.RESULT_TYPE || null,
              _persistent_results.COMPLETION_DATE || null,
              _persistent_results.FORM_ID_KEY || null,
              _persistent_results.URI_FILTER_GROUP || null,
            ],
            (_, resultSet) =>
              console.log(
                '_persistent_results data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _persistent_results data',
                error,
                _persistent_results,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _persistent_results data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _persistent_results_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_persistent_results?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _persistent_results items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _persistent_results`,
          [],
          () => {
            console.log('_persistent_results table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _persistent_results (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,REQUESTING_USER TEXT,REQUEST_DATE TEXT,REQUEST_PARAMETERS TEXT,LAST_RETRY_DATE TEXT,ATTEMPT_COUNT TEXT,STATUS TEXT,RESULT_TYPE TEXT,COMPLETION_DATE TEXT,FORM_ID_KEY TEXT,URI_FILTER_GROUP TEXT)`,
          [],
          () => {
            console.log('_persistent_results table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _persistent_results data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _persistent_results_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _persistent_results`, // Query the _persistent_results table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _persistent_results`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _persistent_results_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _persistent_results`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from _persistent_results:', resultSet);

          try {
            await _persistent_results_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from _persistent_results`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _persistent_results_create = _persistent_results => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _persistent_results
      tx.executeSql(
        `INSERT INTO _persistent_results (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,REQUESTING_USER,REQUEST_DATE,REQUEST_PARAMETERS,LAST_RETRY_DATE,ATTEMPT_COUNT,STATUS,RESULT_TYPE,COMPLETION_DATE,FORM_ID_KEY,URI_FILTER_GROUP) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          _persistent_results._URI || null,
          _persistent_results._CREATOR_URI_USER || null,
          _persistent_results._CREATION_DATE || null,
          _persistent_results._LAST_UPDATE_URI_USER || null,
          _persistent_results._LAST_UPDATE_DATE || null,
          _persistent_results.REQUESTING_USER || null,
          _persistent_results.REQUEST_DATE || null,
          _persistent_results.REQUEST_PARAMETERS || null,
          _persistent_results.LAST_RETRY_DATE || null,
          _persistent_results.ATTEMPT_COUNT || null,
          _persistent_results.STATUS || null,
          _persistent_results.RESULT_TYPE || null,
          _persistent_results.COMPLETION_DATE || null,
          _persistent_results.FORM_ID_KEY || null,
          _persistent_results.URI_FILTER_GROUP || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const _registered_users_api = async () => {
  try {
    const response = await fetch(`${baseApi}/_registered_users?token=${token}`);
    const data = await response.json();
    console.log('Total _registered_users items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _registered_users`,
          [],
          () => {
            console.log('_registered_users table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _registered_users (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,LOCAL_USERNAME TEXT,OPENID_EMAIL TEXT,FULL_NAME TEXT,BASIC_AUTH_PASSWORD TEXT,BASIC_AUTH_SALT TEXT,DIGEST_AUTH_PASSWORD TEXT,IS_REMOVED TEXT)`,
          [],
          () => {
            console.log('_registered_users table created successfully');
          },
          reject,
        );

        data.forEach(_registered_users => {
          tx.executeSql(
            `INSERT INTO _registered_users VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              _registered_users._URI || null,
              _registered_users._CREATOR_URI_USER || null,
              _registered_users._CREATION_DATE || null,
              _registered_users._LAST_UPDATE_URI_USER || null,
              _registered_users._LAST_UPDATE_DATE || null,
              _registered_users.LOCAL_USERNAME || null,
              _registered_users.OPENID_EMAIL || null,
              _registered_users.FULL_NAME || null,
              _registered_users.BASIC_AUTH_PASSWORD || null,
              _registered_users.BASIC_AUTH_SALT || null,
              _registered_users.DIGEST_AUTH_PASSWORD || null,
              _registered_users.IS_REMOVED || null,
            ],
            (_, resultSet) =>
              console.log(
                '_registered_users data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _registered_users data',
                error,
                _registered_users,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _registered_users data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _registered_users_api2 = async () => {
  try {
    const response = await fetch(`${baseApi}/_registered_users?token=${token}`);
    const data = await response.json();
    console.log('Total _registered_users items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _registered_users`,
          [],
          () => {
            console.log('_registered_users table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _registered_users (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,LOCAL_USERNAME TEXT,OPENID_EMAIL TEXT,FULL_NAME TEXT,BASIC_AUTH_PASSWORD TEXT,BASIC_AUTH_SALT TEXT,DIGEST_AUTH_PASSWORD TEXT,IS_REMOVED TEXT)`,
          [],
          () => {
            console.log('_registered_users table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _registered_users data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _registered_users_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _registered_users`, // Query the _registered_users table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _registered_users`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _registered_users_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _registered_users`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from _registered_users:', resultSet);

          try {
            await _registered_users_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from _registered_users`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _registered_users_create = _registered_users => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _registered_users
      tx.executeSql(
        `INSERT INTO _registered_users (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,LOCAL_USERNAME,OPENID_EMAIL,FULL_NAME,BASIC_AUTH_PASSWORD,BASIC_AUTH_SALT,DIGEST_AUTH_PASSWORD,IS_REMOVED) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          _registered_users._URI || null,
          _registered_users._CREATOR_URI_USER || null,
          _registered_users._CREATION_DATE || null,
          _registered_users._LAST_UPDATE_URI_USER || null,
          _registered_users._LAST_UPDATE_DATE || null,
          _registered_users.LOCAL_USERNAME || null,
          _registered_users.OPENID_EMAIL || null,
          _registered_users.FULL_NAME || null,
          _registered_users.BASIC_AUTH_PASSWORD || null,
          _registered_users.BASIC_AUTH_SALT || null,
          _registered_users.DIGEST_AUTH_PASSWORD || null,
          _registered_users.IS_REMOVED || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const _security_revisions_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_security_revisions?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _security_revisions items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _security_revisions`,
          [],
          () => {
            console.log('_security_revisions table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _security_revisions (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,LAST_REVISION TEXT)`,
          [],
          () => {
            console.log('_security_revisions table created successfully');
          },
          reject,
        );

        data.forEach(_security_revisions => {
          tx.executeSql(
            `INSERT INTO _security_revisions VALUES (?, ?, ?, ?, ?, ?)`,
            [
              _security_revisions._URI || null,
              _security_revisions._CREATOR_URI_USER || null,
              _security_revisions._CREATION_DATE || null,
              _security_revisions._LAST_UPDATE_URI_USER || null,
              _security_revisions._LAST_UPDATE_DATE || null,
              _security_revisions.LAST_REVISION || null,
            ],
            (_, resultSet) =>
              console.log(
                '_security_revisions data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _security_revisions data',
                error,
                _security_revisions,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _security_revisions data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _security_revisions_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_security_revisions?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _security_revisions items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _security_revisions`,
          [],
          () => {
            console.log('_security_revisions table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _security_revisions (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,LAST_REVISION TEXT)`,
          [],
          () => {
            console.log('_security_revisions table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _security_revisions data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _security_revisions_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _security_revisions`, // Query the _security_revisions table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _security_revisions`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _security_revisions_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _security_revisions`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from _security_revisions:', resultSet);

          try {
            await _security_revisions_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from _security_revisions`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _security_revisions_create = _security_revisions => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _security_revisions
      tx.executeSql(
        `INSERT INTO _security_revisions (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,LAST_REVISION) VALUES (?, ?, ?, ?, ?, ?)`,
        [
          _security_revisions._URI || null,
          _security_revisions._CREATOR_URI_USER || null,
          _security_revisions._CREATION_DATE || null,
          _security_revisions._LAST_UPDATE_URI_USER || null,
          _security_revisions._LAST_UPDATE_DATE || null,
          _security_revisions.LAST_REVISION || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const _server_preferences_properties_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_server_preferences_properties?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total _server_preferences_properties items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _server_preferences_properties`,
          [],
          () => {
            console.log(
              '_server_preferences_properties table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _server_preferences_properties (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,KEY TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              '_server_preferences_properties table created successfully',
            );
          },
          reject,
        );

        data.forEach(_server_preferences_properties => {
          tx.executeSql(
            `INSERT INTO _server_preferences_properties VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              _server_preferences_properties._URI || null,
              _server_preferences_properties._CREATOR_URI_USER || null,
              _server_preferences_properties._CREATION_DATE || null,
              _server_preferences_properties._LAST_UPDATE_URI_USER || null,
              _server_preferences_properties._LAST_UPDATE_DATE || null,
              _server_preferences_properties.KEY || null,
              _server_preferences_properties.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                '_server_preferences_properties data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _server_preferences_properties data',
                error,
                _server_preferences_properties,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _server_preferences_properties data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _server_preferences_properties_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_server_preferences_properties?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total _server_preferences_properties items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _server_preferences_properties`,
          [],
          () => {
            console.log(
              '_server_preferences_properties table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _server_preferences_properties (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,KEY TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              '_server_preferences_properties table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _server_preferences_properties data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _server_preferences_properties_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _server_preferences_properties`, // Query the _server_preferences_properties table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _server_preferences_properties`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _server_preferences_properties_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _server_preferences_properties`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from _server_preferences_properties:',
            resultSet,
          );

          try {
            await _server_preferences_properties_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from _server_preferences_properties`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _server_preferences_properties_create =
  _server_preferences_properties => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert _server_preferences_properties
        tx.executeSql(
          `INSERT INTO _server_preferences_properties (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,KEY,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            _server_preferences_properties._URI || null,
            _server_preferences_properties._CREATOR_URI_USER || null,
            _server_preferences_properties._CREATION_DATE || null,
            _server_preferences_properties._LAST_UPDATE_URI_USER || null,
            _server_preferences_properties._LAST_UPDATE_DATE || null,
            _server_preferences_properties.KEY || null,
            _server_preferences_properties.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const _task_lock_api = async () => {
  try {
    const response = await fetch(`${baseApi}/_task_lock?token=${token}`);
    const data = await response.json();
    console.log('Total _task_lock items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _task_lock`,
          [],
          () => {
            console.log('_task_lock table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _task_lock (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,FORM_ID TEXT,TASK_TYPE TEXT,EXPIRATION_DATETIME TEXT)`,
          [],
          () => {
            console.log('_task_lock table created successfully');
          },
          reject,
        );

        data.forEach(_task_lock => {
          tx.executeSql(
            `INSERT INTO _task_lock VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              _task_lock._URI || null,
              _task_lock._CREATOR_URI_USER || null,
              _task_lock._CREATION_DATE || null,
              _task_lock._LAST_UPDATE_URI_USER || null,
              _task_lock._LAST_UPDATE_DATE || null,
              _task_lock.FORM_ID || null,
              _task_lock.TASK_TYPE || null,
              _task_lock.EXPIRATION_DATETIME || null,
            ],
            (_, resultSet) =>
              console.log('_task_lock data inserted successfully', resultSet),
            (_, error) => {
              console.error(
                'Error inserting _task_lock data',
                error,
                _task_lock,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _task_lock data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _task_lock_api2 = async () => {
  try {
    const response = await fetch(`${baseApi}/_task_lock?token=${token}`);
    const data = await response.json();
    console.log('Total _task_lock items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _task_lock`,
          [],
          () => {
            console.log('_task_lock table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _task_lock (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,FORM_ID TEXT,TASK_TYPE TEXT,EXPIRATION_DATETIME TEXT)`,
          [],
          () => {
            console.log('_task_lock table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching _task_lock data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _task_lock_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _task_lock`, // Query the _task_lock table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _task_lock`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _task_lock_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _task_lock`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from _task_lock:', resultSet);

          try {
            await _task_lock_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from _task_lock`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _task_lock_create = _task_lock => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _task_lock
      tx.executeSql(
        `INSERT INTO _task_lock (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,FORM_ID,TASK_TYPE,EXPIRATION_DATETIME) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          _task_lock._URI || null,
          _task_lock._CREATOR_URI_USER || null,
          _task_lock._CREATION_DATE || null,
          _task_lock._LAST_UPDATE_URI_USER || null,
          _task_lock._LAST_UPDATE_DATE || null,
          _task_lock.FORM_ID || null,
          _task_lock.TASK_TYPE || null,
          _task_lock.EXPIRATION_DATETIME || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const com202021_core_api = async () => {
  try {
    const response = await fetch(`${baseApi}/com202021_core?token=${token}`);
    const data = await response.json();
    console.log('Total com202021_core items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_core`,
          [],
          () => {
            console.log('com202021_core table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_core (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,LOCATION_DATA_TLOC_FD_BEAT_TXT TEXT,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE TEXT,CONSULTATION_GENERATED_NOTE_NAME_11 TEXT,CONSULTATION_USER_CELL TEXT,LOCATION_DATA_TLOC_FD_CHAR TEXT,CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47 TEXT,CONSULTATION_CONSULTATION_PLACE TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY TEXT,CONSULTATION_DCONSULTATION TEXT,LOCATION_DATA_TLOC_ENTER_DIV TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_22 TEXT,LOCATION_DATA_TLOC_FD_RANGE TEXT,END_RAW TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_24 TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION TEXT,CONSULTATION_DCONSULTATION_START TEXT,LOCATION_DATA_TLOC_FD_BEAT TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4 TEXT,SUBSCRIBERID TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1 TEXT,CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2 TEXT,CONSULTATION_DCONSULTATION_END_RAW TEXT,LOCATION_DATA_TLOC_ECOZONE TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51 TEXT,LOCATION_DATA_TLOC_FD_BLOCK TEXT,CONSULTATION_DCONSULTATION_END TEXT,DEVICEID TEXT,LOCATION_DATA_TLOC_FD_DIVISION TEXT,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE TEXT,END TEXT,CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79 TEXT,PHONENUMBER TEXT,CONSULTATION_THOC_UNION TEXT,LOCATION_DATA_TLOC_ENTER_RANGE TEXT,START_RAW TEXT,CONSULTATION_USER_EMAIL TEXT,META_INSTANCE_ID TEXT,SIMSERIAL TEXT,NOTES TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS TEXT,CONSULTATION_DCONSULTATION_START_RAW TEXT,CONSULTATION_USER_NAME TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO TEXT,TODAY TEXT,LOCATION_DATA_TLOC_FD_CIR TEXT,START TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41 TEXT,TODAY_RAW TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69 TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT)`,
          [],
          () => {
            console.log('com202021_core table created successfully');
          },
          reject,
        );

        data.forEach(com202021_core => {
          tx.executeSql(
            `INSERT INTO com202021_core VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              com202021_core._URI || null,
              com202021_core._CREATOR_URI_USER || null,
              com202021_core._CREATION_DATE || null,
              com202021_core._LAST_UPDATE_URI_USER || null,
              com202021_core._LAST_UPDATE_DATE || null,
              com202021_core._MODEL_VERSION || null,
              com202021_core._UI_VERSION || null,
              com202021_core._IS_COMPLETE || null,
              com202021_core._SUBMISSION_DATE || null,
              com202021_core._MARKED_AS_COMPLETE_DATE || null,
              com202021_core.LOCATION_DATA_TLOC_FD_BEAT_TXT || null,
              com202021_core.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE ||
                null,
              com202021_core.CONSULTATION_GENERATED_NOTE_NAME_11 || null,
              com202021_core.CONSULTATION_USER_CELL || null,
              com202021_core.LOCATION_DATA_TLOC_FD_CHAR || null,
              com202021_core.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47 ||
                null,
              com202021_core.CONSULTATION_CONSULTATION_PLACE || null,
              com202021_core.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY ||
                null,
              com202021_core.CONSULTATION_DCONSULTATION || null,
              com202021_core.LOCATION_DATA_TLOC_ENTER_DIV || null,
              com202021_core.LOCATION_DATA_GENERATED_NOTE_NAME_22 || null,
              com202021_core.LOCATION_DATA_TLOC_FD_RANGE || null,
              com202021_core.END_RAW || null,
              com202021_core.LOCATION_DATA_GENERATED_NOTE_NAME_24 || null,
              com202021_core.CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION ||
                null,
              com202021_core.CONSULTATION_DCONSULTATION_START || null,
              com202021_core.LOCATION_DATA_TLOC_FD_BEAT || null,
              com202021_core.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8 || null,
              com202021_core.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5 || null,
              com202021_core.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6 || null,
              com202021_core.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3 || null,
              com202021_core.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4 || null,
              com202021_core.SUBSCRIBERID || null,
              com202021_core.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1 || null,
              com202021_core.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES ||
                null,
              com202021_core.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2 || null,
              com202021_core.CONSULTATION_DCONSULTATION_END_RAW || null,
              com202021_core.LOCATION_DATA_TLOC_ECOZONE || null,
              com202021_core.CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51 ||
                null,
              com202021_core.LOCATION_DATA_TLOC_FD_BLOCK || null,
              com202021_core.CONSULTATION_DCONSULTATION_END || null,
              com202021_core.DEVICEID || null,
              com202021_core.LOCATION_DATA_TLOC_FD_DIVISION || null,
              com202021_core.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE ||
                null,
              com202021_core.END || null,
              com202021_core.CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79 ||
                null,
              com202021_core.PHONENUMBER || null,
              com202021_core.CONSULTATION_THOC_UNION || null,
              com202021_core.LOCATION_DATA_TLOC_ENTER_RANGE || null,
              com202021_core.START_RAW || null,
              com202021_core.CONSULTATION_USER_EMAIL || null,
              com202021_core.META_INSTANCE_ID || null,
              com202021_core.SIMSERIAL || null,
              com202021_core.NOTES || null,
              com202021_core.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS ||
                null,
              com202021_core.CONSULTATION_DCONSULTATION_START_RAW || null,
              com202021_core.CONSULTATION_USER_NAME || null,
              com202021_core.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO ||
                null,
              com202021_core.TODAY || null,
              com202021_core.LOCATION_DATA_TLOC_FD_CIR || null,
              com202021_core.START || null,
              com202021_core.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41 ||
                null,
              com202021_core.TODAY_RAW || null,
              com202021_core.SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69 ||
                null,
              com202021_core.CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT ||
                null,
              com202021_core.project_id || null,
              com202021_core.sort || null,
              com202021_core.last_log_id || null,
              com202021_core.restore_id || null,
              com202021_core.created_at || null,
              com202021_core.created_by || null,
              com202021_core.updated_at || null,
              com202021_core.updated_by || null,
              com202021_core.deleted_at || null,
              com202021_core.deleted_by || null,
              com202021_core.deleted_status || null,
              com202021_core.status || null,
            ],
            (_, resultSet) =>
              console.log(
                'com202021_core data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting com202021_core data',
                error,
                com202021_core,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching com202021_core data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const com202021_core_api2 = async () => {
  try {
    const response = await fetch(`${baseApi}/com202021_core?token=${token}`);
    const data = await response.json();
    console.log('Total com202021_core items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_core`,
          [],
          () => {
            console.log('com202021_core table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_core (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,LOCATION_DATA_TLOC_FD_BEAT_TXT TEXT,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE TEXT,CONSULTATION_GENERATED_NOTE_NAME_11 TEXT,CONSULTATION_USER_CELL TEXT,LOCATION_DATA_TLOC_FD_CHAR TEXT,CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47 TEXT,CONSULTATION_CONSULTATION_PLACE TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY TEXT,CONSULTATION_DCONSULTATION TEXT,LOCATION_DATA_TLOC_ENTER_DIV TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_22 TEXT,LOCATION_DATA_TLOC_FD_RANGE TEXT,END_RAW TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_24 TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION TEXT,CONSULTATION_DCONSULTATION_START TEXT,LOCATION_DATA_TLOC_FD_BEAT TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3 TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4 TEXT,SUBSCRIBERID TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1 TEXT,CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2 TEXT,CONSULTATION_DCONSULTATION_END_RAW TEXT,LOCATION_DATA_TLOC_ECOZONE TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51 TEXT,LOCATION_DATA_TLOC_FD_BLOCK TEXT,CONSULTATION_DCONSULTATION_END TEXT,DEVICEID TEXT,LOCATION_DATA_TLOC_FD_DIVISION TEXT,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE TEXT,END TEXT,CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79 TEXT,PHONENUMBER TEXT,CONSULTATION_THOC_UNION TEXT,LOCATION_DATA_TLOC_ENTER_RANGE TEXT,START_RAW TEXT,CONSULTATION_USER_EMAIL TEXT,META_INSTANCE_ID TEXT,SIMSERIAL TEXT,NOTES TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS TEXT,CONSULTATION_DCONSULTATION_START_RAW TEXT,CONSULTATION_USER_NAME TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO TEXT,TODAY TEXT,LOCATION_DATA_TLOC_FD_CIR TEXT,START TEXT,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41 TEXT,TODAY_RAW TEXT,SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69 TEXT,CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT)`,
          [],
          () => {
            console.log('com202021_core table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching com202021_core data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const com202021_core_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM com202021_core`, // Query the com202021_core table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying com202021_core`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const com202021_core_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM com202021_core`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from com202021_core:', resultSet);

          try {
            await com202021_core_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from com202021_core`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const com202021_core_create = com202021_core => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert com202021_core
      tx.executeSql(
        `INSERT INTO com202021_core (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_MODEL_VERSION,_UI_VERSION,_IS_COMPLETE,_SUBMISSION_DATE,_MARKED_AS_COMPLETE_DATE,LOCATION_DATA_TLOC_FD_BEAT_TXT,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE,CONSULTATION_GENERATED_NOTE_NAME_11,CONSULTATION_USER_CELL,LOCATION_DATA_TLOC_FD_CHAR,CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47,CONSULTATION_CONSULTATION_PLACE,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY,CONSULTATION_DCONSULTATION,LOCATION_DATA_TLOC_ENTER_DIV,LOCATION_DATA_GENERATED_NOTE_NAME_22,LOCATION_DATA_TLOC_FD_RANGE,END_RAW,LOCATION_DATA_GENERATED_NOTE_NAME_24,CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION,CONSULTATION_DCONSULTATION_START,LOCATION_DATA_TLOC_FD_BEAT,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4,SUBSCRIBERID,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1,CONSULTAT
ION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES,SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2,CONSULTATION_DCONSULTATION_END_RAW,LOCATION_DATA_TLOC_ECOZONE,CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51,LOCATION_DATA_TLOC_FD_BLOCK,CONSULTATION_DCONSULTATION_END,DEVICEID,LOCATION_DATA_TLOC_FD_DIVISION,CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE,END,CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79,PHONENUMBER,CONSULTATION_THOC_UNION,LOCATION_DATA_TLOC_ENTER_RANGE,START_RAW,CONSULTATION_USER_EMAIL,META_INSTANCE_ID,SIMSERIAL,NOTES,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS,CONSULTATION_DCONSULTATION_START_RAW,CONSULTATION_USER_NAME,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO,TODAY,LOCATION_DATA_TLOC_FD_CIR,START,CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41,TODAY_RAW,SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69,CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT,project_id,sort,last_log_id,restore_id,created_at,create
d_by,updated_at,updated_by,deleted_at,deleted_by,deleted_status,status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          com202021_core._URI || null,
          com202021_core._CREATOR_URI_USER || null,
          com202021_core._CREATION_DATE || null,
          com202021_core._LAST_UPDATE_URI_USER || null,
          com202021_core._LAST_UPDATE_DATE || null,
          com202021_core._MODEL_VERSION || null,
          com202021_core._UI_VERSION || null,
          com202021_core._IS_COMPLETE || null,
          com202021_core._SUBMISSION_DATE || null,
          com202021_core._MARKED_AS_COMPLETE_DATE || null,
          com202021_core.LOCATION_DATA_TLOC_FD_BEAT_TXT || null,
          com202021_core.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE ||
            null,
          com202021_core.CONSULTATION_GENERATED_NOTE_NAME_11 || null,
          com202021_core.CONSULTATION_USER_CELL || null,
          com202021_core.LOCATION_DATA_TLOC_FD_CHAR || null,
          com202021_core.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47 ||
            null,
          com202021_core.CONSULTATION_CONSULTATION_PLACE || null,
          com202021_core.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY ||
            null,
          com202021_core.CONSULTATION_DCONSULTATION || null,
          com202021_core.LOCATION_DATA_TLOC_ENTER_DIV || null,
          com202021_core.LOCATION_DATA_GENERATED_NOTE_NAME_22 || null,
          com202021_core.LOCATION_DATA_TLOC_FD_RANGE || null,
          com202021_core.END_RAW || null,
          com202021_core.LOCATION_DATA_GENERATED_NOTE_NAME_24 || null,
          com202021_core.CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION ||
            null,
          com202021_core.CONSULTATION_DCONSULTATION_START || null,
          com202021_core.LOCATION_DATA_TLOC_FD_BEAT || null,
          com202021_core.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8 || null,
          com202021_core.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5 || null,
          com202021_core.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6 || null,
          com202021_core.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3 || null,
          com202021_core.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4 || null,
          com202021_core.SUBSCRIBERID || null,
          com202021_core.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1 || null,
          com202021_core.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES ||
            null,
          com202021_core.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2 || null,
          com202021_core.CONSULTATION_DCONSULTATION_END_RAW || null,
          com202021_core.LOCATION_DATA_TLOC_ECOZONE || null,
          com202021_core.CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51 ||
            null,
          com202021_core.LOCATION_DATA_TLOC_FD_BLOCK || null,
          com202021_core.CONSULTATION_DCONSULTATION_END || null,
          com202021_core.DEVICEID || null,
          com202021_core.LOCATION_DATA_TLOC_FD_DIVISION || null,
          com202021_core.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE ||
            null,
          com202021_core.END || null,
          com202021_core.CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79 ||
            null,
          com202021_core.PHONENUMBER || null,
          com202021_core.CONSULTATION_THOC_UNION || null,
          com202021_core.LOCATION_DATA_TLOC_ENTER_RANGE || null,
          com202021_core.START_RAW || null,
          com202021_core.CONSULTATION_USER_EMAIL || null,
          com202021_core.META_INSTANCE_ID || null,
          com202021_core.SIMSERIAL || null,
          com202021_core.NOTES || null,
          com202021_core.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS ||
            null,
          com202021_core.CONSULTATION_DCONSULTATION_START_RAW || null,
          com202021_core.CONSULTATION_USER_NAME || null,
          com202021_core.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO ||
            null,
          com202021_core.TODAY || null,
          com202021_core.LOCATION_DATA_TLOC_FD_CIR || null,
          com202021_core.START || null,
          com202021_core.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41 ||
            null,
          com202021_core.TODAY_RAW || null,
          com202021_core.SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69 ||
            null,
          com202021_core.CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT ||
            null,
          com202021_core.project_id || null,
          com202021_core.sort || null,
          com202021_core.last_log_id || null,
          com202021_core.restore_id || null,
          com202021_core.created_at || null,
          com202021_core.created_by || null,
          com202021_core.updated_at || null,
          com202021_core.updated_by || null,
          com202021_core.deleted_at || null,
          com202021_core.deleted_by || null,
          com202021_core.deleted_status || null,
          com202021_core.status || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const gener43_2021_core_audit_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_core_audit?token=${token}`,
    );
    const data = await response.json();
    console.log('Total gener43_2021_core_audit items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_core_audit`,
          [],
          () => {
            console.log('gener43_2021_core_audit table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_core_audit (id TEXT,_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_LNG TEXT,FBLI_FA_TLOC_FD_BEAT TEXT,LOGISTICS3_COUNTRYBOAT_CONDITION TEXT,LOGISTICS4_GFIREARMS_303RIFLE TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA TEXT,LOGISTICS4_OTHERS_WATER_TRA TEXT,BO_INFO_BO_CELL TEXT,LOGISTICS3_TVESSEL_CONDITION TEXT,RO_INFO_RO_CELL TEXT,LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL TEXT,LOGISTICS3_TVESSEL_AVAIL TEXT,FBLI_FA_TLOC_FD_BEAT_TXT TEXT,LOGISTICS3_SPEEDBOAT_CONDITION TEXT,FBLI_FA_TLOC_FD_DIVISION TEXT,LAND_TRANSPORTS_BICYCLE_AVAIL TEXT,LOGISTICS3_OTHERS_WATER_TRA_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA TEXT,SUBSCRIBERID TEXT,GUSER_USER TEXT,RO_INFO_NAME_OF_RO TEXT,FBLI_FA_TLOC_FD_BLOCK TEXT,DEVICEID TEXT,LAND_TRANSPORTS_MOTORB_CONDITION TEXT,FBLI_GENERATED_NOTE_NAME_18 TEXT,LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74 TEXT,LOGISTICS4_CHINESERIFLE_CONDITION TEXT,LOGISTICS3_SPEEDBOAT_AVAIL TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA TEXT,LOGISTICS4_GENERATED_NOTE_NAME_152 TEXT,LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA TEXT,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA TEXT,SIMSERIAL TEXT,GUSER_DCOLLECTION_RAW TEXT,LAND_TRANSPORTS_BICYCLE_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA TEXT,GUSER_GENERATED_NOTE_NAME_10 TEXT,LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA TEXT,BO_INFO_BO_NID TEXT,LAND_TRANSPORTS_GBI_CYCLE TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA TEXT,LOGISTICS3_GCOUNTRY_BOAT TEXT,LOGISTICS4_GFIREARMS_SLR TEXT,FBLI_FA_TLOC_FD_CIR TEXT,LAND_TRANSPORTS_MOTORB_AVAIL TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION TEXT,RO_INFO_RO_JOINING_DATE TEXT,LOGISTICS4_OTHERS_WATER_TRA_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA TEXT,RO_INFO_RO_RANK TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA TEXT,BO_INFO_BO_JOINING_DATE TEXT,GUSER_USER_CELL TEXT,RO_INFO_RO_NID TEXT,GUSER_TLOC_FD_BEAT_POINT_ALT TEXT,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_LAT TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA TEXT,LOGISTICS4_RIFLE303_CONDITION TEXT,GUSER_DCOLLECTION TEXT,END_RAW TEXT,BO_INFO_GENERATED_NOTE_NAME_106 TEXT,GENERATED_NOTE_NAME_81 TEXT,RO_INFO_GENERATED_NOTE_NAME_97 TEXT,FBLI_FA_GENERATED_NOTE_NAME_21 TEXT,LAND_TRANSPORTS_GENERATED_NOTE_NAME_125 TEXT,GUSER_BEAT_ADDRESS TEXT,LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA TEXT,BO_INFO_BO_JOINING_DATE_RAW TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_ACC TEXT,LOGISTICS3_COUNTRYBOAT_AVAIL TEXT,FBLI_CA_TLOC_AD_DISTRICT TEXT,BO_INFO_NAME_OF_BO TEXT,LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53 TEXT,LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA TEXT,LOGISTICS3_OTHERS_WATER_TRA TEXT,FBLI_TLOC_ECOZONE TEXT,BO_INFO_BO_RANK TEXT,LOGISTICS4_SLR_CONDITION TEXT,END TEXT,FBLI_FA_TLOC_FD_RANGE TEXT,RO_INFO_RO_JOINING_DATE_RAW TEXT,PHONENUMBER TEXT,LOGISTICS3_TRAWLER TEXT,LOGISTICS4_GFIREARMS_SHORTGUN TEXT,LOGISTICS4_SHORTGUN_CONDITION TEXT,START_RAW TEXT,LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS TEXT,BO_INFO_BO_MAIL TEXT,META_INSTANCE_ID TEXT,LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL TEXT,FBLI_CA_GENERATED_NOTE_NAME_33 TEXT,FBLI_CA_TLOC_AD_DIVISION TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65 TEXT,LOGISTICS4_OTHERS_WATER_TRA_AVAIL TEXT,LOGISTICS3_GSPEED_BOAT TEXT,LOGISTICS4_TFIREARMS_303RIFLE_AVAIL TEXT,LOGISTICS4_GFIREARMS_CHINESERIFLE TEXT,TODAY TEXT,FBLI_FA_TLOC_FD_CHAR TEXT,LAND_TRANSPORTS_GMOTORBIKE TEXT,LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA TEXT,FBLI_FA_TLOC_ENTER_RANGE TEXT,LAND_STATISTICS_AREA_SUM TEXT,RO_INFO_RO_MAIL TEXT,GENERATED_NOTE_NAME_123 TEXT,START TEXT,FBLI_CA_UNION TEXT,FBLI_FA_TLOC_ENTER_DIV TEXT,TODAY_RAW TEXT,GENERATED_NOTE_NAME_94 TEXT,LOGISTICS3_OTHERS_WATER_TRA_AVAIL TEXT,GENERATED_NOTE_NAME_95 TEXT,LOGISTICS4_TFIREARMS_SLR_AVAIL TEXT,LOGISTICS3_GENERATED_NOTE_NAME_137 TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT,UserName TEXT,AdditionTime TEXT)`,
          [],
          () => {
            console.log('gener43_2021_core_audit table created successfully');
          },
          reject,
        );

        data.forEach(gener43_2021_core_audit => {
          tx.executeSql(
            `INSERT INTO gener43_2021_core_audit VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              gener43_2021_core_audit.id || null,
              gener43_2021_core_audit._URI || null,
              gener43_2021_core_audit._CREATOR_URI_USER || null,
              gener43_2021_core_audit._CREATION_DATE || null,
              gener43_2021_core_audit._LAST_UPDATE_URI_USER || null,
              gener43_2021_core_audit._LAST_UPDATE_DATE || null,
              gener43_2021_core_audit._MODEL_VERSION || null,
              gener43_2021_core_audit._UI_VERSION || null,
              gener43_2021_core_audit._IS_COMPLETE || null,
              gener43_2021_core_audit._SUBMISSION_DATE || null,
              gener43_2021_core_audit._MARKED_AS_COMPLETE_DATE || null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA ||
                null,
              gener43_2021_core_audit.GUSER_TLOC_FD_BEAT_POINT_LNG || null,
              gener43_2021_core_audit.FBLI_FA_TLOC_FD_BEAT || null,
              gener43_2021_core_audit.LOGISTICS3_COUNTRYBOAT_CONDITION || null,
              gener43_2021_core_audit.LOGISTICS4_GFIREARMS_303RIFLE || null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA ||
                null,
              gener43_2021_core_audit.LOGISTICS4_OTHERS_WATER_TRA || null,
              gener43_2021_core_audit.BO_INFO_BO_CELL || null,
              gener43_2021_core_audit.LOGISTICS3_TVESSEL_CONDITION || null,
              gener43_2021_core_audit.RO_INFO_RO_CELL || null,
              gener43_2021_core_audit.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL ||
                null,
              gener43_2021_core_audit.LOGISTICS3_TVESSEL_AVAIL || null,
              gener43_2021_core_audit.FBLI_FA_TLOC_FD_BEAT_TXT || null,
              gener43_2021_core_audit.LOGISTICS3_SPEEDBOAT_CONDITION || null,
              gener43_2021_core_audit.FBLI_FA_TLOC_FD_DIVISION || null,
              gener43_2021_core_audit.LAND_TRANSPORTS_BICYCLE_AVAIL || null,
              gener43_2021_core_audit.LOGISTICS3_OTHERS_WATER_TRA_CONDITION ||
                null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA ||
                null,
              gener43_2021_core_audit.SUBSCRIBERID || null,
              gener43_2021_core_audit.GUSER_USER || null,
              gener43_2021_core_audit.RO_INFO_NAME_OF_RO || null,
              gener43_2021_core_audit.FBLI_FA_TLOC_FD_BLOCK || null,
              gener43_2021_core_audit.DEVICEID || null,
              gener43_2021_core_audit.LAND_TRANSPORTS_MOTORB_CONDITION || null,
              gener43_2021_core_audit.FBLI_GENERATED_NOTE_NAME_18 || null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74 ||
                null,
              gener43_2021_core_audit.LOGISTICS4_CHINESERIFLE_CONDITION || null,
              gener43_2021_core_audit.LOGISTICS3_SPEEDBOAT_AVAIL || null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA ||
                null,
              gener43_2021_core_audit.LOGISTICS4_GENERATED_NOTE_NAME_152 ||
                null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA ||
                null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA ||
                null,
              gener43_2021_core_audit.SIMSERIAL || null,
              gener43_2021_core_audit.GUSER_DCOLLECTION_RAW || null,
              gener43_2021_core_audit.LAND_TRANSPORTS_BICYCLE_CONDITION || null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA ||
                null,
              gener43_2021_core_audit.GUSER_GENERATED_NOTE_NAME_10 || null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA ||
                null,
              gener43_2021_core_audit.BO_INFO_BO_NID || null,
              gener43_2021_core_audit.LAND_TRANSPORTS_GBI_CYCLE || null,
              gener43_2021_core_audit.LAND_TRANSPORTS_OTHERS_LAND_TRA || null,
              gener43_2021_core_audit.LOGISTICS3_GCOUNTRY_BOAT || null,
              gener43_2021_core_audit.LOGISTICS4_GFIREARMS_SLR || null,
              gener43_2021_core_audit.FBLI_FA_TLOC_FD_CIR || null,
              gener43_2021_core_audit.LAND_TRANSPORTS_MOTORB_AVAIL || null,
              gener43_2021_core_audit.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION ||
                null,
              gener43_2021_core_audit.RO_INFO_RO_JOINING_DATE || null,
              gener43_2021_core_audit.LOGISTICS4_OTHERS_WATER_TRA_CONDITION ||
                null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA ||
                null,
              gener43_2021_core_audit.RO_INFO_RO_RANK || null,
              gener43_2021_core_audit.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL ||
                null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA ||
                null,
              gener43_2021_core_audit.BO_INFO_BO_JOINING_DATE || null,
              gener43_2021_core_audit.GUSER_USER_CELL || null,
              gener43_2021_core_audit.RO_INFO_RO_NID || null,
              gener43_2021_core_audit.GUSER_TLOC_FD_BEAT_POINT_ALT || null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA ||
                null,
              gener43_2021_core_audit.GUSER_TLOC_FD_BEAT_POINT_LAT || null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA ||
                null,
              gener43_2021_core_audit.LOGISTICS4_RIFLE303_CONDITION || null,
              gener43_2021_core_audit.GUSER_DCOLLECTION || null,
              gener43_2021_core_audit.END_RAW || null,
              gener43_2021_core_audit.BO_INFO_GENERATED_NOTE_NAME_106 || null,
              gener43_2021_core_audit.GENERATED_NOTE_NAME_81 || null,
              gener43_2021_core_audit.RO_INFO_GENERATED_NOTE_NAME_97 || null,
              gener43_2021_core_audit.FBLI_FA_GENERATED_NOTE_NAME_21 || null,
              gener43_2021_core_audit.LAND_TRANSPORTS_GENERATED_NOTE_NAME_125 ||
                null,
              gener43_2021_core_audit.GUSER_BEAT_ADDRESS || null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA ||
                null,
              gener43_2021_core_audit.BO_INFO_BO_JOINING_DATE_RAW || null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA ||
                null,
              gener43_2021_core_audit.GUSER_TLOC_FD_BEAT_POINT_ACC || null,
              gener43_2021_core_audit.LOGISTICS3_COUNTRYBOAT_AVAIL || null,
              gener43_2021_core_audit.FBLI_CA_TLOC_AD_DISTRICT || null,
              gener43_2021_core_audit.BO_INFO_NAME_OF_BO || null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53 ||
                null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA ||
                null,
              gener43_2021_core_audit.LOGISTICS3_OTHERS_WATER_TRA || null,
              gener43_2021_core_audit.FBLI_TLOC_ECOZONE || null,
              gener43_2021_core_audit.BO_INFO_BO_RANK || null,
              gener43_2021_core_audit.LOGISTICS4_SLR_CONDITION || null,
              gener43_2021_core_audit.END || null,
              gener43_2021_core_audit.FBLI_FA_TLOC_FD_RANGE || null,
              gener43_2021_core_audit.RO_INFO_RO_JOINING_DATE_RAW || null,
              gener43_2021_core_audit.PHONENUMBER || null,
              gener43_2021_core_audit.LOGISTICS3_TRAWLER || null,
              gener43_2021_core_audit.LOGISTICS4_GFIREARMS_SHORTGUN || null,
              gener43_2021_core_audit.LOGISTICS4_SHORTGUN_CONDITION || null,
              gener43_2021_core_audit.START_RAW || null,
              gener43_2021_core_audit.LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS ||
                null,
              gener43_2021_core_audit.BO_INFO_BO_MAIL || null,
              gener43_2021_core_audit.META_INSTANCE_ID || null,
              gener43_2021_core_audit.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL ||
                null,
              gener43_2021_core_audit.FBLI_CA_GENERATED_NOTE_NAME_33 || null,
              gener43_2021_core_audit.FBLI_CA_TLOC_AD_DIVISION || null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65 ||
                null,
              gener43_2021_core_audit.LOGISTICS4_OTHERS_WATER_TRA_AVAIL || null,
              gener43_2021_core_audit.LOGISTICS3_GSPEED_BOAT || null,
              gener43_2021_core_audit.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL ||
                null,
              gener43_2021_core_audit.LOGISTICS4_GFIREARMS_CHINESERIFLE || null,
              gener43_2021_core_audit.TODAY || null,
              gener43_2021_core_audit.FBLI_FA_TLOC_FD_CHAR || null,
              gener43_2021_core_audit.LAND_TRANSPORTS_GMOTORBIKE || null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA ||
                null,
              gener43_2021_core_audit.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA ||
                null,
              gener43_2021_core_audit.FBLI_FA_TLOC_ENTER_RANGE || null,
              gener43_2021_core_audit.LAND_STATISTICS_AREA_SUM || null,
              gener43_2021_core_audit.RO_INFO_RO_MAIL || null,
              gener43_2021_core_audit.GENERATED_NOTE_NAME_123 || null,
              gener43_2021_core_audit.START || null,
              gener43_2021_core_audit.FBLI_CA_UNION || null,
              gener43_2021_core_audit.FBLI_FA_TLOC_ENTER_DIV || null,
              gener43_2021_core_audit.TODAY_RAW || null,
              gener43_2021_core_audit.GENERATED_NOTE_NAME_94 || null,
              gener43_2021_core_audit.LOGISTICS3_OTHERS_WATER_TRA_AVAIL || null,
              gener43_2021_core_audit.GENERATED_NOTE_NAME_95 || null,
              gener43_2021_core_audit.LOGISTICS4_TFIREARMS_SLR_AVAIL || null,
              gener43_2021_core_audit.LOGISTICS3_GENERATED_NOTE_NAME_137 ||
                null,
              gener43_2021_core_audit.project_id || null,
              gener43_2021_core_audit.sort || null,
              gener43_2021_core_audit.last_log_id || null,
              gener43_2021_core_audit.restore_id || null,
              gener43_2021_core_audit.created_at || null,
              gener43_2021_core_audit.created_by || null,
              gener43_2021_core_audit.updated_at || null,
              gener43_2021_core_audit.updated_by || null,
              gener43_2021_core_audit.deleted_at || null,
              gener43_2021_core_audit.deleted_by || null,
              gener43_2021_core_audit.deleted_status || null,
              gener43_2021_core_audit.status || null,
              gener43_2021_core_audit.UserName || null,
              gener43_2021_core_audit.AdditionTime || null,
            ],
            (_, resultSet) =>
              console.log(
                'gener43_2021_core_audit data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting gener43_2021_core_audit data',
                error,
                gener43_2021_core_audit,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_core_audit data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const gener43_2021_core_audit_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_core_audit?token=${token}`,
    );
    const data = await response.json();
    console.log('Total gener43_2021_core_audit items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_core_audit`,
          [],
          () => {
            console.log('gener43_2021_core_audit table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_core_audit (id TEXT,_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_LNG TEXT,FBLI_FA_TLOC_FD_BEAT TEXT,LOGISTICS3_COUNTRYBOAT_CONDITION TEXT,LOGISTICS4_GFIREARMS_303RIFLE TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA TEXT,LOGISTICS4_OTHERS_WATER_TRA TEXT,BO_INFO_BO_CELL TEXT,LOGISTICS3_TVESSEL_CONDITION TEXT,RO_INFO_RO_CELL TEXT,LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL TEXT,LOGISTICS3_TVESSEL_AVAIL TEXT,FBLI_FA_TLOC_FD_BEAT_TXT TEXT,LOGISTICS3_SPEEDBOAT_CONDITION TEXT,FBLI_FA_TLOC_FD_DIVISION TEXT,LAND_TRANSPORTS_BICYCLE_AVAIL TEXT,LOGISTICS3_OTHERS_WATER_TRA_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA TEXT,SUBSCRIBERID TEXT,GUSER_USER TEXT,RO_INFO_NAME_OF_RO TEXT,FBLI_FA_TLOC_FD_BLOCK TEXT,DEVICEID TEXT,LAND_TRANSPORTS_MOTORB_CONDITION TEXT,FBLI_GENERATED_NOTE_NAME_18 TEXT,LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74 TEXT,LOGISTICS4_CHINESERIFLE_CONDITION TEXT,LOGISTICS3_SPEEDBOAT_AVAIL TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA TEXT,LOGISTICS4_GENERATED_NOTE_NAME_152 TEXT,LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA TEXT,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA TEXT,SIMSERIAL TEXT,GUSER_DCOLLECTION_RAW TEXT,LAND_TRANSPORTS_BICYCLE_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA TEXT,GUSER_GENERATED_NOTE_NAME_10 TEXT,LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA TEXT,BO_INFO_BO_NID TEXT,LAND_TRANSPORTS_GBI_CYCLE TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA TEXT,LOGISTICS3_GCOUNTRY_BOAT TEXT,LOGISTICS4_GFIREARMS_SLR TEXT,FBLI_FA_TLOC_FD_CIR TEXT,LAND_TRANSPORTS_MOTORB_AVAIL TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION TEXT,RO_INFO_RO_JOINING_DATE TEXT,LOGISTICS4_OTHERS_WATER_TRA_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA TEXT,RO_INFO_RO_RANK TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA TEXT,BO_INFO_BO_JOINING_DATE TEXT,GUSER_USER_CELL TEXT,RO_INFO_RO_NID TEXT,GUSER_TLOC_FD_BEAT_POINT_ALT TEXT,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_LAT TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA TEXT,LOGISTICS4_RIFLE303_CONDITION TEXT,GUSER_DCOLLECTION TEXT,END_RAW TEXT,BO_INFO_GENERATED_NOTE_NAME_106 TEXT,GENERATED_NOTE_NAME_81 TEXT,RO_INFO_GENERATED_NOTE_NAME_97 TEXT,FBLI_FA_GENERATED_NOTE_NAME_21 TEXT,LAND_TRANSPORTS_GENERATED_NOTE_NAME_125 TEXT,GUSER_BEAT_ADDRESS TEXT,LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA TEXT,BO_INFO_BO_JOINING_DATE_RAW TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_ACC TEXT,LOGISTICS3_COUNTRYBOAT_AVAIL TEXT,FBLI_CA_TLOC_AD_DISTRICT TEXT,BO_INFO_NAME_OF_BO TEXT,LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53 TEXT,LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA TEXT,LOGISTICS3_OTHERS_WATER_TRA TEXT,FBLI_TLOC_ECOZONE TEXT,BO_INFO_BO_RANK TEXT,LOGISTICS4_SLR_CONDITION TEXT,END TEXT,FBLI_FA_TLOC_FD_RANGE TEXT,RO_INFO_RO_JOINING_DATE_RAW TEXT,PHONENUMBER TEXT,LOGISTICS3_TRAWLER TEXT,LOGISTICS4_GFIREARMS_SHORTGUN TEXT,LOGISTICS4_SHORTGUN_CONDITION TEXT,START_RAW TEXT,LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS TEXT,BO_INFO_BO_MAIL TEXT,META_INSTANCE_ID TEXT,LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL TEXT,FBLI_CA_GENERATED_NOTE_NAME_33 TEXT,FBLI_CA_TLOC_AD_DIVISION TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65 TEXT,LOGISTICS4_OTHERS_WATER_TRA_AVAIL TEXT,LOGISTICS3_GSPEED_BOAT TEXT,LOGISTICS4_TFIREARMS_303RIFLE_AVAIL TEXT,LOGISTICS4_GFIREARMS_CHINESERIFLE TEXT,TODAY TEXT,FBLI_FA_TLOC_FD_CHAR TEXT,LAND_TRANSPORTS_GMOTORBIKE TEXT,LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA TEXT,FBLI_FA_TLOC_ENTER_RANGE TEXT,LAND_STATISTICS_AREA_SUM TEXT,RO_INFO_RO_MAIL TEXT,GENERATED_NOTE_NAME_123 TEXT,START TEXT,FBLI_CA_UNION TEXT,FBLI_FA_TLOC_ENTER_DIV TEXT,TODAY_RAW TEXT,GENERATED_NOTE_NAME_94 TEXT,LOGISTICS3_OTHERS_WATER_TRA_AVAIL TEXT,GENERATED_NOTE_NAME_95 TEXT,LOGISTICS4_TFIREARMS_SLR_AVAIL TEXT,LOGISTICS3_GENERATED_NOTE_NAME_137 TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT,UserName TEXT,AdditionTime TEXT)`,
          [],
          () => {
            console.log('gener43_2021_core_audit table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_core_audit data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const gener43_2021_core_audit_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM gener43_2021_core_audit`, // Query the gener43_2021_core_audit table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying gener43_2021_core_audit`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const gener43_2021_core_audit_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM gener43_2021_core_audit`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from gener43_2021_core_audit:',
            resultSet,
          );

          try {
            await gener43_2021_core_audit_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from gener43_2021_core_audit`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const gener43_2021_core_audit_create = gener43_2021_core_audit => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert gener43_2021_core_audit
      tx.executeSql(
        `INSERT INTO gener43_2021_core_audit (id,_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_MODEL_VERSION,_UI_VERSION,_IS_COMPLETE,_SUBMISSION_DATE,_MARKED_AS_COMPLETE_DATE,LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA,GUSER_TLOC_FD_BEAT_POINT_LNG,FBLI_FA_TLOC_FD_BEAT,LOGISTICS3_COUNTRYBOAT_CONDITION,LOGISTICS4_GFIREARMS_303RIFLE,LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA,LOGISTICS4_OTHERS_WATER_TRA,BO_INFO_BO_CELL,LOGISTICS3_TVESSEL_CONDITION,RO_INFO_RO_CELL,LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL,LOGISTICS3_TVESSEL_AVAIL,FBLI_FA_TLOC_FD_BEAT_TXT,LOGISTICS3_SPEEDBOAT_CONDITION,FBLI_FA_TLOC_FD_DIVISION,LAND_TRANSPORTS_BICYCLE_AVAIL,LOGISTICS3_OTHERS_WATER_TRA_CONDITION,LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA,SUBSCRIBERID,GUSER_USER,RO_INFO_NAME_OF_RO,FBLI_FA_TLOC_FD_BLOCK,DEVICEID,LAND_TRANSPORTS_MOTORB_CONDITION,FBLI_GENERATED_NOTE_NAME_18,LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74,LOGISTICS4_CHINESERIFLE_CONDITION,LOGISTICS3_SPEEDBOAT_AVAIL,LAND_STATISTICS_BEAT_MGT_
APPROACH_PA_WS_HA,LOGISTICS4_GENERATED_NOTE_NAME_152,LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA,SIMSERIAL,GUSER_DCOLLECTION_RAW,LAND_TRANSPORTS_BICYCLE_CONDITION,LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA,GUSER_GENERATED_NOTE_NAME_10,LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA,BO_INFO_BO_NID,LAND_TRANSPORTS_GBI_CYCLE,LAND_TRANSPORTS_OTHERS_LAND_TRA,LOGISTICS3_GCOUNTRY_BOAT,LOGISTICS4_GFIREARMS_SLR,FBLI_FA_TLOC_FD_CIR,LAND_TRANSPORTS_MOTORB_AVAIL,LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION,RO_INFO_RO_JOINING_DATE,LOGISTICS4_OTHERS_WATER_TRA_CONDITION,LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA,RO_INFO_RO_RANK,LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA,BO_INFO_BO_JOINING_DATE,GUSER_USER_CELL,RO_INFO_RO_NID,GUSER_TLOC_FD_BEAT_POINT_ALT,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA,GUSER_TLOC_FD_BEAT_POINT_LAT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA,LOGISTICS4_RIFLE303_CONDITION,GUSER_
DCOLLECTION,END_RAW,BO_INFO_GENERATED_NOTE_NAME_106,GENERATED_NOTE_NAME_81,RO_INFO_GENERATED_NOTE_NAME_97,FBLI_FA_GENERATED_NOTE_NAME_21,LAND_TRANSPORTS_GENERATED_NOTE_NAME_125,GUSER_BEAT_ADDRESS,LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA,BO_INFO_BO_JOINING_DATE_RAW,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA,GUSER_TLOC_FD_BEAT_POINT_ACC,LOGISTICS3_COUNTRYBOAT_AVAIL,FBLI_CA_TLOC_AD_DISTRICT,BO_INFO_NAME_OF_BO,LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53,LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA,LOGISTICS3_OTHERS_WATER_TRA,FBLI_TLOC_ECOZONE,BO_INFO_BO_RANK,LOGISTICS4_SLR_CONDITION,END,FBLI_FA_TLOC_FD_RANGE,RO_INFO_RO_JOINING_DATE_RAW,PHONENUMBER,LOGISTICS3_TRAWLER,LOGISTICS4_GFIREARMS_SHORTGUN,LOGISTICS4_SHORTGUN_CONDITION,START_RAW,LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS,BO_INFO_BO_MAIL,META_INSTANCE_ID,LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL,FBLI_CA_GENERATED_NOTE_NAME_33,FBLI_CA_TLOC_AD_DIVISION,LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65,LOGISTICS4_OT
HERS_WATER_TRA_AVAIL,LOGISTICS3_GSPEED_BOAT,LOGISTICS4_TFIREARMS_303RIFLE_AVAIL,LOGISTICS4_GFIREARMS_CHINESERIFLE,TODAY,FBLI_FA_TLOC_FD_CHAR,LAND_TRANSPORTS_GMOTORBIKE,LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA,FBLI_FA_TLOC_ENTER_RANGE,LAND_STATISTICS_AREA_SUM,RO_INFO_RO_MAIL,GENERATED_NOTE_NAME_123,START,FBLI_CA_UNION,FBLI_FA_TLOC_ENTER_DIV,TODAY_RAW,GENERATED_NOTE_NAME_94,LOGISTICS3_OTHERS_WATER_TRA_AVAIL,GENERATED_NOTE_NAME_95,LOGISTICS4_TFIREARMS_SLR_AVAIL,LOGISTICS3_GENERATED_NOTE_NAME_137,project_id,sort,last_log_id,restore_id,created_at,created_by,updated_at,updated_by,deleted_at,deleted_by,deleted_status,status,UserName,AdditionTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          gener43_2021_core_audit.id || null,
          gener43_2021_core_audit._URI || null,
          gener43_2021_core_audit._CREATOR_URI_USER || null,
          gener43_2021_core_audit._CREATION_DATE || null,
          gener43_2021_core_audit._LAST_UPDATE_URI_USER || null,
          gener43_2021_core_audit._LAST_UPDATE_DATE || null,
          gener43_2021_core_audit._MODEL_VERSION || null,
          gener43_2021_core_audit._UI_VERSION || null,
          gener43_2021_core_audit._IS_COMPLETE || null,
          gener43_2021_core_audit._SUBMISSION_DATE || null,
          gener43_2021_core_audit._MARKED_AS_COMPLETE_DATE || null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA ||
            null,
          gener43_2021_core_audit.GUSER_TLOC_FD_BEAT_POINT_LNG || null,
          gener43_2021_core_audit.FBLI_FA_TLOC_FD_BEAT || null,
          gener43_2021_core_audit.LOGISTICS3_COUNTRYBOAT_CONDITION || null,
          gener43_2021_core_audit.LOGISTICS4_GFIREARMS_303RIFLE || null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA ||
            null,
          gener43_2021_core_audit.LOGISTICS4_OTHERS_WATER_TRA || null,
          gener43_2021_core_audit.BO_INFO_BO_CELL || null,
          gener43_2021_core_audit.LOGISTICS3_TVESSEL_CONDITION || null,
          gener43_2021_core_audit.RO_INFO_RO_CELL || null,
          gener43_2021_core_audit.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL ||
            null,
          gener43_2021_core_audit.LOGISTICS3_TVESSEL_AVAIL || null,
          gener43_2021_core_audit.FBLI_FA_TLOC_FD_BEAT_TXT || null,
          gener43_2021_core_audit.LOGISTICS3_SPEEDBOAT_CONDITION || null,
          gener43_2021_core_audit.FBLI_FA_TLOC_FD_DIVISION || null,
          gener43_2021_core_audit.LAND_TRANSPORTS_BICYCLE_AVAIL || null,
          gener43_2021_core_audit.LOGISTICS3_OTHERS_WATER_TRA_CONDITION || null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA ||
            null,
          gener43_2021_core_audit.SUBSCRIBERID || null,
          gener43_2021_core_audit.GUSER_USER || null,
          gener43_2021_core_audit.RO_INFO_NAME_OF_RO || null,
          gener43_2021_core_audit.FBLI_FA_TLOC_FD_BLOCK || null,
          gener43_2021_core_audit.DEVICEID || null,
          gener43_2021_core_audit.LAND_TRANSPORTS_MOTORB_CONDITION || null,
          gener43_2021_core_audit.FBLI_GENERATED_NOTE_NAME_18 || null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74 ||
            null,
          gener43_2021_core_audit.LOGISTICS4_CHINESERIFLE_CONDITION || null,
          gener43_2021_core_audit.LOGISTICS3_SPEEDBOAT_AVAIL || null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA ||
            null,
          gener43_2021_core_audit.LOGISTICS4_GENERATED_NOTE_NAME_152 || null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA ||
            null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA ||
            null,
          gener43_2021_core_audit.SIMSERIAL || null,
          gener43_2021_core_audit.GUSER_DCOLLECTION_RAW || null,
          gener43_2021_core_audit.LAND_TRANSPORTS_BICYCLE_CONDITION || null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA ||
            null,
          gener43_2021_core_audit.GUSER_GENERATED_NOTE_NAME_10 || null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA ||
            null,
          gener43_2021_core_audit.BO_INFO_BO_NID || null,
          gener43_2021_core_audit.LAND_TRANSPORTS_GBI_CYCLE || null,
          gener43_2021_core_audit.LAND_TRANSPORTS_OTHERS_LAND_TRA || null,
          gener43_2021_core_audit.LOGISTICS3_GCOUNTRY_BOAT || null,
          gener43_2021_core_audit.LOGISTICS4_GFIREARMS_SLR || null,
          gener43_2021_core_audit.FBLI_FA_TLOC_FD_CIR || null,
          gener43_2021_core_audit.LAND_TRANSPORTS_MOTORB_AVAIL || null,
          gener43_2021_core_audit.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION ||
            null,
          gener43_2021_core_audit.RO_INFO_RO_JOINING_DATE || null,
          gener43_2021_core_audit.LOGISTICS4_OTHERS_WATER_TRA_CONDITION || null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA ||
            null,
          gener43_2021_core_audit.RO_INFO_RO_RANK || null,
          gener43_2021_core_audit.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL || null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA ||
            null,
          gener43_2021_core_audit.BO_INFO_BO_JOINING_DATE || null,
          gener43_2021_core_audit.GUSER_USER_CELL || null,
          gener43_2021_core_audit.RO_INFO_RO_NID || null,
          gener43_2021_core_audit.GUSER_TLOC_FD_BEAT_POINT_ALT || null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA ||
            null,
          gener43_2021_core_audit.GUSER_TLOC_FD_BEAT_POINT_LAT || null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA ||
            null,
          gener43_2021_core_audit.LOGISTICS4_RIFLE303_CONDITION || null,
          gener43_2021_core_audit.GUSER_DCOLLECTION || null,
          gener43_2021_core_audit.END_RAW || null,
          gener43_2021_core_audit.BO_INFO_GENERATED_NOTE_NAME_106 || null,
          gener43_2021_core_audit.GENERATED_NOTE_NAME_81 || null,
          gener43_2021_core_audit.RO_INFO_GENERATED_NOTE_NAME_97 || null,
          gener43_2021_core_audit.FBLI_FA_GENERATED_NOTE_NAME_21 || null,
          gener43_2021_core_audit.LAND_TRANSPORTS_GENERATED_NOTE_NAME_125 ||
            null,
          gener43_2021_core_audit.GUSER_BEAT_ADDRESS || null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA ||
            null,
          gener43_2021_core_audit.BO_INFO_BO_JOINING_DATE_RAW || null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA ||
            null,
          gener43_2021_core_audit.GUSER_TLOC_FD_BEAT_POINT_ACC || null,
          gener43_2021_core_audit.LOGISTICS3_COUNTRYBOAT_AVAIL || null,
          gener43_2021_core_audit.FBLI_CA_TLOC_AD_DISTRICT || null,
          gener43_2021_core_audit.BO_INFO_NAME_OF_BO || null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53 ||
            null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA ||
            null,
          gener43_2021_core_audit.LOGISTICS3_OTHERS_WATER_TRA || null,
          gener43_2021_core_audit.FBLI_TLOC_ECOZONE || null,
          gener43_2021_core_audit.BO_INFO_BO_RANK || null,
          gener43_2021_core_audit.LOGISTICS4_SLR_CONDITION || null,
          gener43_2021_core_audit.END || null,
          gener43_2021_core_audit.FBLI_FA_TLOC_FD_RANGE || null,
          gener43_2021_core_audit.RO_INFO_RO_JOINING_DATE_RAW || null,
          gener43_2021_core_audit.PHONENUMBER || null,
          gener43_2021_core_audit.LOGISTICS3_TRAWLER || null,
          gener43_2021_core_audit.LOGISTICS4_GFIREARMS_SHORTGUN || null,
          gener43_2021_core_audit.LOGISTICS4_SHORTGUN_CONDITION || null,
          gener43_2021_core_audit.START_RAW || null,
          gener43_2021_core_audit.LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS ||
            null,
          gener43_2021_core_audit.BO_INFO_BO_MAIL || null,
          gener43_2021_core_audit.META_INSTANCE_ID || null,
          gener43_2021_core_audit.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL || null,
          gener43_2021_core_audit.FBLI_CA_GENERATED_NOTE_NAME_33 || null,
          gener43_2021_core_audit.FBLI_CA_TLOC_AD_DIVISION || null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65 ||
            null,
          gener43_2021_core_audit.LOGISTICS4_OTHERS_WATER_TRA_AVAIL || null,
          gener43_2021_core_audit.LOGISTICS3_GSPEED_BOAT || null,
          gener43_2021_core_audit.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL || null,
          gener43_2021_core_audit.LOGISTICS4_GFIREARMS_CHINESERIFLE || null,
          gener43_2021_core_audit.TODAY || null,
          gener43_2021_core_audit.FBLI_FA_TLOC_FD_CHAR || null,
          gener43_2021_core_audit.LAND_TRANSPORTS_GMOTORBIKE || null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA ||
            null,
          gener43_2021_core_audit.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA ||
            null,
          gener43_2021_core_audit.FBLI_FA_TLOC_ENTER_RANGE || null,
          gener43_2021_core_audit.LAND_STATISTICS_AREA_SUM || null,
          gener43_2021_core_audit.RO_INFO_RO_MAIL || null,
          gener43_2021_core_audit.GENERATED_NOTE_NAME_123 || null,
          gener43_2021_core_audit.START || null,
          gener43_2021_core_audit.FBLI_CA_UNION || null,
          gener43_2021_core_audit.FBLI_FA_TLOC_ENTER_DIV || null,
          gener43_2021_core_audit.TODAY_RAW || null,
          gener43_2021_core_audit.GENERATED_NOTE_NAME_94 || null,
          gener43_2021_core_audit.LOGISTICS3_OTHERS_WATER_TRA_AVAIL || null,
          gener43_2021_core_audit.GENERATED_NOTE_NAME_95 || null,
          gener43_2021_core_audit.LOGISTICS4_TFIREARMS_SLR_AVAIL || null,
          gener43_2021_core_audit.LOGISTICS3_GENERATED_NOTE_NAME_137 || null,
          gener43_2021_core_audit.project_id || null,
          gener43_2021_core_audit.sort || null,
          gener43_2021_core_audit.last_log_id || null,
          gener43_2021_core_audit.restore_id || null,
          gener43_2021_core_audit.created_at || null,
          gener43_2021_core_audit.created_by || null,
          gener43_2021_core_audit.updated_at || null,
          gener43_2021_core_audit.updated_by || null,
          gener43_2021_core_audit.deleted_at || null,
          gener43_2021_core_audit.deleted_by || null,
          gener43_2021_core_audit.deleted_status || null,
          gener43_2021_core_audit.status || null,
          gener43_2021_core_audit.UserName || null,
          gener43_2021_core_audit.AdditionTime || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const gener43_2021_core_test_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_core_test?token=${token}`,
    );
    const data = await response.json();
    console.log('Total gener43_2021_core_test items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_core_test`,
          [],
          () => {
            console.log('gener43_2021_core_test table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_core_test (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_LNG TEXT,FBLI_FA_TLOC_FD_BEAT TEXT,LOGISTICS3_COUNTRYBOAT_CONDITION TEXT,LOGISTICS4_GFIREARMS_303RIFLE TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA TEXT,LOGISTICS4_OTHERS_WATER_TRA TEXT,BO_INFO_BO_CELL TEXT,LOGISTICS3_TVESSEL_CONDITION TEXT,RO_INFO_RO_CELL TEXT,LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL TEXT,LOGISTICS3_TVESSEL_AVAIL TEXT,FBLI_FA_TLOC_FD_BEAT_TXT TEXT,LOGISTICS3_SPEEDBOAT_CONDITION TEXT,FBLI_FA_TLOC_FD_DIVISION TEXT,LAND_TRANSPORTS_BICYCLE_AVAIL TEXT,LOGISTICS3_OTHERS_WATER_TRA_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA TEXT,SUBSCRIBERID TEXT,GUSER_USER TEXT,RO_INFO_NAME_OF_RO TEXT,FBLI_FA_TLOC_FD_BLOCK TEXT,DEVICEID TEXT,LAND_TRANSPORTS_MOTORB_CONDITION TEXT,FBLI_GENERATED_NOTE_NAME_18 TEXT,LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74 TEXT,LOGISTICS4_CHINESERIFLE_CONDITION TEXT,LOGISTICS3_SPEEDBOAT_AVAIL TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA TEXT,LOGISTICS4_GENERATED_NOTE_NAME_152 TEXT,LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA TEXT,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA TEXT,SIMSERIAL TEXT,GUSER_DCOLLECTION_RAW TEXT,LAND_TRANSPORTS_BICYCLE_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA TEXT,GUSER_GENERATED_NOTE_NAME_10 TEXT,LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA TEXT,BO_INFO_BO_NID TEXT,LAND_TRANSPORTS_GBI_CYCLE TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA TEXT,LOGISTICS3_GCOUNTRY_BOAT TEXT,LOGISTICS4_GFIREARMS_SLR TEXT,FBLI_FA_TLOC_FD_CIR TEXT,LAND_TRANSPORTS_MOTORB_AVAIL TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION TEXT,RO_INFO_RO_JOINING_DATE TEXT,LOGISTICS4_OTHERS_WATER_TRA_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA TEXT,RO_INFO_RO_RANK TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA TEXT,BO_INFO_BO_JOINING_DATE TEXT,GUSER_USER_CELL TEXT,RO_INFO_RO_NID TEXT,GUSER_TLOC_FD_BEAT_POINT_ALT TEXT,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_LAT TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA TEXT,LOGISTICS4_RIFLE303_CONDITION TEXT,GUSER_DCOLLECTION TEXT,END_RAW TEXT,BO_INFO_GENERATED_NOTE_NAME_106 TEXT,GENERATED_NOTE_NAME_81 TEXT,RO_INFO_GENERATED_NOTE_NAME_97 TEXT,FBLI_FA_GENERATED_NOTE_NAME_21 TEXT,LAND_TRANSPORTS_GENERATED_NOTE_NAME_125 TEXT,GUSER_BEAT_ADDRESS TEXT,LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA TEXT,BO_INFO_BO_JOINING_DATE_RAW TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_ACC TEXT,LOGISTICS3_COUNTRYBOAT_AVAIL TEXT,FBLI_CA_TLOC_AD_DISTRICT TEXT,BO_INFO_NAME_OF_BO TEXT,LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53 TEXT,LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA TEXT,LOGISTICS3_OTHERS_WATER_TRA TEXT,FBLI_TLOC_ECOZONE TEXT,BO_INFO_BO_RANK TEXT,LOGISTICS4_SLR_CONDITION TEXT,END TEXT,FBLI_FA_TLOC_FD_RANGE TEXT,RO_INFO_RO_JOINING_DATE_RAW TEXT,PHONENUMBER TEXT,LOGISTICS3_TRAWLER TEXT,LOGISTICS4_GFIREARMS_SHORTGUN TEXT,LOGISTICS4_SHORTGUN_CONDITION TEXT,START_RAW TEXT,LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS TEXT,BO_INFO_BO_MAIL TEXT,META_INSTANCE_ID TEXT,LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL TEXT,FBLI_CA_GENERATED_NOTE_NAME_33 TEXT,FBLI_CA_TLOC_AD_DIVISION TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65 TEXT,LOGISTICS4_OTHERS_WATER_TRA_AVAIL TEXT,LOGISTICS3_GSPEED_BOAT TEXT,LOGISTICS4_TFIREARMS_303RIFLE_AVAIL TEXT,LOGISTICS4_GFIREARMS_CHINESERIFLE TEXT,TODAY TEXT,FBLI_FA_TLOC_FD_CHAR TEXT,LAND_TRANSPORTS_GMOTORBIKE TEXT,LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA TEXT,FBLI_FA_TLOC_ENTER_RANGE TEXT,LAND_STATISTICS_AREA_SUM TEXT,RO_INFO_RO_MAIL TEXT,GENERATED_NOTE_NAME_123 TEXT,START TEXT,FBLI_CA_UNION TEXT,FBLI_FA_TLOC_ENTER_DIV TEXT,TODAY_RAW TEXT,GENERATED_NOTE_NAME_94 TEXT,LOGISTICS3_OTHERS_WATER_TRA_AVAIL TEXT,GENERATED_NOTE_NAME_95 TEXT,LOGISTICS4_TFIREARMS_SLR_AVAIL TEXT,LOGISTICS3_GENERATED_NOTE_NAME_137 TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT)`,
          [],
          () => {
            console.log('gener43_2021_core_test table created successfully');
          },
          reject,
        );

        data.forEach(gener43_2021_core_test => {
          tx.executeSql(
            `INSERT INTO gener43_2021_core_test VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              gener43_2021_core_test._URI || null,
              gener43_2021_core_test._CREATOR_URI_USER || null,
              gener43_2021_core_test._CREATION_DATE || null,
              gener43_2021_core_test._LAST_UPDATE_URI_USER || null,
              gener43_2021_core_test._LAST_UPDATE_DATE || null,
              gener43_2021_core_test._MODEL_VERSION || null,
              gener43_2021_core_test._UI_VERSION || null,
              gener43_2021_core_test._IS_COMPLETE || null,
              gener43_2021_core_test._SUBMISSION_DATE || null,
              gener43_2021_core_test._MARKED_AS_COMPLETE_DATE || null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA ||
                null,
              gener43_2021_core_test.GUSER_TLOC_FD_BEAT_POINT_LNG || null,
              gener43_2021_core_test.FBLI_FA_TLOC_FD_BEAT || null,
              gener43_2021_core_test.LOGISTICS3_COUNTRYBOAT_CONDITION || null,
              gener43_2021_core_test.LOGISTICS4_GFIREARMS_303RIFLE || null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA ||
                null,
              gener43_2021_core_test.LOGISTICS4_OTHERS_WATER_TRA || null,
              gener43_2021_core_test.BO_INFO_BO_CELL || null,
              gener43_2021_core_test.LOGISTICS3_TVESSEL_CONDITION || null,
              gener43_2021_core_test.RO_INFO_RO_CELL || null,
              gener43_2021_core_test.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL ||
                null,
              gener43_2021_core_test.LOGISTICS3_TVESSEL_AVAIL || null,
              gener43_2021_core_test.FBLI_FA_TLOC_FD_BEAT_TXT || null,
              gener43_2021_core_test.LOGISTICS3_SPEEDBOAT_CONDITION || null,
              gener43_2021_core_test.FBLI_FA_TLOC_FD_DIVISION || null,
              gener43_2021_core_test.LAND_TRANSPORTS_BICYCLE_AVAIL || null,
              gener43_2021_core_test.LOGISTICS3_OTHERS_WATER_TRA_CONDITION ||
                null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA ||
                null,
              gener43_2021_core_test.SUBSCRIBERID || null,
              gener43_2021_core_test.GUSER_USER || null,
              gener43_2021_core_test.RO_INFO_NAME_OF_RO || null,
              gener43_2021_core_test.FBLI_FA_TLOC_FD_BLOCK || null,
              gener43_2021_core_test.DEVICEID || null,
              gener43_2021_core_test.LAND_TRANSPORTS_MOTORB_CONDITION || null,
              gener43_2021_core_test.FBLI_GENERATED_NOTE_NAME_18 || null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74 ||
                null,
              gener43_2021_core_test.LOGISTICS4_CHINESERIFLE_CONDITION || null,
              gener43_2021_core_test.LOGISTICS3_SPEEDBOAT_AVAIL || null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA ||
                null,
              gener43_2021_core_test.LOGISTICS4_GENERATED_NOTE_NAME_152 || null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA ||
                null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA ||
                null,
              gener43_2021_core_test.SIMSERIAL || null,
              gener43_2021_core_test.GUSER_DCOLLECTION_RAW || null,
              gener43_2021_core_test.LAND_TRANSPORTS_BICYCLE_CONDITION || null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA ||
                null,
              gener43_2021_core_test.GUSER_GENERATED_NOTE_NAME_10 || null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA ||
                null,
              gener43_2021_core_test.BO_INFO_BO_NID || null,
              gener43_2021_core_test.LAND_TRANSPORTS_GBI_CYCLE || null,
              gener43_2021_core_test.LAND_TRANSPORTS_OTHERS_LAND_TRA || null,
              gener43_2021_core_test.LOGISTICS3_GCOUNTRY_BOAT || null,
              gener43_2021_core_test.LOGISTICS4_GFIREARMS_SLR || null,
              gener43_2021_core_test.FBLI_FA_TLOC_FD_CIR || null,
              gener43_2021_core_test.LAND_TRANSPORTS_MOTORB_AVAIL || null,
              gener43_2021_core_test.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION ||
                null,
              gener43_2021_core_test.RO_INFO_RO_JOINING_DATE || null,
              gener43_2021_core_test.LOGISTICS4_OTHERS_WATER_TRA_CONDITION ||
                null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA ||
                null,
              gener43_2021_core_test.RO_INFO_RO_RANK || null,
              gener43_2021_core_test.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL ||
                null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA ||
                null,
              gener43_2021_core_test.BO_INFO_BO_JOINING_DATE || null,
              gener43_2021_core_test.GUSER_USER_CELL || null,
              gener43_2021_core_test.RO_INFO_RO_NID || null,
              gener43_2021_core_test.GUSER_TLOC_FD_BEAT_POINT_ALT || null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA ||
                null,
              gener43_2021_core_test.GUSER_TLOC_FD_BEAT_POINT_LAT || null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA ||
                null,
              gener43_2021_core_test.LOGISTICS4_RIFLE303_CONDITION || null,
              gener43_2021_core_test.GUSER_DCOLLECTION || null,
              gener43_2021_core_test.END_RAW || null,
              gener43_2021_core_test.BO_INFO_GENERATED_NOTE_NAME_106 || null,
              gener43_2021_core_test.GENERATED_NOTE_NAME_81 || null,
              gener43_2021_core_test.RO_INFO_GENERATED_NOTE_NAME_97 || null,
              gener43_2021_core_test.FBLI_FA_GENERATED_NOTE_NAME_21 || null,
              gener43_2021_core_test.LAND_TRANSPORTS_GENERATED_NOTE_NAME_125 ||
                null,
              gener43_2021_core_test.GUSER_BEAT_ADDRESS || null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA ||
                null,
              gener43_2021_core_test.BO_INFO_BO_JOINING_DATE_RAW || null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA ||
                null,
              gener43_2021_core_test.GUSER_TLOC_FD_BEAT_POINT_ACC || null,
              gener43_2021_core_test.LOGISTICS3_COUNTRYBOAT_AVAIL || null,
              gener43_2021_core_test.FBLI_CA_TLOC_AD_DISTRICT || null,
              gener43_2021_core_test.BO_INFO_NAME_OF_BO || null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53 ||
                null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA ||
                null,
              gener43_2021_core_test.LOGISTICS3_OTHERS_WATER_TRA || null,
              gener43_2021_core_test.FBLI_TLOC_ECOZONE || null,
              gener43_2021_core_test.BO_INFO_BO_RANK || null,
              gener43_2021_core_test.LOGISTICS4_SLR_CONDITION || null,
              gener43_2021_core_test.END || null,
              gener43_2021_core_test.FBLI_FA_TLOC_FD_RANGE || null,
              gener43_2021_core_test.RO_INFO_RO_JOINING_DATE_RAW || null,
              gener43_2021_core_test.PHONENUMBER || null,
              gener43_2021_core_test.LOGISTICS3_TRAWLER || null,
              gener43_2021_core_test.LOGISTICS4_GFIREARMS_SHORTGUN || null,
              gener43_2021_core_test.LOGISTICS4_SHORTGUN_CONDITION || null,
              gener43_2021_core_test.START_RAW || null,
              gener43_2021_core_test.LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS ||
                null,
              gener43_2021_core_test.BO_INFO_BO_MAIL || null,
              gener43_2021_core_test.META_INSTANCE_ID || null,
              gener43_2021_core_test.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL ||
                null,
              gener43_2021_core_test.FBLI_CA_GENERATED_NOTE_NAME_33 || null,
              gener43_2021_core_test.FBLI_CA_TLOC_AD_DIVISION || null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65 ||
                null,
              gener43_2021_core_test.LOGISTICS4_OTHERS_WATER_TRA_AVAIL || null,
              gener43_2021_core_test.LOGISTICS3_GSPEED_BOAT || null,
              gener43_2021_core_test.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL ||
                null,
              gener43_2021_core_test.LOGISTICS4_GFIREARMS_CHINESERIFLE || null,
              gener43_2021_core_test.TODAY || null,
              gener43_2021_core_test.FBLI_FA_TLOC_FD_CHAR || null,
              gener43_2021_core_test.LAND_TRANSPORTS_GMOTORBIKE || null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA ||
                null,
              gener43_2021_core_test.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA ||
                null,
              gener43_2021_core_test.FBLI_FA_TLOC_ENTER_RANGE || null,
              gener43_2021_core_test.LAND_STATISTICS_AREA_SUM || null,
              gener43_2021_core_test.RO_INFO_RO_MAIL || null,
              gener43_2021_core_test.GENERATED_NOTE_NAME_123 || null,
              gener43_2021_core_test.START || null,
              gener43_2021_core_test.FBLI_CA_UNION || null,
              gener43_2021_core_test.FBLI_FA_TLOC_ENTER_DIV || null,
              gener43_2021_core_test.TODAY_RAW || null,
              gener43_2021_core_test.GENERATED_NOTE_NAME_94 || null,
              gener43_2021_core_test.LOGISTICS3_OTHERS_WATER_TRA_AVAIL || null,
              gener43_2021_core_test.GENERATED_NOTE_NAME_95 || null,
              gener43_2021_core_test.LOGISTICS4_TFIREARMS_SLR_AVAIL || null,
              gener43_2021_core_test.LOGISTICS3_GENERATED_NOTE_NAME_137 || null,
              gener43_2021_core_test.project_id || null,
              gener43_2021_core_test.sort || null,
              gener43_2021_core_test.last_log_id || null,
              gener43_2021_core_test.restore_id || null,
              gener43_2021_core_test.created_at || null,
              gener43_2021_core_test.created_by || null,
              gener43_2021_core_test.updated_at || null,
              gener43_2021_core_test.updated_by || null,
              gener43_2021_core_test.deleted_at || null,
              gener43_2021_core_test.deleted_by || null,
              gener43_2021_core_test.deleted_status || null,
              gener43_2021_core_test.status || null,
            ],
            (_, resultSet) =>
              console.log(
                'gener43_2021_core_test data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting gener43_2021_core_test data',
                error,
                gener43_2021_core_test,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching gener43_2021_core_test data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const gener43_2021_core_test_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_core_test?token=${token}`,
    );
    const data = await response.json();
    console.log('Total gener43_2021_core_test items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_core_test`,
          [],
          () => {
            console.log('gener43_2021_core_test table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_core_test (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_LNG TEXT,FBLI_FA_TLOC_FD_BEAT TEXT,LOGISTICS3_COUNTRYBOAT_CONDITION TEXT,LOGISTICS4_GFIREARMS_303RIFLE TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA TEXT,LOGISTICS4_OTHERS_WATER_TRA TEXT,BO_INFO_BO_CELL TEXT,LOGISTICS3_TVESSEL_CONDITION TEXT,RO_INFO_RO_CELL TEXT,LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL TEXT,LOGISTICS3_TVESSEL_AVAIL TEXT,FBLI_FA_TLOC_FD_BEAT_TXT TEXT,LOGISTICS3_SPEEDBOAT_CONDITION TEXT,FBLI_FA_TLOC_FD_DIVISION TEXT,LAND_TRANSPORTS_BICYCLE_AVAIL TEXT,LOGISTICS3_OTHERS_WATER_TRA_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA TEXT,SUBSCRIBERID TEXT,GUSER_USER TEXT,RO_INFO_NAME_OF_RO TEXT,FBLI_FA_TLOC_FD_BLOCK TEXT,DEVICEID TEXT,LAND_TRANSPORTS_MOTORB_CONDITION TEXT,FBLI_GENERATED_NOTE_NAME_18 TEXT,LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74 TEXT,LOGISTICS4_CHINESERIFLE_CONDITION TEXT,LOGISTICS3_SPEEDBOAT_AVAIL TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA TEXT,LOGISTICS4_GENERATED_NOTE_NAME_152 TEXT,LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA TEXT,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA TEXT,SIMSERIAL TEXT,GUSER_DCOLLECTION_RAW TEXT,LAND_TRANSPORTS_BICYCLE_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA TEXT,GUSER_GENERATED_NOTE_NAME_10 TEXT,LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA TEXT,BO_INFO_BO_NID TEXT,LAND_TRANSPORTS_GBI_CYCLE TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA TEXT,LOGISTICS3_GCOUNTRY_BOAT TEXT,LOGISTICS4_GFIREARMS_SLR TEXT,FBLI_FA_TLOC_FD_CIR TEXT,LAND_TRANSPORTS_MOTORB_AVAIL TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION TEXT,RO_INFO_RO_JOINING_DATE TEXT,LOGISTICS4_OTHERS_WATER_TRA_CONDITION TEXT,LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA TEXT,RO_INFO_RO_RANK TEXT,LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA TEXT,BO_INFO_BO_JOINING_DATE TEXT,GUSER_USER_CELL TEXT,RO_INFO_RO_NID TEXT,GUSER_TLOC_FD_BEAT_POINT_ALT TEXT,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_LAT TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA TEXT,LOGISTICS4_RIFLE303_CONDITION TEXT,GUSER_DCOLLECTION TEXT,END_RAW TEXT,BO_INFO_GENERATED_NOTE_NAME_106 TEXT,GENERATED_NOTE_NAME_81 TEXT,RO_INFO_GENERATED_NOTE_NAME_97 TEXT,FBLI_FA_GENERATED_NOTE_NAME_21 TEXT,LAND_TRANSPORTS_GENERATED_NOTE_NAME_125 TEXT,GUSER_BEAT_ADDRESS TEXT,LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA TEXT,BO_INFO_BO_JOINING_DATE_RAW TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA TEXT,GUSER_TLOC_FD_BEAT_POINT_ACC TEXT,LOGISTICS3_COUNTRYBOAT_AVAIL TEXT,FBLI_CA_TLOC_AD_DISTRICT TEXT,BO_INFO_NAME_OF_BO TEXT,LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53 TEXT,LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA TEXT,LOGISTICS3_OTHERS_WATER_TRA TEXT,FBLI_TLOC_ECOZONE TEXT,BO_INFO_BO_RANK TEXT,LOGISTICS4_SLR_CONDITION TEXT,END TEXT,FBLI_FA_TLOC_FD_RANGE TEXT,RO_INFO_RO_JOINING_DATE_RAW TEXT,PHONENUMBER TEXT,LOGISTICS3_TRAWLER TEXT,LOGISTICS4_GFIREARMS_SHORTGUN TEXT,LOGISTICS4_SHORTGUN_CONDITION TEXT,START_RAW TEXT,LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS TEXT,BO_INFO_BO_MAIL TEXT,META_INSTANCE_ID TEXT,LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL TEXT,FBLI_CA_GENERATED_NOTE_NAME_33 TEXT,FBLI_CA_TLOC_AD_DIVISION TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65 TEXT,LOGISTICS4_OTHERS_WATER_TRA_AVAIL TEXT,LOGISTICS3_GSPEED_BOAT TEXT,LOGISTICS4_TFIREARMS_303RIFLE_AVAIL TEXT,LOGISTICS4_GFIREARMS_CHINESERIFLE TEXT,TODAY TEXT,FBLI_FA_TLOC_FD_CHAR TEXT,LAND_TRANSPORTS_GMOTORBIKE TEXT,LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA TEXT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA TEXT,FBLI_FA_TLOC_ENTER_RANGE TEXT,LAND_STATISTICS_AREA_SUM TEXT,RO_INFO_RO_MAIL TEXT,GENERATED_NOTE_NAME_123 TEXT,START TEXT,FBLI_CA_UNION TEXT,FBLI_FA_TLOC_ENTER_DIV TEXT,TODAY_RAW TEXT,GENERATED_NOTE_NAME_94 TEXT,LOGISTICS3_OTHERS_WATER_TRA_AVAIL TEXT,GENERATED_NOTE_NAME_95 TEXT,LOGISTICS4_TFIREARMS_SLR_AVAIL TEXT,LOGISTICS3_GENERATED_NOTE_NAME_137 TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT)`,
          [],
          () => {
            console.log('gener43_2021_core_test table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching gener43_2021_core_test data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const gener43_2021_core_test_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM gener43_2021_core_test`, // Query the gener43_2021_core_test table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying gener43_2021_core_test`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const gener43_2021_core_test_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM gener43_2021_core_test`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from gener43_2021_core_test:',
            resultSet,
          );

          try {
            await gener43_2021_core_test_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from gener43_2021_core_test`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const gener43_2021_core_test_create = gener43_2021_core_test => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert gener43_2021_core_test
      tx.executeSql(
        `INSERT INTO gener43_2021_core_test (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_MODEL_VERSION,_UI_VERSION,_IS_COMPLETE,_SUBMISSION_DATE,_MARKED_AS_COMPLETE_DATE,LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA,GUSER_TLOC_FD_BEAT_POINT_LNG,FBLI_FA_TLOC_FD_BEAT,LOGISTICS3_COUNTRYBOAT_CONDITION,LOGISTICS4_GFIREARMS_303RIFLE,LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA,LOGISTICS4_OTHERS_WATER_TRA,BO_INFO_BO_CELL,LOGISTICS3_TVESSEL_CONDITION,RO_INFO_RO_CELL,LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL,LOGISTICS3_TVESSEL_AVAIL,FBLI_FA_TLOC_FD_BEAT_TXT,LOGISTICS3_SPEEDBOAT_CONDITION,FBLI_FA_TLOC_FD_DIVISION,LAND_TRANSPORTS_BICYCLE_AVAIL,LOGISTICS3_OTHERS_WATER_TRA_CONDITION,LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA,SUBSCRIBERID,GUSER_USER,RO_INFO_NAME_OF_RO,FBLI_FA_TLOC_FD_BLOCK,DEVICEID,LAND_TRANSPORTS_MOTORB_CONDITION,FBLI_GENERATED_NOTE_NAME_18,LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74,LOGISTICS4_CHINESERIFLE_CONDITION,LOGISTICS3_SPEEDBOAT_AVAIL,LAND_STATISTICS_BEAT_MGT_APP
ROACH_PA_WS_HA,LOGISTICS4_GENERATED_NOTE_NAME_152,LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA,SIMSERIAL,GUSER_DCOLLECTION_RAW,LAND_TRANSPORTS_BICYCLE_CONDITION,LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA,GUSER_GENERATED_NOTE_NAME_10,LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA,BO_INFO_BO_NID,LAND_TRANSPORTS_GBI_CYCLE,LAND_TRANSPORTS_OTHERS_LAND_TRA,LOGISTICS3_GCOUNTRY_BOAT,LOGISTICS4_GFIREARMS_SLR,FBLI_FA_TLOC_FD_CIR,LAND_TRANSPORTS_MOTORB_AVAIL,LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION,RO_INFO_RO_JOINING_DATE,LOGISTICS4_OTHERS_WATER_TRA_CONDITION,LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA,RO_INFO_RO_RANK,LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA,BO_INFO_BO_JOINING_DATE,GUSER_USER_CELL,RO_INFO_RO_NID,GUSER_TLOC_FD_BEAT_POINT_ALT,LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA,GUSER_TLOC_FD_BEAT_POINT_LAT,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA,LOGISTICS4_RIFLE303_CONDITION,GUSER_DCO
LLECTION,END_RAW,BO_INFO_GENERATED_NOTE_NAME_106,GENERATED_NOTE_NAME_81,RO_INFO_GENERATED_NOTE_NAME_97,FBLI_FA_GENERATED_NOTE_NAME_21,LAND_TRANSPORTS_GENERATED_NOTE_NAME_125,GUSER_BEAT_ADDRESS,LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA,BO_INFO_BO_JOINING_DATE_RAW,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA,GUSER_TLOC_FD_BEAT_POINT_ACC,LOGISTICS3_COUNTRYBOAT_AVAIL,FBLI_CA_TLOC_AD_DISTRICT,BO_INFO_NAME_OF_BO,LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53,LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA,LOGISTICS3_OTHERS_WATER_TRA,FBLI_TLOC_ECOZONE,BO_INFO_BO_RANK,LOGISTICS4_SLR_CONDITION,END,FBLI_FA_TLOC_FD_RANGE,RO_INFO_RO_JOINING_DATE_RAW,PHONENUMBER,LOGISTICS3_TRAWLER,LOGISTICS4_GFIREARMS_SHORTGUN,LOGISTICS4_SHORTGUN_CONDITION,START_RAW,LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS,BO_INFO_BO_MAIL,META_INSTANCE_ID,LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL,FBLI_CA_GENERATED_NOTE_NAME_33,FBLI_CA_TLOC_AD_DIVISION,LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65,LOGISTICS4_OTHER
S_WATER_TRA_AVAIL,LOGISTICS3_GSPEED_BOAT,LOGISTICS4_TFIREARMS_303RIFLE_AVAIL,LOGISTICS4_GFIREARMS_CHINESERIFLE,TODAY,FBLI_FA_TLOC_FD_CHAR,LAND_TRANSPORTS_GMOTORBIKE,LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA,LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA,FBLI_FA_TLOC_ENTER_RANGE,LAND_STATISTICS_AREA_SUM,RO_INFO_RO_MAIL,GENERATED_NOTE_NAME_123,START,FBLI_CA_UNION,FBLI_FA_TLOC_ENTER_DIV,TODAY_RAW,GENERATED_NOTE_NAME_94,LOGISTICS3_OTHERS_WATER_TRA_AVAIL,GENERATED_NOTE_NAME_95,LOGISTICS4_TFIREARMS_SLR_AVAIL,LOGISTICS3_GENERATED_NOTE_NAME_137,project_id,sort,last_log_id,restore_id,created_at,created_by,updated_at,updated_by,deleted_at,deleted_by,deleted_status,status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          gener43_2021_core_test._URI || null,
          gener43_2021_core_test._CREATOR_URI_USER || null,
          gener43_2021_core_test._CREATION_DATE || null,
          gener43_2021_core_test._LAST_UPDATE_URI_USER || null,
          gener43_2021_core_test._LAST_UPDATE_DATE || null,
          gener43_2021_core_test._MODEL_VERSION || null,
          gener43_2021_core_test._UI_VERSION || null,
          gener43_2021_core_test._IS_COMPLETE || null,
          gener43_2021_core_test._SUBMISSION_DATE || null,
          gener43_2021_core_test._MARKED_AS_COMPLETE_DATE || null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA ||
            null,
          gener43_2021_core_test.GUSER_TLOC_FD_BEAT_POINT_LNG || null,
          gener43_2021_core_test.FBLI_FA_TLOC_FD_BEAT || null,
          gener43_2021_core_test.LOGISTICS3_COUNTRYBOAT_CONDITION || null,
          gener43_2021_core_test.LOGISTICS4_GFIREARMS_303RIFLE || null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA ||
            null,
          gener43_2021_core_test.LOGISTICS4_OTHERS_WATER_TRA || null,
          gener43_2021_core_test.BO_INFO_BO_CELL || null,
          gener43_2021_core_test.LOGISTICS3_TVESSEL_CONDITION || null,
          gener43_2021_core_test.RO_INFO_RO_CELL || null,
          gener43_2021_core_test.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL ||
            null,
          gener43_2021_core_test.LOGISTICS3_TVESSEL_AVAIL || null,
          gener43_2021_core_test.FBLI_FA_TLOC_FD_BEAT_TXT || null,
          gener43_2021_core_test.LOGISTICS3_SPEEDBOAT_CONDITION || null,
          gener43_2021_core_test.FBLI_FA_TLOC_FD_DIVISION || null,
          gener43_2021_core_test.LAND_TRANSPORTS_BICYCLE_AVAIL || null,
          gener43_2021_core_test.LOGISTICS3_OTHERS_WATER_TRA_CONDITION || null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA ||
            null,
          gener43_2021_core_test.SUBSCRIBERID || null,
          gener43_2021_core_test.GUSER_USER || null,
          gener43_2021_core_test.RO_INFO_NAME_OF_RO || null,
          gener43_2021_core_test.FBLI_FA_TLOC_FD_BLOCK || null,
          gener43_2021_core_test.DEVICEID || null,
          gener43_2021_core_test.LAND_TRANSPORTS_MOTORB_CONDITION || null,
          gener43_2021_core_test.FBLI_GENERATED_NOTE_NAME_18 || null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74 ||
            null,
          gener43_2021_core_test.LOGISTICS4_CHINESERIFLE_CONDITION || null,
          gener43_2021_core_test.LOGISTICS3_SPEEDBOAT_AVAIL || null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA ||
            null,
          gener43_2021_core_test.LOGISTICS4_GENERATED_NOTE_NAME_152 || null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA ||
            null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA ||
            null,
          gener43_2021_core_test.SIMSERIAL || null,
          gener43_2021_core_test.GUSER_DCOLLECTION_RAW || null,
          gener43_2021_core_test.LAND_TRANSPORTS_BICYCLE_CONDITION || null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA ||
            null,
          gener43_2021_core_test.GUSER_GENERATED_NOTE_NAME_10 || null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA ||
            null,
          gener43_2021_core_test.BO_INFO_BO_NID || null,
          gener43_2021_core_test.LAND_TRANSPORTS_GBI_CYCLE || null,
          gener43_2021_core_test.LAND_TRANSPORTS_OTHERS_LAND_TRA || null,
          gener43_2021_core_test.LOGISTICS3_GCOUNTRY_BOAT || null,
          gener43_2021_core_test.LOGISTICS4_GFIREARMS_SLR || null,
          gener43_2021_core_test.FBLI_FA_TLOC_FD_CIR || null,
          gener43_2021_core_test.LAND_TRANSPORTS_MOTORB_AVAIL || null,
          gener43_2021_core_test.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION ||
            null,
          gener43_2021_core_test.RO_INFO_RO_JOINING_DATE || null,
          gener43_2021_core_test.LOGISTICS4_OTHERS_WATER_TRA_CONDITION || null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA ||
            null,
          gener43_2021_core_test.RO_INFO_RO_RANK || null,
          gener43_2021_core_test.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL || null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA ||
            null,
          gener43_2021_core_test.BO_INFO_BO_JOINING_DATE || null,
          gener43_2021_core_test.GUSER_USER_CELL || null,
          gener43_2021_core_test.RO_INFO_RO_NID || null,
          gener43_2021_core_test.GUSER_TLOC_FD_BEAT_POINT_ALT || null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA ||
            null,
          gener43_2021_core_test.GUSER_TLOC_FD_BEAT_POINT_LAT || null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA ||
            null,
          gener43_2021_core_test.LOGISTICS4_RIFLE303_CONDITION || null,
          gener43_2021_core_test.GUSER_DCOLLECTION || null,
          gener43_2021_core_test.END_RAW || null,
          gener43_2021_core_test.BO_INFO_GENERATED_NOTE_NAME_106 || null,
          gener43_2021_core_test.GENERATED_NOTE_NAME_81 || null,
          gener43_2021_core_test.RO_INFO_GENERATED_NOTE_NAME_97 || null,
          gener43_2021_core_test.FBLI_FA_GENERATED_NOTE_NAME_21 || null,
          gener43_2021_core_test.LAND_TRANSPORTS_GENERATED_NOTE_NAME_125 ||
            null,
          gener43_2021_core_test.GUSER_BEAT_ADDRESS || null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA ||
            null,
          gener43_2021_core_test.BO_INFO_BO_JOINING_DATE_RAW || null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA ||
            null,
          gener43_2021_core_test.GUSER_TLOC_FD_BEAT_POINT_ACC || null,
          gener43_2021_core_test.LOGISTICS3_COUNTRYBOAT_AVAIL || null,
          gener43_2021_core_test.FBLI_CA_TLOC_AD_DISTRICT || null,
          gener43_2021_core_test.BO_INFO_NAME_OF_BO || null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53 ||
            null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA ||
            null,
          gener43_2021_core_test.LOGISTICS3_OTHERS_WATER_TRA || null,
          gener43_2021_core_test.FBLI_TLOC_ECOZONE || null,
          gener43_2021_core_test.BO_INFO_BO_RANK || null,
          gener43_2021_core_test.LOGISTICS4_SLR_CONDITION || null,
          gener43_2021_core_test.END || null,
          gener43_2021_core_test.FBLI_FA_TLOC_FD_RANGE || null,
          gener43_2021_core_test.RO_INFO_RO_JOINING_DATE_RAW || null,
          gener43_2021_core_test.PHONENUMBER || null,
          gener43_2021_core_test.LOGISTICS3_TRAWLER || null,
          gener43_2021_core_test.LOGISTICS4_GFIREARMS_SHORTGUN || null,
          gener43_2021_core_test.LOGISTICS4_SHORTGUN_CONDITION || null,
          gener43_2021_core_test.START_RAW || null,
          gener43_2021_core_test.LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS || null,
          gener43_2021_core_test.BO_INFO_BO_MAIL || null,
          gener43_2021_core_test.META_INSTANCE_ID || null,
          gener43_2021_core_test.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL || null,
          gener43_2021_core_test.FBLI_CA_GENERATED_NOTE_NAME_33 || null,
          gener43_2021_core_test.FBLI_CA_TLOC_AD_DIVISION || null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65 ||
            null,
          gener43_2021_core_test.LOGISTICS4_OTHERS_WATER_TRA_AVAIL || null,
          gener43_2021_core_test.LOGISTICS3_GSPEED_BOAT || null,
          gener43_2021_core_test.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL || null,
          gener43_2021_core_test.LOGISTICS4_GFIREARMS_CHINESERIFLE || null,
          gener43_2021_core_test.TODAY || null,
          gener43_2021_core_test.FBLI_FA_TLOC_FD_CHAR || null,
          gener43_2021_core_test.LAND_TRANSPORTS_GMOTORBIKE || null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA ||
            null,
          gener43_2021_core_test.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA ||
            null,
          gener43_2021_core_test.FBLI_FA_TLOC_ENTER_RANGE || null,
          gener43_2021_core_test.LAND_STATISTICS_AREA_SUM || null,
          gener43_2021_core_test.RO_INFO_RO_MAIL || null,
          gener43_2021_core_test.GENERATED_NOTE_NAME_123 || null,
          gener43_2021_core_test.START || null,
          gener43_2021_core_test.FBLI_CA_UNION || null,
          gener43_2021_core_test.FBLI_FA_TLOC_ENTER_DIV || null,
          gener43_2021_core_test.TODAY_RAW || null,
          gener43_2021_core_test.GENERATED_NOTE_NAME_94 || null,
          gener43_2021_core_test.LOGISTICS3_OTHERS_WATER_TRA_AVAIL || null,
          gener43_2021_core_test.GENERATED_NOTE_NAME_95 || null,
          gener43_2021_core_test.LOGISTICS4_TFIREARMS_SLR_AVAIL || null,
          gener43_2021_core_test.LOGISTICS3_GENERATED_NOTE_NAME_137 || null,
          gener43_2021_core_test.project_id || null,
          gener43_2021_core_test.sort || null,
          gener43_2021_core_test.last_log_id || null,
          gener43_2021_core_test.restore_id || null,
          gener43_2021_core_test.created_at || null,
          gener43_2021_core_test.created_by || null,
          gener43_2021_core_test.updated_at || null,
          gener43_2021_core_test.updated_by || null,
          gener43_2021_core_test.deleted_at || null,
          gener43_2021_core_test.deleted_by || null,
          gener43_2021_core_test.deleted_status || null,
          gener43_2021_core_test.status || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const gener43_2021_fbli_m_sh1_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_fbli_m_sh1?token=${token}`,
    );
    const data = await response.json();
    console.log('Total gener43_2021_fbli_m_sh1 items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_fbli_m_sh1`,
          [],
          () => {
            //console.log('gener43_2021_fbli_m_sh1 table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_fbli_m_sh1 (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,MOUZA1 TEXT,SURVEY_TYPES TEXT,OTHERS_S_TYPES TEXT,SHEET1 TEXT,GENERATED_NOTE_NAME_40 TEXT)`,
          [],
          () => {
            //console.log('gener43_2021_fbli_m_sh1 table created successfully');
          },
          reject,
        );

        data.forEach(gener43_2021_fbli_m_sh1 => {
          tx.executeSql(
            `INSERT INTO gener43_2021_fbli_m_sh1 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              gener43_2021_fbli_m_sh1._URI || null,
              gener43_2021_fbli_m_sh1._CREATOR_URI_USER || null,
              gener43_2021_fbli_m_sh1._CREATION_DATE || null,
              gener43_2021_fbli_m_sh1._LAST_UPDATE_URI_USER || null,
              gener43_2021_fbli_m_sh1._LAST_UPDATE_DATE || null,
              gener43_2021_fbli_m_sh1._PARENT_AURI || null,
              gener43_2021_fbli_m_sh1._ORDINAL_NUMBER || null,
              gener43_2021_fbli_m_sh1._TOP_LEVEL_AURI || null,
              gener43_2021_fbli_m_sh1.MOUZA1 || null,
              gener43_2021_fbli_m_sh1.SURVEY_TYPES || null,
              gener43_2021_fbli_m_sh1.OTHERS_S_TYPES || null,
              gener43_2021_fbli_m_sh1.SHEET1 || null,
              gener43_2021_fbli_m_sh1.GENERATED_NOTE_NAME_40 || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'gener43_2021_fbli_m_sh1 data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting gener43_2021_fbli_m_sh1 data',
                  error,
                  gener43_2021_fbli_m_sh1,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_fbli_m_sh1 data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const gener43_2021_fbli_m_sh1_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_fbli_m_sh1?token=${token}`,
    );
    const data = await response.json();
    console.log('Total gener43_2021_fbli_m_sh1 items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_fbli_m_sh1`,
          [],
          () => {
            console.log('gener43_2021_fbli_m_sh1 table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_fbli_m_sh1 (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,MOUZA1 TEXT,SURVEY_TYPES TEXT,OTHERS_S_TYPES TEXT,SHEET1 TEXT,GENERATED_NOTE_NAME_40 TEXT)`,
          [],
          () => {
            console.log('gener43_2021_fbli_m_sh1 table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_fbli_m_sh1 data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const gener43_2021_fbli_m_sh1_list = async (uri) => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM gener43_2021_fbli_m_sh1 WHERE _PARENT_AURI =? OR _TOP_LEVEL_AURI = ?`, // Query the gener43_2021_fbli_m_sh1 table
        [uri],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying gener43_2021_fbli_m_sh1`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const gener43_2021_fbli_m_sh1_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM gener43_2021_fbli_m_sh1`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from gener43_2021_fbli_m_sh1:',
            resultSet,
          );

          try {
            await gener43_2021_fbli_m_sh1_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from gener43_2021_fbli_m_sh1`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const gener43_2021_fbli_m_sh1_create = gener43_2021_fbli_m_sh1 => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert gener43_2021_fbli_m_sh1
      tx.executeSql(
        `INSERT INTO gener43_2021_fbli_m_sh1 (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,MOUZA1,SURVEY_TYPES,OTHERS_S_TYPES,SHEET1,GENERATED_NOTE_NAME_40) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          gener43_2021_fbli_m_sh1._URI || '',
          gener43_2021_fbli_m_sh1._CREATOR_URI_USER || '',
          gener43_2021_fbli_m_sh1._CREATION_DATE || '',
          gener43_2021_fbli_m_sh1._LAST_UPDATE_URI_USER || '',
          gener43_2021_fbli_m_sh1._LAST_UPDATE_DATE || '',
          gener43_2021_fbli_m_sh1._PARENT_AURI || '',
          gener43_2021_fbli_m_sh1._ORDINAL_NUMBER || '',
          gener43_2021_fbli_m_sh1._TOP_LEVEL_AURI || '',
          gener43_2021_fbli_m_sh1.MOUZA1 || '',
          gener43_2021_fbli_m_sh1.SURVEY_TYPES || '',
          gener43_2021_fbli_m_sh1.OTHERS_S_TYPES || '',
          gener43_2021_fbli_m_sh1.SHEET1 || '',
          gener43_2021_fbli_m_sh1.GENERATED_NOTE_NAME_40 || '',
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const com202021_stakeholder_engagement_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/com202021_stakeholder_engagement?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total com202021_stakeholder_engagement items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_stakeholder_engagement`,
          [],
          () => {
            console.log(
              'com202021_stakeholder_engagement table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_stakeholder_engagement (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,OCCUPATION_COM TEXT,OCCUPATION_OTHER TEXT,FD_SUPPORTS_COMMUNITY_1 TEXT,GENERATED_NOTE_NAME_62 TEXT,COMMUNITY_SUPPORTS_FOREST_1 TEXT)`,
          [],
          () => {
            console.log(
              'com202021_stakeholder_engagement table created successfully',
            );
          },
          reject,
        );

        data.forEach(com202021_stakeholder_engagement => {
          tx.executeSql(
            `INSERT INTO com202021_stakeholder_engagement VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              com202021_stakeholder_engagement._URI || null,
              com202021_stakeholder_engagement._CREATOR_URI_USER || null,
              com202021_stakeholder_engagement._CREATION_DATE || null,
              com202021_stakeholder_engagement._LAST_UPDATE_URI_USER || null,
              com202021_stakeholder_engagement._LAST_UPDATE_DATE || null,
              com202021_stakeholder_engagement._PARENT_AURI || null,
              com202021_stakeholder_engagement._ORDINAL_NUMBER || null,
              com202021_stakeholder_engagement._TOP_LEVEL_AURI || null,
              com202021_stakeholder_engagement.OCCUPATION_COM || null,
              com202021_stakeholder_engagement.OCCUPATION_OTHER || null,
              com202021_stakeholder_engagement.FD_SUPPORTS_COMMUNITY_1 || null,
              com202021_stakeholder_engagement.GENERATED_NOTE_NAME_62 || null,
              com202021_stakeholder_engagement.COMMUNITY_SUPPORTS_FOREST_1 ||
                null,
            ],
            (_, resultSet) =>
              console.log(
                'com202021_stakeholder_engagement data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting com202021_stakeholder_engagement data',
                error,
                com202021_stakeholder_engagement,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching com202021_stakeholder_engagement data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const com202021_stakeholder_engagement_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/com202021_stakeholder_engagement?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total com202021_stakeholder_engagement items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_stakeholder_engagement`,
          [],
          () => {
            console.log(
              'com202021_stakeholder_engagement table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_stakeholder_engagement (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,OCCUPATION_COM TEXT,OCCUPATION_OTHER TEXT,FD_SUPPORTS_COMMUNITY_1 TEXT,GENERATED_NOTE_NAME_62 TEXT,COMMUNITY_SUPPORTS_FOREST_1 TEXT)`,
          [],
          () => {
            console.log(
              'com202021_stakeholder_engagement table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching com202021_stakeholder_engagement data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const com202021_stakeholder_engagement_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM com202021_stakeholder_engagement`, // Query the com202021_stakeholder_engagement table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying com202021_stakeholder_engagement`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const com202021_stakeholder_engagement_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM com202021_stakeholder_engagement`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from com202021_stakeholder_engagement:',
            resultSet,
          );

          try {
            await com202021_stakeholder_engagement_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from com202021_stakeholder_engagement`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const com202021_stakeholder_engagement_create =
  com202021_stakeholder_engagement => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert com202021_stakeholder_engagement
        tx.executeSql(
          `INSERT INTO com202021_stakeholder_engagement (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,OCCUPATION_COM,OCCUPATION_OTHER,FD_SUPPORTS_COMMUNITY_1,GENERATED_NOTE_NAME_62,COMMUNITY_SUPPORTS_FOREST_1) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            com202021_stakeholder_engagement._URI || null,
            com202021_stakeholder_engagement._CREATOR_URI_USER || null,
            com202021_stakeholder_engagement._CREATION_DATE || null,
            com202021_stakeholder_engagement._LAST_UPDATE_URI_USER || null,
            com202021_stakeholder_engagement._LAST_UPDATE_DATE || null,
            com202021_stakeholder_engagement._PARENT_AURI || null,
            com202021_stakeholder_engagement._ORDINAL_NUMBER || null,
            com202021_stakeholder_engagement._TOP_LEVEL_AURI || null,
            com202021_stakeholder_engagement.OCCUPATION_COM || null,
            com202021_stakeholder_engagement.OCCUPATION_OTHER || null,
            com202021_stakeholder_engagement.FD_SUPPORTS_COMMUNITY_1 || null,
            com202021_stakeholder_engagement.GENERATED_NOTE_NAME_62 || null,
            com202021_stakeholder_engagement.COMMUNITY_SUPPORTS_FOREST_1 ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn`,
          [],
          () => {
            console.log(
              'plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn => {
          tx.executeSql(
            `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn._URI || null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn._CREATOR_URI_USER ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn._CREATION_DATE ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn._LAST_UPDATE_URI_USER ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn._LAST_UPDATE_DATE ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn._PARENT_AURI ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn._ORDINAL_NUMBER ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn._TOP_LEVEL_AURI ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn.UNROOTED_FILE_PATH ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn.CONTENT_TYPE ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn.CONTENT_LENGTH ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn.CONTENT_HASH ||
                null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn data',
                error,
                plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn`, // Query the plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn:',
              resultSet,
            );

            try {
              await plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn_create =
  plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn
        tx.executeSql(
          `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn._URI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn._CREATOR_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn._CREATION_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn._LAST_UPDATE_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn._PARENT_AURI ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn._ORDINAL_NUMBER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn._TOP_LEVEL_AURI ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn.UNROOTED_FILE_PATH ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn.CONTENT_TYPE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn.CONTENT_LENGTH ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn.CONTENT_HASH ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully: in bn', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data: in bn', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_core_audit_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_core_audit?token=${token}`,
    );
    const data = await response.json();
    console.log('Total plant27_2021_core_audit items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_core_audit`,
          [],
          () => {
            console.log('plant27_2021_core_audit table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_core_audit (id TEXT,_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173 TEXT,REG_AVG_SEEDLING_ALL_PLOTS TEXT,PLANTING_PLAN_GRPSTOCKS_NTE_1 TEXT,PLANTING_PLAN_GRPSTOCKS_NTE_2 TEXT,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174 TEXT,LOCATION_DATA_CA_TLOC_AD_DISTRICT TEXT,MAGROVE_PLANT_WIND_DIR TEXT,GSITE_HISTORY TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_20 TEXT,GTRTS_PLANTING_PLANTING_YEAR TEXT,INTERVENTION_DETAILS_PATCHES_PLANT TEXT,INTERVENTION_DETAILS_SEEDING_PLANT TEXT,PLANTING_PLAN_GPLANTING_SPACING TEXT,MAGROVE_PLANT_MAN_AFF_CLAY_LAYER TEXT,GTRTS_OTHER_TREATMENT_OTHER_YEAR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT TEXT,MAGROVE_PLANT_CRABS_HOLE TEXT,REG_AVG_SEEDLING_PER_HA_ALL_PLOTS TEXT,LOCATION_DATA_CA_UNION TEXT,SUBSCRIBERID TEXT,GTRTS_PLANTING_PLANTING_YEAR_RAW TEXT,GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW TEXT,DEVICEID TEXT,PLANTING_PLAN_GENERATED_NOTE_NAME_151 TEXT,INTERVENTION_DETAILS_TLOC_PLANT_YEAR TEXT,NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179 TEXT,INTERVENTION_DETAILS_TLOC_PLANT_TYPE TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT TEXT,LOCATION_DATA_ECOZONE TEXT,GTRTS_PLANTATION_SITE_YEAR TEXT,GUSER_TUSER_CELL TEXT,REG_AVG_TREES_PER_HA_ALL_PLOTS TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA TEXT,GTRTS_NUERSERY_RAISING_NURSERY_YEAR TEXT,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT TEXT,GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221 TEXT,PLANTING_PLAN_SEEDLINGS_PER_HA TEXT,GTRTS_COMPOST_COMPOST_YEAR_RAW TEXT,NURSERY_NURSERY_SITE_NURSERY_LOCATION TEXT,GSITE_LAND_COV_DESC TEXT,SIMSERIAL TEXT,GUSER_GENERATED_NOTE_NAME_13 TEXT,GUSER_DCOLLECTION_RAW TEXT,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR TEXT,GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND TEXT,MAGROVE_PLANT_MAN_AFF_LEVEL_INUND TEXT,ALLPATCHES TEXT,GENERATED_NOTE_NAME_63 TEXT,GUSER_TUSER_EMAIL TEXT,CHECKED_BY TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CIR TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2 TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190 TEXT,LOCATION_DATA_TLOCATION TEXT,MAGROVE_PLANT_FACING_ISLAND TEXT,GUSER_TUSER TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME TEXT,LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23 TEXT,GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC TEXT,GTRTS_PLANTATION_SITE_YEAR_RAW TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_115 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_114 TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR TEXT,GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_119 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_118 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_117 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_116 TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK TEXT,GTRTS_COMPOST_GENERATED_NOTE_NAME_247 TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION TEXT,GTRTS_COMPOST_COMPOST_YEAR TEXT,GTRTS_PLANTING_GENERATED_NOTE_NAME_231 TEXT,GUSER_DCOLLECTION TEXT,CHECKED TEXT,GSITE_HIST_OTHER TEXT,MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137 TEXT,INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122 TEXT,MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133 TEXT,PLANTING_PLAN_TXT_BUILD1 TEXT,PLANTING_PLAN_TXT_BUILD2 TEXT,GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252 TEXT,END_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS TEXT,PLANTING_PLAN_BPLANTING TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC TEXT,LOCATION_DATA_CA_GENERATED_NOTE_NAME_36 TEXT,INTERVENTION_DETAILS_LLOC_PLANT_AREA TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2 TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140 TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE TEXT,REG_PLOT_NO TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3 TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4 TEXT,END TEXT,PLANTING_PLAN_MAX_SEEDLINGS TEXT,PHONENUMBER TEXT,GTRTS_PLANTATION_GENERATED_NOTE_NAME_226 TEXT,START_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212 TEXT,META_INSTANCE_ID TEXT,INTERVENTION_DETAILS_TLOC_PLANT_OTHERS TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG TEXT,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT TEXT,MAGROVE_PLANT_FACING_DIR TEXT,NURSERY_NURSERY_SITE_TPOLYTYPE_NUR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT TEXT,MAGROVE_PLANT_MAN_AFF_PIONEERS_SP TEXT,TODAY TEXT,LOCATION_DATA_CA_TLOC_AD_DIVISION TEXT,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV TEXT,LOCATION_DATA_CA_VILLAGE TEXT,MAGROVE_PLANT_WAVE_DIR TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199 TEXT,GSITE_GENERATED_NOTE_NAME_72 TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE TEXT,START TEXT,REG_AVG_TREES_ALL_PLOTS TEXT,TODAY_RAW TEXT,APPROVED TEXT,MAGROVE_PLANT_GENERATED_NOTE_NAME_131 TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT,UserName TEXT,AdditionTime TEXT)`,
          [],
          () => {
            console.log('plant27_2021_core_audit table created successfully');
          },
          reject,
        );

        data.forEach(plant27_2021_core_audit => {
          tx.executeSql(
            `INSERT INTO plant27_2021_core_audit VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_core_audit.id || null,
              plant27_2021_core_audit._URI || null,
              plant27_2021_core_audit._CREATOR_URI_USER || null,
              plant27_2021_core_audit._CREATION_DATE || null,
              plant27_2021_core_audit._LAST_UPDATE_URI_USER || null,
              plant27_2021_core_audit._LAST_UPDATE_DATE || null,
              plant27_2021_core_audit._MODEL_VERSION || null,
              plant27_2021_core_audit._UI_VERSION || null,
              plant27_2021_core_audit._IS_COMPLETE || null,
              plant27_2021_core_audit._SUBMISSION_DATE || null,
              plant27_2021_core_audit._MARKED_AS_COMPLETE_DATE || null,
              plant27_2021_core_audit.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173 ||
                null,
              plant27_2021_core_audit.REG_AVG_SEEDLING_ALL_PLOTS || null,
              plant27_2021_core_audit.PLANTING_PLAN_GRPSTOCKS_NTE_1 || null,
              plant27_2021_core_audit.PLANTING_PLAN_GRPSTOCKS_NTE_2 || null,
              plant27_2021_core_audit.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174 ||
                null,
              plant27_2021_core_audit.LOCATION_DATA_CA_TLOC_AD_DISTRICT || null,
              plant27_2021_core_audit.MAGROVE_PLANT_WIND_DIR || null,
              plant27_2021_core_audit.GSITE_HISTORY || null,
              plant27_2021_core_audit.LOCATION_DATA_GENERATED_NOTE_NAME_20 ||
                null,
              plant27_2021_core_audit.GTRTS_PLANTING_PLANTING_YEAR || null,
              plant27_2021_core_audit.INTERVENTION_DETAILS_PATCHES_PLANT ||
                null,
              plant27_2021_core_audit.INTERVENTION_DETAILS_SEEDING_PLANT ||
                null,
              plant27_2021_core_audit.PLANTING_PLAN_GPLANTING_SPACING || null,
              plant27_2021_core_audit.MAGROVE_PLANT_MAN_AFF_CLAY_LAYER || null,
              plant27_2021_core_audit.GTRTS_OTHER_TREATMENT_OTHER_YEAR || null,
              plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT ||
                null,
              plant27_2021_core_audit.MAGROVE_PLANT_CRABS_HOLE || null,
              plant27_2021_core_audit.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS || null,
              plant27_2021_core_audit.LOCATION_DATA_CA_UNION || null,
              plant27_2021_core_audit.SUBSCRIBERID || null,
              plant27_2021_core_audit.GTRTS_PLANTING_PLANTING_YEAR_RAW || null,
              plant27_2021_core_audit.GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW ||
                null,
              plant27_2021_core_audit.DEVICEID || null,
              plant27_2021_core_audit.PLANTING_PLAN_GENERATED_NOTE_NAME_151 ||
                null,
              plant27_2021_core_audit.INTERVENTION_DETAILS_TLOC_PLANT_YEAR ||
                null,
              plant27_2021_core_audit.NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179 ||
                null,
              plant27_2021_core_audit.INTERVENTION_DETAILS_TLOC_PLANT_TYPE ||
                null,
              plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT ||
                null,
              plant27_2021_core_audit.LOCATION_DATA_ECOZONE || null,
              plant27_2021_core_audit.GTRTS_PLANTATION_SITE_YEAR || null,
              plant27_2021_core_audit.GUSER_TUSER_CELL || null,
              plant27_2021_core_audit.REG_AVG_TREES_PER_HA_ALL_PLOTS || null,
              plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA ||
                null,
              plant27_2021_core_audit.GTRTS_NUERSERY_RAISING_NURSERY_YEAR ||
                null,
              plant27_2021_core_audit.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR ||
                null,
              plant27_2021_core_audit.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT ||
                null,
              plant27_2021_core_audit.GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221 ||
                null,
              plant27_2021_core_audit.PLANTING_PLAN_SEEDLINGS_PER_HA || null,
              plant27_2021_core_audit.GTRTS_COMPOST_COMPOST_YEAR_RAW || null,
              plant27_2021_core_audit.NURSERY_NURSERY_SITE_NURSERY_LOCATION ||
                null,
              plant27_2021_core_audit.GSITE_LAND_COV_DESC || null,
              plant27_2021_core_audit.SIMSERIAL || null,
              plant27_2021_core_audit.GUSER_GENERATED_NOTE_NAME_13 || null,
              plant27_2021_core_audit.GUSER_DCOLLECTION_RAW || null,
              plant27_2021_core_audit.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR ||
                null,
              plant27_2021_core_audit.GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED ||
                null,
              plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND ||
                null,
              plant27_2021_core_audit.MAGROVE_PLANT_MAN_AFF_LEVEL_INUND || null,
              plant27_2021_core_audit.ALLPATCHES || null,
              plant27_2021_core_audit.GENERATED_NOTE_NAME_63 || null,
              plant27_2021_core_audit.GUSER_TUSER_EMAIL || null,
              plant27_2021_core_audit.CHECKED_BY || null,
              plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_FD_CIR ||
                null,
              plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2 ||
                null,
              plant27_2021_core_audit.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT ||
                null,
              plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190 ||
                null,
              plant27_2021_core_audit.LOCATION_DATA_TLOCATION || null,
              plant27_2021_core_audit.MAGROVE_PLANT_FACING_ISLAND || null,
              plant27_2021_core_audit.GUSER_TUSER || null,
              plant27_2021_core_audit.MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH ||
                null,
              plant27_2021_core_audit.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME ||
                null,
              plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23 ||
                null,
              plant27_2021_core_audit.GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW ||
                null,
              plant27_2021_core_audit.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC ||
                null,
              plant27_2021_core_audit.GTRTS_PLANTATION_SITE_YEAR_RAW || null,
              plant27_2021_core_audit.REGIN_NOTE_GENERATED_NOTE_NAME_115 ||
                null,
              plant27_2021_core_audit.REGIN_NOTE_GENERATED_NOTE_NAME_114 ||
                null,
              plant27_2021_core_audit.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID ||
                null,
              plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR ||
                null,
              plant27_2021_core_audit.GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262 ||
                null,
              plant27_2021_core_audit.REGIN_NOTE_GENERATED_NOTE_NAME_119 ||
                null,
              plant27_2021_core_audit.REGIN_NOTE_GENERATED_NOTE_NAME_118 ||
                null,
              plant27_2021_core_audit.REGIN_NOTE_GENERATED_NOTE_NAME_117 ||
                null,
              plant27_2021_core_audit.REGIN_NOTE_GENERATED_NOTE_NAME_116 ||
                null,
              plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK ||
                null,
              plant27_2021_core_audit.GTRTS_COMPOST_GENERATED_NOTE_NAME_247 ||
                null,
              plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION ||
                null,
              plant27_2021_core_audit.GTRTS_COMPOST_COMPOST_YEAR || null,
              plant27_2021_core_audit.GTRTS_PLANTING_GENERATED_NOTE_NAME_231 ||
                null,
              plant27_2021_core_audit.GUSER_DCOLLECTION || null,
              plant27_2021_core_audit.CHECKED || null,
              plant27_2021_core_audit.GSITE_HIST_OTHER || null,
              plant27_2021_core_audit.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137 ||
                null,
              plant27_2021_core_audit.INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122 ||
                null,
              plant27_2021_core_audit.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133 ||
                null,
              plant27_2021_core_audit.PLANTING_PLAN_TXT_BUILD1 || null,
              plant27_2021_core_audit.PLANTING_PLAN_TXT_BUILD2 || null,
              plant27_2021_core_audit.GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252 ||
                null,
              plant27_2021_core_audit.END_RAW || null,
              plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE ||
                null,
              plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS ||
                null,
              plant27_2021_core_audit.PLANTING_PLAN_BPLANTING || null,
              plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC ||
                null,
              plant27_2021_core_audit.LOCATION_DATA_CA_GENERATED_NOTE_NAME_36 ||
                null,
              plant27_2021_core_audit.INTERVENTION_DETAILS_LLOC_PLANT_AREA ||
                null,
              plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1 ||
                null,
              plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2 ||
                null,
              plant27_2021_core_audit.MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140 ||
                null,
              plant27_2021_core_audit.NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE ||
                null,
              plant27_2021_core_audit.REG_PLOT_NO || null,
              plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7 ||
                null,
              plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5 ||
                null,
              plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6 ||
                null,
              plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3 ||
                null,
              plant27_2021_core_audit.MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE ||
                null,
              plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4 ||
                null,
              plant27_2021_core_audit.END || null,
              plant27_2021_core_audit.PLANTING_PLAN_MAX_SEEDLINGS || null,
              plant27_2021_core_audit.PHONENUMBER || null,
              plant27_2021_core_audit.GTRTS_PLANTATION_GENERATED_NOTE_NAME_226 ||
                null,
              plant27_2021_core_audit.START_RAW || null,
              plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE ||
                null,
              plant27_2021_core_audit.NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212 ||
                null,
              plant27_2021_core_audit.META_INSTANCE_ID || null,
              plant27_2021_core_audit.INTERVENTION_DETAILS_TLOC_PLANT_OTHERS ||
                null,
              plant27_2021_core_audit.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG ||
                null,
              plant27_2021_core_audit.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR ||
                null,
              plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT ||
                null,
              plant27_2021_core_audit.MAGROVE_PLANT_FACING_DIR || null,
              plant27_2021_core_audit.NURSERY_NURSERY_SITE_TPOLYTYPE_NUR ||
                null,
              plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT ||
                null,
              plant27_2021_core_audit.MAGROVE_PLANT_MAN_AFF_PIONEERS_SP || null,
              plant27_2021_core_audit.TODAY || null,
              plant27_2021_core_audit.LOCATION_DATA_CA_TLOC_AD_DIVISION || null,
              plant27_2021_core_audit.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW ||
                null,
              plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV ||
                null,
              plant27_2021_core_audit.LOCATION_DATA_CA_VILLAGE || null,
              plant27_2021_core_audit.MAGROVE_PLANT_WAVE_DIR || null,
              plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199 ||
                null,
              plant27_2021_core_audit.GSITE_GENERATED_NOTE_NAME_72 || null,
              plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE ||
                null,
              plant27_2021_core_audit.START || null,
              plant27_2021_core_audit.REG_AVG_TREES_ALL_PLOTS || null,
              plant27_2021_core_audit.TODAY_RAW || null,
              plant27_2021_core_audit.APPROVED || null,
              plant27_2021_core_audit.MAGROVE_PLANT_GENERATED_NOTE_NAME_131 ||
                null,
              plant27_2021_core_audit.project_id || null,
              plant27_2021_core_audit.sort || null,
              plant27_2021_core_audit.last_log_id || null,
              plant27_2021_core_audit.restore_id || null,
              plant27_2021_core_audit.created_at || null,
              plant27_2021_core_audit.created_by || null,
              plant27_2021_core_audit.updated_at || null,
              plant27_2021_core_audit.updated_by || null,
              plant27_2021_core_audit.deleted_at || null,
              plant27_2021_core_audit.deleted_by || null,
              plant27_2021_core_audit.deleted_status || null,
              plant27_2021_core_audit.status || null,
              plant27_2021_core_audit.UserName || null,
              plant27_2021_core_audit.AdditionTime || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_core_audit data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_core_audit data',
                error,
                plant27_2021_core_audit,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_core_audit data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_core_audit_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_core_audit?token=${token}`,
    );
    const data = await response.json();
    console.log('Total plant27_2021_core_audit items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_core_audit`,
          [],
          () => {
            console.log('plant27_2021_core_audit table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_core_audit (id TEXT,_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173 TEXT,REG_AVG_SEEDLING_ALL_PLOTS TEXT,PLANTING_PLAN_GRPSTOCKS_NTE_1 TEXT,PLANTING_PLAN_GRPSTOCKS_NTE_2 TEXT,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174 TEXT,LOCATION_DATA_CA_TLOC_AD_DISTRICT TEXT,MAGROVE_PLANT_WIND_DIR TEXT,GSITE_HISTORY TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_20 TEXT,GTRTS_PLANTING_PLANTING_YEAR TEXT,INTERVENTION_DETAILS_PATCHES_PLANT TEXT,INTERVENTION_DETAILS_SEEDING_PLANT TEXT,PLANTING_PLAN_GPLANTING_SPACING TEXT,MAGROVE_PLANT_MAN_AFF_CLAY_LAYER TEXT,GTRTS_OTHER_TREATMENT_OTHER_YEAR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT TEXT,MAGROVE_PLANT_CRABS_HOLE TEXT,REG_AVG_SEEDLING_PER_HA_ALL_PLOTS TEXT,LOCATION_DATA_CA_UNION TEXT,SUBSCRIBERID TEXT,GTRTS_PLANTING_PLANTING_YEAR_RAW TEXT,GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW TEXT,DEVICEID TEXT,PLANTING_PLAN_GENERATED_NOTE_NAME_151 TEXT,INTERVENTION_DETAILS_TLOC_PLANT_YEAR TEXT,NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179 TEXT,INTERVENTION_DETAILS_TLOC_PLANT_TYPE TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT TEXT,LOCATION_DATA_ECOZONE TEXT,GTRTS_PLANTATION_SITE_YEAR TEXT,GUSER_TUSER_CELL TEXT,REG_AVG_TREES_PER_HA_ALL_PLOTS TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA TEXT,GTRTS_NUERSERY_RAISING_NURSERY_YEAR TEXT,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT TEXT,GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221 TEXT,PLANTING_PLAN_SEEDLINGS_PER_HA TEXT,GTRTS_COMPOST_COMPOST_YEAR_RAW TEXT,NURSERY_NURSERY_SITE_NURSERY_LOCATION TEXT,GSITE_LAND_COV_DESC TEXT,SIMSERIAL TEXT,GUSER_GENERATED_NOTE_NAME_13 TEXT,GUSER_DCOLLECTION_RAW TEXT,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR TEXT,GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND TEXT,MAGROVE_PLANT_MAN_AFF_LEVEL_INUND TEXT,ALLPATCHES TEXT,GENERATED_NOTE_NAME_63 TEXT,GUSER_TUSER_EMAIL TEXT,CHECKED_BY TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CIR TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2 TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190 TEXT,LOCATION_DATA_TLOCATION TEXT,MAGROVE_PLANT_FACING_ISLAND TEXT,GUSER_TUSER TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME TEXT,LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23 TEXT,GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC TEXT,GTRTS_PLANTATION_SITE_YEAR_RAW TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_115 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_114 TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR TEXT,GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_119 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_118 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_117 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_116 TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK TEXT,GTRTS_COMPOST_GENERATED_NOTE_NAME_247 TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION TEXT,GTRTS_COMPOST_COMPOST_YEAR TEXT,GTRTS_PLANTING_GENERATED_NOTE_NAME_231 TEXT,GUSER_DCOLLECTION TEXT,CHECKED TEXT,GSITE_HIST_OTHER TEXT,MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137 TEXT,INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122 TEXT,MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133 TEXT,PLANTING_PLAN_TXT_BUILD1 TEXT,PLANTING_PLAN_TXT_BUILD2 TEXT,GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252 TEXT,END_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS TEXT,PLANTING_PLAN_BPLANTING TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC TEXT,LOCATION_DATA_CA_GENERATED_NOTE_NAME_36 TEXT,INTERVENTION_DETAILS_LLOC_PLANT_AREA TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2 TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140 TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE TEXT,REG_PLOT_NO TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3 TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4 TEXT,END TEXT,PLANTING_PLAN_MAX_SEEDLINGS TEXT,PHONENUMBER TEXT,GTRTS_PLANTATION_GENERATED_NOTE_NAME_226 TEXT,START_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212 TEXT,META_INSTANCE_ID TEXT,INTERVENTION_DETAILS_TLOC_PLANT_OTHERS TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG TEXT,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT TEXT,MAGROVE_PLANT_FACING_DIR TEXT,NURSERY_NURSERY_SITE_TPOLYTYPE_NUR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT TEXT,MAGROVE_PLANT_MAN_AFF_PIONEERS_SP TEXT,TODAY TEXT,LOCATION_DATA_CA_TLOC_AD_DIVISION TEXT,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV TEXT,LOCATION_DATA_CA_VILLAGE TEXT,MAGROVE_PLANT_WAVE_DIR TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199 TEXT,GSITE_GENERATED_NOTE_NAME_72 TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE TEXT,START TEXT,REG_AVG_TREES_ALL_PLOTS TEXT,TODAY_RAW TEXT,APPROVED TEXT,MAGROVE_PLANT_GENERATED_NOTE_NAME_131 TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT,UserName TEXT,AdditionTime TEXT)`,
          [],
          () => {
            console.log('plant27_2021_core_audit table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_core_audit data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_core_audit_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_core_audit`, // Query the plant27_2021_core_audit table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying plant27_2021_core_audit`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_core_audit_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_core_audit`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_core_audit:',
            resultSet,
          );

          try {
            await plant27_2021_core_audit_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_core_audit`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_core_audit_create = plant27_2021_core_audit => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert plant27_2021_core_audit
      tx.executeSql(
        `INSERT INTO plant27_2021_core_audit (id,_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_MODEL_VERSION,_UI_VERSION,_IS_COMPLETE,_SUBMISSION_DATE,_MARKED_AS_COMPLETE_DATE,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173,REG_AVG_SEEDLING_ALL_PLOTS,PLANTING_PLAN_GRPSTOCKS_NTE_1,PLANTING_PLAN_GRPSTOCKS_NTE_2,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174,LOCATION_DATA_CA_TLOC_AD_DISTRICT,MAGROVE_PLANT_WIND_DIR,GSITE_HISTORY,LOCATION_DATA_GENERATED_NOTE_NAME_20,GTRTS_PLANTING_PLANTING_YEAR,INTERVENTION_DETAILS_PATCHES_PLANT,INTERVENTION_DETAILS_SEEDING_PLANT,PLANTING_PLAN_GPLANTING_SPACING,MAGROVE_PLANT_MAN_AFF_CLAY_LAYER,GTRTS_OTHER_TREATMENT_OTHER_YEAR,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT,MAGROVE_PLANT_CRABS_HOLE,REG_AVG_SEEDLING_PER_HA_ALL_PLOTS,LOCATION_DATA_CA_UNION,SUBSCRIBERID,GTRTS_PLANTING_PLANTING_YEAR_RAW,GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW,DEVICEID,PLANTING_PLAN_GENERATED_NOTE_NAME_151,INTERVENTION_DETAILS_TLOC_PLANT_YEAR,NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179,INTE
RVENTION_DETAILS_TLOC_PLANT_TYPE,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT,LOCATION_DATA_ECOZONE,GTRTS_PLANTATION_SITE_YEAR,GUSER_TUSER_CELL,REG_AVG_TREES_PER_HA_ALL_PLOTS,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA,GTRTS_NUERSERY_RAISING_NURSERY_YEAR,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT,GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221,PLANTING_PLAN_SEEDLINGS_PER_HA,GTRTS_COMPOST_COMPOST_YEAR_RAW,NURSERY_NURSERY_SITE_NURSERY_LOCATION,GSITE_LAND_COV_DESC,SIMSERIAL,GUSER_GENERATED_NOTE_NAME_13,GUSER_DCOLLECTION_RAW,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR,GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED,NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND,MAGROVE_PLANT_MAN_AFF_LEVEL_INUND,ALLPATCHES,GENERATED_NOTE_NAME_63,GUSER_TUSER_EMAIL,CHECKED_BY,LOCATION_DATA_FOREST_AD_TLOC_FD_CIR,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190,LOCATION_
DATA_TLOCATION,MAGROVE_PLANT_FACING_ISLAND,GUSER_TUSER,MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME,LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23,GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC,GTRTS_PLANTATION_SITE_YEAR_RAW,REGIN_NOTE_GENERATED_NOTE_NAME_115,REGIN_NOTE_GENERATED_NOTE_NAME_114,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID,LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR,GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262,REGIN_NOTE_GENERATED_NOTE_NAME_119,REGIN_NOTE_GENERATED_NOTE_NAME_118,REGIN_NOTE_GENERATED_NOTE_NAME_117,REGIN_NOTE_GENERATED_NOTE_NAME_116,LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK,GTRTS_COMPOST_GENERATED_NOTE_NAME_247,LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION,GTRTS_COMPOST_COMPOST_YEAR,GTRTS_PLANTING_GENERATED_NOTE_NAME_231,GUSER_DCOLLECTION,CHECKED,GSITE_HIST_OTHER,MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137,INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122,MAGROVE_PLANT_MAN_AFF_GENERAT
ED_NOTE_NAME_133,PLANTING_PLAN_TXT_BUILD1,PLANTING_PLAN_TXT_BUILD2,GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252,END_RAW,LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS,PLANTING_PLAN_BPLANTING,NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC,LOCATION_DATA_CA_GENERATED_NOTE_NAME_36,INTERVENTION_DETAILS_LLOC_PLANT_AREA,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2,MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140,NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE,REG_PLOT_NO,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3,MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4,END,PLANTING_PLAN_MAX_SEEDLINGS,PHONENUMBER,GTRTS_PLANTATION_GENERATED_NOTE_NAME_226,START_RAW,LO
CATION_DATA_FOREST_AD_TLOC_FD_RANGE,NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212,META_INSTANCE_ID,INTERVENTION_DETAILS_TLOC_PLANT_OTHERS,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT,MAGROVE_PLANT_FACING_DIR,NURSERY_NURSERY_SITE_TPOLYTYPE_NUR,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT,MAGROVE_PLANT_MAN_AFF_PIONEERS_SP,TODAY,LOCATION_DATA_CA_TLOC_AD_DIVISION,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW,LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV,LOCATION_DATA_CA_VILLAGE,MAGROVE_PLANT_WAVE_DIR,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199,GSITE_GENERATED_NOTE_NAME_72,NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE,START,REG_AVG_TREES_ALL_PLOTS,TODAY_RAW,APPROVED,MAGROVE_PLANT_GENERATED_NOTE_NAME_131,project_id,sort,last_log_id,restore_id,created_at,created_by,updated_at,updated_by,deleted_at,deleted_by,deleted_status,status,UserName,AdditionTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          plant27_2021_core_audit.id || null,
          plant27_2021_core_audit._URI || null,
          plant27_2021_core_audit._CREATOR_URI_USER || null,
          plant27_2021_core_audit._CREATION_DATE || null,
          plant27_2021_core_audit._LAST_UPDATE_URI_USER || null,
          plant27_2021_core_audit._LAST_UPDATE_DATE || null,
          plant27_2021_core_audit._MODEL_VERSION || null,
          plant27_2021_core_audit._UI_VERSION || null,
          plant27_2021_core_audit._IS_COMPLETE || null,
          plant27_2021_core_audit._SUBMISSION_DATE || null,
          plant27_2021_core_audit._MARKED_AS_COMPLETE_DATE || null,
          plant27_2021_core_audit.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173 ||
            null,
          plant27_2021_core_audit.REG_AVG_SEEDLING_ALL_PLOTS || null,
          plant27_2021_core_audit.PLANTING_PLAN_GRPSTOCKS_NTE_1 || null,
          plant27_2021_core_audit.PLANTING_PLAN_GRPSTOCKS_NTE_2 || null,
          plant27_2021_core_audit.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174 ||
            null,
          plant27_2021_core_audit.LOCATION_DATA_CA_TLOC_AD_DISTRICT || null,
          plant27_2021_core_audit.MAGROVE_PLANT_WIND_DIR || null,
          plant27_2021_core_audit.GSITE_HISTORY || null,
          plant27_2021_core_audit.LOCATION_DATA_GENERATED_NOTE_NAME_20 || null,
          plant27_2021_core_audit.GTRTS_PLANTING_PLANTING_YEAR || null,
          plant27_2021_core_audit.INTERVENTION_DETAILS_PATCHES_PLANT || null,
          plant27_2021_core_audit.INTERVENTION_DETAILS_SEEDING_PLANT || null,
          plant27_2021_core_audit.PLANTING_PLAN_GPLANTING_SPACING || null,
          plant27_2021_core_audit.MAGROVE_PLANT_MAN_AFF_CLAY_LAYER || null,
          plant27_2021_core_audit.GTRTS_OTHER_TREATMENT_OTHER_YEAR || null,
          plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT ||
            null,
          plant27_2021_core_audit.MAGROVE_PLANT_CRABS_HOLE || null,
          plant27_2021_core_audit.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS || null,
          plant27_2021_core_audit.LOCATION_DATA_CA_UNION || null,
          plant27_2021_core_audit.SUBSCRIBERID || null,
          plant27_2021_core_audit.GTRTS_PLANTING_PLANTING_YEAR_RAW || null,
          plant27_2021_core_audit.GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW || null,
          plant27_2021_core_audit.DEVICEID || null,
          plant27_2021_core_audit.PLANTING_PLAN_GENERATED_NOTE_NAME_151 || null,
          plant27_2021_core_audit.INTERVENTION_DETAILS_TLOC_PLANT_YEAR || null,
          plant27_2021_core_audit.NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179 ||
            null,
          plant27_2021_core_audit.INTERVENTION_DETAILS_TLOC_PLANT_TYPE || null,
          plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT ||
            null,
          plant27_2021_core_audit.LOCATION_DATA_ECOZONE || null,
          plant27_2021_core_audit.GTRTS_PLANTATION_SITE_YEAR || null,
          plant27_2021_core_audit.GUSER_TUSER_CELL || null,
          plant27_2021_core_audit.REG_AVG_TREES_PER_HA_ALL_PLOTS || null,
          plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA ||
            null,
          plant27_2021_core_audit.GTRTS_NUERSERY_RAISING_NURSERY_YEAR || null,
          plant27_2021_core_audit.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR || null,
          plant27_2021_core_audit.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT ||
            null,
          plant27_2021_core_audit.GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221 ||
            null,
          plant27_2021_core_audit.PLANTING_PLAN_SEEDLINGS_PER_HA || null,
          plant27_2021_core_audit.GTRTS_COMPOST_COMPOST_YEAR_RAW || null,
          plant27_2021_core_audit.NURSERY_NURSERY_SITE_NURSERY_LOCATION || null,
          plant27_2021_core_audit.GSITE_LAND_COV_DESC || null,
          plant27_2021_core_audit.SIMSERIAL || null,
          plant27_2021_core_audit.GUSER_GENERATED_NOTE_NAME_13 || null,
          plant27_2021_core_audit.GUSER_DCOLLECTION_RAW || null,
          plant27_2021_core_audit.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR ||
            null,
          plant27_2021_core_audit.GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED ||
            null,
          plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND ||
            null,
          plant27_2021_core_audit.MAGROVE_PLANT_MAN_AFF_LEVEL_INUND || null,
          plant27_2021_core_audit.ALLPATCHES || null,
          plant27_2021_core_audit.GENERATED_NOTE_NAME_63 || null,
          plant27_2021_core_audit.GUSER_TUSER_EMAIL || null,
          plant27_2021_core_audit.CHECKED_BY || null,
          plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_FD_CIR || null,
          plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2 ||
            null,
          plant27_2021_core_audit.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT ||
            null,
          plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190 ||
            null,
          plant27_2021_core_audit.LOCATION_DATA_TLOCATION || null,
          plant27_2021_core_audit.MAGROVE_PLANT_FACING_ISLAND || null,
          plant27_2021_core_audit.GUSER_TUSER || null,
          plant27_2021_core_audit.MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH ||
            null,
          plant27_2021_core_audit.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME ||
            null,
          plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23 ||
            null,
          plant27_2021_core_audit.GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW ||
            null,
          plant27_2021_core_audit.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC ||
            null,
          plant27_2021_core_audit.GTRTS_PLANTATION_SITE_YEAR_RAW || null,
          plant27_2021_core_audit.REGIN_NOTE_GENERATED_NOTE_NAME_115 || null,
          plant27_2021_core_audit.REGIN_NOTE_GENERATED_NOTE_NAME_114 || null,
          plant27_2021_core_audit.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID ||
            null,
          plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR || null,
          plant27_2021_core_audit.GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262 ||
            null,
          plant27_2021_core_audit.REGIN_NOTE_GENERATED_NOTE_NAME_119 || null,
          plant27_2021_core_audit.REGIN_NOTE_GENERATED_NOTE_NAME_118 || null,
          plant27_2021_core_audit.REGIN_NOTE_GENERATED_NOTE_NAME_117 || null,
          plant27_2021_core_audit.REGIN_NOTE_GENERATED_NOTE_NAME_116 || null,
          plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK || null,
          plant27_2021_core_audit.GTRTS_COMPOST_GENERATED_NOTE_NAME_247 || null,
          plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION ||
            null,
          plant27_2021_core_audit.GTRTS_COMPOST_COMPOST_YEAR || null,
          plant27_2021_core_audit.GTRTS_PLANTING_GENERATED_NOTE_NAME_231 ||
            null,
          plant27_2021_core_audit.GUSER_DCOLLECTION || null,
          plant27_2021_core_audit.CHECKED || null,
          plant27_2021_core_audit.GSITE_HIST_OTHER || null,
          plant27_2021_core_audit.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137 ||
            null,
          plant27_2021_core_audit.INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122 ||
            null,
          plant27_2021_core_audit.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133 ||
            null,
          plant27_2021_core_audit.PLANTING_PLAN_TXT_BUILD1 || null,
          plant27_2021_core_audit.PLANTING_PLAN_TXT_BUILD2 || null,
          plant27_2021_core_audit.GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252 ||
            null,
          plant27_2021_core_audit.END_RAW || null,
          plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE ||
            null,
          plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS ||
            null,
          plant27_2021_core_audit.PLANTING_PLAN_BPLANTING || null,
          plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC ||
            null,
          plant27_2021_core_audit.LOCATION_DATA_CA_GENERATED_NOTE_NAME_36 ||
            null,
          plant27_2021_core_audit.INTERVENTION_DETAILS_LLOC_PLANT_AREA || null,
          plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1 ||
            null,
          plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2 ||
            null,
          plant27_2021_core_audit.MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140 ||
            null,
          plant27_2021_core_audit.NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE ||
            null,
          plant27_2021_core_audit.REG_PLOT_NO || null,
          plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7 ||
            null,
          plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5 ||
            null,
          plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6 ||
            null,
          plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3 ||
            null,
          plant27_2021_core_audit.MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE ||
            null,
          plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4 ||
            null,
          plant27_2021_core_audit.END || null,
          plant27_2021_core_audit.PLANTING_PLAN_MAX_SEEDLINGS || null,
          plant27_2021_core_audit.PHONENUMBER || null,
          plant27_2021_core_audit.GTRTS_PLANTATION_GENERATED_NOTE_NAME_226 ||
            null,
          plant27_2021_core_audit.START_RAW || null,
          plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE || null,
          plant27_2021_core_audit.NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212 ||
            null,
          plant27_2021_core_audit.META_INSTANCE_ID || null,
          plant27_2021_core_audit.INTERVENTION_DETAILS_TLOC_PLANT_OTHERS ||
            null,
          plant27_2021_core_audit.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG ||
            null,
          plant27_2021_core_audit.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR ||
            null,
          plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT || null,
          plant27_2021_core_audit.MAGROVE_PLANT_FACING_DIR || null,
          plant27_2021_core_audit.NURSERY_NURSERY_SITE_TPOLYTYPE_NUR || null,
          plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT ||
            null,
          plant27_2021_core_audit.MAGROVE_PLANT_MAN_AFF_PIONEERS_SP || null,
          plant27_2021_core_audit.TODAY || null,
          plant27_2021_core_audit.LOCATION_DATA_CA_TLOC_AD_DIVISION || null,
          plant27_2021_core_audit.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW ||
            null,
          plant27_2021_core_audit.LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV ||
            null,
          plant27_2021_core_audit.LOCATION_DATA_CA_VILLAGE || null,
          plant27_2021_core_audit.MAGROVE_PLANT_WAVE_DIR || null,
          plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199 ||
            null,
          plant27_2021_core_audit.GSITE_GENERATED_NOTE_NAME_72 || null,
          plant27_2021_core_audit.NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE ||
            null,
          plant27_2021_core_audit.START || null,
          plant27_2021_core_audit.REG_AVG_TREES_ALL_PLOTS || null,
          plant27_2021_core_audit.TODAY_RAW || null,
          plant27_2021_core_audit.APPROVED || null,
          plant27_2021_core_audit.MAGROVE_PLANT_GENERATED_NOTE_NAME_131 || null,
          plant27_2021_core_audit.project_id || null,
          plant27_2021_core_audit.sort || null,
          plant27_2021_core_audit.last_log_id || null,
          plant27_2021_core_audit.restore_id || null,
          plant27_2021_core_audit.created_at || null,
          plant27_2021_core_audit.created_by || null,
          plant27_2021_core_audit.updated_at || null,
          plant27_2021_core_audit.updated_by || null,
          plant27_2021_core_audit.deleted_at || null,
          plant27_2021_core_audit.deleted_by || null,
          plant27_2021_core_audit.deleted_status || null,
          plant27_2021_core_audit.status || null,
          plant27_2021_core_audit.UserName || null,
          plant27_2021_core_audit.AdditionTime || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_core_test_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_core_test?token=${token}`,
    );
    const data = await response.json();
    console.log('Total plant27_2021_core_test items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_core_test`,
          [],
          () => {
            console.log('plant27_2021_core_test table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_core_test (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173 TEXT,REG_AVG_SEEDLING_ALL_PLOTS TEXT,PLANTING_PLAN_GRPSTOCKS_NTE_1 TEXT,PLANTING_PLAN_GRPSTOCKS_NTE_2 TEXT,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174 TEXT,LOCATION_DATA_CA_TLOC_AD_DISTRICT TEXT,MAGROVE_PLANT_WIND_DIR TEXT,GSITE_HISTORY TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_20 TEXT,GTRTS_PLANTING_PLANTING_YEAR TEXT,INTERVENTION_DETAILS_PATCHES_PLANT TEXT,INTERVENTION_DETAILS_SEEDING_PLANT TEXT,PLANTING_PLAN_GPLANTING_SPACING TEXT,MAGROVE_PLANT_MAN_AFF_CLAY_LAYER TEXT,GTRTS_OTHER_TREATMENT_OTHER_YEAR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT TEXT,MAGROVE_PLANT_CRABS_HOLE TEXT,REG_AVG_SEEDLING_PER_HA_ALL_PLOTS TEXT,LOCATION_DATA_CA_UNION TEXT,SUBSCRIBERID TEXT,GTRTS_PLANTING_PLANTING_YEAR_RAW TEXT,GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW TEXT,DEVICEID TEXT,PLANTING_PLAN_GENERATED_NOTE_NAME_151 TEXT,INTERVENTION_DETAILS_TLOC_PLANT_YEAR TEXT,NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179 TEXT,INTERVENTION_DETAILS_TLOC_PLANT_TYPE TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT TEXT,LOCATION_DATA_ECOZONE TEXT,GTRTS_PLANTATION_SITE_YEAR TEXT,GUSER_TUSER_CELL TEXT,REG_AVG_TREES_PER_HA_ALL_PLOTS TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA TEXT,GTRTS_NUERSERY_RAISING_NURSERY_YEAR TEXT,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT TEXT,GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221 TEXT,PLANTING_PLAN_SEEDLINGS_PER_HA TEXT,GTRTS_COMPOST_COMPOST_YEAR_RAW TEXT,NURSERY_NURSERY_SITE_NURSERY_LOCATION TEXT,GSITE_LAND_COV_DESC TEXT,SIMSERIAL TEXT,GUSER_GENERATED_NOTE_NAME_13 TEXT,GUSER_DCOLLECTION_RAW TEXT,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR TEXT,GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND TEXT,MAGROVE_PLANT_MAN_AFF_LEVEL_INUND TEXT,ALLPATCHES TEXT,GENERATED_NOTE_NAME_63 TEXT,GUSER_TUSER_EMAIL TEXT,CHECKED_BY TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CIR TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2 TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190 TEXT,LOCATION_DATA_TLOCATION TEXT,MAGROVE_PLANT_FACING_ISLAND TEXT,GUSER_TUSER TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME TEXT,LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23 TEXT,GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC TEXT,GTRTS_PLANTATION_SITE_YEAR_RAW TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_115 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_114 TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR TEXT,GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_119 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_118 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_117 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_116 TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK TEXT,GTRTS_COMPOST_GENERATED_NOTE_NAME_247 TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION TEXT,GTRTS_COMPOST_COMPOST_YEAR TEXT,GTRTS_PLANTING_GENERATED_NOTE_NAME_231 TEXT,GUSER_DCOLLECTION TEXT,CHECKED TEXT,GSITE_HIST_OTHER TEXT,MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137 TEXT,INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122 TEXT,MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133 TEXT,PLANTING_PLAN_TXT_BUILD1 TEXT,PLANTING_PLAN_TXT_BUILD2 TEXT,GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252 TEXT,END_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS TEXT,PLANTING_PLAN_BPLANTING TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC TEXT,LOCATION_DATA_CA_GENERATED_NOTE_NAME_36 TEXT,INTERVENTION_DETAILS_LLOC_PLANT_AREA TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2 TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140 TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE TEXT,REG_PLOT_NO TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3 TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4 TEXT,END TEXT,PLANTING_PLAN_MAX_SEEDLINGS TEXT,PHONENUMBER TEXT,GTRTS_PLANTATION_GENERATED_NOTE_NAME_226 TEXT,START_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212 TEXT,META_INSTANCE_ID TEXT,INTERVENTION_DETAILS_TLOC_PLANT_OTHERS TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG TEXT,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT TEXT,MAGROVE_PLANT_FACING_DIR TEXT,NURSERY_NURSERY_SITE_TPOLYTYPE_NUR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT TEXT,MAGROVE_PLANT_MAN_AFF_PIONEERS_SP TEXT,TODAY TEXT,LOCATION_DATA_CA_TLOC_AD_DIVISION TEXT,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV TEXT,LOCATION_DATA_CA_VILLAGE TEXT,MAGROVE_PLANT_WAVE_DIR TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199 TEXT,GSITE_GENERATED_NOTE_NAME_72 TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE TEXT,START TEXT,REG_AVG_TREES_ALL_PLOTS TEXT,TODAY_RAW TEXT,APPROVED TEXT,MAGROVE_PLANT_GENERATED_NOTE_NAME_131 TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT)`,
          [],
          () => {
            console.log('plant27_2021_core_test table created successfully');
          },
          reject,
        );

        data.forEach(plant27_2021_core_test => {
          tx.executeSql(
            `INSERT INTO plant27_2021_core_test VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_core_test._URI || null,
              plant27_2021_core_test._CREATOR_URI_USER || null,
              plant27_2021_core_test._CREATION_DATE || null,
              plant27_2021_core_test._LAST_UPDATE_URI_USER || null,
              plant27_2021_core_test._LAST_UPDATE_DATE || null,
              plant27_2021_core_test._MODEL_VERSION || null,
              plant27_2021_core_test._UI_VERSION || null,
              plant27_2021_core_test._IS_COMPLETE || null,
              plant27_2021_core_test._SUBMISSION_DATE || null,
              plant27_2021_core_test._MARKED_AS_COMPLETE_DATE || null,
              plant27_2021_core_test.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173 ||
                null,
              plant27_2021_core_test.REG_AVG_SEEDLING_ALL_PLOTS || null,
              plant27_2021_core_test.PLANTING_PLAN_GRPSTOCKS_NTE_1 || null,
              plant27_2021_core_test.PLANTING_PLAN_GRPSTOCKS_NTE_2 || null,
              plant27_2021_core_test.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174 ||
                null,
              plant27_2021_core_test.LOCATION_DATA_CA_TLOC_AD_DISTRICT || null,
              plant27_2021_core_test.MAGROVE_PLANT_WIND_DIR || null,
              plant27_2021_core_test.GSITE_HISTORY || null,
              plant27_2021_core_test.LOCATION_DATA_GENERATED_NOTE_NAME_20 ||
                null,
              plant27_2021_core_test.GTRTS_PLANTING_PLANTING_YEAR || null,
              plant27_2021_core_test.INTERVENTION_DETAILS_PATCHES_PLANT || null,
              plant27_2021_core_test.INTERVENTION_DETAILS_SEEDING_PLANT || null,
              plant27_2021_core_test.PLANTING_PLAN_GPLANTING_SPACING || null,
              plant27_2021_core_test.MAGROVE_PLANT_MAN_AFF_CLAY_LAYER || null,
              plant27_2021_core_test.GTRTS_OTHER_TREATMENT_OTHER_YEAR || null,
              plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT ||
                null,
              plant27_2021_core_test.MAGROVE_PLANT_CRABS_HOLE || null,
              plant27_2021_core_test.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS || null,
              plant27_2021_core_test.LOCATION_DATA_CA_UNION || null,
              plant27_2021_core_test.SUBSCRIBERID || null,
              plant27_2021_core_test.GTRTS_PLANTING_PLANTING_YEAR_RAW || null,
              plant27_2021_core_test.GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW ||
                null,
              plant27_2021_core_test.DEVICEID || null,
              plant27_2021_core_test.PLANTING_PLAN_GENERATED_NOTE_NAME_151 ||
                null,
              plant27_2021_core_test.INTERVENTION_DETAILS_TLOC_PLANT_YEAR ||
                null,
              plant27_2021_core_test.NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179 ||
                null,
              plant27_2021_core_test.INTERVENTION_DETAILS_TLOC_PLANT_TYPE ||
                null,
              plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT ||
                null,
              plant27_2021_core_test.LOCATION_DATA_ECOZONE || null,
              plant27_2021_core_test.GTRTS_PLANTATION_SITE_YEAR || null,
              plant27_2021_core_test.GUSER_TUSER_CELL || null,
              plant27_2021_core_test.REG_AVG_TREES_PER_HA_ALL_PLOTS || null,
              plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA ||
                null,
              plant27_2021_core_test.GTRTS_NUERSERY_RAISING_NURSERY_YEAR ||
                null,
              plant27_2021_core_test.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR || null,
              plant27_2021_core_test.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT ||
                null,
              plant27_2021_core_test.GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221 ||
                null,
              plant27_2021_core_test.PLANTING_PLAN_SEEDLINGS_PER_HA || null,
              plant27_2021_core_test.GTRTS_COMPOST_COMPOST_YEAR_RAW || null,
              plant27_2021_core_test.NURSERY_NURSERY_SITE_NURSERY_LOCATION ||
                null,
              plant27_2021_core_test.GSITE_LAND_COV_DESC || null,
              plant27_2021_core_test.SIMSERIAL || null,
              plant27_2021_core_test.GUSER_GENERATED_NOTE_NAME_13 || null,
              plant27_2021_core_test.GUSER_DCOLLECTION_RAW || null,
              plant27_2021_core_test.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR ||
                null,
              plant27_2021_core_test.GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED ||
                null,
              plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND ||
                null,
              plant27_2021_core_test.MAGROVE_PLANT_MAN_AFF_LEVEL_INUND || null,
              plant27_2021_core_test.ALLPATCHES || null,
              plant27_2021_core_test.GENERATED_NOTE_NAME_63 || null,
              plant27_2021_core_test.GUSER_TUSER_EMAIL || null,
              plant27_2021_core_test.CHECKED_BY || null,
              plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_FD_CIR ||
                null,
              plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2 ||
                null,
              plant27_2021_core_test.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT ||
                null,
              plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190 ||
                null,
              plant27_2021_core_test.LOCATION_DATA_TLOCATION || null,
              plant27_2021_core_test.MAGROVE_PLANT_FACING_ISLAND || null,
              plant27_2021_core_test.GUSER_TUSER || null,
              plant27_2021_core_test.MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH ||
                null,
              plant27_2021_core_test.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME ||
                null,
              plant27_2021_core_test.LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23 ||
                null,
              plant27_2021_core_test.GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW ||
                null,
              plant27_2021_core_test.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC ||
                null,
              plant27_2021_core_test.GTRTS_PLANTATION_SITE_YEAR_RAW || null,
              plant27_2021_core_test.REGIN_NOTE_GENERATED_NOTE_NAME_115 || null,
              plant27_2021_core_test.REGIN_NOTE_GENERATED_NOTE_NAME_114 || null,
              plant27_2021_core_test.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID ||
                null,
              plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR ||
                null,
              plant27_2021_core_test.GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262 ||
                null,
              plant27_2021_core_test.REGIN_NOTE_GENERATED_NOTE_NAME_119 || null,
              plant27_2021_core_test.REGIN_NOTE_GENERATED_NOTE_NAME_118 || null,
              plant27_2021_core_test.REGIN_NOTE_GENERATED_NOTE_NAME_117 || null,
              plant27_2021_core_test.REGIN_NOTE_GENERATED_NOTE_NAME_116 || null,
              plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK ||
                null,
              plant27_2021_core_test.GTRTS_COMPOST_GENERATED_NOTE_NAME_247 ||
                null,
              plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION ||
                null,
              plant27_2021_core_test.GTRTS_COMPOST_COMPOST_YEAR || null,
              plant27_2021_core_test.GTRTS_PLANTING_GENERATED_NOTE_NAME_231 ||
                null,
              plant27_2021_core_test.GUSER_DCOLLECTION || null,
              plant27_2021_core_test.CHECKED || null,
              plant27_2021_core_test.GSITE_HIST_OTHER || null,
              plant27_2021_core_test.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137 ||
                null,
              plant27_2021_core_test.INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122 ||
                null,
              plant27_2021_core_test.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133 ||
                null,
              plant27_2021_core_test.PLANTING_PLAN_TXT_BUILD1 || null,
              plant27_2021_core_test.PLANTING_PLAN_TXT_BUILD2 || null,
              plant27_2021_core_test.GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252 ||
                null,
              plant27_2021_core_test.END_RAW || null,
              plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE ||
                null,
              plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS ||
                null,
              plant27_2021_core_test.PLANTING_PLAN_BPLANTING || null,
              plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC ||
                null,
              plant27_2021_core_test.LOCATION_DATA_CA_GENERATED_NOTE_NAME_36 ||
                null,
              plant27_2021_core_test.INTERVENTION_DETAILS_LLOC_PLANT_AREA ||
                null,
              plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1 ||
                null,
              plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2 ||
                null,
              plant27_2021_core_test.MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140 ||
                null,
              plant27_2021_core_test.NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE ||
                null,
              plant27_2021_core_test.REG_PLOT_NO || null,
              plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7 ||
                null,
              plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5 ||
                null,
              plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6 ||
                null,
              plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3 ||
                null,
              plant27_2021_core_test.MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE ||
                null,
              plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4 ||
                null,
              plant27_2021_core_test.END || null,
              plant27_2021_core_test.PLANTING_PLAN_MAX_SEEDLINGS || null,
              plant27_2021_core_test.PHONENUMBER || null,
              plant27_2021_core_test.GTRTS_PLANTATION_GENERATED_NOTE_NAME_226 ||
                null,
              plant27_2021_core_test.START_RAW || null,
              plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE ||
                null,
              plant27_2021_core_test.NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212 ||
                null,
              plant27_2021_core_test.META_INSTANCE_ID || null,
              plant27_2021_core_test.INTERVENTION_DETAILS_TLOC_PLANT_OTHERS ||
                null,
              plant27_2021_core_test.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG ||
                null,
              plant27_2021_core_test.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR ||
                null,
              plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT ||
                null,
              plant27_2021_core_test.MAGROVE_PLANT_FACING_DIR || null,
              plant27_2021_core_test.NURSERY_NURSERY_SITE_TPOLYTYPE_NUR || null,
              plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT ||
                null,
              plant27_2021_core_test.MAGROVE_PLANT_MAN_AFF_PIONEERS_SP || null,
              plant27_2021_core_test.TODAY || null,
              plant27_2021_core_test.LOCATION_DATA_CA_TLOC_AD_DIVISION || null,
              plant27_2021_core_test.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW ||
                null,
              plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV ||
                null,
              plant27_2021_core_test.LOCATION_DATA_CA_VILLAGE || null,
              plant27_2021_core_test.MAGROVE_PLANT_WAVE_DIR || null,
              plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199 ||
                null,
              plant27_2021_core_test.GSITE_GENERATED_NOTE_NAME_72 || null,
              plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE ||
                null,
              plant27_2021_core_test.START || null,
              plant27_2021_core_test.REG_AVG_TREES_ALL_PLOTS || null,
              plant27_2021_core_test.TODAY_RAW || null,
              plant27_2021_core_test.APPROVED || null,
              plant27_2021_core_test.MAGROVE_PLANT_GENERATED_NOTE_NAME_131 ||
                null,
              plant27_2021_core_test.project_id || null,
              plant27_2021_core_test.sort || null,
              plant27_2021_core_test.last_log_id || null,
              plant27_2021_core_test.restore_id || null,
              plant27_2021_core_test.created_at || null,
              plant27_2021_core_test.created_by || null,
              plant27_2021_core_test.updated_at || null,
              plant27_2021_core_test.updated_by || null,
              plant27_2021_core_test.deleted_at || null,
              plant27_2021_core_test.deleted_by || null,
              plant27_2021_core_test.deleted_status || null,
              plant27_2021_core_test.status || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_core_test data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_core_test data',
                error,
                plant27_2021_core_test,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching plant27_2021_core_test data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_core_test_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_core_test?token=${token}`,
    );
    const data = await response.json();
    console.log('Total plant27_2021_core_test items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_core_test`,
          [],
          () => {
            console.log('plant27_2021_core_test table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_core_test (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173 TEXT,REG_AVG_SEEDLING_ALL_PLOTS TEXT,PLANTING_PLAN_GRPSTOCKS_NTE_1 TEXT,PLANTING_PLAN_GRPSTOCKS_NTE_2 TEXT,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174 TEXT,LOCATION_DATA_CA_TLOC_AD_DISTRICT TEXT,MAGROVE_PLANT_WIND_DIR TEXT,GSITE_HISTORY TEXT,LOCATION_DATA_GENERATED_NOTE_NAME_20 TEXT,GTRTS_PLANTING_PLANTING_YEAR TEXT,INTERVENTION_DETAILS_PATCHES_PLANT TEXT,INTERVENTION_DETAILS_SEEDING_PLANT TEXT,PLANTING_PLAN_GPLANTING_SPACING TEXT,MAGROVE_PLANT_MAN_AFF_CLAY_LAYER TEXT,GTRTS_OTHER_TREATMENT_OTHER_YEAR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT TEXT,MAGROVE_PLANT_CRABS_HOLE TEXT,REG_AVG_SEEDLING_PER_HA_ALL_PLOTS TEXT,LOCATION_DATA_CA_UNION TEXT,SUBSCRIBERID TEXT,GTRTS_PLANTING_PLANTING_YEAR_RAW TEXT,GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW TEXT,DEVICEID TEXT,PLANTING_PLAN_GENERATED_NOTE_NAME_151 TEXT,INTERVENTION_DETAILS_TLOC_PLANT_YEAR TEXT,NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179 TEXT,INTERVENTION_DETAILS_TLOC_PLANT_TYPE TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT TEXT,LOCATION_DATA_ECOZONE TEXT,GTRTS_PLANTATION_SITE_YEAR TEXT,GUSER_TUSER_CELL TEXT,REG_AVG_TREES_PER_HA_ALL_PLOTS TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA TEXT,GTRTS_NUERSERY_RAISING_NURSERY_YEAR TEXT,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT TEXT,GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221 TEXT,PLANTING_PLAN_SEEDLINGS_PER_HA TEXT,GTRTS_COMPOST_COMPOST_YEAR_RAW TEXT,NURSERY_NURSERY_SITE_NURSERY_LOCATION TEXT,GSITE_LAND_COV_DESC TEXT,SIMSERIAL TEXT,GUSER_GENERATED_NOTE_NAME_13 TEXT,GUSER_DCOLLECTION_RAW TEXT,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR TEXT,GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND TEXT,MAGROVE_PLANT_MAN_AFF_LEVEL_INUND TEXT,ALLPATCHES TEXT,GENERATED_NOTE_NAME_63 TEXT,GUSER_TUSER_EMAIL TEXT,CHECKED_BY TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CIR TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2 TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190 TEXT,LOCATION_DATA_TLOCATION TEXT,MAGROVE_PLANT_FACING_ISLAND TEXT,GUSER_TUSER TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME TEXT,LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23 TEXT,GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC TEXT,GTRTS_PLANTATION_SITE_YEAR_RAW TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_115 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_114 TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR TEXT,GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_119 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_118 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_117 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_116 TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK TEXT,GTRTS_COMPOST_GENERATED_NOTE_NAME_247 TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION TEXT,GTRTS_COMPOST_COMPOST_YEAR TEXT,GTRTS_PLANTING_GENERATED_NOTE_NAME_231 TEXT,GUSER_DCOLLECTION TEXT,CHECKED TEXT,GSITE_HIST_OTHER TEXT,MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137 TEXT,INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122 TEXT,MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133 TEXT,PLANTING_PLAN_TXT_BUILD1 TEXT,PLANTING_PLAN_TXT_BUILD2 TEXT,GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252 TEXT,END_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS TEXT,PLANTING_PLAN_BPLANTING TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC TEXT,LOCATION_DATA_CA_GENERATED_NOTE_NAME_36 TEXT,INTERVENTION_DETAILS_LLOC_PLANT_AREA TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2 TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140 TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE TEXT,REG_PLOT_NO TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6 TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3 TEXT,MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4 TEXT,END TEXT,PLANTING_PLAN_MAX_SEEDLINGS TEXT,PHONENUMBER TEXT,GTRTS_PLANTATION_GENERATED_NOTE_NAME_226 TEXT,START_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE TEXT,NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212 TEXT,META_INSTANCE_ID TEXT,INTERVENTION_DETAILS_TLOC_PLANT_OTHERS TEXT,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG TEXT,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT TEXT,MAGROVE_PLANT_FACING_DIR TEXT,NURSERY_NURSERY_SITE_TPOLYTYPE_NUR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT TEXT,MAGROVE_PLANT_MAN_AFF_PIONEERS_SP TEXT,TODAY TEXT,LOCATION_DATA_CA_TLOC_AD_DIVISION TEXT,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV TEXT,LOCATION_DATA_CA_VILLAGE TEXT,MAGROVE_PLANT_WAVE_DIR TEXT,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199 TEXT,GSITE_GENERATED_NOTE_NAME_72 TEXT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE TEXT,START TEXT,REG_AVG_TREES_ALL_PLOTS TEXT,TODAY_RAW TEXT,APPROVED TEXT,MAGROVE_PLANT_GENERATED_NOTE_NAME_131 TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT)`,
          [],
          () => {
            console.log('plant27_2021_core_test table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching plant27_2021_core_test data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_core_test_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_core_test`, // Query the plant27_2021_core_test table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying plant27_2021_core_test`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_core_test_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_core_test`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_core_test:',
            resultSet,
          );

          try {
            await plant27_2021_core_test_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_core_test`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_core_test_create = plant27_2021_core_test => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert plant27_2021_core_test
      tx.executeSql(
        `INSERT INTO plant27_2021_core_test (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_MODEL_VERSION,_UI_VERSION,_IS_COMPLETE,_SUBMISSION_DATE,_MARKED_AS_COMPLETE_DATE,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173,REG_AVG_SEEDLING_ALL_PLOTS,PLANTING_PLAN_GRPSTOCKS_NTE_1,PLANTING_PLAN_GRPSTOCKS_NTE_2,PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174,LOCATION_DATA_CA_TLOC_AD_DISTRICT,MAGROVE_PLANT_WIND_DIR,GSITE_HISTORY,LOCATION_DATA_GENERATED_NOTE_NAME_20,GTRTS_PLANTING_PLANTING_YEAR,INTERVENTION_DETAILS_PATCHES_PLANT,INTERVENTION_DETAILS_SEEDING_PLANT,PLANTING_PLAN_GPLANTING_SPACING,MAGROVE_PLANT_MAN_AFF_CLAY_LAYER,GTRTS_OTHER_TREATMENT_OTHER_YEAR,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT,MAGROVE_PLANT_CRABS_HOLE,REG_AVG_SEEDLING_PER_HA_ALL_PLOTS,LOCATION_DATA_CA_UNION,SUBSCRIBERID,GTRTS_PLANTING_PLANTING_YEAR_RAW,GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW,DEVICEID,PLANTING_PLAN_GENERATED_NOTE_NAME_151,INTERVENTION_DETAILS_TLOC_PLANT_YEAR,NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179,INTERVE
NTION_DETAILS_TLOC_PLANT_TYPE,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT,LOCATION_DATA_ECOZONE,GTRTS_PLANTATION_SITE_YEAR,GUSER_TUSER_CELL,REG_AVG_TREES_PER_HA_ALL_PLOTS,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA,GTRTS_NUERSERY_RAISING_NURSERY_YEAR,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT,GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221,PLANTING_PLAN_SEEDLINGS_PER_HA,GTRTS_COMPOST_COMPOST_YEAR_RAW,NURSERY_NURSERY_SITE_NURSERY_LOCATION,GSITE_LAND_COV_DESC,SIMSERIAL,GUSER_GENERATED_NOTE_NAME_13,GUSER_DCOLLECTION_RAW,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR,GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED,NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND,MAGROVE_PLANT_MAN_AFF_LEVEL_INUND,ALLPATCHES,GENERATED_NOTE_NAME_63,GUSER_TUSER_EMAIL,CHECKED_BY,LOCATION_DATA_FOREST_AD_TLOC_FD_CIR,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT,NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190,LOCATION_DAT
A_TLOCATION,MAGROVE_PLANT_FACING_ISLAND,GUSER_TUSER,MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME,LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23,GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC,GTRTS_PLANTATION_SITE_YEAR_RAW,REGIN_NOTE_GENERATED_NOTE_NAME_115,REGIN_NOTE_GENERATED_NOTE_NAME_114,NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID,LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR,GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262,REGIN_NOTE_GENERATED_NOTE_NAME_119,REGIN_NOTE_GENERATED_NOTE_NAME_118,REGIN_NOTE_GENERATED_NOTE_NAME_117,REGIN_NOTE_GENERATED_NOTE_NAME_116,LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK,GTRTS_COMPOST_GENERATED_NOTE_NAME_247,LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION,GTRTS_COMPOST_COMPOST_YEAR,GTRTS_PLANTING_GENERATED_NOTE_NAME_231,GUSER_DCOLLECTION,CHECKED,GSITE_HIST_OTHER,MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137,INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122,MAGROVE_PLANT_MAN_AFF_GENERATED_
NOTE_NAME_133,PLANTING_PLAN_TXT_BUILD1,PLANTING_PLAN_TXT_BUILD2,GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252,END_RAW,LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE,NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS,PLANTING_PLAN_BPLANTING,NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC,LOCATION_DATA_CA_GENERATED_NOTE_NAME_36,INTERVENTION_DETAILS_LLOC_PLANT_AREA,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2,MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140,NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE,REG_PLOT_NO,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3,MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4,END,PLANTING_PLAN_MAX_SEEDLINGS,PHONENUMBER,GTRTS_PLANTATION_GENERATED_NOTE_NAME_226,START_RAW,LOCAT
ION_DATA_FOREST_AD_TLOC_FD_RANGE,NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212,META_INSTANCE_ID,INTERVENTION_DETAILS_TLOC_PLANT_OTHERS,NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG,NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT,MAGROVE_PLANT_FACING_DIR,NURSERY_NURSERY_SITE_TPOLYTYPE_NUR,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT,MAGROVE_PLANT_MAN_AFF_PIONEERS_SP,TODAY,LOCATION_DATA_CA_TLOC_AD_DIVISION,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW,LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV,LOCATION_DATA_CA_VILLAGE,MAGROVE_PLANT_WAVE_DIR,NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199,GSITE_GENERATED_NOTE_NAME_72,NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE,START,REG_AVG_TREES_ALL_PLOTS,TODAY_RAW,APPROVED,MAGROVE_PLANT_GENERATED_NOTE_NAME_131,project_id,sort,last_log_id,restore_id,created_at,created_by,updated_at,updated_by,deleted_at,deleted_by,deleted_status,status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          plant27_2021_core_test._URI || null,
          plant27_2021_core_test._CREATOR_URI_USER || null,
          plant27_2021_core_test._CREATION_DATE || null,
          plant27_2021_core_test._LAST_UPDATE_URI_USER || null,
          plant27_2021_core_test._LAST_UPDATE_DATE || null,
          plant27_2021_core_test._MODEL_VERSION || null,
          plant27_2021_core_test._UI_VERSION || null,
          plant27_2021_core_test._IS_COMPLETE || null,
          plant27_2021_core_test._SUBMISSION_DATE || null,
          plant27_2021_core_test._MARKED_AS_COMPLETE_DATE || null,
          plant27_2021_core_test.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173 ||
            null,
          plant27_2021_core_test.REG_AVG_SEEDLING_ALL_PLOTS || null,
          plant27_2021_core_test.PLANTING_PLAN_GRPSTOCKS_NTE_1 || null,
          plant27_2021_core_test.PLANTING_PLAN_GRPSTOCKS_NTE_2 || null,
          plant27_2021_core_test.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174 ||
            null,
          plant27_2021_core_test.LOCATION_DATA_CA_TLOC_AD_DISTRICT || null,
          plant27_2021_core_test.MAGROVE_PLANT_WIND_DIR || null,
          plant27_2021_core_test.GSITE_HISTORY || null,
          plant27_2021_core_test.LOCATION_DATA_GENERATED_NOTE_NAME_20 || null,
          plant27_2021_core_test.GTRTS_PLANTING_PLANTING_YEAR || null,
          plant27_2021_core_test.INTERVENTION_DETAILS_PATCHES_PLANT || null,
          plant27_2021_core_test.INTERVENTION_DETAILS_SEEDING_PLANT || null,
          plant27_2021_core_test.PLANTING_PLAN_GPLANTING_SPACING || null,
          plant27_2021_core_test.MAGROVE_PLANT_MAN_AFF_CLAY_LAYER || null,
          plant27_2021_core_test.GTRTS_OTHER_TREATMENT_OTHER_YEAR || null,
          plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT ||
            null,
          plant27_2021_core_test.MAGROVE_PLANT_CRABS_HOLE || null,
          plant27_2021_core_test.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS || null,
          plant27_2021_core_test.LOCATION_DATA_CA_UNION || null,
          plant27_2021_core_test.SUBSCRIBERID || null,
          plant27_2021_core_test.GTRTS_PLANTING_PLANTING_YEAR_RAW || null,
          plant27_2021_core_test.GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW || null,
          plant27_2021_core_test.DEVICEID || null,
          plant27_2021_core_test.PLANTING_PLAN_GENERATED_NOTE_NAME_151 || null,
          plant27_2021_core_test.INTERVENTION_DETAILS_TLOC_PLANT_YEAR || null,
          plant27_2021_core_test.NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179 ||
            null,
          plant27_2021_core_test.INTERVENTION_DETAILS_TLOC_PLANT_TYPE || null,
          plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT ||
            null,
          plant27_2021_core_test.LOCATION_DATA_ECOZONE || null,
          plant27_2021_core_test.GTRTS_PLANTATION_SITE_YEAR || null,
          plant27_2021_core_test.GUSER_TUSER_CELL || null,
          plant27_2021_core_test.REG_AVG_TREES_PER_HA_ALL_PLOTS || null,
          plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA ||
            null,
          plant27_2021_core_test.GTRTS_NUERSERY_RAISING_NURSERY_YEAR || null,
          plant27_2021_core_test.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR || null,
          plant27_2021_core_test.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT ||
            null,
          plant27_2021_core_test.GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221 ||
            null,
          plant27_2021_core_test.PLANTING_PLAN_SEEDLINGS_PER_HA || null,
          plant27_2021_core_test.GTRTS_COMPOST_COMPOST_YEAR_RAW || null,
          plant27_2021_core_test.NURSERY_NURSERY_SITE_NURSERY_LOCATION || null,
          plant27_2021_core_test.GSITE_LAND_COV_DESC || null,
          plant27_2021_core_test.SIMSERIAL || null,
          plant27_2021_core_test.GUSER_GENERATED_NOTE_NAME_13 || null,
          plant27_2021_core_test.GUSER_DCOLLECTION_RAW || null,
          plant27_2021_core_test.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR ||
            null,
          plant27_2021_core_test.GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED || null,
          plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND ||
            null,
          plant27_2021_core_test.MAGROVE_PLANT_MAN_AFF_LEVEL_INUND || null,
          plant27_2021_core_test.ALLPATCHES || null,
          plant27_2021_core_test.GENERATED_NOTE_NAME_63 || null,
          plant27_2021_core_test.GUSER_TUSER_EMAIL || null,
          plant27_2021_core_test.CHECKED_BY || null,
          plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_FD_CIR || null,
          plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2 ||
            null,
          plant27_2021_core_test.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT ||
            null,
          plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190 ||
            null,
          plant27_2021_core_test.LOCATION_DATA_TLOCATION || null,
          plant27_2021_core_test.MAGROVE_PLANT_FACING_ISLAND || null,
          plant27_2021_core_test.GUSER_TUSER || null,
          plant27_2021_core_test.MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH ||
            null,
          plant27_2021_core_test.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME ||
            null,
          plant27_2021_core_test.LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23 ||
            null,
          plant27_2021_core_test.GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW ||
            null,
          plant27_2021_core_test.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC ||
            null,
          plant27_2021_core_test.GTRTS_PLANTATION_SITE_YEAR_RAW || null,
          plant27_2021_core_test.REGIN_NOTE_GENERATED_NOTE_NAME_115 || null,
          plant27_2021_core_test.REGIN_NOTE_GENERATED_NOTE_NAME_114 || null,
          plant27_2021_core_test.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID ||
            null,
          plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR || null,
          plant27_2021_core_test.GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262 ||
            null,
          plant27_2021_core_test.REGIN_NOTE_GENERATED_NOTE_NAME_119 || null,
          plant27_2021_core_test.REGIN_NOTE_GENERATED_NOTE_NAME_118 || null,
          plant27_2021_core_test.REGIN_NOTE_GENERATED_NOTE_NAME_117 || null,
          plant27_2021_core_test.REGIN_NOTE_GENERATED_NOTE_NAME_116 || null,
          plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK || null,
          plant27_2021_core_test.GTRTS_COMPOST_GENERATED_NOTE_NAME_247 || null,
          plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION ||
            null,
          plant27_2021_core_test.GTRTS_COMPOST_COMPOST_YEAR || null,
          plant27_2021_core_test.GTRTS_PLANTING_GENERATED_NOTE_NAME_231 || null,
          plant27_2021_core_test.GUSER_DCOLLECTION || null,
          plant27_2021_core_test.CHECKED || null,
          plant27_2021_core_test.GSITE_HIST_OTHER || null,
          plant27_2021_core_test.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137 ||
            null,
          plant27_2021_core_test.INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122 ||
            null,
          plant27_2021_core_test.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133 ||
            null,
          plant27_2021_core_test.PLANTING_PLAN_TXT_BUILD1 || null,
          plant27_2021_core_test.PLANTING_PLAN_TXT_BUILD2 || null,
          plant27_2021_core_test.GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252 ||
            null,
          plant27_2021_core_test.END_RAW || null,
          plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE ||
            null,
          plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS ||
            null,
          plant27_2021_core_test.PLANTING_PLAN_BPLANTING || null,
          plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC ||
            null,
          plant27_2021_core_test.LOCATION_DATA_CA_GENERATED_NOTE_NAME_36 ||
            null,
          plant27_2021_core_test.INTERVENTION_DETAILS_LLOC_PLANT_AREA || null,
          plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1 ||
            null,
          plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2 ||
            null,
          plant27_2021_core_test.MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140 ||
            null,
          plant27_2021_core_test.NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE ||
            null,
          plant27_2021_core_test.REG_PLOT_NO || null,
          plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7 ||
            null,
          plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5 ||
            null,
          plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6 ||
            null,
          plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3 ||
            null,
          plant27_2021_core_test.MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE ||
            null,
          plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4 ||
            null,
          plant27_2021_core_test.END || null,
          plant27_2021_core_test.PLANTING_PLAN_MAX_SEEDLINGS || null,
          plant27_2021_core_test.PHONENUMBER || null,
          plant27_2021_core_test.GTRTS_PLANTATION_GENERATED_NOTE_NAME_226 ||
            null,
          plant27_2021_core_test.START_RAW || null,
          plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE || null,
          plant27_2021_core_test.NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212 ||
            null,
          plant27_2021_core_test.META_INSTANCE_ID || null,
          plant27_2021_core_test.INTERVENTION_DETAILS_TLOC_PLANT_OTHERS || null,
          plant27_2021_core_test.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG ||
            null,
          plant27_2021_core_test.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR ||
            null,
          plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT || null,
          plant27_2021_core_test.MAGROVE_PLANT_FACING_DIR || null,
          plant27_2021_core_test.NURSERY_NURSERY_SITE_TPOLYTYPE_NUR || null,
          plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT ||
            null,
          plant27_2021_core_test.MAGROVE_PLANT_MAN_AFF_PIONEERS_SP || null,
          plant27_2021_core_test.TODAY || null,
          plant27_2021_core_test.LOCATION_DATA_CA_TLOC_AD_DIVISION || null,
          plant27_2021_core_test.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW || null,
          plant27_2021_core_test.LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV || null,
          plant27_2021_core_test.LOCATION_DATA_CA_VILLAGE || null,
          plant27_2021_core_test.MAGROVE_PLANT_WAVE_DIR || null,
          plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199 ||
            null,
          plant27_2021_core_test.GSITE_GENERATED_NOTE_NAME_72 || null,
          plant27_2021_core_test.NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE ||
            null,
          plant27_2021_core_test.START || null,
          plant27_2021_core_test.REG_AVG_TREES_ALL_PLOTS || null,
          plant27_2021_core_test.TODAY_RAW || null,
          plant27_2021_core_test.APPROVED || null,
          plant27_2021_core_test.MAGROVE_PLANT_GENERATED_NOTE_NAME_131 || null,
          plant27_2021_core_test.project_id || null,
          plant27_2021_core_test.sort || null,
          plant27_2021_core_test.last_log_id || null,
          plant27_2021_core_test.restore_id || null,
          plant27_2021_core_test.created_at || null,
          plant27_2021_core_test.created_by || null,
          plant27_2021_core_test.updated_at || null,
          plant27_2021_core_test.updated_by || null,
          plant27_2021_core_test.deleted_at || null,
          plant27_2021_core_test.deleted_by || null,
          plant27_2021_core_test.deleted_status || null,
          plant27_2021_core_test.status || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const gener43_2021_xpic_beat_index_blb_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_xpic_beat_index_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total gener43_2021_xpic_beat_index_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_xpic_beat_index_blb`,
          [],
          () => {
            // console.log(
            //   'gener43_2021_xpic_beat_index_blb table dropped successfully',
            // );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_xpic_beat_index_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            // console.log(
            //   'gener43_2021_xpic_beat_index_blb table created successfully',
            // );
          },
          reject,
        );

        data.forEach(gener43_2021_xpic_beat_index_blb => {
          tx.executeSql(
            `INSERT INTO gener43_2021_xpic_beat_index_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              gener43_2021_xpic_beat_index_blb._URI || null,
              gener43_2021_xpic_beat_index_blb._CREATOR_URI_USER || null,
              gener43_2021_xpic_beat_index_blb._CREATION_DATE || null,
              gener43_2021_xpic_beat_index_blb._LAST_UPDATE_URI_USER || null,
              gener43_2021_xpic_beat_index_blb._LAST_UPDATE_DATE || null,
              gener43_2021_xpic_beat_index_blb._TOP_LEVEL_AURI || null,
              gener43_2021_xpic_beat_index_blb.VALUE || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'gener43_2021_xpic_beat_index_blb data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting gener43_2021_xpic_beat_index_blb data',
                  error,
                  gener43_2021_xpic_beat_index_blb,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_xpic_beat_index_blb data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const gener43_2021_xpic_beat_index_blb_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_xpic_beat_index_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total gener43_2021_xpic_beat_index_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_xpic_beat_index_blb`,
          [],
          () => {
            console.log(
              'gener43_2021_xpic_beat_index_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_xpic_beat_index_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'gener43_2021_xpic_beat_index_blb table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_xpic_beat_index_blb data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const gener43_2021_xpic_beat_index_blb_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM gener43_2021_xpic_beat_index_blb`, // Query the gener43_2021_xpic_beat_index_blb table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying gener43_2021_xpic_beat_index_blb`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const gener43_2021_xpic_beat_index_blb_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM gener43_2021_xpic_beat_index_blb`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from gener43_2021_xpic_beat_index_blb:',
            resultSet,
          );

          try {
            await gener43_2021_xpic_beat_index_blb_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from gener43_2021_xpic_beat_index_blb`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const gener43_2021_xpic_beat_index_blb_create =
  gener43_2021_xpic_beat_index_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert gener43_2021_xpic_beat_index_blb
        tx.executeSql(
          `INSERT INTO gener43_2021_xpic_beat_index_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            gener43_2021_xpic_beat_index_blb._URI || '',
            gener43_2021_xpic_beat_index_blb._CREATOR_URI_USER || '',
            gener43_2021_xpic_beat_index_blb._CREATION_DATE || '',
            gener43_2021_xpic_beat_index_blb._LAST_UPDATE_URI_USER || '',
            gener43_2021_xpic_beat_index_blb._LAST_UPDATE_DATE || '',
            gener43_2021_xpic_beat_index_blb._TOP_LEVEL_AURI || '',
            gener43_2021_xpic_beat_index_blb.VALUE || '',
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_core_api = async () => {
  try {
    const response = await fetch(`${baseApi}/sufal192020_core?token=${token}`);
    const data = await response.json();
    console.log('Total sufal192020_core items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_core`,
          [],
          () => {
            console.log('sufal192020_core table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_core (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,REG_AVG_SEEDLING_ALL_PLOTS TEXT,GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NAME_CAR TEXT,PLANTING_PLAN_GPLANTING_BNURSERY TEXT,LOCATION_DATA_CA_TLOC_AD_DISTRICT TEXT,GUSER_SURVEY_TYPE TEXT,GTRTS_LAYOUT_LAYOUT_YEAR_RAW TEXT,GTRTS_PLANTING_PLANTING_YEAR TEXT,MAN_AFF_CLAY_LAYER TEXT,GUSER_REASON_4_CHANGE TEXT,GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR_RAW TEXT,PLANTING_PLAN_GPLANTING_SPACING TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LAT TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_107 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_106 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_105 TEXT,INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_OTHERS TEXT,GTRTS_OTHER_TREATMENT_OTHER_YEAR TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB TEXT,REG_AVG_SEEDLING_PER_HA_ALL_PLOTS TEXT,LOCATION_DATA_CA_UNION TEXT,SUBSCRIBERID TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_MO_NO TEXT,GUSER_PREVIOUS_RECORD TEXT,GTRTS_PLANTING_PLANTING_YEAR_RAW TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_NURS_NOTES TEXT,GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW TEXT,DEVICEID TEXT,INTERVENTION_DETAILS_TLOC_PLANT_YEAR TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_TOTNURSEEDLINGS TEXT,GTRTS_PLANTATION_SITE_YEAR TEXT,GUSER_TUSER_CELL TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ACC TEXT,PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_152 TEXT,PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_151 TEXT,MAN_AFF_WIND_DIR TEXT,GTRTS_NUERSERY_RAISING_NURSERY_YEAR TEXT,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_EAST_NUR TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB_RAW TEXT,GTRTS_COMPOST_COMPOST_YEAR_RAW TEXT,SIMSERIAL TEXT,MAN_AFF_WAVE_DIR TEXT,GUSER_DCOLLECTION_RAW TEXT,PLANTING_PLAN_GPLANTING_MAX_SEEDLINGS TEXT,GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED TEXT,GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR TEXT,ALLPATCHES TEXT,GSITE_ECOLOGICAL_ATTRIBUTES_SF_PROG TEXT,CHECKED_BY TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CIR TEXT,GENERATED_NOTE_NAME_62 TEXT,GSITE_ECOLOGICAL_ATTRIBUTES_HIST_OTHER TEXT,MAN_AFF_FACING_ISLAND TEXT,LOCATION_DATA_TLOCATION TEXT,GUSER_TUSER TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_SEEDLING_SUM TEXT,GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW TEXT,INTERVENTION_DETAILS_TYPE_PLANT_PATCHES_PLANT TEXT,INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_TYPE TEXT,GTRTS_PLANTATION_SITE_YEAR_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR TEXT,ECOZONE TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_NORTH_NUR TEXT,REGIN_NOTE_REGEN_NOTES TEXT,MAN_AFF_PIONEERS_SP TEXT,GTRTS_CLEANING_CUTTING_CUTTING_YEAR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION TEXT,GTRTS_COMPOST_COMPOST_YEAR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CAMP TEXT,GUSER_DCOLLECTION TEXT,CHECKED TEXT,GTRTS_CLEANING_CUTTING_CUTTING_YEAR_RAW TEXT,GTRTS_PIT_DIGGING_DIGGING_YEAR TEXT,END_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE TEXT,OVERALLNOTES TEXT,INTERVENTION_DETAILS_TYPE_PLANT_AREA_ACIVITY TEXT,GTRTS_VACANCY_FILLING_FILLING_YEAR_RAW TEXT,PLANTING_PLAN_BPLANTING TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LNG TEXT,GTRTS_LAYOUT_LAYOUT_YEAR TEXT,INTERVENTION_DETAILS_LLOC_PLANT_AREA TEXT,TINTERVENTION TEXT,REG_PLOT_NO TEXT,PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE_2 TEXT,END TEXT,PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE_1 TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_TPOLYTYPE_NUR TEXT,INTERVENTION_DETAILS_TYPE_PLANT_SEEDING_PLANT TEXT,PHONENUMBER TEXT,MAN_AFF_FACING_DIR TEXT,GSITE_ECOLOGICAL_ATTRIBUTES_LAND_COV_DESC TEXT,START_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE TEXT,GTRTS_VACANCY_FILLING_FILLING_YEAR TEXT,META_INSTANCE_ID TEXT,PLANTING_PLAN_GPLANTING_SEEDLINGS_PER_HA TEXT,GSITE_ECOLOGICAL_ATTRIBUTES_TLANDCOVERCLASS TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_NID TEXT,PLANTING_PLAN_GPLANTING_TXT_BUILD2 TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ALT TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT TEXT,GSITE_ECOLOGICAL_ATTRIBUTES_HISTORY TEXT,PLANTING_PLAN_GPLANTING_TXT_BUILD1 TEXT,TODAY TEXT,LOCATION_DATA_CA_TLOC_AD_DIVISION TEXT,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV TEXT,PLANTING_PLAN_GPLANTING_DAREA_PLANTING TEXT,GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR_RAW TEXT,START TEXT,GTRTS_PIT_DIGGING_DIGGING_YEAR_RAW TEXT,TODAY_RAW TEXT,APPROVED TEXT)`,
          [],
          () => {
            console.log('sufal192020_core table created successfully');
          },
          reject,
        );

        data.forEach(sufal192020_core => {
          tx.executeSql(
            `INSERT INTO sufal192020_core VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_core._URI || null,
              sufal192020_core._CREATOR_URI_USER || null,
              sufal192020_core._CREATION_DATE || null,
              sufal192020_core._LAST_UPDATE_URI_USER || null,
              sufal192020_core._LAST_UPDATE_DATE || null,
              sufal192020_core._MODEL_VERSION || null,
              sufal192020_core._UI_VERSION || null,
              sufal192020_core._IS_COMPLETE || null,
              sufal192020_core._SUBMISSION_DATE || null,
              sufal192020_core._MARKED_AS_COMPLETE_DATE || null,
              sufal192020_core.REG_AVG_SEEDLING_ALL_PLOTS || null,
              sufal192020_core.GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR ||
                null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NAME_CAR ||
                null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_BNURSERY || null,
              sufal192020_core.LOCATION_DATA_CA_TLOC_AD_DISTRICT || null,
              sufal192020_core.GUSER_SURVEY_TYPE || null,
              sufal192020_core.GTRTS_LAYOUT_LAYOUT_YEAR_RAW || null,
              sufal192020_core.GTRTS_PLANTING_PLANTING_YEAR || null,
              sufal192020_core.MAN_AFF_CLAY_LAYER || null,
              sufal192020_core.GUSER_REASON_4_CHANGE || null,
              sufal192020_core.GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR_RAW || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_SPACING || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LAT ||
                null,
              sufal192020_core.REGIN_NOTE_GENERATED_NOTE_NAME_107 || null,
              sufal192020_core.REGIN_NOTE_GENERATED_NOTE_NAME_106 || null,
              sufal192020_core.REGIN_NOTE_GENERATED_NOTE_NAME_105 || null,
              sufal192020_core.INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_OTHERS ||
                null,
              sufal192020_core.GTRTS_OTHER_TREATMENT_OTHER_YEAR || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB ||
                null,
              sufal192020_core.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS || null,
              sufal192020_core.LOCATION_DATA_CA_UNION || null,
              sufal192020_core.SUBSCRIBERID || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_MO_NO ||
                null,
              sufal192020_core.GUSER_PREVIOUS_RECORD || null,
              sufal192020_core.GTRTS_PLANTING_PLANTING_YEAR_RAW || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_NURS_NOTES ||
                null,
              sufal192020_core.GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW || null,
              sufal192020_core.DEVICEID || null,
              sufal192020_core.INTERVENTION_DETAILS_TLOC_PLANT_YEAR || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_TOTNURSEEDLINGS ||
                null,
              sufal192020_core.GTRTS_PLANTATION_SITE_YEAR || null,
              sufal192020_core.GUSER_TUSER_CELL || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ACC ||
                null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_152 ||
                null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_151 ||
                null,
              sufal192020_core.MAN_AFF_WIND_DIR || null,
              sufal192020_core.GTRTS_NUERSERY_RAISING_NURSERY_YEAR || null,
              sufal192020_core.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_EAST_NUR ||
                null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB_RAW ||
                null,
              sufal192020_core.GTRTS_COMPOST_COMPOST_YEAR_RAW || null,
              sufal192020_core.SIMSERIAL || null,
              sufal192020_core.MAN_AFF_WAVE_DIR || null,
              sufal192020_core.GUSER_DCOLLECTION_RAW || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_MAX_SEEDLINGS || null,
              sufal192020_core.GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED || null,
              sufal192020_core.GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR || null,
              sufal192020_core.ALLPATCHES || null,
              sufal192020_core.GSITE_ECOLOGICAL_ATTRIBUTES_SF_PROG || null,
              sufal192020_core.CHECKED_BY || null,
              sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_FD_CIR || null,
              sufal192020_core.GENERATED_NOTE_NAME_62 || null,
              sufal192020_core.GSITE_ECOLOGICAL_ATTRIBUTES_HIST_OTHER || null,
              sufal192020_core.MAN_AFF_FACING_ISLAND || null,
              sufal192020_core.LOCATION_DATA_TLOCATION || null,
              sufal192020_core.GUSER_TUSER || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_SEEDLING_SUM ||
                null,
              sufal192020_core.GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW || null,
              sufal192020_core.INTERVENTION_DETAILS_TYPE_PLANT_PATCHES_PLANT ||
                null,
              sufal192020_core.INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_TYPE ||
                null,
              sufal192020_core.GTRTS_PLANTATION_SITE_YEAR_RAW || null,
              sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR || null,
              sufal192020_core.ECOZONE || null,
              sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_NORTH_NUR ||
                null,
              sufal192020_core.REGIN_NOTE_REGEN_NOTES || null,
              sufal192020_core.MAN_AFF_PIONEERS_SP || null,
              sufal192020_core.GTRTS_CLEANING_CUTTING_CUTTING_YEAR || null,
              sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION || null,
              sufal192020_core.GTRTS_COMPOST_COMPOST_YEAR || null,
              sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_FD_CAMP || null,
              sufal192020_core.GUSER_DCOLLECTION || null,
              sufal192020_core.CHECKED || null,
              sufal192020_core.GTRTS_CLEANING_CUTTING_CUTTING_YEAR_RAW || null,
              sufal192020_core.GTRTS_PIT_DIGGING_DIGGING_YEAR || null,
              sufal192020_core.END_RAW || null,
              sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE || null,
              sufal192020_core.OVERALLNOTES || null,
              sufal192020_core.INTERVENTION_DETAILS_TYPE_PLANT_AREA_ACIVITY ||
                null,
              sufal192020_core.GTRTS_VACANCY_FILLING_FILLING_YEAR_RAW || null,
              sufal192020_core.PLANTING_PLAN_BPLANTING || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LNG ||
                null,
              sufal192020_core.GTRTS_LAYOUT_LAYOUT_YEAR || null,
              sufal192020_core.INTERVENTION_DETAILS_LLOC_PLANT_AREA || null,
              sufal192020_core.TINTERVENTION || null,
              sufal192020_core.REG_PLOT_NO || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE_2 || null,
              sufal192020_core.END || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE_1 || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_TPOLYTYPE_NUR ||
                null,
              sufal192020_core.INTERVENTION_DETAILS_TYPE_PLANT_SEEDING_PLANT ||
                null,
              sufal192020_core.PHONENUMBER || null,
              sufal192020_core.MAN_AFF_FACING_DIR || null,
              sufal192020_core.GSITE_ECOLOGICAL_ATTRIBUTES_LAND_COV_DESC ||
                null,
              sufal192020_core.START_RAW || null,
              sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE || null,
              sufal192020_core.GTRTS_VACANCY_FILLING_FILLING_YEAR || null,
              sufal192020_core.META_INSTANCE_ID || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_SEEDLINGS_PER_HA || null,
              sufal192020_core.GSITE_ECOLOGICAL_ATTRIBUTES_TLANDCOVERCLASS ||
                null,
              sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_NID ||
                null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_TXT_BUILD2 || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ALT ||
                null,
              sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT || null,
              sufal192020_core.GSITE_ECOLOGICAL_ATTRIBUTES_HISTORY || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_TXT_BUILD1 || null,
              sufal192020_core.TODAY || null,
              sufal192020_core.LOCATION_DATA_CA_TLOC_AD_DIVISION || null,
              sufal192020_core.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW || null,
              sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV || null,
              sufal192020_core.PLANTING_PLAN_GPLANTING_DAREA_PLANTING || null,
              sufal192020_core.GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR_RAW ||
                null,
              sufal192020_core.START || null,
              sufal192020_core.GTRTS_PIT_DIGGING_DIGGING_YEAR_RAW || null,
              sufal192020_core.TODAY_RAW || null,
              sufal192020_core.APPROVED || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_core data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_core data',
                error,
                sufal192020_core,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching sufal192020_core data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_core_api2 = async () => {
  try {
    const response = await fetch(`${baseApi}/sufal192020_core?token=${token}`);
    const data = await response.json();
    console.log('Total sufal192020_core items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_core`,
          [],
          () => {
            console.log('sufal192020_core table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_core (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,REG_AVG_SEEDLING_ALL_PLOTS TEXT,GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NAME_CAR TEXT,PLANTING_PLAN_GPLANTING_BNURSERY TEXT,LOCATION_DATA_CA_TLOC_AD_DISTRICT TEXT,GUSER_SURVEY_TYPE TEXT,GTRTS_LAYOUT_LAYOUT_YEAR_RAW TEXT,GTRTS_PLANTING_PLANTING_YEAR TEXT,MAN_AFF_CLAY_LAYER TEXT,GUSER_REASON_4_CHANGE TEXT,GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR_RAW TEXT,PLANTING_PLAN_GPLANTING_SPACING TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LAT TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_107 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_106 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_105 TEXT,INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_OTHERS TEXT,GTRTS_OTHER_TREATMENT_OTHER_YEAR TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB TEXT,REG_AVG_SEEDLING_PER_HA_ALL_PLOTS TEXT,LOCATION_DATA_CA_UNION TEXT,SUBSCRIBERID TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_MO_NO TEXT,GUSER_PREVIOUS_RECORD TEXT,GTRTS_PLANTING_PLANTING_YEAR_RAW TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_NURS_NOTES TEXT,GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW TEXT,DEVICEID TEXT,INTERVENTION_DETAILS_TLOC_PLANT_YEAR TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_TOTNURSEEDLINGS TEXT,GTRTS_PLANTATION_SITE_YEAR TEXT,GUSER_TUSER_CELL TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ACC TEXT,PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_152 TEXT,PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_151 TEXT,MAN_AFF_WIND_DIR TEXT,GTRTS_NUERSERY_RAISING_NURSERY_YEAR TEXT,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_EAST_NUR TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB_RAW TEXT,GTRTS_COMPOST_COMPOST_YEAR_RAW TEXT,SIMSERIAL TEXT,MAN_AFF_WAVE_DIR TEXT,GUSER_DCOLLECTION_RAW TEXT,PLANTING_PLAN_GPLANTING_MAX_SEEDLINGS TEXT,GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED TEXT,GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR TEXT,ALLPATCHES TEXT,GSITE_ECOLOGICAL_ATTRIBUTES_SF_PROG TEXT,CHECKED_BY TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CIR TEXT,GENERATED_NOTE_NAME_62 TEXT,GSITE_ECOLOGICAL_ATTRIBUTES_HIST_OTHER TEXT,MAN_AFF_FACING_ISLAND TEXT,LOCATION_DATA_TLOCATION TEXT,GUSER_TUSER TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_SEEDLING_SUM TEXT,GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW TEXT,INTERVENTION_DETAILS_TYPE_PLANT_PATCHES_PLANT TEXT,INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_TYPE TEXT,GTRTS_PLANTATION_SITE_YEAR_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR TEXT,ECOZONE TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_NORTH_NUR TEXT,REGIN_NOTE_REGEN_NOTES TEXT,MAN_AFF_PIONEERS_SP TEXT,GTRTS_CLEANING_CUTTING_CUTTING_YEAR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION TEXT,GTRTS_COMPOST_COMPOST_YEAR TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_CAMP TEXT,GUSER_DCOLLECTION TEXT,CHECKED TEXT,GTRTS_CLEANING_CUTTING_CUTTING_YEAR_RAW TEXT,GTRTS_PIT_DIGGING_DIGGING_YEAR TEXT,END_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE TEXT,OVERALLNOTES TEXT,INTERVENTION_DETAILS_TYPE_PLANT_AREA_ACIVITY TEXT,GTRTS_VACANCY_FILLING_FILLING_YEAR_RAW TEXT,PLANTING_PLAN_BPLANTING TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LNG TEXT,GTRTS_LAYOUT_LAYOUT_YEAR TEXT,INTERVENTION_DETAILS_LLOC_PLANT_AREA TEXT,TINTERVENTION TEXT,REG_PLOT_NO TEXT,PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE_2 TEXT,END TEXT,PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE_1 TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_TPOLYTYPE_NUR TEXT,INTERVENTION_DETAILS_TYPE_PLANT_SEEDING_PLANT TEXT,PHONENUMBER TEXT,MAN_AFF_FACING_DIR TEXT,GSITE_ECOLOGICAL_ATTRIBUTES_LAND_COV_DESC TEXT,START_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE TEXT,GTRTS_VACANCY_FILLING_FILLING_YEAR TEXT,META_INSTANCE_ID TEXT,PLANTING_PLAN_GPLANTING_SEEDLINGS_PER_HA TEXT,GSITE_ECOLOGICAL_ATTRIBUTES_TLANDCOVERCLASS TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_NID TEXT,PLANTING_PLAN_GPLANTING_TXT_BUILD2 TEXT,PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ALT TEXT,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT TEXT,GSITE_ECOLOGICAL_ATTRIBUTES_HISTORY TEXT,PLANTING_PLAN_GPLANTING_TXT_BUILD1 TEXT,TODAY TEXT,LOCATION_DATA_CA_TLOC_AD_DIVISION TEXT,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW TEXT,LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV TEXT,PLANTING_PLAN_GPLANTING_DAREA_PLANTING TEXT,GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR_RAW TEXT,START TEXT,GTRTS_PIT_DIGGING_DIGGING_YEAR_RAW TEXT,TODAY_RAW TEXT,APPROVED TEXT)`,
          [],
          () => {
            console.log('sufal192020_core table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching sufal192020_core data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_core_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_core`, // Query the sufal192020_core table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying sufal192020_core`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_core_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_core`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from sufal192020_core:', resultSet);

          try {
            await sufal192020_core_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from sufal192020_core`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_core_create = sufal192020_core => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert sufal192020_core
      tx.executeSql(
        `INSERT INTO sufal192020_core (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_MODEL_VERSION,_UI_VERSION,_IS_COMPLETE,_SUBMISSION_DATE,_MARKED_AS_COMPLETE_DATE,REG_AVG_SEEDLING_ALL_PLOTS,GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR,PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NAME_CAR,PLANTING_PLAN_GPLANTING_BNURSERY,LOCATION_DATA_CA_TLOC_AD_DISTRICT,GUSER_SURVEY_TYPE,GTRTS_LAYOUT_LAYOUT_YEAR_RAW,GTRTS_PLANTING_PLANTING_YEAR,MAN_AFF_CLAY_LAYER,GUSER_REASON_4_CHANGE,GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR_RAW,PLANTING_PLAN_GPLANTING_SPACING,PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LAT,REGIN_NOTE_GENERATED_NOTE_NAME_107,REGIN_NOTE_GENERATED_NOTE_NAME_106,REGIN_NOTE_GENERATED_NOTE_NAME_105,INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_OTHERS,GTRTS_OTHER_TREATMENT_OTHER_YEAR,PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB,REG_AVG_SEEDLING_PER_HA_ALL_PLOTS,LOCATION_DATA_CA_UNION,SUBSCRIBERID,PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_MO_NO,GUSER_PREVIOUS_RECORD,GTRTS_PLANTING_PLAN
TING_YEAR_RAW,PLANTING_PLAN_GPLANTING_GNURSERY_NURS_NOTES,GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW,DEVICEID,INTERVENTION_DETAILS_TLOC_PLANT_YEAR,PLANTING_PLAN_GPLANTING_GNURSERY_TOTNURSEEDLINGS,GTRTS_PLANTATION_SITE_YEAR,GUSER_TUSER_CELL,PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ACC,PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_152,PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_151,MAN_AFF_WIND_DIR,GTRTS_NUERSERY_RAISING_NURSERY_YEAR,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR,PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_EAST_NUR,PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB_RAW,GTRTS_COMPOST_COMPOST_YEAR_RAW,SIMSERIAL,MAN_AFF_WAVE_DIR,GUSER_DCOLLECTION_RAW,PLANTING_PLAN_GPLANTING_MAX_SEEDLINGS,GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED,GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR,ALLPATCHES,GSITE_ECOLOGICAL_ATTRIBUTES_SF_PROG,CHECKED_BY,LOCATION_DATA_FOREST_AD_TLOC_FD_CIR,GENERATED_NOTE_NAME_62,GSITE_ECOLOGICAL_ATTRIBUTES_HIST_OTHER,MAN_AFF_FACING_ISLAND,LOCATION_DATA_TLOCAT
ION,GUSER_TUSER,PLANTING_PLAN_GPLANTING_GNURSERY_SEEDLING_SUM,GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW,INTERVENTION_DETAILS_TYPE_PLANT_PATCHES_PLANT,INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_TYPE,GTRTS_PLANTATION_SITE_YEAR_RAW,LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR,ECOZONE,LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK,PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_NORTH_NUR,REGIN_NOTE_REGEN_NOTES,MAN_AFF_PIONEERS_SP,GTRTS_CLEANING_CUTTING_CUTTING_YEAR,LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION,GTRTS_COMPOST_COMPOST_YEAR,LOCATION_DATA_FOREST_AD_TLOC_FD_CAMP,GUSER_DCOLLECTION,CHECKED,GTRTS_CLEANING_CUTTING_CUTTING_YEAR_RAW,GTRTS_PIT_DIGGING_DIGGING_YEAR,END_RAW,LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE,OVERALLNOTES,INTERVENTION_DETAILS_TYPE_PLANT_AREA_ACIVITY,GTRTS_VACANCY_FILLING_FILLING_YEAR_RAW,PLANTING_PLAN_BPLANTING,PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LNG,GTRTS_LAYOUT_LAYOUT_YEAR,INTERVENTION_DETAILS_LLOC_PLANT_AREA,TINTERVENTION,REG_PLOT_NO,PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE
_2,END,PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE_1,PLANTING_PLAN_GPLANTING_GNURSERY_TPOLYTYPE_NUR,INTERVENTION_DETAILS_TYPE_PLANT_SEEDING_PLANT,PHONENUMBER,MAN_AFF_FACING_DIR,GSITE_ECOLOGICAL_ATTRIBUTES_LAND_COV_DESC,START_RAW,LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE,GTRTS_VACANCY_FILLING_FILLING_YEAR,META_INSTANCE_ID,PLANTING_PLAN_GPLANTING_SEEDLINGS_PER_HA,GSITE_ECOLOGICAL_ATTRIBUTES_TLANDCOVERCLASS,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT,PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_NID,PLANTING_PLAN_GPLANTING_TXT_BUILD2,PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ALT,LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT,GSITE_ECOLOGICAL_ATTRIBUTES_HISTORY,PLANTING_PLAN_GPLANTING_TXT_BUILD1,TODAY,LOCATION_DATA_CA_TLOC_AD_DIVISION,GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW,LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV,PLANTING_PLAN_GPLANTING_DAREA_PLANTING,GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR_RAW,START,GTRTS_PIT_DIGGING_DIGGING_YEAR_RAW,TODAY_RAW,APPROVED) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          sufal192020_core._URI || null,
          sufal192020_core._CREATOR_URI_USER || null,
          sufal192020_core._CREATION_DATE || null,
          sufal192020_core._LAST_UPDATE_URI_USER || null,
          sufal192020_core._LAST_UPDATE_DATE || null,
          sufal192020_core._MODEL_VERSION || null,
          sufal192020_core._UI_VERSION || null,
          sufal192020_core._IS_COMPLETE || null,
          sufal192020_core._SUBMISSION_DATE || null,
          sufal192020_core._MARKED_AS_COMPLETE_DATE || null,
          sufal192020_core.REG_AVG_SEEDLING_ALL_PLOTS || null,
          sufal192020_core.GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NAME_CAR ||
            null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_BNURSERY || null,
          sufal192020_core.LOCATION_DATA_CA_TLOC_AD_DISTRICT || null,
          sufal192020_core.GUSER_SURVEY_TYPE || null,
          sufal192020_core.GTRTS_LAYOUT_LAYOUT_YEAR_RAW || null,
          sufal192020_core.GTRTS_PLANTING_PLANTING_YEAR || null,
          sufal192020_core.MAN_AFF_CLAY_LAYER || null,
          sufal192020_core.GUSER_REASON_4_CHANGE || null,
          sufal192020_core.GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR_RAW || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_SPACING || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LAT ||
            null,
          sufal192020_core.REGIN_NOTE_GENERATED_NOTE_NAME_107 || null,
          sufal192020_core.REGIN_NOTE_GENERATED_NOTE_NAME_106 || null,
          sufal192020_core.REGIN_NOTE_GENERATED_NOTE_NAME_105 || null,
          sufal192020_core.INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_OTHERS ||
            null,
          sufal192020_core.GTRTS_OTHER_TREATMENT_OTHER_YEAR || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB ||
            null,
          sufal192020_core.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS || null,
          sufal192020_core.LOCATION_DATA_CA_UNION || null,
          sufal192020_core.SUBSCRIBERID || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_MO_NO ||
            null,
          sufal192020_core.GUSER_PREVIOUS_RECORD || null,
          sufal192020_core.GTRTS_PLANTING_PLANTING_YEAR_RAW || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_NURS_NOTES || null,
          sufal192020_core.GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW || null,
          sufal192020_core.DEVICEID || null,
          sufal192020_core.INTERVENTION_DETAILS_TLOC_PLANT_YEAR || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_TOTNURSEEDLINGS ||
            null,
          sufal192020_core.GTRTS_PLANTATION_SITE_YEAR || null,
          sufal192020_core.GUSER_TUSER_CELL || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ACC ||
            null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_152 ||
            null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_151 ||
            null,
          sufal192020_core.MAN_AFF_WIND_DIR || null,
          sufal192020_core.GTRTS_NUERSERY_RAISING_NURSERY_YEAR || null,
          sufal192020_core.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_EAST_NUR ||
            null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB_RAW ||
            null,
          sufal192020_core.GTRTS_COMPOST_COMPOST_YEAR_RAW || null,
          sufal192020_core.SIMSERIAL || null,
          sufal192020_core.MAN_AFF_WAVE_DIR || null,
          sufal192020_core.GUSER_DCOLLECTION_RAW || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_MAX_SEEDLINGS || null,
          sufal192020_core.GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED || null,
          sufal192020_core.GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR || null,
          sufal192020_core.ALLPATCHES || null,
          sufal192020_core.GSITE_ECOLOGICAL_ATTRIBUTES_SF_PROG || null,
          sufal192020_core.CHECKED_BY || null,
          sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_FD_CIR || null,
          sufal192020_core.GENERATED_NOTE_NAME_62 || null,
          sufal192020_core.GSITE_ECOLOGICAL_ATTRIBUTES_HIST_OTHER || null,
          sufal192020_core.MAN_AFF_FACING_ISLAND || null,
          sufal192020_core.LOCATION_DATA_TLOCATION || null,
          sufal192020_core.GUSER_TUSER || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_SEEDLING_SUM ||
            null,
          sufal192020_core.GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW || null,
          sufal192020_core.INTERVENTION_DETAILS_TYPE_PLANT_PATCHES_PLANT ||
            null,
          sufal192020_core.INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_TYPE ||
            null,
          sufal192020_core.GTRTS_PLANTATION_SITE_YEAR_RAW || null,
          sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR || null,
          sufal192020_core.ECOZONE || null,
          sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_NORTH_NUR ||
            null,
          sufal192020_core.REGIN_NOTE_REGEN_NOTES || null,
          sufal192020_core.MAN_AFF_PIONEERS_SP || null,
          sufal192020_core.GTRTS_CLEANING_CUTTING_CUTTING_YEAR || null,
          sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION || null,
          sufal192020_core.GTRTS_COMPOST_COMPOST_YEAR || null,
          sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_FD_CAMP || null,
          sufal192020_core.GUSER_DCOLLECTION || null,
          sufal192020_core.CHECKED || null,
          sufal192020_core.GTRTS_CLEANING_CUTTING_CUTTING_YEAR_RAW || null,
          sufal192020_core.GTRTS_PIT_DIGGING_DIGGING_YEAR || null,
          sufal192020_core.END_RAW || null,
          sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE || null,
          sufal192020_core.OVERALLNOTES || null,
          sufal192020_core.INTERVENTION_DETAILS_TYPE_PLANT_AREA_ACIVITY || null,
          sufal192020_core.GTRTS_VACANCY_FILLING_FILLING_YEAR_RAW || null,
          sufal192020_core.PLANTING_PLAN_BPLANTING || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LNG ||
            null,
          sufal192020_core.GTRTS_LAYOUT_LAYOUT_YEAR || null,
          sufal192020_core.INTERVENTION_DETAILS_LLOC_PLANT_AREA || null,
          sufal192020_core.TINTERVENTION || null,
          sufal192020_core.REG_PLOT_NO || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE_2 || null,
          sufal192020_core.END || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE_1 || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_TPOLYTYPE_NUR ||
            null,
          sufal192020_core.INTERVENTION_DETAILS_TYPE_PLANT_SEEDING_PLANT ||
            null,
          sufal192020_core.PHONENUMBER || null,
          sufal192020_core.MAN_AFF_FACING_DIR || null,
          sufal192020_core.GSITE_ECOLOGICAL_ATTRIBUTES_LAND_COV_DESC || null,
          sufal192020_core.START_RAW || null,
          sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE || null,
          sufal192020_core.GTRTS_VACANCY_FILLING_FILLING_YEAR || null,
          sufal192020_core.META_INSTANCE_ID || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_SEEDLINGS_PER_HA || null,
          sufal192020_core.GSITE_ECOLOGICAL_ATTRIBUTES_TLANDCOVERCLASS || null,
          sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_NID ||
            null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_TXT_BUILD2 || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ALT ||
            null,
          sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT || null,
          sufal192020_core.GSITE_ECOLOGICAL_ATTRIBUTES_HISTORY || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_TXT_BUILD1 || null,
          sufal192020_core.TODAY || null,
          sufal192020_core.LOCATION_DATA_CA_TLOC_AD_DIVISION || null,
          sufal192020_core.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW || null,
          sufal192020_core.LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV || null,
          sufal192020_core.PLANTING_PLAN_GPLANTING_DAREA_PLANTING || null,
          sufal192020_core.GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR_RAW ||
            null,
          sufal192020_core.START || null,
          sufal192020_core.GTRTS_PIT_DIGGING_DIGGING_YEAR_RAW || null,
          sufal192020_core.TODAY_RAW || null,
          sufal192020_core.APPROVED || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gregen_reg_cen_to_e_blb_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_e_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_e_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_e_blb`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_e_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_e_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_e_blb table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gregen_reg_cen_to_e_blb => {
          tx.executeSql(
            `INSERT INTO sufal192020_gregen_reg_cen_to_e_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gregen_reg_cen_to_e_blb._URI || null,
              sufal192020_gregen_reg_cen_to_e_blb._CREATOR_URI_USER || null,
              sufal192020_gregen_reg_cen_to_e_blb._CREATION_DATE || null,
              sufal192020_gregen_reg_cen_to_e_blb._LAST_UPDATE_URI_USER || null,
              sufal192020_gregen_reg_cen_to_e_blb._LAST_UPDATE_DATE || null,
              sufal192020_gregen_reg_cen_to_e_blb._TOP_LEVEL_AURI || null,
              sufal192020_gregen_reg_cen_to_e_blb.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gregen_reg_cen_to_e_blb data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gregen_reg_cen_to_e_blb data',
                error,
                sufal192020_gregen_reg_cen_to_e_blb,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_e_blb data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gregen_reg_cen_to_e_blb_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_e_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_e_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_e_blb`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_e_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_e_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_e_blb table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_e_blb data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gregen_reg_cen_to_e_blb_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gregen_reg_cen_to_e_blb`, // Query the sufal192020_gregen_reg_cen_to_e_blb table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gregen_reg_cen_to_e_blb`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gregen_reg_cen_to_e_blb_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gregen_reg_cen_to_e_blb`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gregen_reg_cen_to_e_blb:',
            resultSet,
          );

          try {
            await sufal192020_gregen_reg_cen_to_e_blb_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gregen_reg_cen_to_e_blb`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gregen_reg_cen_to_e_blb_create =
  sufal192020_gregen_reg_cen_to_e_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gregen_reg_cen_to_e_blb
        tx.executeSql(
          `INSERT INTO sufal192020_gregen_reg_cen_to_e_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gregen_reg_cen_to_e_blb._URI || null,
            sufal192020_gregen_reg_cen_to_e_blb._CREATOR_URI_USER || null,
            sufal192020_gregen_reg_cen_to_e_blb._CREATION_DATE || null,
            sufal192020_gregen_reg_cen_to_e_blb._LAST_UPDATE_URI_USER || null,
            sufal192020_gregen_reg_cen_to_e_blb._LAST_UPDATE_DATE || null,
            sufal192020_gregen_reg_cen_to_e_blb._TOP_LEVEL_AURI || null,
            sufal192020_gregen_reg_cen_to_e_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gregen_reg_cen_to_e_bn_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_e_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_e_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_e_bn`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_e_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_e_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_e_bn table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gregen_reg_cen_to_e_bn => {
          tx.executeSql(
            `INSERT INTO sufal192020_gregen_reg_cen_to_e_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gregen_reg_cen_to_e_bn._URI || null,
              sufal192020_gregen_reg_cen_to_e_bn._CREATOR_URI_USER || null,
              sufal192020_gregen_reg_cen_to_e_bn._CREATION_DATE || null,
              sufal192020_gregen_reg_cen_to_e_bn._LAST_UPDATE_URI_USER || null,
              sufal192020_gregen_reg_cen_to_e_bn._LAST_UPDATE_DATE || null,
              sufal192020_gregen_reg_cen_to_e_bn._PARENT_AURI || null,
              sufal192020_gregen_reg_cen_to_e_bn._ORDINAL_NUMBER || null,
              sufal192020_gregen_reg_cen_to_e_bn._TOP_LEVEL_AURI || null,
              sufal192020_gregen_reg_cen_to_e_bn.UNROOTED_FILE_PATH || null,
              sufal192020_gregen_reg_cen_to_e_bn.CONTENT_TYPE || null,
              sufal192020_gregen_reg_cen_to_e_bn.CONTENT_LENGTH || null,
              sufal192020_gregen_reg_cen_to_e_bn.CONTENT_HASH || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gregen_reg_cen_to_e_bn data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gregen_reg_cen_to_e_bn data',
                error,
                sufal192020_gregen_reg_cen_to_e_bn,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_e_bn data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gregen_reg_cen_to_e_bn_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_e_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_e_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_e_bn`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_e_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_e_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_e_bn table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_e_bn data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gregen_reg_cen_to_e_bn_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gregen_reg_cen_to_e_bn`, // Query the sufal192020_gregen_reg_cen_to_e_bn table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gregen_reg_cen_to_e_bn`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gregen_reg_cen_to_e_bn_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gregen_reg_cen_to_e_bn`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gregen_reg_cen_to_e_bn:',
            resultSet,
          );

          try {
            await sufal192020_gregen_reg_cen_to_e_bn_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gregen_reg_cen_to_e_bn`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gregen_reg_cen_to_e_bn_create =
  sufal192020_gregen_reg_cen_to_e_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gregen_reg_cen_to_e_bn
        tx.executeSql(
          `INSERT INTO sufal192020_gregen_reg_cen_to_e_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gregen_reg_cen_to_e_bn._URI || null,
            sufal192020_gregen_reg_cen_to_e_bn._CREATOR_URI_USER || null,
            sufal192020_gregen_reg_cen_to_e_bn._CREATION_DATE || null,
            sufal192020_gregen_reg_cen_to_e_bn._LAST_UPDATE_URI_USER || null,
            sufal192020_gregen_reg_cen_to_e_bn._LAST_UPDATE_DATE || null,
            sufal192020_gregen_reg_cen_to_e_bn._PARENT_AURI || null,
            sufal192020_gregen_reg_cen_to_e_bn._ORDINAL_NUMBER || null,
            sufal192020_gregen_reg_cen_to_e_bn._TOP_LEVEL_AURI || null,
            sufal192020_gregen_reg_cen_to_e_bn.UNROOTED_FILE_PATH || null,
            sufal192020_gregen_reg_cen_to_e_bn.CONTENT_TYPE || null,
            sufal192020_gregen_reg_cen_to_e_bn.CONTENT_LENGTH || null,
            sufal192020_gregen_reg_cen_to_e_bn.CONTENT_HASH || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gregen_reg_cen_to_e_ref_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_e_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_e_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_e_ref`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_e_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_e_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_e_ref table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gregen_reg_cen_to_e_ref => {
          tx.executeSql(
            `INSERT INTO sufal192020_gregen_reg_cen_to_e_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gregen_reg_cen_to_e_ref._URI || null,
              sufal192020_gregen_reg_cen_to_e_ref._CREATOR_URI_USER || null,
              sufal192020_gregen_reg_cen_to_e_ref._CREATION_DATE || null,
              sufal192020_gregen_reg_cen_to_e_ref._LAST_UPDATE_URI_USER || null,
              sufal192020_gregen_reg_cen_to_e_ref._LAST_UPDATE_DATE || null,
              sufal192020_gregen_reg_cen_to_e_ref._DOM_AURI || null,
              sufal192020_gregen_reg_cen_to_e_ref._SUB_AURI || null,
              sufal192020_gregen_reg_cen_to_e_ref._TOP_LEVEL_AURI || null,
              sufal192020_gregen_reg_cen_to_e_ref.PART || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gregen_reg_cen_to_e_ref data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gregen_reg_cen_to_e_ref data',
                error,
                sufal192020_gregen_reg_cen_to_e_ref,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_e_ref data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gregen_reg_cen_to_e_ref_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_e_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_e_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_e_ref`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_e_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_e_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_e_ref table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_e_ref data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gregen_reg_cen_to_e_ref_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gregen_reg_cen_to_e_ref`, // Query the sufal192020_gregen_reg_cen_to_e_ref table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gregen_reg_cen_to_e_ref`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gregen_reg_cen_to_e_ref_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gregen_reg_cen_to_e_ref`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gregen_reg_cen_to_e_ref:',
            resultSet,
          );

          try {
            await sufal192020_gregen_reg_cen_to_e_ref_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gregen_reg_cen_to_e_ref`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gregen_reg_cen_to_e_ref_create =
  sufal192020_gregen_reg_cen_to_e_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gregen_reg_cen_to_e_ref
        tx.executeSql(
          `INSERT INTO sufal192020_gregen_reg_cen_to_e_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gregen_reg_cen_to_e_ref._URI || null,
            sufal192020_gregen_reg_cen_to_e_ref._CREATOR_URI_USER || null,
            sufal192020_gregen_reg_cen_to_e_ref._CREATION_DATE || null,
            sufal192020_gregen_reg_cen_to_e_ref._LAST_UPDATE_URI_USER || null,
            sufal192020_gregen_reg_cen_to_e_ref._LAST_UPDATE_DATE || null,
            sufal192020_gregen_reg_cen_to_e_ref._DOM_AURI || null,
            sufal192020_gregen_reg_cen_to_e_ref._SUB_AURI || null,
            sufal192020_gregen_reg_cen_to_e_ref._TOP_LEVEL_AURI || null,
            sufal192020_gregen_reg_cen_to_e_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gregen_reg_cen_to_n_blb_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_n_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_n_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_n_blb`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_n_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_n_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_n_blb table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gregen_reg_cen_to_n_blb => {
          tx.executeSql(
            `INSERT INTO sufal192020_gregen_reg_cen_to_n_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gregen_reg_cen_to_n_blb._URI || null,
              sufal192020_gregen_reg_cen_to_n_blb._CREATOR_URI_USER || null,
              sufal192020_gregen_reg_cen_to_n_blb._CREATION_DATE || null,
              sufal192020_gregen_reg_cen_to_n_blb._LAST_UPDATE_URI_USER || null,
              sufal192020_gregen_reg_cen_to_n_blb._LAST_UPDATE_DATE || null,
              sufal192020_gregen_reg_cen_to_n_blb._TOP_LEVEL_AURI || null,
              sufal192020_gregen_reg_cen_to_n_blb.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gregen_reg_cen_to_n_blb data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gregen_reg_cen_to_n_blb data',
                error,
                sufal192020_gregen_reg_cen_to_n_blb,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_n_blb data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gregen_reg_cen_to_n_blb_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_n_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_n_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_n_blb`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_n_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_n_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_n_blb table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_n_blb data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gregen_reg_cen_to_n_blb_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gregen_reg_cen_to_n_blb`, // Query the sufal192020_gregen_reg_cen_to_n_blb table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gregen_reg_cen_to_n_blb`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gregen_reg_cen_to_n_blb_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gregen_reg_cen_to_n_blb`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gregen_reg_cen_to_n_blb:',
            resultSet,
          );

          try {
            await sufal192020_gregen_reg_cen_to_n_blb_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gregen_reg_cen_to_n_blb`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gregen_reg_cen_to_n_blb_create =
  sufal192020_gregen_reg_cen_to_n_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gregen_reg_cen_to_n_blb
        tx.executeSql(
          `INSERT INTO sufal192020_gregen_reg_cen_to_n_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gregen_reg_cen_to_n_blb._URI || null,
            sufal192020_gregen_reg_cen_to_n_blb._CREATOR_URI_USER || null,
            sufal192020_gregen_reg_cen_to_n_blb._CREATION_DATE || null,
            sufal192020_gregen_reg_cen_to_n_blb._LAST_UPDATE_URI_USER || null,
            sufal192020_gregen_reg_cen_to_n_blb._LAST_UPDATE_DATE || null,
            sufal192020_gregen_reg_cen_to_n_blb._TOP_LEVEL_AURI || null,
            sufal192020_gregen_reg_cen_to_n_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gregen_reg_cen_to_n_bn_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_n_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_n_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_n_bn`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_n_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_n_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_n_bn table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gregen_reg_cen_to_n_bn => {
          tx.executeSql(
            `INSERT INTO sufal192020_gregen_reg_cen_to_n_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gregen_reg_cen_to_n_bn._URI || null,
              sufal192020_gregen_reg_cen_to_n_bn._CREATOR_URI_USER || null,
              sufal192020_gregen_reg_cen_to_n_bn._CREATION_DATE || null,
              sufal192020_gregen_reg_cen_to_n_bn._LAST_UPDATE_URI_USER || null,
              sufal192020_gregen_reg_cen_to_n_bn._LAST_UPDATE_DATE || null,
              sufal192020_gregen_reg_cen_to_n_bn._PARENT_AURI || null,
              sufal192020_gregen_reg_cen_to_n_bn._ORDINAL_NUMBER || null,
              sufal192020_gregen_reg_cen_to_n_bn._TOP_LEVEL_AURI || null,
              sufal192020_gregen_reg_cen_to_n_bn.UNROOTED_FILE_PATH || null,
              sufal192020_gregen_reg_cen_to_n_bn.CONTENT_TYPE || null,
              sufal192020_gregen_reg_cen_to_n_bn.CONTENT_LENGTH || null,
              sufal192020_gregen_reg_cen_to_n_bn.CONTENT_HASH || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gregen_reg_cen_to_n_bn data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gregen_reg_cen_to_n_bn data',
                error,
                sufal192020_gregen_reg_cen_to_n_bn,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_n_bn data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gregen_reg_cen_to_n_bn_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_n_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_n_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_n_bn`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_n_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_n_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_n_bn table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_n_bn data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gregen_reg_cen_to_n_bn_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gregen_reg_cen_to_n_bn`, // Query the sufal192020_gregen_reg_cen_to_n_bn table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gregen_reg_cen_to_n_bn`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gregen_reg_cen_to_n_bn_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gregen_reg_cen_to_n_bn`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gregen_reg_cen_to_n_bn:',
            resultSet,
          );

          try {
            await sufal192020_gregen_reg_cen_to_n_bn_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gregen_reg_cen_to_n_bn`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gregen_reg_cen_to_n_bn_create =
  sufal192020_gregen_reg_cen_to_n_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gregen_reg_cen_to_n_bn
        tx.executeSql(
          `INSERT INTO sufal192020_gregen_reg_cen_to_n_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gregen_reg_cen_to_n_bn._URI || null,
            sufal192020_gregen_reg_cen_to_n_bn._CREATOR_URI_USER || null,
            sufal192020_gregen_reg_cen_to_n_bn._CREATION_DATE || null,
            sufal192020_gregen_reg_cen_to_n_bn._LAST_UPDATE_URI_USER || null,
            sufal192020_gregen_reg_cen_to_n_bn._LAST_UPDATE_DATE || null,
            sufal192020_gregen_reg_cen_to_n_bn._PARENT_AURI || null,
            sufal192020_gregen_reg_cen_to_n_bn._ORDINAL_NUMBER || null,
            sufal192020_gregen_reg_cen_to_n_bn._TOP_LEVEL_AURI || null,
            sufal192020_gregen_reg_cen_to_n_bn.UNROOTED_FILE_PATH || null,
            sufal192020_gregen_reg_cen_to_n_bn.CONTENT_TYPE || null,
            sufal192020_gregen_reg_cen_to_n_bn.CONTENT_LENGTH || null,
            sufal192020_gregen_reg_cen_to_n_bn.CONTENT_HASH || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gregen_reg_cen_to_n_ref_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_n_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_n_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_n_ref`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_n_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_n_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_n_ref table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gregen_reg_cen_to_n_ref => {
          tx.executeSql(
            `INSERT INTO sufal192020_gregen_reg_cen_to_n_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gregen_reg_cen_to_n_ref._URI || null,
              sufal192020_gregen_reg_cen_to_n_ref._CREATOR_URI_USER || null,
              sufal192020_gregen_reg_cen_to_n_ref._CREATION_DATE || null,
              sufal192020_gregen_reg_cen_to_n_ref._LAST_UPDATE_URI_USER || null,
              sufal192020_gregen_reg_cen_to_n_ref._LAST_UPDATE_DATE || null,
              sufal192020_gregen_reg_cen_to_n_ref._DOM_AURI || null,
              sufal192020_gregen_reg_cen_to_n_ref._SUB_AURI || null,
              sufal192020_gregen_reg_cen_to_n_ref._TOP_LEVEL_AURI || null,
              sufal192020_gregen_reg_cen_to_n_ref.PART || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gregen_reg_cen_to_n_ref data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gregen_reg_cen_to_n_ref data',
                error,
                sufal192020_gregen_reg_cen_to_n_ref,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_n_ref data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gregen_reg_cen_to_n_ref_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_n_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_n_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_n_ref`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_n_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_n_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_n_ref table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_n_ref data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gregen_reg_cen_to_n_ref_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gregen_reg_cen_to_n_ref`, // Query the sufal192020_gregen_reg_cen_to_n_ref table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gregen_reg_cen_to_n_ref`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gregen_reg_cen_to_n_ref_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gregen_reg_cen_to_n_ref`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gregen_reg_cen_to_n_ref:',
            resultSet,
          );

          try {
            await sufal192020_gregen_reg_cen_to_n_ref_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gregen_reg_cen_to_n_ref`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gregen_reg_cen_to_n_ref_create =
  sufal192020_gregen_reg_cen_to_n_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gregen_reg_cen_to_n_ref
        tx.executeSql(
          `INSERT INTO sufal192020_gregen_reg_cen_to_n_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gregen_reg_cen_to_n_ref._URI || null,
            sufal192020_gregen_reg_cen_to_n_ref._CREATOR_URI_USER || null,
            sufal192020_gregen_reg_cen_to_n_ref._CREATION_DATE || null,
            sufal192020_gregen_reg_cen_to_n_ref._LAST_UPDATE_URI_USER || null,
            sufal192020_gregen_reg_cen_to_n_ref._LAST_UPDATE_DATE || null,
            sufal192020_gregen_reg_cen_to_n_ref._DOM_AURI || null,
            sufal192020_gregen_reg_cen_to_n_ref._SUB_AURI || null,
            sufal192020_gregen_reg_cen_to_n_ref._TOP_LEVEL_AURI || null,
            sufal192020_gregen_reg_cen_to_n_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gregen_reg_cen_to_s_blb_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_s_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_s_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_s_blb`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_s_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_s_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_s_blb table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gregen_reg_cen_to_s_blb => {
          tx.executeSql(
            `INSERT INTO sufal192020_gregen_reg_cen_to_s_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gregen_reg_cen_to_s_blb._URI || null,
              sufal192020_gregen_reg_cen_to_s_blb._CREATOR_URI_USER || null,
              sufal192020_gregen_reg_cen_to_s_blb._CREATION_DATE || null,
              sufal192020_gregen_reg_cen_to_s_blb._LAST_UPDATE_URI_USER || null,
              sufal192020_gregen_reg_cen_to_s_blb._LAST_UPDATE_DATE || null,
              sufal192020_gregen_reg_cen_to_s_blb._TOP_LEVEL_AURI || null,
              sufal192020_gregen_reg_cen_to_s_blb.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gregen_reg_cen_to_s_blb data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gregen_reg_cen_to_s_blb data',
                error,
                sufal192020_gregen_reg_cen_to_s_blb,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_s_blb data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gregen_reg_cen_to_s_blb_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_s_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_s_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_s_blb`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_s_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_s_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_s_blb table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_s_blb data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gregen_reg_cen_to_s_blb_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gregen_reg_cen_to_s_blb`, // Query the sufal192020_gregen_reg_cen_to_s_blb table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gregen_reg_cen_to_s_blb`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gregen_reg_cen_to_s_blb_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gregen_reg_cen_to_s_blb`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gregen_reg_cen_to_s_blb:',
            resultSet,
          );

          try {
            await sufal192020_gregen_reg_cen_to_s_blb_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gregen_reg_cen_to_s_blb`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gregen_reg_cen_to_s_blb_create =
  sufal192020_gregen_reg_cen_to_s_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gregen_reg_cen_to_s_blb
        tx.executeSql(
          `INSERT INTO sufal192020_gregen_reg_cen_to_s_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gregen_reg_cen_to_s_blb._URI || null,
            sufal192020_gregen_reg_cen_to_s_blb._CREATOR_URI_USER || null,
            sufal192020_gregen_reg_cen_to_s_blb._CREATION_DATE || null,
            sufal192020_gregen_reg_cen_to_s_blb._LAST_UPDATE_URI_USER || null,
            sufal192020_gregen_reg_cen_to_s_blb._LAST_UPDATE_DATE || null,
            sufal192020_gregen_reg_cen_to_s_blb._TOP_LEVEL_AURI || null,
            sufal192020_gregen_reg_cen_to_s_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gregen_reg_cen_to_s_bn_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_s_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_s_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_s_bn`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_s_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_s_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_s_bn table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gregen_reg_cen_to_s_bn => {
          tx.executeSql(
            `INSERT INTO sufal192020_gregen_reg_cen_to_s_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gregen_reg_cen_to_s_bn._URI || null,
              sufal192020_gregen_reg_cen_to_s_bn._CREATOR_URI_USER || null,
              sufal192020_gregen_reg_cen_to_s_bn._CREATION_DATE || null,
              sufal192020_gregen_reg_cen_to_s_bn._LAST_UPDATE_URI_USER || null,
              sufal192020_gregen_reg_cen_to_s_bn._LAST_UPDATE_DATE || null,
              sufal192020_gregen_reg_cen_to_s_bn._PARENT_AURI || null,
              sufal192020_gregen_reg_cen_to_s_bn._ORDINAL_NUMBER || null,
              sufal192020_gregen_reg_cen_to_s_bn._TOP_LEVEL_AURI || null,
              sufal192020_gregen_reg_cen_to_s_bn.UNROOTED_FILE_PATH || null,
              sufal192020_gregen_reg_cen_to_s_bn.CONTENT_TYPE || null,
              sufal192020_gregen_reg_cen_to_s_bn.CONTENT_LENGTH || null,
              sufal192020_gregen_reg_cen_to_s_bn.CONTENT_HASH || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gregen_reg_cen_to_s_bn data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gregen_reg_cen_to_s_bn data',
                error,
                sufal192020_gregen_reg_cen_to_s_bn,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_s_bn data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gregen_reg_cen_to_s_bn_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_s_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_s_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_s_bn`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_s_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_s_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_s_bn table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_s_bn data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gregen_reg_cen_to_s_bn_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gregen_reg_cen_to_s_bn`, // Query the sufal192020_gregen_reg_cen_to_s_bn table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gregen_reg_cen_to_s_bn`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gregen_reg_cen_to_s_bn_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gregen_reg_cen_to_s_bn`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gregen_reg_cen_to_s_bn:',
            resultSet,
          );

          try {
            await sufal192020_gregen_reg_cen_to_s_bn_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gregen_reg_cen_to_s_bn`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gregen_reg_cen_to_s_bn_create =
  sufal192020_gregen_reg_cen_to_s_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gregen_reg_cen_to_s_bn
        tx.executeSql(
          `INSERT INTO sufal192020_gregen_reg_cen_to_s_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gregen_reg_cen_to_s_bn._URI || null,
            sufal192020_gregen_reg_cen_to_s_bn._CREATOR_URI_USER || null,
            sufal192020_gregen_reg_cen_to_s_bn._CREATION_DATE || null,
            sufal192020_gregen_reg_cen_to_s_bn._LAST_UPDATE_URI_USER || null,
            sufal192020_gregen_reg_cen_to_s_bn._LAST_UPDATE_DATE || null,
            sufal192020_gregen_reg_cen_to_s_bn._PARENT_AURI || null,
            sufal192020_gregen_reg_cen_to_s_bn._ORDINAL_NUMBER || null,
            sufal192020_gregen_reg_cen_to_s_bn._TOP_LEVEL_AURI || null,
            sufal192020_gregen_reg_cen_to_s_bn.UNROOTED_FILE_PATH || null,
            sufal192020_gregen_reg_cen_to_s_bn.CONTENT_TYPE || null,
            sufal192020_gregen_reg_cen_to_s_bn.CONTENT_LENGTH || null,
            sufal192020_gregen_reg_cen_to_s_bn.CONTENT_HASH || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gregen_reg_cen_to_s_ref_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_s_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_s_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_s_ref`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_s_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_s_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_s_ref table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gregen_reg_cen_to_s_ref => {
          tx.executeSql(
            `INSERT INTO sufal192020_gregen_reg_cen_to_s_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gregen_reg_cen_to_s_ref._URI || null,
              sufal192020_gregen_reg_cen_to_s_ref._CREATOR_URI_USER || null,
              sufal192020_gregen_reg_cen_to_s_ref._CREATION_DATE || null,
              sufal192020_gregen_reg_cen_to_s_ref._LAST_UPDATE_URI_USER || null,
              sufal192020_gregen_reg_cen_to_s_ref._LAST_UPDATE_DATE || null,
              sufal192020_gregen_reg_cen_to_s_ref._DOM_AURI || null,
              sufal192020_gregen_reg_cen_to_s_ref._SUB_AURI || null,
              sufal192020_gregen_reg_cen_to_s_ref._TOP_LEVEL_AURI || null,
              sufal192020_gregen_reg_cen_to_s_ref.PART || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gregen_reg_cen_to_s_ref data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gregen_reg_cen_to_s_ref data',
                error,
                sufal192020_gregen_reg_cen_to_s_ref,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_s_ref data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gregen_reg_cen_to_s_ref_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_s_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_s_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_s_ref`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_s_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_s_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_s_ref table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_s_ref data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gregen_reg_cen_to_s_ref_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gregen_reg_cen_to_s_ref`, // Query the sufal192020_gregen_reg_cen_to_s_ref table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gregen_reg_cen_to_s_ref`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gregen_reg_cen_to_s_ref_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gregen_reg_cen_to_s_ref`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gregen_reg_cen_to_s_ref:',
            resultSet,
          );

          try {
            await sufal192020_gregen_reg_cen_to_s_ref_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gregen_reg_cen_to_s_ref`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gregen_reg_cen_to_s_ref_create =
  sufal192020_gregen_reg_cen_to_s_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gregen_reg_cen_to_s_ref
        tx.executeSql(
          `INSERT INTO sufal192020_gregen_reg_cen_to_s_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gregen_reg_cen_to_s_ref._URI || null,
            sufal192020_gregen_reg_cen_to_s_ref._CREATOR_URI_USER || null,
            sufal192020_gregen_reg_cen_to_s_ref._CREATION_DATE || null,
            sufal192020_gregen_reg_cen_to_s_ref._LAST_UPDATE_URI_USER || null,
            sufal192020_gregen_reg_cen_to_s_ref._LAST_UPDATE_DATE || null,
            sufal192020_gregen_reg_cen_to_s_ref._DOM_AURI || null,
            sufal192020_gregen_reg_cen_to_s_ref._SUB_AURI || null,
            sufal192020_gregen_reg_cen_to_s_ref._TOP_LEVEL_AURI || null,
            sufal192020_gregen_reg_cen_to_s_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gregen_reg_cen_to_w_blb_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_w_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_w_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_w_blb`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_w_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_w_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_w_blb table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gregen_reg_cen_to_w_blb => {
          tx.executeSql(
            `INSERT INTO sufal192020_gregen_reg_cen_to_w_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gregen_reg_cen_to_w_blb._URI || null,
              sufal192020_gregen_reg_cen_to_w_blb._CREATOR_URI_USER || null,
              sufal192020_gregen_reg_cen_to_w_blb._CREATION_DATE || null,
              sufal192020_gregen_reg_cen_to_w_blb._LAST_UPDATE_URI_USER || null,
              sufal192020_gregen_reg_cen_to_w_blb._LAST_UPDATE_DATE || null,
              sufal192020_gregen_reg_cen_to_w_blb._TOP_LEVEL_AURI || null,
              sufal192020_gregen_reg_cen_to_w_blb.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gregen_reg_cen_to_w_blb data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gregen_reg_cen_to_w_blb data',
                error,
                sufal192020_gregen_reg_cen_to_w_blb,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_w_blb data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gregen_reg_cen_to_w_blb_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_reg_cen_to_w_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_reg_cen_to_w_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_reg_cen_to_w_blb`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_w_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_reg_cen_to_w_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_reg_cen_to_w_blb table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_reg_cen_to_w_blb data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gregen_reg_cen_to_w_blb_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gregen_reg_cen_to_w_blb`, // Query the sufal192020_gregen_reg_cen_to_w_blb table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gregen_reg_cen_to_w_blb`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gregen_reg_cen_to_w_blb_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gregen_reg_cen_to_w_blb`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gregen_reg_cen_to_w_blb:',
            resultSet,
          );

          try {
            await sufal192020_gregen_reg_cen_to_w_blb_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gregen_reg_cen_to_w_blb`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gregen_reg_cen_to_w_blb_create =
  sufal192020_gregen_reg_cen_to_w_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gregen_reg_cen_to_w_blb
        tx.executeSql(
          `INSERT INTO sufal192020_gregen_reg_cen_to_w_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gregen_reg_cen_to_w_blb._URI || null,
            sufal192020_gregen_reg_cen_to_w_blb._CREATOR_URI_USER || null,
            sufal192020_gregen_reg_cen_to_w_blb._CREATION_DATE || null,
            sufal192020_gregen_reg_cen_to_w_blb._LAST_UPDATE_URI_USER || null,
            sufal192020_gregen_reg_cen_to_w_blb._LAST_UPDATE_DATE || null,
            sufal192020_gregen_reg_cen_to_w_blb._TOP_LEVEL_AURI || null,
            sufal192020_gregen_reg_cen_to_w_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gregen_spp_regen_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_spp_regen?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_spp_regen items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_spp_regen`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_spp_regen table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_spp_regen (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,RSPP_NAME TEXT,RSPP_NR_NAT TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_spp_regen table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gregen_spp_regen => {
          tx.executeSql(
            `INSERT INTO sufal192020_gregen_spp_regen VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gregen_spp_regen._URI || null,
              sufal192020_gregen_spp_regen._CREATOR_URI_USER || null,
              sufal192020_gregen_spp_regen._CREATION_DATE || null,
              sufal192020_gregen_spp_regen._LAST_UPDATE_URI_USER || null,
              sufal192020_gregen_spp_regen._LAST_UPDATE_DATE || null,
              sufal192020_gregen_spp_regen._PARENT_AURI || null,
              sufal192020_gregen_spp_regen._ORDINAL_NUMBER || null,
              sufal192020_gregen_spp_regen._TOP_LEVEL_AURI || null,
              sufal192020_gregen_spp_regen.RSPP_NAME || null,
              sufal192020_gregen_spp_regen.RSPP_NR_NAT || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gregen_spp_regen data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gregen_spp_regen data',
                error,
                sufal192020_gregen_spp_regen,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_spp_regen data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gregen_spp_regen_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gregen_spp_regen?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gregen_spp_regen items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gregen_spp_regen`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_spp_regen table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gregen_spp_regen (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,RSPP_NAME TEXT,RSPP_NR_NAT TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gregen_spp_regen table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gregen_spp_regen data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gregen_spp_regen_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gregen_spp_regen`, // Query the sufal192020_gregen_spp_regen table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying sufal192020_gregen_spp_regen`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gregen_spp_regen_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gregen_spp_regen`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gregen_spp_regen:',
            resultSet,
          );

          try {
            await sufal192020_gregen_spp_regen_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gregen_spp_regen`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gregen_spp_regen_create =
  sufal192020_gregen_spp_regen => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gregen_spp_regen
        tx.executeSql(
          `INSERT INTO sufal192020_gregen_spp_regen (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,RSPP_NAME,RSPP_NR_NAT) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gregen_spp_regen._URI || null,
            sufal192020_gregen_spp_regen._CREATOR_URI_USER || null,
            sufal192020_gregen_spp_regen._CREATION_DATE || null,
            sufal192020_gregen_spp_regen._LAST_UPDATE_URI_USER || null,
            sufal192020_gregen_spp_regen._LAST_UPDATE_DATE || null,
            sufal192020_gregen_spp_regen._PARENT_AURI || null,
            sufal192020_gregen_spp_regen._ORDINAL_NUMBER || null,
            sufal192020_gregen_spp_regen._TOP_LEVEL_AURI || null,
            sufal192020_gregen_spp_regen.RSPP_NAME || null,
            sufal192020_gregen_spp_regen.RSPP_NR_NAT || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gr_regen_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gr_regen?token=${token}`,
    );
    const data = await response.json();
    console.log('Total sufal192020_gr_regen items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gr_regen`,
          [],
          () => {
            console.log('sufal192020_gr_regen table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gr_regen (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GREGEN_RSITEPOINT_ALT TEXT,REG_AVG_SEEDLING_PER_HA_PER_PLOT TEXT,GREGEN_REGEN_PLOT_NO TEXT,GREGEN_RSITEPOINT_ACC TEXT,GENERATED_NOTE_NAME_99 TEXT,GREGEN_RSITEPOINT_LNG TEXT,REG_AVG_SEEDLING_PER_PLOT TEXT,GREGEN_GRCOORDS_RE_RSITE_NORTH TEXT,GREGEN_RSITEPOINT_LAT TEXT,GREGEN_GRCOORDS_RE_RSITE_EAST TEXT,GREGEN_RRECORD_HOW TEXT)`,
          [],
          () => {
            console.log('sufal192020_gr_regen table created successfully');
          },
          reject,
        );

        data.forEach(sufal192020_gr_regen => {
          tx.executeSql(
            `INSERT INTO sufal192020_gr_regen VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gr_regen._URI || null,
              sufal192020_gr_regen._CREATOR_URI_USER || null,
              sufal192020_gr_regen._CREATION_DATE || null,
              sufal192020_gr_regen._LAST_UPDATE_URI_USER || null,
              sufal192020_gr_regen._LAST_UPDATE_DATE || null,
              sufal192020_gr_regen._PARENT_AURI || null,
              sufal192020_gr_regen._ORDINAL_NUMBER || null,
              sufal192020_gr_regen._TOP_LEVEL_AURI || null,
              sufal192020_gr_regen.GREGEN_RSITEPOINT_ALT || null,
              sufal192020_gr_regen.REG_AVG_SEEDLING_PER_HA_PER_PLOT || null,
              sufal192020_gr_regen.GREGEN_REGEN_PLOT_NO || null,
              sufal192020_gr_regen.GREGEN_RSITEPOINT_ACC || null,
              sufal192020_gr_regen.GENERATED_NOTE_NAME_99 || null,
              sufal192020_gr_regen.GREGEN_RSITEPOINT_LNG || null,
              sufal192020_gr_regen.REG_AVG_SEEDLING_PER_PLOT || null,
              sufal192020_gr_regen.GREGEN_GRCOORDS_RE_RSITE_NORTH || null,
              sufal192020_gr_regen.GREGEN_RSITEPOINT_LAT || null,
              sufal192020_gr_regen.GREGEN_GRCOORDS_RE_RSITE_EAST || null,
              sufal192020_gr_regen.GREGEN_RRECORD_HOW || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gr_regen data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gr_regen data',
                error,
                sufal192020_gr_regen,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching sufal192020_gr_regen data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gr_regen_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gr_regen?token=${token}`,
    );
    const data = await response.json();
    console.log('Total sufal192020_gr_regen items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gr_regen`,
          [],
          () => {
            console.log('sufal192020_gr_regen table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gr_regen (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GREGEN_RSITEPOINT_ALT TEXT,REG_AVG_SEEDLING_PER_HA_PER_PLOT TEXT,GREGEN_REGEN_PLOT_NO TEXT,GREGEN_RSITEPOINT_ACC TEXT,GENERATED_NOTE_NAME_99 TEXT,GREGEN_RSITEPOINT_LNG TEXT,REG_AVG_SEEDLING_PER_PLOT TEXT,GREGEN_GRCOORDS_RE_RSITE_NORTH TEXT,GREGEN_RSITEPOINT_LAT TEXT,GREGEN_GRCOORDS_RE_RSITE_EAST TEXT,GREGEN_RRECORD_HOW TEXT)`,
          [],
          () => {
            console.log('sufal192020_gr_regen table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching sufal192020_gr_regen data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gr_regen_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gr_regen`, // Query the sufal192020_gr_regen table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying sufal192020_gr_regen`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gr_regen_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gr_regen`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from sufal192020_gr_regen:', resultSet);

          try {
            await sufal192020_gr_regen_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from sufal192020_gr_regen`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gr_regen_create = sufal192020_gr_regen => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert sufal192020_gr_regen
      tx.executeSql(
        `INSERT INTO sufal192020_gr_regen (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,GREGEN_RSITEPOINT_ALT,REG_AVG_SEEDLING_PER_HA_PER_PLOT,GREGEN_REGEN_PLOT_NO,GREGEN_RSITEPOINT_ACC,GENERATED_NOTE_NAME_99,GREGEN_RSITEPOINT_LNG,REG_AVG_SEEDLING_PER_PLOT,GREGEN_GRCOORDS_RE_RSITE_NORTH,GREGEN_RSITEPOINT_LAT,GREGEN_GRCOORDS_RE_RSITE_EAST,GREGEN_RRECORD_HOW) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          sufal192020_gr_regen._URI || null,
          sufal192020_gr_regen._CREATOR_URI_USER || null,
          sufal192020_gr_regen._CREATION_DATE || null,
          sufal192020_gr_regen._LAST_UPDATE_URI_USER || null,
          sufal192020_gr_regen._LAST_UPDATE_DATE || null,
          sufal192020_gr_regen._PARENT_AURI || null,
          sufal192020_gr_regen._ORDINAL_NUMBER || null,
          sufal192020_gr_regen._TOP_LEVEL_AURI || null,
          sufal192020_gr_regen.GREGEN_RSITEPOINT_ALT || null,
          sufal192020_gr_regen.REG_AVG_SEEDLING_PER_HA_PER_PLOT || null,
          sufal192020_gr_regen.GREGEN_REGEN_PLOT_NO || null,
          sufal192020_gr_regen.GREGEN_RSITEPOINT_ACC || null,
          sufal192020_gr_regen.GENERATED_NOTE_NAME_99 || null,
          sufal192020_gr_regen.GREGEN_RSITEPOINT_LNG || null,
          sufal192020_gr_regen.REG_AVG_SEEDLING_PER_PLOT || null,
          sufal192020_gr_regen.GREGEN_GRCOORDS_RE_RSITE_NORTH || null,
          sufal192020_gr_regen.GREGEN_RSITEPOINT_LAT || null,
          sufal192020_gr_regen.GREGEN_GRCOORDS_RE_RSITE_EAST || null,
          sufal192020_gr_regen.GREGEN_RRECORD_HOW || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb`,
            [],
            () => {
              console.log(
                'sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb table created successfully',
              );
            },
            reject,
          );

          data.forEach(
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb => {
              tx.executeSql(
                `INSERT INTO sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
                [
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb._URI ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb._CREATOR_URI_USER ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb._CREATION_DATE ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb._LAST_UPDATE_URI_USER ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb._LAST_UPDATE_DATE ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb._TOP_LEVEL_AURI ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb.VALUE ||
                    null,
                ],
                (_, resultSet) =>
                  console.log(
                    'sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb data inserted successfully',
                    resultSet,
                  ),
                (_, error) => {
                  console.error(
                    'Error inserting sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb data',
                    error,
                    sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb,
                  );
                },
              );
            },
          );
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb`,
            [],
            () => {
              console.log(
                'sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb`, // Query the sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb:',
              resultSet,
            );

            try {
              await sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb_create =
  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb
        tx.executeSql(
          `INSERT INTO sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb._URI ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb._CREATOR_URI_USER ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb._CREATION_DATE ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb._LAST_UPDATE_URI_USER ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb._LAST_UPDATE_DATE ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb._TOP_LEVEL_AURI ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb.VALUE ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn`,
            [],
            () => {
              console.log(
                'sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn table created successfully',
              );
            },
            reject,
          );

          data.forEach(
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn => {
              tx.executeSql(
                `INSERT INTO sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                [
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn._URI ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn._CREATOR_URI_USER ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn._CREATION_DATE ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn._LAST_UPDATE_URI_USER ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn._LAST_UPDATE_DATE ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn._PARENT_AURI ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn._ORDINAL_NUMBER ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn._TOP_LEVEL_AURI ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn.UNROOTED_FILE_PATH ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn.CONTENT_TYPE ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn.CONTENT_LENGTH ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn.CONTENT_HASH ||
                    null,
                ],
                (_, resultSet) =>
                  console.log(
                    'sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn data inserted successfully',
                    resultSet,
                  ),
                (_, error) => {
                  console.error(
                    'Error inserting sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn data',
                    error,
                    sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn,
                  );
                },
              );
            },
          );
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn`,
            [],
            () => {
              console.log(
                'sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn`, // Query the sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn:',
              resultSet,
            );

            try {
              await sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn_create =
  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn
        tx.executeSql(
          `INSERT INTO sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn._URI ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn._CREATOR_URI_USER ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn._CREATION_DATE ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn._LAST_UPDATE_URI_USER ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn._LAST_UPDATE_DATE ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn._PARENT_AURI ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn._ORDINAL_NUMBER ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn._TOP_LEVEL_AURI ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn.UNROOTED_FILE_PATH ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn.CONTENT_TYPE ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn.CONTENT_LENGTH ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn.CONTENT_HASH ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref`,
            [],
            () => {
              console.log(
                'sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref table created successfully',
              );
            },
            reject,
          );

          data.forEach(
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref => {
              tx.executeSql(
                `INSERT INTO sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                [
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref._URI ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref._CREATOR_URI_USER ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref._CREATION_DATE ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref._LAST_UPDATE_URI_USER ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref._LAST_UPDATE_DATE ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref._DOM_AURI ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref._SUB_AURI ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref._TOP_LEVEL_AURI ||
                    null,
                  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref.PART ||
                    null,
                ],
                (_, resultSet) =>
                  console.log(
                    'sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref data inserted successfully',
                    resultSet,
                  ),
                (_, error) => {
                  console.error(
                    'Error inserting sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref data',
                    error,
                    sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref,
                  );
                },
              );
            },
          );
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref`,
            [],
            () => {
              console.log(
                'sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref`, // Query the sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref:',
              resultSet,
            );

            try {
              await sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref_create =
  sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref
        tx.executeSql(
          `INSERT INTO sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref._URI ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref._CREATOR_URI_USER ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref._CREATION_DATE ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref._LAST_UPDATE_URI_USER ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref._LAST_UPDATE_DATE ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref._DOM_AURI ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref._SUB_AURI ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref._TOP_LEVEL_AURI ||
              null,
            sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref.PART ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gtrts_cleaning_cutting_cutting_month_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal192020_gtrts_cleaning_cutting_cutting_month?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal192020_gtrts_cleaning_cutting_cutting_month items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal192020_gtrts_cleaning_cutting_cutting_month`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_cleaning_cutting_cutting_month table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_cleaning_cutting_cutting_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_cleaning_cutting_cutting_month table created successfully',
              );
            },
            reject,
          );

          data.forEach(sufal192020_gtrts_cleaning_cutting_cutting_month => {
            tx.executeSql(
              `INSERT INTO sufal192020_gtrts_cleaning_cutting_cutting_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                sufal192020_gtrts_cleaning_cutting_cutting_month._URI || null,
                sufal192020_gtrts_cleaning_cutting_cutting_month._CREATOR_URI_USER ||
                  null,
                sufal192020_gtrts_cleaning_cutting_cutting_month._CREATION_DATE ||
                  null,
                sufal192020_gtrts_cleaning_cutting_cutting_month._LAST_UPDATE_URI_USER ||
                  null,
                sufal192020_gtrts_cleaning_cutting_cutting_month._LAST_UPDATE_DATE ||
                  null,
                sufal192020_gtrts_cleaning_cutting_cutting_month._PARENT_AURI ||
                  null,
                sufal192020_gtrts_cleaning_cutting_cutting_month._ORDINAL_NUMBER ||
                  null,
                sufal192020_gtrts_cleaning_cutting_cutting_month._TOP_LEVEL_AURI ||
                  null,
                sufal192020_gtrts_cleaning_cutting_cutting_month.VALUE || null,
              ],
              (_, resultSet) =>
                console.log(
                  'sufal192020_gtrts_cleaning_cutting_cutting_month data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting sufal192020_gtrts_cleaning_cutting_cutting_month data',
                  error,
                  sufal192020_gtrts_cleaning_cutting_cutting_month,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal192020_gtrts_cleaning_cutting_cutting_month data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gtrts_cleaning_cutting_cutting_month_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal192020_gtrts_cleaning_cutting_cutting_month?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal192020_gtrts_cleaning_cutting_cutting_month items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal192020_gtrts_cleaning_cutting_cutting_month`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_cleaning_cutting_cutting_month table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_cleaning_cutting_cutting_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_cleaning_cutting_cutting_month table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal192020_gtrts_cleaning_cutting_cutting_month data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gtrts_cleaning_cutting_cutting_month_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal192020_gtrts_cleaning_cutting_cutting_month`, // Query the sufal192020_gtrts_cleaning_cutting_cutting_month table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal192020_gtrts_cleaning_cutting_cutting_month`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gtrts_cleaning_cutting_cutting_month_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal192020_gtrts_cleaning_cutting_cutting_month`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal192020_gtrts_cleaning_cutting_cutting_month:',
              resultSet,
            );

            try {
              await sufal192020_gtrts_cleaning_cutting_cutting_month_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal192020_gtrts_cleaning_cutting_cutting_month`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gtrts_cleaning_cutting_cutting_month_create =
  sufal192020_gtrts_cleaning_cutting_cutting_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gtrts_cleaning_cutting_cutting_month
        tx.executeSql(
          `INSERT INTO sufal192020_gtrts_cleaning_cutting_cutting_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gtrts_cleaning_cutting_cutting_month._URI || null,
            sufal192020_gtrts_cleaning_cutting_cutting_month._CREATOR_URI_USER ||
              null,
            sufal192020_gtrts_cleaning_cutting_cutting_month._CREATION_DATE ||
              null,
            sufal192020_gtrts_cleaning_cutting_cutting_month._LAST_UPDATE_URI_USER ||
              null,
            sufal192020_gtrts_cleaning_cutting_cutting_month._LAST_UPDATE_DATE ||
              null,
            sufal192020_gtrts_cleaning_cutting_cutting_month._PARENT_AURI ||
              null,
            sufal192020_gtrts_cleaning_cutting_cutting_month._ORDINAL_NUMBER ||
              null,
            sufal192020_gtrts_cleaning_cutting_cutting_month._TOP_LEVEL_AURI ||
              null,
            sufal192020_gtrts_cleaning_cutting_cutting_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gtrts_climber_cutting_climber_month_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gtrts_climber_cutting_climber_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gtrts_climber_cutting_climber_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gtrts_climber_cutting_climber_month`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_climber_cutting_climber_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_climber_cutting_climber_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_climber_cutting_climber_month table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gtrts_climber_cutting_climber_month => {
          tx.executeSql(
            `INSERT INTO sufal192020_gtrts_climber_cutting_climber_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gtrts_climber_cutting_climber_month._URI || null,
              sufal192020_gtrts_climber_cutting_climber_month._CREATOR_URI_USER ||
                null,
              sufal192020_gtrts_climber_cutting_climber_month._CREATION_DATE ||
                null,
              sufal192020_gtrts_climber_cutting_climber_month._LAST_UPDATE_URI_USER ||
                null,
              sufal192020_gtrts_climber_cutting_climber_month._LAST_UPDATE_DATE ||
                null,
              sufal192020_gtrts_climber_cutting_climber_month._PARENT_AURI ||
                null,
              sufal192020_gtrts_climber_cutting_climber_month._ORDINAL_NUMBER ||
                null,
              sufal192020_gtrts_climber_cutting_climber_month._TOP_LEVEL_AURI ||
                null,
              sufal192020_gtrts_climber_cutting_climber_month.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gtrts_climber_cutting_climber_month data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gtrts_climber_cutting_climber_month data',
                error,
                sufal192020_gtrts_climber_cutting_climber_month,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gtrts_climber_cutting_climber_month data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gtrts_climber_cutting_climber_month_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal192020_gtrts_climber_cutting_climber_month?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal192020_gtrts_climber_cutting_climber_month items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal192020_gtrts_climber_cutting_climber_month`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_climber_cutting_climber_month table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_climber_cutting_climber_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_climber_cutting_climber_month table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal192020_gtrts_climber_cutting_climber_month data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gtrts_climber_cutting_climber_month_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal192020_gtrts_climber_cutting_climber_month`, // Query the sufal192020_gtrts_climber_cutting_climber_month table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal192020_gtrts_climber_cutting_climber_month`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gtrts_climber_cutting_climber_month_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal192020_gtrts_climber_cutting_climber_month`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal192020_gtrts_climber_cutting_climber_month:',
              resultSet,
            );

            try {
              await sufal192020_gtrts_climber_cutting_climber_month_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal192020_gtrts_climber_cutting_climber_month`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gtrts_climber_cutting_climber_month_create =
  sufal192020_gtrts_climber_cutting_climber_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gtrts_climber_cutting_climber_month
        tx.executeSql(
          `INSERT INTO sufal192020_gtrts_climber_cutting_climber_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gtrts_climber_cutting_climber_month._URI || null,
            sufal192020_gtrts_climber_cutting_climber_month._CREATOR_URI_USER ||
              null,
            sufal192020_gtrts_climber_cutting_climber_month._CREATION_DATE ||
              null,
            sufal192020_gtrts_climber_cutting_climber_month._LAST_UPDATE_URI_USER ||
              null,
            sufal192020_gtrts_climber_cutting_climber_month._LAST_UPDATE_DATE ||
              null,
            sufal192020_gtrts_climber_cutting_climber_month._PARENT_AURI ||
              null,
            sufal192020_gtrts_climber_cutting_climber_month._ORDINAL_NUMBER ||
              null,
            sufal192020_gtrts_climber_cutting_climber_month._TOP_LEVEL_AURI ||
              null,
            sufal192020_gtrts_climber_cutting_climber_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gtrts_commnty_protcton_community_month_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal192020_gtrts_commnty_protcton_community_month?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal192020_gtrts_commnty_protcton_community_month items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal192020_gtrts_commnty_protcton_community_month`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_commnty_protcton_community_month table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_commnty_protcton_community_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_commnty_protcton_community_month table created successfully',
              );
            },
            reject,
          );

          data.forEach(sufal192020_gtrts_commnty_protcton_community_month => {
            tx.executeSql(
              `INSERT INTO sufal192020_gtrts_commnty_protcton_community_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                sufal192020_gtrts_commnty_protcton_community_month._URI || null,
                sufal192020_gtrts_commnty_protcton_community_month._CREATOR_URI_USER ||
                  null,
                sufal192020_gtrts_commnty_protcton_community_month._CREATION_DATE ||
                  null,
                sufal192020_gtrts_commnty_protcton_community_month._LAST_UPDATE_URI_USER ||
                  null,
                sufal192020_gtrts_commnty_protcton_community_month._LAST_UPDATE_DATE ||
                  null,
                sufal192020_gtrts_commnty_protcton_community_month._PARENT_AURI ||
                  null,
                sufal192020_gtrts_commnty_protcton_community_month._ORDINAL_NUMBER ||
                  null,
                sufal192020_gtrts_commnty_protcton_community_month._TOP_LEVEL_AURI ||
                  null,
                sufal192020_gtrts_commnty_protcton_community_month.VALUE ||
                  null,
              ],
              (_, resultSet) =>
                console.log(
                  'sufal192020_gtrts_commnty_protcton_community_month data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting sufal192020_gtrts_commnty_protcton_community_month data',
                  error,
                  sufal192020_gtrts_commnty_protcton_community_month,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal192020_gtrts_commnty_protcton_community_month data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gtrts_commnty_protcton_community_month_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal192020_gtrts_commnty_protcton_community_month?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal192020_gtrts_commnty_protcton_community_month items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal192020_gtrts_commnty_protcton_community_month`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_commnty_protcton_community_month table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_commnty_protcton_community_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_commnty_protcton_community_month table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal192020_gtrts_commnty_protcton_community_month data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gtrts_commnty_protcton_community_month_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal192020_gtrts_commnty_protcton_community_month`, // Query the sufal192020_gtrts_commnty_protcton_community_month table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal192020_gtrts_commnty_protcton_community_month`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gtrts_commnty_protcton_community_month_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal192020_gtrts_commnty_protcton_community_month`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal192020_gtrts_commnty_protcton_community_month:',
              resultSet,
            );

            try {
              await sufal192020_gtrts_commnty_protcton_community_month_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal192020_gtrts_commnty_protcton_community_month`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gtrts_commnty_protcton_community_month_create =
  sufal192020_gtrts_commnty_protcton_community_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gtrts_commnty_protcton_community_month
        tx.executeSql(
          `INSERT INTO sufal192020_gtrts_commnty_protcton_community_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gtrts_commnty_protcton_community_month._URI || null,
            sufal192020_gtrts_commnty_protcton_community_month._CREATOR_URI_USER ||
              null,
            sufal192020_gtrts_commnty_protcton_community_month._CREATION_DATE ||
              null,
            sufal192020_gtrts_commnty_protcton_community_month._LAST_UPDATE_URI_USER ||
              null,
            sufal192020_gtrts_commnty_protcton_community_month._LAST_UPDATE_DATE ||
              null,
            sufal192020_gtrts_commnty_protcton_community_month._PARENT_AURI ||
              null,
            sufal192020_gtrts_commnty_protcton_community_month._ORDINAL_NUMBER ||
              null,
            sufal192020_gtrts_commnty_protcton_community_month._TOP_LEVEL_AURI ||
              null,
            sufal192020_gtrts_commnty_protcton_community_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gtrts_composts_pit_composts_pit_month_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal192020_gtrts_composts_pit_composts_pit_month?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal192020_gtrts_composts_pit_composts_pit_month items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal192020_gtrts_composts_pit_composts_pit_month`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_composts_pit_composts_pit_month table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_composts_pit_composts_pit_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_composts_pit_composts_pit_month table created successfully',
              );
            },
            reject,
          );

          data.forEach(sufal192020_gtrts_composts_pit_composts_pit_month => {
            tx.executeSql(
              `INSERT INTO sufal192020_gtrts_composts_pit_composts_pit_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                sufal192020_gtrts_composts_pit_composts_pit_month._URI || null,
                sufal192020_gtrts_composts_pit_composts_pit_month._CREATOR_URI_USER ||
                  null,
                sufal192020_gtrts_composts_pit_composts_pit_month._CREATION_DATE ||
                  null,
                sufal192020_gtrts_composts_pit_composts_pit_month._LAST_UPDATE_URI_USER ||
                  null,
                sufal192020_gtrts_composts_pit_composts_pit_month._LAST_UPDATE_DATE ||
                  null,
                sufal192020_gtrts_composts_pit_composts_pit_month._PARENT_AURI ||
                  null,
                sufal192020_gtrts_composts_pit_composts_pit_month._ORDINAL_NUMBER ||
                  null,
                sufal192020_gtrts_composts_pit_composts_pit_month._TOP_LEVEL_AURI ||
                  null,
                sufal192020_gtrts_composts_pit_composts_pit_month.VALUE || null,
              ],
              (_, resultSet) =>
                console.log(
                  'sufal192020_gtrts_composts_pit_composts_pit_month data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting sufal192020_gtrts_composts_pit_composts_pit_month data',
                  error,
                  sufal192020_gtrts_composts_pit_composts_pit_month,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal192020_gtrts_composts_pit_composts_pit_month data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gtrts_composts_pit_composts_pit_month_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal192020_gtrts_composts_pit_composts_pit_month?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal192020_gtrts_composts_pit_composts_pit_month items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal192020_gtrts_composts_pit_composts_pit_month`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_composts_pit_composts_pit_month table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_composts_pit_composts_pit_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_composts_pit_composts_pit_month table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal192020_gtrts_composts_pit_composts_pit_month data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gtrts_composts_pit_composts_pit_month_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal192020_gtrts_composts_pit_composts_pit_month`, // Query the sufal192020_gtrts_composts_pit_composts_pit_month table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal192020_gtrts_composts_pit_composts_pit_month`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gtrts_composts_pit_composts_pit_month_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal192020_gtrts_composts_pit_composts_pit_month`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal192020_gtrts_composts_pit_composts_pit_month:',
              resultSet,
            );

            try {
              await sufal192020_gtrts_composts_pit_composts_pit_month_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal192020_gtrts_composts_pit_composts_pit_month`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gtrts_composts_pit_composts_pit_month_create =
  sufal192020_gtrts_composts_pit_composts_pit_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gtrts_composts_pit_composts_pit_month
        tx.executeSql(
          `INSERT INTO sufal192020_gtrts_composts_pit_composts_pit_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gtrts_composts_pit_composts_pit_month._URI || null,
            sufal192020_gtrts_composts_pit_composts_pit_month._CREATOR_URI_USER ||
              null,
            sufal192020_gtrts_composts_pit_composts_pit_month._CREATION_DATE ||
              null,
            sufal192020_gtrts_composts_pit_composts_pit_month._LAST_UPDATE_URI_USER ||
              null,
            sufal192020_gtrts_composts_pit_composts_pit_month._LAST_UPDATE_DATE ||
              null,
            sufal192020_gtrts_composts_pit_composts_pit_month._PARENT_AURI ||
              null,
            sufal192020_gtrts_composts_pit_composts_pit_month._ORDINAL_NUMBER ||
              null,
            sufal192020_gtrts_composts_pit_composts_pit_month._TOP_LEVEL_AURI ||
              null,
            sufal192020_gtrts_composts_pit_composts_pit_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gtrts_compost_compost_month_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gtrts_compost_compost_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gtrts_compost_compost_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gtrts_compost_compost_month`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_compost_compost_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_compost_compost_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_compost_compost_month table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gtrts_compost_compost_month => {
          tx.executeSql(
            `INSERT INTO sufal192020_gtrts_compost_compost_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gtrts_compost_compost_month._URI || null,
              sufal192020_gtrts_compost_compost_month._CREATOR_URI_USER || null,
              sufal192020_gtrts_compost_compost_month._CREATION_DATE || null,
              sufal192020_gtrts_compost_compost_month._LAST_UPDATE_URI_USER ||
                null,
              sufal192020_gtrts_compost_compost_month._LAST_UPDATE_DATE || null,
              sufal192020_gtrts_compost_compost_month._PARENT_AURI || null,
              sufal192020_gtrts_compost_compost_month._ORDINAL_NUMBER || null,
              sufal192020_gtrts_compost_compost_month._TOP_LEVEL_AURI || null,
              sufal192020_gtrts_compost_compost_month.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gtrts_compost_compost_month data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gtrts_compost_compost_month data',
                error,
                sufal192020_gtrts_compost_compost_month,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gtrts_compost_compost_month data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gtrts_compost_compost_month_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gtrts_compost_compost_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gtrts_compost_compost_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gtrts_compost_compost_month`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_compost_compost_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_compost_compost_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_compost_compost_month table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gtrts_compost_compost_month data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gtrts_compost_compost_month_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gtrts_compost_compost_month`, // Query the sufal192020_gtrts_compost_compost_month table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gtrts_compost_compost_month`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gtrts_compost_compost_month_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gtrts_compost_compost_month`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gtrts_compost_compost_month:',
            resultSet,
          );

          try {
            await sufal192020_gtrts_compost_compost_month_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gtrts_compost_compost_month`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gtrts_compost_compost_month_create =
  sufal192020_gtrts_compost_compost_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gtrts_compost_compost_month
        tx.executeSql(
          `INSERT INTO sufal192020_gtrts_compost_compost_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gtrts_compost_compost_month._URI || null,
            sufal192020_gtrts_compost_compost_month._CREATOR_URI_USER || null,
            sufal192020_gtrts_compost_compost_month._CREATION_DATE || null,
            sufal192020_gtrts_compost_compost_month._LAST_UPDATE_URI_USER ||
              null,
            sufal192020_gtrts_compost_compost_month._LAST_UPDATE_DATE || null,
            sufal192020_gtrts_compost_compost_month._PARENT_AURI || null,
            sufal192020_gtrts_compost_compost_month._ORDINAL_NUMBER || null,
            sufal192020_gtrts_compost_compost_month._TOP_LEVEL_AURI || null,
            sufal192020_gtrts_compost_compost_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gtrts_layout_layout_month_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gtrts_layout_layout_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gtrts_layout_layout_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gtrts_layout_layout_month`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_layout_layout_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_layout_layout_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_layout_layout_month table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gtrts_layout_layout_month => {
          tx.executeSql(
            `INSERT INTO sufal192020_gtrts_layout_layout_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gtrts_layout_layout_month._URI || null,
              sufal192020_gtrts_layout_layout_month._CREATOR_URI_USER || null,
              sufal192020_gtrts_layout_layout_month._CREATION_DATE || null,
              sufal192020_gtrts_layout_layout_month._LAST_UPDATE_URI_USER ||
                null,
              sufal192020_gtrts_layout_layout_month._LAST_UPDATE_DATE || null,
              sufal192020_gtrts_layout_layout_month._PARENT_AURI || null,
              sufal192020_gtrts_layout_layout_month._ORDINAL_NUMBER || null,
              sufal192020_gtrts_layout_layout_month._TOP_LEVEL_AURI || null,
              sufal192020_gtrts_layout_layout_month.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gtrts_layout_layout_month data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gtrts_layout_layout_month data',
                error,
                sufal192020_gtrts_layout_layout_month,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gtrts_layout_layout_month data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gtrts_layout_layout_month_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gtrts_layout_layout_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gtrts_layout_layout_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gtrts_layout_layout_month`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_layout_layout_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_layout_layout_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_layout_layout_month table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gtrts_layout_layout_month data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gtrts_layout_layout_month_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gtrts_layout_layout_month`, // Query the sufal192020_gtrts_layout_layout_month table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gtrts_layout_layout_month`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gtrts_layout_layout_month_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gtrts_layout_layout_month`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gtrts_layout_layout_month:',
            resultSet,
          );

          try {
            await sufal192020_gtrts_layout_layout_month_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gtrts_layout_layout_month`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gtrts_layout_layout_month_create =
  sufal192020_gtrts_layout_layout_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gtrts_layout_layout_month
        tx.executeSql(
          `INSERT INTO sufal192020_gtrts_layout_layout_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gtrts_layout_layout_month._URI || null,
            sufal192020_gtrts_layout_layout_month._CREATOR_URI_USER || null,
            sufal192020_gtrts_layout_layout_month._CREATION_DATE || null,
            sufal192020_gtrts_layout_layout_month._LAST_UPDATE_URI_USER || null,
            sufal192020_gtrts_layout_layout_month._LAST_UPDATE_DATE || null,
            sufal192020_gtrts_layout_layout_month._PARENT_AURI || null,
            sufal192020_gtrts_layout_layout_month._ORDINAL_NUMBER || null,
            sufal192020_gtrts_layout_layout_month._TOP_LEVEL_AURI || null,
            sufal192020_gtrts_layout_layout_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gtrts_nuersery_raising_nursery_month_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal192020_gtrts_nuersery_raising_nursery_month?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal192020_gtrts_nuersery_raising_nursery_month items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal192020_gtrts_nuersery_raising_nursery_month`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_nuersery_raising_nursery_month table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_nuersery_raising_nursery_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_nuersery_raising_nursery_month table created successfully',
              );
            },
            reject,
          );

          data.forEach(sufal192020_gtrts_nuersery_raising_nursery_month => {
            tx.executeSql(
              `INSERT INTO sufal192020_gtrts_nuersery_raising_nursery_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                sufal192020_gtrts_nuersery_raising_nursery_month._URI || null,
                sufal192020_gtrts_nuersery_raising_nursery_month._CREATOR_URI_USER ||
                  null,
                sufal192020_gtrts_nuersery_raising_nursery_month._CREATION_DATE ||
                  null,
                sufal192020_gtrts_nuersery_raising_nursery_month._LAST_UPDATE_URI_USER ||
                  null,
                sufal192020_gtrts_nuersery_raising_nursery_month._LAST_UPDATE_DATE ||
                  null,
                sufal192020_gtrts_nuersery_raising_nursery_month._PARENT_AURI ||
                  null,
                sufal192020_gtrts_nuersery_raising_nursery_month._ORDINAL_NUMBER ||
                  null,
                sufal192020_gtrts_nuersery_raising_nursery_month._TOP_LEVEL_AURI ||
                  null,
                sufal192020_gtrts_nuersery_raising_nursery_month.VALUE || null,
              ],
              (_, resultSet) =>
                console.log(
                  'sufal192020_gtrts_nuersery_raising_nursery_month data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting sufal192020_gtrts_nuersery_raising_nursery_month data',
                  error,
                  sufal192020_gtrts_nuersery_raising_nursery_month,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal192020_gtrts_nuersery_raising_nursery_month data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gtrts_nuersery_raising_nursery_month_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal192020_gtrts_nuersery_raising_nursery_month?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal192020_gtrts_nuersery_raising_nursery_month items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal192020_gtrts_nuersery_raising_nursery_month`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_nuersery_raising_nursery_month table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_nuersery_raising_nursery_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_nuersery_raising_nursery_month table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal192020_gtrts_nuersery_raising_nursery_month data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gtrts_nuersery_raising_nursery_month_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal192020_gtrts_nuersery_raising_nursery_month`, // Query the sufal192020_gtrts_nuersery_raising_nursery_month table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal192020_gtrts_nuersery_raising_nursery_month`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gtrts_nuersery_raising_nursery_month_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal192020_gtrts_nuersery_raising_nursery_month`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal192020_gtrts_nuersery_raising_nursery_month:',
              resultSet,
            );

            try {
              await sufal192020_gtrts_nuersery_raising_nursery_month_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal192020_gtrts_nuersery_raising_nursery_month`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gtrts_nuersery_raising_nursery_month_create =
  sufal192020_gtrts_nuersery_raising_nursery_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gtrts_nuersery_raising_nursery_month
        tx.executeSql(
          `INSERT INTO sufal192020_gtrts_nuersery_raising_nursery_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gtrts_nuersery_raising_nursery_month._URI || null,
            sufal192020_gtrts_nuersery_raising_nursery_month._CREATOR_URI_USER ||
              null,
            sufal192020_gtrts_nuersery_raising_nursery_month._CREATION_DATE ||
              null,
            sufal192020_gtrts_nuersery_raising_nursery_month._LAST_UPDATE_URI_USER ||
              null,
            sufal192020_gtrts_nuersery_raising_nursery_month._LAST_UPDATE_DATE ||
              null,
            sufal192020_gtrts_nuersery_raising_nursery_month._PARENT_AURI ||
              null,
            sufal192020_gtrts_nuersery_raising_nursery_month._ORDINAL_NUMBER ||
              null,
            sufal192020_gtrts_nuersery_raising_nursery_month._TOP_LEVEL_AURI ||
              null,
            sufal192020_gtrts_nuersery_raising_nursery_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gtrts_other_treatment_other_month_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gtrts_other_treatment_other_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gtrts_other_treatment_other_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gtrts_other_treatment_other_month`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_other_treatment_other_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_other_treatment_other_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_other_treatment_other_month table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gtrts_other_treatment_other_month => {
          tx.executeSql(
            `INSERT INTO sufal192020_gtrts_other_treatment_other_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gtrts_other_treatment_other_month._URI || null,
              sufal192020_gtrts_other_treatment_other_month._CREATOR_URI_USER ||
                null,
              sufal192020_gtrts_other_treatment_other_month._CREATION_DATE ||
                null,
              sufal192020_gtrts_other_treatment_other_month._LAST_UPDATE_URI_USER ||
                null,
              sufal192020_gtrts_other_treatment_other_month._LAST_UPDATE_DATE ||
                null,
              sufal192020_gtrts_other_treatment_other_month._PARENT_AURI ||
                null,
              sufal192020_gtrts_other_treatment_other_month._ORDINAL_NUMBER ||
                null,
              sufal192020_gtrts_other_treatment_other_month._TOP_LEVEL_AURI ||
                null,
              sufal192020_gtrts_other_treatment_other_month.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gtrts_other_treatment_other_month data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gtrts_other_treatment_other_month data',
                error,
                sufal192020_gtrts_other_treatment_other_month,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gtrts_other_treatment_other_month data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gtrts_other_treatment_other_month_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gtrts_other_treatment_other_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gtrts_other_treatment_other_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gtrts_other_treatment_other_month`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_other_treatment_other_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_other_treatment_other_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_other_treatment_other_month table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gtrts_other_treatment_other_month data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gtrts_other_treatment_other_month_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gtrts_other_treatment_other_month`, // Query the sufal192020_gtrts_other_treatment_other_month table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gtrts_other_treatment_other_month`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gtrts_other_treatment_other_month_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal192020_gtrts_other_treatment_other_month`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal192020_gtrts_other_treatment_other_month:',
              resultSet,
            );

            try {
              await sufal192020_gtrts_other_treatment_other_month_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal192020_gtrts_other_treatment_other_month`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gtrts_other_treatment_other_month_create =
  sufal192020_gtrts_other_treatment_other_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gtrts_other_treatment_other_month
        tx.executeSql(
          `INSERT INTO sufal192020_gtrts_other_treatment_other_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gtrts_other_treatment_other_month._URI || null,
            sufal192020_gtrts_other_treatment_other_month._CREATOR_URI_USER ||
              null,
            sufal192020_gtrts_other_treatment_other_month._CREATION_DATE ||
              null,
            sufal192020_gtrts_other_treatment_other_month._LAST_UPDATE_URI_USER ||
              null,
            sufal192020_gtrts_other_treatment_other_month._LAST_UPDATE_DATE ||
              null,
            sufal192020_gtrts_other_treatment_other_month._PARENT_AURI || null,
            sufal192020_gtrts_other_treatment_other_month._ORDINAL_NUMBER ||
              null,
            sufal192020_gtrts_other_treatment_other_month._TOP_LEVEL_AURI ||
              null,
            sufal192020_gtrts_other_treatment_other_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gtrts_pit_digging_digging_month_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gtrts_pit_digging_digging_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gtrts_pit_digging_digging_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gtrts_pit_digging_digging_month`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_pit_digging_digging_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_pit_digging_digging_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_pit_digging_digging_month table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gtrts_pit_digging_digging_month => {
          tx.executeSql(
            `INSERT INTO sufal192020_gtrts_pit_digging_digging_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gtrts_pit_digging_digging_month._URI || null,
              sufal192020_gtrts_pit_digging_digging_month._CREATOR_URI_USER ||
                null,
              sufal192020_gtrts_pit_digging_digging_month._CREATION_DATE ||
                null,
              sufal192020_gtrts_pit_digging_digging_month._LAST_UPDATE_URI_USER ||
                null,
              sufal192020_gtrts_pit_digging_digging_month._LAST_UPDATE_DATE ||
                null,
              sufal192020_gtrts_pit_digging_digging_month._PARENT_AURI || null,
              sufal192020_gtrts_pit_digging_digging_month._ORDINAL_NUMBER ||
                null,
              sufal192020_gtrts_pit_digging_digging_month._TOP_LEVEL_AURI ||
                null,
              sufal192020_gtrts_pit_digging_digging_month.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gtrts_pit_digging_digging_month data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gtrts_pit_digging_digging_month data',
                error,
                sufal192020_gtrts_pit_digging_digging_month,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gtrts_pit_digging_digging_month data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gtrts_pit_digging_digging_month_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gtrts_pit_digging_digging_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gtrts_pit_digging_digging_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gtrts_pit_digging_digging_month`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_pit_digging_digging_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_pit_digging_digging_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_pit_digging_digging_month table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gtrts_pit_digging_digging_month data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gtrts_pit_digging_digging_month_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gtrts_pit_digging_digging_month`, // Query the sufal192020_gtrts_pit_digging_digging_month table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gtrts_pit_digging_digging_month`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gtrts_pit_digging_digging_month_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gtrts_pit_digging_digging_month`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gtrts_pit_digging_digging_month:',
            resultSet,
          );

          try {
            await sufal192020_gtrts_pit_digging_digging_month_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gtrts_pit_digging_digging_month`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gtrts_pit_digging_digging_month_create =
  sufal192020_gtrts_pit_digging_digging_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gtrts_pit_digging_digging_month
        tx.executeSql(
          `INSERT INTO sufal192020_gtrts_pit_digging_digging_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gtrts_pit_digging_digging_month._URI || null,
            sufal192020_gtrts_pit_digging_digging_month._CREATOR_URI_USER ||
              null,
            sufal192020_gtrts_pit_digging_digging_month._CREATION_DATE || null,
            sufal192020_gtrts_pit_digging_digging_month._LAST_UPDATE_URI_USER ||
              null,
            sufal192020_gtrts_pit_digging_digging_month._LAST_UPDATE_DATE ||
              null,
            sufal192020_gtrts_pit_digging_digging_month._PARENT_AURI || null,
            sufal192020_gtrts_pit_digging_digging_month._ORDINAL_NUMBER || null,
            sufal192020_gtrts_pit_digging_digging_month._TOP_LEVEL_AURI || null,
            sufal192020_gtrts_pit_digging_digging_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gtrts_plantation_site_month_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gtrts_plantation_site_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gtrts_plantation_site_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gtrts_plantation_site_month`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_plantation_site_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_plantation_site_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_plantation_site_month table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gtrts_plantation_site_month => {
          tx.executeSql(
            `INSERT INTO sufal192020_gtrts_plantation_site_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gtrts_plantation_site_month._URI || null,
              sufal192020_gtrts_plantation_site_month._CREATOR_URI_USER || null,
              sufal192020_gtrts_plantation_site_month._CREATION_DATE || null,
              sufal192020_gtrts_plantation_site_month._LAST_UPDATE_URI_USER ||
                null,
              sufal192020_gtrts_plantation_site_month._LAST_UPDATE_DATE || null,
              sufal192020_gtrts_plantation_site_month._PARENT_AURI || null,
              sufal192020_gtrts_plantation_site_month._ORDINAL_NUMBER || null,
              sufal192020_gtrts_plantation_site_month._TOP_LEVEL_AURI || null,
              sufal192020_gtrts_plantation_site_month.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gtrts_plantation_site_month data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gtrts_plantation_site_month data',
                error,
                sufal192020_gtrts_plantation_site_month,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gtrts_plantation_site_month data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gtrts_plantation_site_month_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gtrts_plantation_site_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gtrts_plantation_site_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gtrts_plantation_site_month`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_plantation_site_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_plantation_site_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_plantation_site_month table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gtrts_plantation_site_month data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gtrts_plantation_site_month_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gtrts_plantation_site_month`, // Query the sufal192020_gtrts_plantation_site_month table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gtrts_plantation_site_month`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gtrts_plantation_site_month_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gtrts_plantation_site_month`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gtrts_plantation_site_month:',
            resultSet,
          );

          try {
            await sufal192020_gtrts_plantation_site_month_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gtrts_plantation_site_month`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gtrts_plantation_site_month_create =
  sufal192020_gtrts_plantation_site_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gtrts_plantation_site_month
        tx.executeSql(
          `INSERT INTO sufal192020_gtrts_plantation_site_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gtrts_plantation_site_month._URI || null,
            sufal192020_gtrts_plantation_site_month._CREATOR_URI_USER || null,
            sufal192020_gtrts_plantation_site_month._CREATION_DATE || null,
            sufal192020_gtrts_plantation_site_month._LAST_UPDATE_URI_USER ||
              null,
            sufal192020_gtrts_plantation_site_month._LAST_UPDATE_DATE || null,
            sufal192020_gtrts_plantation_site_month._PARENT_AURI || null,
            sufal192020_gtrts_plantation_site_month._ORDINAL_NUMBER || null,
            sufal192020_gtrts_plantation_site_month._TOP_LEVEL_AURI || null,
            sufal192020_gtrts_plantation_site_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gtrts_planting_planting_month_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gtrts_planting_planting_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gtrts_planting_planting_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gtrts_planting_planting_month`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_planting_planting_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_planting_planting_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_planting_planting_month table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gtrts_planting_planting_month => {
          tx.executeSql(
            `INSERT INTO sufal192020_gtrts_planting_planting_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gtrts_planting_planting_month._URI || null,
              sufal192020_gtrts_planting_planting_month._CREATOR_URI_USER ||
                null,
              sufal192020_gtrts_planting_planting_month._CREATION_DATE || null,
              sufal192020_gtrts_planting_planting_month._LAST_UPDATE_URI_USER ||
                null,
              sufal192020_gtrts_planting_planting_month._LAST_UPDATE_DATE ||
                null,
              sufal192020_gtrts_planting_planting_month._PARENT_AURI || null,
              sufal192020_gtrts_planting_planting_month._ORDINAL_NUMBER || null,
              sufal192020_gtrts_planting_planting_month._TOP_LEVEL_AURI || null,
              sufal192020_gtrts_planting_planting_month.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gtrts_planting_planting_month data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gtrts_planting_planting_month data',
                error,
                sufal192020_gtrts_planting_planting_month,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gtrts_planting_planting_month data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gtrts_planting_planting_month_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gtrts_planting_planting_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gtrts_planting_planting_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gtrts_planting_planting_month`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_planting_planting_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_planting_planting_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_planting_planting_month table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gtrts_planting_planting_month data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gtrts_planting_planting_month_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gtrts_planting_planting_month`, // Query the sufal192020_gtrts_planting_planting_month table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_gtrts_planting_planting_month`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gtrts_planting_planting_month_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gtrts_planting_planting_month`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gtrts_planting_planting_month:',
            resultSet,
          );

          try {
            await sufal192020_gtrts_planting_planting_month_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gtrts_planting_planting_month`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gtrts_planting_planting_month_create =
  sufal192020_gtrts_planting_planting_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gtrts_planting_planting_month
        tx.executeSql(
          `INSERT INTO sufal192020_gtrts_planting_planting_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gtrts_planting_planting_month._URI || null,
            sufal192020_gtrts_planting_planting_month._CREATOR_URI_USER || null,
            sufal192020_gtrts_planting_planting_month._CREATION_DATE || null,
            sufal192020_gtrts_planting_planting_month._LAST_UPDATE_URI_USER ||
              null,
            sufal192020_gtrts_planting_planting_month._LAST_UPDATE_DATE || null,
            sufal192020_gtrts_planting_planting_month._PARENT_AURI || null,
            sufal192020_gtrts_planting_planting_month._ORDINAL_NUMBER || null,
            sufal192020_gtrts_planting_planting_month._TOP_LEVEL_AURI || null,
            sufal192020_gtrts_planting_planting_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gtrts_vacancy_filling_filling_month_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gtrts_vacancy_filling_filling_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_gtrts_vacancy_filling_filling_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gtrts_vacancy_filling_filling_month`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_vacancy_filling_filling_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_vacancy_filling_filling_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_gtrts_vacancy_filling_filling_month table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_gtrts_vacancy_filling_filling_month => {
          tx.executeSql(
            `INSERT INTO sufal192020_gtrts_vacancy_filling_filling_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gtrts_vacancy_filling_filling_month._URI || null,
              sufal192020_gtrts_vacancy_filling_filling_month._CREATOR_URI_USER ||
                null,
              sufal192020_gtrts_vacancy_filling_filling_month._CREATION_DATE ||
                null,
              sufal192020_gtrts_vacancy_filling_filling_month._LAST_UPDATE_URI_USER ||
                null,
              sufal192020_gtrts_vacancy_filling_filling_month._LAST_UPDATE_DATE ||
                null,
              sufal192020_gtrts_vacancy_filling_filling_month._PARENT_AURI ||
                null,
              sufal192020_gtrts_vacancy_filling_filling_month._ORDINAL_NUMBER ||
                null,
              sufal192020_gtrts_vacancy_filling_filling_month._TOP_LEVEL_AURI ||
                null,
              sufal192020_gtrts_vacancy_filling_filling_month.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gtrts_vacancy_filling_filling_month data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gtrts_vacancy_filling_filling_month data',
                error,
                sufal192020_gtrts_vacancy_filling_filling_month,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gtrts_vacancy_filling_filling_month data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gtrts_vacancy_filling_filling_month_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal192020_gtrts_vacancy_filling_filling_month?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal192020_gtrts_vacancy_filling_filling_month items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal192020_gtrts_vacancy_filling_filling_month`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_vacancy_filling_filling_month table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_vacancy_filling_filling_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal192020_gtrts_vacancy_filling_filling_month table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal192020_gtrts_vacancy_filling_filling_month data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gtrts_vacancy_filling_filling_month_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal192020_gtrts_vacancy_filling_filling_month`, // Query the sufal192020_gtrts_vacancy_filling_filling_month table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal192020_gtrts_vacancy_filling_filling_month`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gtrts_vacancy_filling_filling_month_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal192020_gtrts_vacancy_filling_filling_month`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal192020_gtrts_vacancy_filling_filling_month:',
              resultSet,
            );

            try {
              await sufal192020_gtrts_vacancy_filling_filling_month_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal192020_gtrts_vacancy_filling_filling_month`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gtrts_vacancy_filling_filling_month_create =
  sufal192020_gtrts_vacancy_filling_filling_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_gtrts_vacancy_filling_filling_month
        tx.executeSql(
          `INSERT INTO sufal192020_gtrts_vacancy_filling_filling_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_gtrts_vacancy_filling_filling_month._URI || null,
            sufal192020_gtrts_vacancy_filling_filling_month._CREATOR_URI_USER ||
              null,
            sufal192020_gtrts_vacancy_filling_filling_month._CREATION_DATE ||
              null,
            sufal192020_gtrts_vacancy_filling_filling_month._LAST_UPDATE_URI_USER ||
              null,
            sufal192020_gtrts_vacancy_filling_filling_month._LAST_UPDATE_DATE ||
              null,
            sufal192020_gtrts_vacancy_filling_filling_month._PARENT_AURI ||
              null,
            sufal192020_gtrts_vacancy_filling_filling_month._ORDINAL_NUMBER ||
              null,
            sufal192020_gtrts_vacancy_filling_filling_month._TOP_LEVEL_AURI ||
              null,
            sufal192020_gtrts_vacancy_filling_filling_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_gtrts_weeding_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gtrts_weeding?token=${token}`,
    );
    const data = await response.json();
    console.log('Total sufal192020_gtrts_weeding items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gtrts_weeding`,
          [],
          () => {
            console.log('sufal192020_gtrts_weeding table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_weeding (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,WEEDING_CYCLE TEXT,WEEDING_YEAR TEXT,WEEDING_YEAR_RAW TEXT)`,
          [],
          () => {
            console.log('sufal192020_gtrts_weeding table created successfully');
          },
          reject,
        );

        data.forEach(sufal192020_gtrts_weeding => {
          tx.executeSql(
            `INSERT INTO sufal192020_gtrts_weeding VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_gtrts_weeding._URI || null,
              sufal192020_gtrts_weeding._CREATOR_URI_USER || null,
              sufal192020_gtrts_weeding._CREATION_DATE || null,
              sufal192020_gtrts_weeding._LAST_UPDATE_URI_USER || null,
              sufal192020_gtrts_weeding._LAST_UPDATE_DATE || null,
              sufal192020_gtrts_weeding._PARENT_AURI || null,
              sufal192020_gtrts_weeding._ORDINAL_NUMBER || null,
              sufal192020_gtrts_weeding._TOP_LEVEL_AURI || null,
              sufal192020_gtrts_weeding.WEEDING_CYCLE || null,
              sufal192020_gtrts_weeding.WEEDING_YEAR || null,
              sufal192020_gtrts_weeding.WEEDING_YEAR_RAW || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_gtrts_weeding data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_gtrts_weeding data',
                error,
                sufal192020_gtrts_weeding,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gtrts_weeding data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_gtrts_weeding_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_gtrts_weeding?token=${token}`,
    );
    const data = await response.json();
    console.log('Total sufal192020_gtrts_weeding items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_gtrts_weeding`,
          [],
          () => {
            console.log('sufal192020_gtrts_weeding table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_gtrts_weeding (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,WEEDING_CYCLE TEXT,WEEDING_YEAR TEXT,WEEDING_YEAR_RAW TEXT)`,
          [],
          () => {
            console.log('sufal192020_gtrts_weeding table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_gtrts_weeding data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_gtrts_weeding_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_gtrts_weeding`, // Query the sufal192020_gtrts_weeding table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying sufal192020_gtrts_weeding`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_gtrts_weeding_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_gtrts_weeding`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_gtrts_weeding:',
            resultSet,
          );

          try {
            await sufal192020_gtrts_weeding_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_gtrts_weeding`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_gtrts_weeding_create = sufal192020_gtrts_weeding => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert sufal192020_gtrts_weeding
      tx.executeSql(
        `INSERT INTO sufal192020_gtrts_weeding (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,WEEDING_CYCLE,WEEDING_YEAR,WEEDING_YEAR_RAW) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          sufal192020_gtrts_weeding._URI || null,
          sufal192020_gtrts_weeding._CREATOR_URI_USER || null,
          sufal192020_gtrts_weeding._CREATION_DATE || null,
          sufal192020_gtrts_weeding._LAST_UPDATE_URI_USER || null,
          sufal192020_gtrts_weeding._LAST_UPDATE_DATE || null,
          sufal192020_gtrts_weeding._PARENT_AURI || null,
          sufal192020_gtrts_weeding._ORDINAL_NUMBER || null,
          sufal192020_gtrts_weeding._TOP_LEVEL_AURI || null,
          sufal192020_gtrts_weeding.WEEDING_CYCLE || null,
          sufal192020_gtrts_weeding.WEEDING_YEAR || null,
          sufal192020_gtrts_weeding.WEEDING_YEAR_RAW || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_location_data_ca_tloc_ad_upzilla_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_location_data_ca_tloc_ad_upzilla?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_location_data_ca_tloc_ad_upzilla items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_location_data_ca_tloc_ad_upzilla`,
          [],
          () => {
            console.log(
              'sufal192020_location_data_ca_tloc_ad_upzilla table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_location_data_ca_tloc_ad_upzilla (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_location_data_ca_tloc_ad_upzilla table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_location_data_ca_tloc_ad_upzilla => {
          tx.executeSql(
            `INSERT INTO sufal192020_location_data_ca_tloc_ad_upzilla VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_location_data_ca_tloc_ad_upzilla._URI || null,
              sufal192020_location_data_ca_tloc_ad_upzilla._CREATOR_URI_USER ||
                null,
              sufal192020_location_data_ca_tloc_ad_upzilla._CREATION_DATE ||
                null,
              sufal192020_location_data_ca_tloc_ad_upzilla._LAST_UPDATE_URI_USER ||
                null,
              sufal192020_location_data_ca_tloc_ad_upzilla._LAST_UPDATE_DATE ||
                null,
              sufal192020_location_data_ca_tloc_ad_upzilla._PARENT_AURI || null,
              sufal192020_location_data_ca_tloc_ad_upzilla._ORDINAL_NUMBER ||
                null,
              sufal192020_location_data_ca_tloc_ad_upzilla._TOP_LEVEL_AURI ||
                null,
              sufal192020_location_data_ca_tloc_ad_upzilla.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_location_data_ca_tloc_ad_upzilla data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_location_data_ca_tloc_ad_upzilla data',
                error,
                sufal192020_location_data_ca_tloc_ad_upzilla,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_location_data_ca_tloc_ad_upzilla data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_location_data_ca_tloc_ad_upzilla_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_location_data_ca_tloc_ad_upzilla?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_location_data_ca_tloc_ad_upzilla items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_location_data_ca_tloc_ad_upzilla`,
          [],
          () => {
            console.log(
              'sufal192020_location_data_ca_tloc_ad_upzilla table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_location_data_ca_tloc_ad_upzilla (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_location_data_ca_tloc_ad_upzilla table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_location_data_ca_tloc_ad_upzilla data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_location_data_ca_tloc_ad_upzilla_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_location_data_ca_tloc_ad_upzilla`, // Query the sufal192020_location_data_ca_tloc_ad_upzilla table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_location_data_ca_tloc_ad_upzilla`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_location_data_ca_tloc_ad_upzilla_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_location_data_ca_tloc_ad_upzilla`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_location_data_ca_tloc_ad_upzilla:',
            resultSet,
          );

          try {
            await sufal192020_location_data_ca_tloc_ad_upzilla_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_location_data_ca_tloc_ad_upzilla`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_location_data_ca_tloc_ad_upzilla_create =
  sufal192020_location_data_ca_tloc_ad_upzilla => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_location_data_ca_tloc_ad_upzilla
        tx.executeSql(
          `INSERT INTO sufal192020_location_data_ca_tloc_ad_upzilla (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_location_data_ca_tloc_ad_upzilla._URI || null,
            sufal192020_location_data_ca_tloc_ad_upzilla._CREATOR_URI_USER ||
              null,
            sufal192020_location_data_ca_tloc_ad_upzilla._CREATION_DATE || null,
            sufal192020_location_data_ca_tloc_ad_upzilla._LAST_UPDATE_URI_USER ||
              null,
            sufal192020_location_data_ca_tloc_ad_upzilla._LAST_UPDATE_DATE ||
              null,
            sufal192020_location_data_ca_tloc_ad_upzilla._PARENT_AURI || null,
            sufal192020_location_data_ca_tloc_ad_upzilla._ORDINAL_NUMBER ||
              null,
            sufal192020_location_data_ca_tloc_ad_upzilla._TOP_LEVEL_AURI ||
              null,
            sufal192020_location_data_ca_tloc_ad_upzilla.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_location_data_m_sh1_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_location_data_m_sh1?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_location_data_m_sh1 items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_location_data_m_sh1`,
          [],
          () => {
            console.log(
              'sufal192020_location_data_m_sh1 table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_location_data_m_sh1 (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,MOUZA_SHEET1_SHEETS_OTHERS_S_TYPES TEXT,MOUZA_SHEET1_SURVEY_TYPES TEXT,MOUZA_SHEET1_SHEETS_MOUZA1 TEXT,MOUZA_SHEET1_SHEETS_SHEET1 TEXT,MOUZA_SHEET1_SHEETS_PLOT_NO TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_location_data_m_sh1 table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_location_data_m_sh1 => {
          tx.executeSql(
            `INSERT INTO sufal192020_location_data_m_sh1 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_location_data_m_sh1._URI || null,
              sufal192020_location_data_m_sh1._CREATOR_URI_USER || null,
              sufal192020_location_data_m_sh1._CREATION_DATE || null,
              sufal192020_location_data_m_sh1._LAST_UPDATE_URI_USER || null,
              sufal192020_location_data_m_sh1._LAST_UPDATE_DATE || null,
              sufal192020_location_data_m_sh1._PARENT_AURI || null,
              sufal192020_location_data_m_sh1._ORDINAL_NUMBER || null,
              sufal192020_location_data_m_sh1._TOP_LEVEL_AURI || null,
              sufal192020_location_data_m_sh1.MOUZA_SHEET1_SHEETS_OTHERS_S_TYPES ||
                null,
              sufal192020_location_data_m_sh1.MOUZA_SHEET1_SURVEY_TYPES || null,
              sufal192020_location_data_m_sh1.MOUZA_SHEET1_SHEETS_MOUZA1 ||
                null,
              sufal192020_location_data_m_sh1.MOUZA_SHEET1_SHEETS_SHEET1 ||
                null,
              sufal192020_location_data_m_sh1.MOUZA_SHEET1_SHEETS_PLOT_NO ||
                null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_location_data_m_sh1 data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_location_data_m_sh1 data',
                error,
                sufal192020_location_data_m_sh1,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_location_data_m_sh1 data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_location_data_m_sh1_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_location_data_m_sh1?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_location_data_m_sh1 items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_location_data_m_sh1`,
          [],
          () => {
            console.log(
              'sufal192020_location_data_m_sh1 table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_location_data_m_sh1 (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,MOUZA_SHEET1_SHEETS_OTHERS_S_TYPES TEXT,MOUZA_SHEET1_SURVEY_TYPES TEXT,MOUZA_SHEET1_SHEETS_MOUZA1 TEXT,MOUZA_SHEET1_SHEETS_SHEET1 TEXT,MOUZA_SHEET1_SHEETS_PLOT_NO TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_location_data_m_sh1 table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_location_data_m_sh1 data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_location_data_m_sh1_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_location_data_m_sh1`, // Query the sufal192020_location_data_m_sh1 table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_location_data_m_sh1`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_location_data_m_sh1_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_location_data_m_sh1`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_location_data_m_sh1:',
            resultSet,
          );

          try {
            await sufal192020_location_data_m_sh1_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_location_data_m_sh1`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_location_data_m_sh1_create =
  sufal192020_location_data_m_sh1 => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_location_data_m_sh1
        tx.executeSql(
          `INSERT INTO sufal192020_location_data_m_sh1 (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,MOUZA_SHEET1_SHEETS_OTHERS_S_TYPES,MOUZA_SHEET1_SURVEY_TYPES,MOUZA_SHEET1_SHEETS_MOUZA1,MOUZA_SHEET1_SHEETS_SHEET1,MOUZA_SHEET1_SHEETS_PLOT_NO) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_location_data_m_sh1._URI || null,
            sufal192020_location_data_m_sh1._CREATOR_URI_USER || null,
            sufal192020_location_data_m_sh1._CREATION_DATE || null,
            sufal192020_location_data_m_sh1._LAST_UPDATE_URI_USER || null,
            sufal192020_location_data_m_sh1._LAST_UPDATE_DATE || null,
            sufal192020_location_data_m_sh1._PARENT_AURI || null,
            sufal192020_location_data_m_sh1._ORDINAL_NUMBER || null,
            sufal192020_location_data_m_sh1._TOP_LEVEL_AURI || null,
            sufal192020_location_data_m_sh1.MOUZA_SHEET1_SHEETS_OTHERS_S_TYPES ||
              null,
            sufal192020_location_data_m_sh1.MOUZA_SHEET1_SURVEY_TYPES || null,
            sufal192020_location_data_m_sh1.MOUZA_SHEET1_SHEETS_MOUZA1 || null,
            sufal192020_location_data_m_sh1.MOUZA_SHEET1_SHEETS_SHEET1 || null,
            sufal192020_location_data_m_sh1.MOUZA_SHEET1_SHEETS_PLOT_NO || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_overallnotes_ima_blb_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_overallnotes_ima_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_overallnotes_ima_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_overallnotes_ima_blb`,
          [],
          () => {
            console.log(
              'sufal192020_overallnotes_ima_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_overallnotes_ima_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_overallnotes_ima_blb table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_overallnotes_ima_blb => {
          tx.executeSql(
            `INSERT INTO sufal192020_overallnotes_ima_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_overallnotes_ima_blb._URI || null,
              sufal192020_overallnotes_ima_blb._CREATOR_URI_USER || null,
              sufal192020_overallnotes_ima_blb._CREATION_DATE || null,
              sufal192020_overallnotes_ima_blb._LAST_UPDATE_URI_USER || null,
              sufal192020_overallnotes_ima_blb._LAST_UPDATE_DATE || null,
              sufal192020_overallnotes_ima_blb._TOP_LEVEL_AURI || null,
              sufal192020_overallnotes_ima_blb.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_overallnotes_ima_blb data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_overallnotes_ima_blb data',
                error,
                sufal192020_overallnotes_ima_blb,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_overallnotes_ima_blb data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_overallnotes_ima_blb_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_overallnotes_ima_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_overallnotes_ima_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_overallnotes_ima_blb`,
          [],
          () => {
            console.log(
              'sufal192020_overallnotes_ima_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_overallnotes_ima_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_overallnotes_ima_blb table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_overallnotes_ima_blb data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_overallnotes_ima_blb_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_overallnotes_ima_blb`, // Query the sufal192020_overallnotes_ima_blb table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying sufal192020_overallnotes_ima_blb`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_overallnotes_ima_blb_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_overallnotes_ima_blb`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_overallnotes_ima_blb:',
            resultSet,
          );

          try {
            await sufal192020_overallnotes_ima_blb_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_overallnotes_ima_blb`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_overallnotes_ima_blb_create =
  sufal192020_overallnotes_ima_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_overallnotes_ima_blb
        tx.executeSql(
          `INSERT INTO sufal192020_overallnotes_ima_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_overallnotes_ima_blb._URI || null,
            sufal192020_overallnotes_ima_blb._CREATOR_URI_USER || null,
            sufal192020_overallnotes_ima_blb._CREATION_DATE || null,
            sufal192020_overallnotes_ima_blb._LAST_UPDATE_URI_USER || null,
            sufal192020_overallnotes_ima_blb._LAST_UPDATE_DATE || null,
            sufal192020_overallnotes_ima_blb._TOP_LEVEL_AURI || null,
            sufal192020_overallnotes_ima_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_weeding_month_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_weeding_month?token=${token}`,
    );
    const data = await response.json();
    console.log('Total sufal192020_weeding_month items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_weeding_month`,
          [],
          () => {
            console.log('sufal192020_weeding_month table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_weeding_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log('sufal192020_weeding_month table created successfully');
          },
          reject,
        );

        data.forEach(sufal192020_weeding_month => {
          tx.executeSql(
            `INSERT INTO sufal192020_weeding_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_weeding_month._URI || null,
              sufal192020_weeding_month._CREATOR_URI_USER || null,
              sufal192020_weeding_month._CREATION_DATE || null,
              sufal192020_weeding_month._LAST_UPDATE_URI_USER || null,
              sufal192020_weeding_month._LAST_UPDATE_DATE || null,
              sufal192020_weeding_month._PARENT_AURI || null,
              sufal192020_weeding_month._ORDINAL_NUMBER || null,
              sufal192020_weeding_month._TOP_LEVEL_AURI || null,
              sufal192020_weeding_month.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_weeding_month data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_weeding_month data',
                error,
                sufal192020_weeding_month,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_weeding_month data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_weeding_month_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_weeding_month?token=${token}`,
    );
    const data = await response.json();
    console.log('Total sufal192020_weeding_month items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_weeding_month`,
          [],
          () => {
            console.log('sufal192020_weeding_month table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_weeding_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log('sufal192020_weeding_month table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_weeding_month data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_weeding_month_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_weeding_month`, // Query the sufal192020_weeding_month table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying sufal192020_weeding_month`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_weeding_month_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_weeding_month`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_weeding_month:',
            resultSet,
          );

          try {
            await sufal192020_weeding_month_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_weeding_month`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_weeding_month_create = sufal192020_weeding_month => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert sufal192020_weeding_month
      tx.executeSql(
        `INSERT INTO sufal192020_weeding_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          sufal192020_weeding_month._URI || null,
          sufal192020_weeding_month._CREATOR_URI_USER || null,
          sufal192020_weeding_month._CREATION_DATE || null,
          sufal192020_weeding_month._LAST_UPDATE_URI_USER || null,
          sufal192020_weeding_month._LAST_UPDATE_DATE || null,
          sufal192020_weeding_month._PARENT_AURI || null,
          sufal192020_weeding_month._ORDINAL_NUMBER || null,
          sufal192020_weeding_month._TOP_LEVEL_AURI || null,
          sufal192020_weeding_month.VALUE || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_xpictureextra_blb_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_xpictureextra_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_xpictureextra_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_xpictureextra_blb`,
          [],
          () => {
            console.log(
              'sufal192020_xpictureextra_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_xpictureextra_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_xpictureextra_blb table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_xpictureextra_blb => {
          tx.executeSql(
            `INSERT INTO sufal192020_xpictureextra_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_xpictureextra_blb._URI || null,
              sufal192020_xpictureextra_blb._CREATOR_URI_USER || null,
              sufal192020_xpictureextra_blb._CREATION_DATE || null,
              sufal192020_xpictureextra_blb._LAST_UPDATE_URI_USER || null,
              sufal192020_xpictureextra_blb._LAST_UPDATE_DATE || null,
              sufal192020_xpictureextra_blb._TOP_LEVEL_AURI || null,
              sufal192020_xpictureextra_blb.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_xpictureextra_blb data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_xpictureextra_blb data',
                error,
                sufal192020_xpictureextra_blb,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_xpictureextra_blb data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_xpictureextra_blb_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_xpictureextra_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_xpictureextra_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_xpictureextra_blb`,
          [],
          () => {
            console.log(
              'sufal192020_xpictureextra_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_xpictureextra_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_xpictureextra_blb table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_xpictureextra_blb data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_xpictureextra_blb_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_xpictureextra_blb`, // Query the sufal192020_xpictureextra_blb table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying sufal192020_xpictureextra_blb`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_xpictureextra_blb_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_xpictureextra_blb`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_xpictureextra_blb:',
            resultSet,
          );

          try {
            await sufal192020_xpictureextra_blb_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_xpictureextra_blb`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_xpictureextra_blb_create =
  sufal192020_xpictureextra_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_xpictureextra_blb
        tx.executeSql(
          `INSERT INTO sufal192020_xpictureextra_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_xpictureextra_blb._URI || null,
            sufal192020_xpictureextra_blb._CREATOR_URI_USER || null,
            sufal192020_xpictureextra_blb._CREATION_DATE || null,
            sufal192020_xpictureextra_blb._LAST_UPDATE_URI_USER || null,
            sufal192020_xpictureextra_blb._LAST_UPDATE_DATE || null,
            sufal192020_xpictureextra_blb._TOP_LEVEL_AURI || null,
            sufal192020_xpictureextra_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_xpictureextra_bn_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_xpictureextra_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_xpictureextra_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_xpictureextra_bn`,
          [],
          () => {
            console.log(
              'sufal192020_xpictureextra_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_xpictureextra_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_xpictureextra_bn table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_xpictureextra_bn => {
          tx.executeSql(
            `INSERT INTO sufal192020_xpictureextra_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_xpictureextra_bn._URI || null,
              sufal192020_xpictureextra_bn._CREATOR_URI_USER || null,
              sufal192020_xpictureextra_bn._CREATION_DATE || null,
              sufal192020_xpictureextra_bn._LAST_UPDATE_URI_USER || null,
              sufal192020_xpictureextra_bn._LAST_UPDATE_DATE || null,
              sufal192020_xpictureextra_bn._PARENT_AURI || null,
              sufal192020_xpictureextra_bn._ORDINAL_NUMBER || null,
              sufal192020_xpictureextra_bn._TOP_LEVEL_AURI || null,
              sufal192020_xpictureextra_bn.UNROOTED_FILE_PATH || null,
              sufal192020_xpictureextra_bn.CONTENT_TYPE || null,
              sufal192020_xpictureextra_bn.CONTENT_LENGTH || null,
              sufal192020_xpictureextra_bn.CONTENT_HASH || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_xpictureextra_bn data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_xpictureextra_bn data',
                error,
                sufal192020_xpictureextra_bn,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_xpictureextra_bn data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_xpictureextra_bn_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_xpictureextra_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_xpictureextra_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_xpictureextra_bn`,
          [],
          () => {
            console.log(
              'sufal192020_xpictureextra_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_xpictureextra_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_xpictureextra_bn table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_xpictureextra_bn data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_xpictureextra_bn_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_xpictureextra_bn`, // Query the sufal192020_xpictureextra_bn table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying sufal192020_xpictureextra_bn`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_xpictureextra_bn_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_xpictureextra_bn`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_xpictureextra_bn:',
            resultSet,
          );

          try {
            await sufal192020_xpictureextra_bn_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_xpictureextra_bn`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_xpictureextra_bn_create =
  sufal192020_xpictureextra_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_xpictureextra_bn
        tx.executeSql(
          `INSERT INTO sufal192020_xpictureextra_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_xpictureextra_bn._URI || null,
            sufal192020_xpictureextra_bn._CREATOR_URI_USER || null,
            sufal192020_xpictureextra_bn._CREATION_DATE || null,
            sufal192020_xpictureextra_bn._LAST_UPDATE_URI_USER || null,
            sufal192020_xpictureextra_bn._LAST_UPDATE_DATE || null,
            sufal192020_xpictureextra_bn._PARENT_AURI || null,
            sufal192020_xpictureextra_bn._ORDINAL_NUMBER || null,
            sufal192020_xpictureextra_bn._TOP_LEVEL_AURI || null,
            sufal192020_xpictureextra_bn.UNROOTED_FILE_PATH || null,
            sufal192020_xpictureextra_bn.CONTENT_TYPE || null,
            sufal192020_xpictureextra_bn.CONTENT_LENGTH || null,
            sufal192020_xpictureextra_bn.CONTENT_HASH || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal192020_xpictureextra_ref_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_xpictureextra_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_xpictureextra_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_xpictureextra_ref`,
          [],
          () => {
            console.log(
              'sufal192020_xpictureextra_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_xpictureextra_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_xpictureextra_ref table created successfully',
            );
          },
          reject,
        );

        data.forEach(sufal192020_xpictureextra_ref => {
          tx.executeSql(
            `INSERT INTO sufal192020_xpictureextra_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal192020_xpictureextra_ref._URI || null,
              sufal192020_xpictureextra_ref._CREATOR_URI_USER || null,
              sufal192020_xpictureextra_ref._CREATION_DATE || null,
              sufal192020_xpictureextra_ref._LAST_UPDATE_URI_USER || null,
              sufal192020_xpictureextra_ref._LAST_UPDATE_DATE || null,
              sufal192020_xpictureextra_ref._DOM_AURI || null,
              sufal192020_xpictureextra_ref._SUB_AURI || null,
              sufal192020_xpictureextra_ref._TOP_LEVEL_AURI || null,
              sufal192020_xpictureextra_ref.PART || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal192020_xpictureextra_ref data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal192020_xpictureextra_ref data',
                error,
                sufal192020_xpictureextra_ref,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_xpictureextra_ref data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal192020_xpictureextra_ref_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal192020_xpictureextra_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total sufal192020_xpictureextra_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal192020_xpictureextra_ref`,
          [],
          () => {
            console.log(
              'sufal192020_xpictureextra_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal192020_xpictureextra_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'sufal192020_xpictureextra_ref table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching sufal192020_xpictureextra_ref data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal192020_xpictureextra_ref_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal192020_xpictureextra_ref`, // Query the sufal192020_xpictureextra_ref table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying sufal192020_xpictureextra_ref`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal192020_xpictureextra_ref_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal192020_xpictureextra_ref`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from sufal192020_xpictureextra_ref:',
            resultSet,
          );

          try {
            await sufal192020_xpictureextra_ref_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from sufal192020_xpictureextra_ref`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal192020_xpictureextra_ref_create =
  sufal192020_xpictureextra_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal192020_xpictureextra_ref
        tx.executeSql(
          `INSERT INTO sufal192020_xpictureextra_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal192020_xpictureextra_ref._URI || null,
            sufal192020_xpictureextra_ref._CREATOR_URI_USER || null,
            sufal192020_xpictureextra_ref._CREATION_DATE || null,
            sufal192020_xpictureextra_ref._LAST_UPDATE_URI_USER || null,
            sufal192020_xpictureextra_ref._LAST_UPDATE_DATE || null,
            sufal192020_xpictureextra_ref._DOM_AURI || null,
            sufal192020_xpictureextra_ref._SUB_AURI || null,
            sufal192020_xpictureextra_ref._TOP_LEVEL_AURI || null,
            sufal192020_xpictureextra_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal_13_2021_core_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal_13_2021_core?token=${token}`,
    );
    const data = await response.json();
    console.log('Total sufal_13_2021_core items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal_13_2021_core`,
          [],
          () => {
            console.log('sufal_13_2021_core table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal_13_2021_core (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,FOREST_AD_TLOC_FD_DIVISION TEXT,FOREST_AD_TLOC_PLANT_TYPE TEXT,FOREST_AD_TLOC_PLANT_YEAR TEXT,REG_AVG_SEEDLING_ALL_PLOTS TEXT,PHONENUMBER TEXT,FOREST_AD_TLOC_FD_BEAT TEXT,FOREST_AD_TLOC_FD_CIR TEXT,START_RAW TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_62 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_63 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_64 TEXT,CHECKED TEXT,FOREST_AD_TLOC_ENTER_DIV TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_65 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_66 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_67 TEXT,META_INSTANCE_ID TEXT,SIMSERIAL TEXT,END_RAW TEXT,CHECKED_BY TEXT,TODAY TEXT,REG_AVG_SEEDLING_PER_HA_ALL_PLOTS TEXT,SUBSCRIBERID TEXT,FOREST_AD_TLOC_FD_BEAT_TXT TEXT,FOREST_AD_TLOC_FD_RANGE TEXT,REG_PLOT_NO TEXT,DEVICEID TEXT,FOREST_AD_GENERATED_NOTE_NAME_13 TEXT,FOREST_AD_TLOC_ENTER_RANGE TEXT,FOREST_AD_TLOC_FD_RANGE_TXT TEXT,REG_AVG_TREES_PER_HA_ALL_PLOTS TEXT,START TEXT,END TEXT,REG_AVG_TREES_ALL_PLOTS TEXT,TODAY_RAW TEXT,APPROVED TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT)`,
          [],
          () => {
            console.log('sufal_13_2021_core table created successfully');
          },
          reject,
        );

        data.forEach(sufal_13_2021_core => {
          tx.executeSql(
            `INSERT INTO sufal_13_2021_core VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              sufal_13_2021_core._URI || null,
              sufal_13_2021_core._CREATOR_URI_USER || null,
              sufal_13_2021_core._CREATION_DATE || null,
              sufal_13_2021_core._LAST_UPDATE_URI_USER || null,
              sufal_13_2021_core._LAST_UPDATE_DATE || null,
              sufal_13_2021_core._MODEL_VERSION || null,
              sufal_13_2021_core._UI_VERSION || null,
              sufal_13_2021_core._IS_COMPLETE || null,
              sufal_13_2021_core._SUBMISSION_DATE || null,
              sufal_13_2021_core._MARKED_AS_COMPLETE_DATE || null,
              sufal_13_2021_core.FOREST_AD_TLOC_FD_DIVISION || null,
              sufal_13_2021_core.FOREST_AD_TLOC_PLANT_TYPE || null,
              sufal_13_2021_core.FOREST_AD_TLOC_PLANT_YEAR || null,
              sufal_13_2021_core.REG_AVG_SEEDLING_ALL_PLOTS || null,
              sufal_13_2021_core.PHONENUMBER || null,
              sufal_13_2021_core.FOREST_AD_TLOC_FD_BEAT || null,
              sufal_13_2021_core.FOREST_AD_TLOC_FD_CIR || null,
              sufal_13_2021_core.START_RAW || null,
              sufal_13_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_62 || null,
              sufal_13_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_63 || null,
              sufal_13_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_64 || null,
              sufal_13_2021_core.CHECKED || null,
              sufal_13_2021_core.FOREST_AD_TLOC_ENTER_DIV || null,
              sufal_13_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_65 || null,
              sufal_13_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_66 || null,
              sufal_13_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_67 || null,
              sufal_13_2021_core.META_INSTANCE_ID || null,
              sufal_13_2021_core.SIMSERIAL || null,
              sufal_13_2021_core.END_RAW || null,
              sufal_13_2021_core.CHECKED_BY || null,
              sufal_13_2021_core.TODAY || null,
              sufal_13_2021_core.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS || null,
              sufal_13_2021_core.SUBSCRIBERID || null,
              sufal_13_2021_core.FOREST_AD_TLOC_FD_BEAT_TXT || null,
              sufal_13_2021_core.FOREST_AD_TLOC_FD_RANGE || null,
              sufal_13_2021_core.REG_PLOT_NO || null,
              sufal_13_2021_core.DEVICEID || null,
              sufal_13_2021_core.FOREST_AD_GENERATED_NOTE_NAME_13 || null,
              sufal_13_2021_core.FOREST_AD_TLOC_ENTER_RANGE || null,
              sufal_13_2021_core.FOREST_AD_TLOC_FD_RANGE_TXT || null,
              sufal_13_2021_core.REG_AVG_TREES_PER_HA_ALL_PLOTS || null,
              sufal_13_2021_core.START || null,
              sufal_13_2021_core.END || null,
              sufal_13_2021_core.REG_AVG_TREES_ALL_PLOTS || null,
              sufal_13_2021_core.TODAY_RAW || null,
              sufal_13_2021_core.APPROVED || null,
              sufal_13_2021_core.project_id || null,
              sufal_13_2021_core.sort || null,
              sufal_13_2021_core.last_log_id || null,
              sufal_13_2021_core.restore_id || null,
              sufal_13_2021_core.created_at || null,
              sufal_13_2021_core.created_by || null,
              sufal_13_2021_core.updated_at || null,
              sufal_13_2021_core.updated_by || null,
              sufal_13_2021_core.deleted_at || null,
              sufal_13_2021_core.deleted_by || null,
              sufal_13_2021_core.deleted_status || null,
              sufal_13_2021_core.status || null,
            ],
            (_, resultSet) =>
              console.log(
                'sufal_13_2021_core data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting sufal_13_2021_core data',
                error,
                sufal_13_2021_core,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching sufal_13_2021_core data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal_13_2021_core_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/sufal_13_2021_core?token=${token}`,
    );
    const data = await response.json();
    console.log('Total sufal_13_2021_core items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS sufal_13_2021_core`,
          [],
          () => {
            console.log('sufal_13_2021_core table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS sufal_13_2021_core (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_MODEL_VERSION TEXT,_UI_VERSION TEXT,_IS_COMPLETE TEXT,_SUBMISSION_DATE TEXT,_MARKED_AS_COMPLETE_DATE TEXT,FOREST_AD_TLOC_FD_DIVISION TEXT,FOREST_AD_TLOC_PLANT_TYPE TEXT,FOREST_AD_TLOC_PLANT_YEAR TEXT,REG_AVG_SEEDLING_ALL_PLOTS TEXT,PHONENUMBER TEXT,FOREST_AD_TLOC_FD_BEAT TEXT,FOREST_AD_TLOC_FD_CIR TEXT,START_RAW TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_62 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_63 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_64 TEXT,CHECKED TEXT,FOREST_AD_TLOC_ENTER_DIV TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_65 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_66 TEXT,REGIN_NOTE_GENERATED_NOTE_NAME_67 TEXT,META_INSTANCE_ID TEXT,SIMSERIAL TEXT,END_RAW TEXT,CHECKED_BY TEXT,TODAY TEXT,REG_AVG_SEEDLING_PER_HA_ALL_PLOTS TEXT,SUBSCRIBERID TEXT,FOREST_AD_TLOC_FD_BEAT_TXT TEXT,FOREST_AD_TLOC_FD_RANGE TEXT,REG_PLOT_NO TEXT,DEVICEID TEXT,FOREST_AD_GENERATED_NOTE_NAME_13 TEXT,FOREST_AD_TLOC_ENTER_RANGE TEXT,FOREST_AD_TLOC_FD_RANGE_TXT TEXT,REG_AVG_TREES_PER_HA_ALL_PLOTS TEXT,START TEXT,END TEXT,REG_AVG_TREES_ALL_PLOTS TEXT,TODAY_RAW TEXT,APPROVED TEXT,project_id TEXT,sort TEXT,last_log_id TEXT,restore_id TEXT,created_at TEXT,created_by TEXT,updated_at TEXT,updated_by TEXT,deleted_at TEXT,deleted_by TEXT,deleted_status TEXT,status TEXT)`,
          [],
          () => {
            console.log('sufal_13_2021_core table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching sufal_13_2021_core data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal_13_2021_core_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM sufal_13_2021_core`, // Query the sufal_13_2021_core table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying sufal_13_2021_core`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal_13_2021_core_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM sufal_13_2021_core`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from sufal_13_2021_core:', resultSet);

          try {
            await sufal_13_2021_core_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from sufal_13_2021_core`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal_13_2021_core_create = sufal_13_2021_core => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert sufal_13_2021_core
      tx.executeSql(
        `INSERT INTO sufal_13_2021_core (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_MODEL_VERSION,_UI_VERSION,_IS_COMPLETE,_SUBMISSION_DATE,_MARKED_AS_COMPLETE_DATE,FOREST_AD_TLOC_FD_DIVISION,FOREST_AD_TLOC_PLANT_TYPE,FOREST_AD_TLOC_PLANT_YEAR,REG_AVG_SEEDLING_ALL_PLOTS,PHONENUMBER,FOREST_AD_TLOC_FD_BEAT,FOREST_AD_TLOC_FD_CIR,START_RAW,REGIN_NOTE_GENERATED_NOTE_NAME_62,REGIN_NOTE_GENERATED_NOTE_NAME_63,REGIN_NOTE_GENERATED_NOTE_NAME_64,CHECKED,FOREST_AD_TLOC_ENTER_DIV,REGIN_NOTE_GENERATED_NOTE_NAME_65,REGIN_NOTE_GENERATED_NOTE_NAME_66,REGIN_NOTE_GENERATED_NOTE_NAME_67,META_INSTANCE_ID,SIMSERIAL,END_RAW,CHECKED_BY,TODAY,REG_AVG_SEEDLING_PER_HA_ALL_PLOTS,SUBSCRIBERID,FOREST_AD_TLOC_FD_BEAT_TXT,FOREST_AD_TLOC_FD_RANGE,REG_PLOT_NO,DEVICEID,FOREST_AD_GENERATED_NOTE_NAME_13,FOREST_AD_TLOC_ENTER_RANGE,FOREST_AD_TLOC_FD_RANGE_TXT,REG_AVG_TREES_PER_HA_ALL_PLOTS,START,END,REG_AVG_TREES_ALL_PLOTS,TODAY_RAW,APPROVED,project_id,sort,last_log_id,restore_id,created_at,created_by,updated_at,updated_by,d
eleted_at,deleted_by,deleted_status,status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          sufal_13_2021_core._URI || null,
          sufal_13_2021_core._CREATOR_URI_USER || null,
          sufal_13_2021_core._CREATION_DATE || null,
          sufal_13_2021_core._LAST_UPDATE_URI_USER || null,
          sufal_13_2021_core._LAST_UPDATE_DATE || null,
          sufal_13_2021_core._MODEL_VERSION || null,
          sufal_13_2021_core._UI_VERSION || null,
          sufal_13_2021_core._IS_COMPLETE || null,
          sufal_13_2021_core._SUBMISSION_DATE || null,
          sufal_13_2021_core._MARKED_AS_COMPLETE_DATE || null,
          sufal_13_2021_core.FOREST_AD_TLOC_FD_DIVISION || null,
          sufal_13_2021_core.FOREST_AD_TLOC_PLANT_TYPE || null,
          sufal_13_2021_core.FOREST_AD_TLOC_PLANT_YEAR || null,
          sufal_13_2021_core.REG_AVG_SEEDLING_ALL_PLOTS || null,
          sufal_13_2021_core.PHONENUMBER || null,
          sufal_13_2021_core.FOREST_AD_TLOC_FD_BEAT || null,
          sufal_13_2021_core.FOREST_AD_TLOC_FD_CIR || null,
          sufal_13_2021_core.START_RAW || null,
          sufal_13_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_62 || null,
          sufal_13_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_63 || null,
          sufal_13_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_64 || null,
          sufal_13_2021_core.CHECKED || null,
          sufal_13_2021_core.FOREST_AD_TLOC_ENTER_DIV || null,
          sufal_13_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_65 || null,
          sufal_13_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_66 || null,
          sufal_13_2021_core.REGIN_NOTE_GENERATED_NOTE_NAME_67 || null,
          sufal_13_2021_core.META_INSTANCE_ID || null,
          sufal_13_2021_core.SIMSERIAL || null,
          sufal_13_2021_core.END_RAW || null,
          sufal_13_2021_core.CHECKED_BY || null,
          sufal_13_2021_core.TODAY || null,
          sufal_13_2021_core.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS || null,
          sufal_13_2021_core.SUBSCRIBERID || null,
          sufal_13_2021_core.FOREST_AD_TLOC_FD_BEAT_TXT || null,
          sufal_13_2021_core.FOREST_AD_TLOC_FD_RANGE || null,
          sufal_13_2021_core.REG_PLOT_NO || null,
          sufal_13_2021_core.DEVICEID || null,
          sufal_13_2021_core.FOREST_AD_GENERATED_NOTE_NAME_13 || null,
          sufal_13_2021_core.FOREST_AD_TLOC_ENTER_RANGE || null,
          sufal_13_2021_core.FOREST_AD_TLOC_FD_RANGE_TXT || null,
          sufal_13_2021_core.REG_AVG_TREES_PER_HA_ALL_PLOTS || null,
          sufal_13_2021_core.START || null,
          sufal_13_2021_core.END || null,
          sufal_13_2021_core.REG_AVG_TREES_ALL_PLOTS || null,
          sufal_13_2021_core.TODAY_RAW || null,
          sufal_13_2021_core.APPROVED || null,
          sufal_13_2021_core.project_id || null,
          sufal_13_2021_core.sort || null,
          sufal_13_2021_core.last_log_id || null,
          sufal_13_2021_core.restore_id || null,
          sufal_13_2021_core.created_at || null,
          sufal_13_2021_core.created_by || null,
          sufal_13_2021_core.updated_at || null,
          sufal_13_2021_core.updated_by || null,
          sufal_13_2021_core.deleted_at || null,
          sufal_13_2021_core.deleted_by || null,
          sufal_13_2021_core.deleted_status || null,
          sufal_13_2021_core.status || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb table created successfully',
              );
            },
            reject,
          );

          data.forEach(sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb => {
            tx.executeSql(
              `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
              [
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb._URI || null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb._CREATOR_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb._CREATION_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb._LAST_UPDATE_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb._LAST_UPDATE_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb._TOP_LEVEL_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb.VALUE || null,
              ],
              (_, resultSet) =>
                console.log(
                  'sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb data',
                  error,
                  sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb`, // Query the sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb:',
              resultSet,
            );

            try {
              await sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb_create =
  sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb
        tx.executeSql(
          `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb._URI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb._CREATOR_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb._CREATION_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb._LAST_UPDATE_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb._LAST_UPDATE_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb._TOP_LEVEL_AURI ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn table created successfully',
              );
            },
            reject,
          );

          data.forEach(sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn => {
            tx.executeSql(
              `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn._URI || null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn._CREATOR_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn._CREATION_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn._LAST_UPDATE_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn._LAST_UPDATE_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn._PARENT_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn._ORDINAL_NUMBER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn._TOP_LEVEL_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn.UNROOTED_FILE_PATH ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn.CONTENT_TYPE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn.CONTENT_LENGTH ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn.CONTENT_HASH ||
                  null,
              ],
              (_, resultSet) =>
                console.log(
                  'sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn data',
                  error,
                  sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn`, // Query the sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn:',
              resultSet,
            );

            try {
              await sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn_create =
  sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn
        tx.executeSql(
          `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn._URI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn._CREATOR_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn._CREATION_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn._LAST_UPDATE_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn._LAST_UPDATE_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn._PARENT_AURI ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn._ORDINAL_NUMBER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn._TOP_LEVEL_AURI ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn.UNROOTED_FILE_PATH ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn.CONTENT_TYPE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn.CONTENT_LENGTH ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn.CONTENT_HASH ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const com202021_conslttn_ttndnc_pctre_consultation_notes_bn_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_notes_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total com202021_conslttn_ttndnc_pctre_consultation_notes_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS com202021_conslttn_ttndnc_pctre_consultation_notes_bn`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_notes_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS com202021_conslttn_ttndnc_pctre_consultation_notes_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_notes_bn table created successfully',
              );
            },
            reject,
          );

          data.forEach(
            com202021_conslttn_ttndnc_pctre_consultation_notes_bn => {
              tx.executeSql(
                `INSERT INTO com202021_conslttn_ttndnc_pctre_consultation_notes_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                [
                  com202021_conslttn_ttndnc_pctre_consultation_notes_bn._URI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_bn._CREATOR_URI_USER ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_bn._CREATION_DATE ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_bn._LAST_UPDATE_URI_USER ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_bn._LAST_UPDATE_DATE ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_bn._PARENT_AURI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_bn._ORDINAL_NUMBER ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_bn._TOP_LEVEL_AURI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_bn.UNROOTED_FILE_PATH ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_bn.CONTENT_TYPE ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_bn.CONTENT_LENGTH ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_bn.CONTENT_HASH ||
                    null,
                ],
                (_, resultSet) =>
                  console.log(
                    'com202021_conslttn_ttndnc_pctre_consultation_notes_bn data inserted successfully',
                    resultSet,
                  ),
                (_, error) => {
                  console.error(
                    'Error inserting com202021_conslttn_ttndnc_pctre_consultation_notes_bn data',
                    error,
                    com202021_conslttn_ttndnc_pctre_consultation_notes_bn,
                  );
                },
              );
            },
          );
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching com202021_conslttn_ttndnc_pctre_consultation_notes_bn data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const com202021_conslttn_ttndnc_pctre_consultation_notes_bn_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_notes_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total com202021_conslttn_ttndnc_pctre_consultation_notes_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS com202021_conslttn_ttndnc_pctre_consultation_notes_bn`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_notes_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS com202021_conslttn_ttndnc_pctre_consultation_notes_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_notes_bn table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching com202021_conslttn_ttndnc_pctre_consultation_notes_bn data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const com202021_conslttn_ttndnc_pctre_consultation_notes_bn_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM com202021_conslttn_ttndnc_pctre_consultation_notes_bn`, // Query the com202021_conslttn_ttndnc_pctre_consultation_notes_bn table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying com202021_conslttn_ttndnc_pctre_consultation_notes_bn`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const com202021_conslttn_ttndnc_pctre_consultation_notes_bn_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM com202021_conslttn_ttndnc_pctre_consultation_notes_bn`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from com202021_conslttn_ttndnc_pctre_consultation_notes_bn:',
              resultSet,
            );

            try {
              await com202021_conslttn_ttndnc_pctre_consultation_notes_bn_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from com202021_conslttn_ttndnc_pctre_consultation_notes_bn`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const com202021_conslttn_ttndnc_pctre_consultation_notes_bn_create =
  com202021_conslttn_ttndnc_pctre_consultation_notes_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert com202021_conslttn_ttndnc_pctre_consultation_notes_bn
        tx.executeSql(
          `INSERT INTO com202021_conslttn_ttndnc_pctre_consultation_notes_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            com202021_conslttn_ttndnc_pctre_consultation_notes_bn._URI || null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_bn._CREATOR_URI_USER ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_bn._CREATION_DATE ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_bn._LAST_UPDATE_URI_USER ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_bn._LAST_UPDATE_DATE ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_bn._PARENT_AURI ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_bn._ORDINAL_NUMBER ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_bn._TOP_LEVEL_AURI ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_bn.UNROOTED_FILE_PATH ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_bn.CONTENT_TYPE ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_bn.CONTENT_LENGTH ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_bn.CONTENT_HASH ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const com202021_conslttn_ttndnc_pctre_consultation_notes_ref_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_notes_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total com202021_conslttn_ttndnc_pctre_consultation_notes_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS com202021_conslttn_ttndnc_pctre_consultation_notes_ref`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_notes_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS com202021_conslttn_ttndnc_pctre_consultation_notes_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_notes_ref table created successfully',
              );
            },
            reject,
          );

          data.forEach(
            com202021_conslttn_ttndnc_pctre_consultation_notes_ref => {
              tx.executeSql(
                `INSERT INTO com202021_conslttn_ttndnc_pctre_consultation_notes_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                [
                  com202021_conslttn_ttndnc_pctre_consultation_notes_ref._URI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_ref._CREATOR_URI_USER ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_ref._CREATION_DATE ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_ref._LAST_UPDATE_URI_USER ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_ref._LAST_UPDATE_DATE ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_ref._DOM_AURI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_ref._SUB_AURI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_ref._TOP_LEVEL_AURI ||
                    null,
                  com202021_conslttn_ttndnc_pctre_consultation_notes_ref.PART ||
                    null,
                ],
                (_, resultSet) =>
                  console.log(
                    'com202021_conslttn_ttndnc_pctre_consultation_notes_ref data inserted successfully',
                    resultSet,
                  ),
                (_, error) => {
                  console.error(
                    'Error inserting com202021_conslttn_ttndnc_pctre_consultation_notes_ref data',
                    error,
                    com202021_conslttn_ttndnc_pctre_consultation_notes_ref,
                  );
                },
              );
            },
          );
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching com202021_conslttn_ttndnc_pctre_consultation_notes_ref data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const com202021_conslttn_ttndnc_pctre_consultation_notes_ref_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_notes_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total com202021_conslttn_ttndnc_pctre_consultation_notes_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS com202021_conslttn_ttndnc_pctre_consultation_notes_ref`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_notes_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS com202021_conslttn_ttndnc_pctre_consultation_notes_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'com202021_conslttn_ttndnc_pctre_consultation_notes_ref table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching com202021_conslttn_ttndnc_pctre_consultation_notes_ref data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const com202021_conslttn_ttndnc_pctre_consultation_notes_ref_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM com202021_conslttn_ttndnc_pctre_consultation_notes_ref`, // Query the com202021_conslttn_ttndnc_pctre_consultation_notes_ref table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying com202021_conslttn_ttndnc_pctre_consultation_notes_ref`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const com202021_conslttn_ttndnc_pctre_consultation_notes_ref_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM com202021_conslttn_ttndnc_pctre_consultation_notes_ref`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from com202021_conslttn_ttndnc_pctre_consultation_notes_ref:',
              resultSet,
            );

            try {
              await com202021_conslttn_ttndnc_pctre_consultation_notes_ref_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from com202021_conslttn_ttndnc_pctre_consultation_notes_ref`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const com202021_conslttn_ttndnc_pctre_consultation_notes_ref_create =
  com202021_conslttn_ttndnc_pctre_consultation_notes_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert com202021_conslttn_ttndnc_pctre_consultation_notes_ref
        tx.executeSql(
          `INSERT INTO com202021_conslttn_ttndnc_pctre_consultation_notes_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            com202021_conslttn_ttndnc_pctre_consultation_notes_ref._URI || null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_ref._CREATOR_URI_USER ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_ref._CREATION_DATE ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_ref._LAST_UPDATE_URI_USER ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_ref._LAST_UPDATE_DATE ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_ref._DOM_AURI ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_ref._SUB_AURI ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_ref._TOP_LEVEL_AURI ||
              null,
            com202021_conslttn_ttndnc_pctre_consultation_notes_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const com202021_consultation_issues_others_ques_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/com202021_consultation_issues_others_ques?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total com202021_consultation_issues_others_ques items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_consultation_issues_others_ques`,
          [],
          () => {
            console.log(
              'com202021_consultation_issues_others_ques table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_consultation_issues_others_ques (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GENERATED_NOTE_NAME_56 TEXT,OTHERS_ISSUES TEXT,OTHERS_ISSUES_ANS TEXT)`,
          [],
          () => {
            console.log(
              'com202021_consultation_issues_others_ques table created successfully',
            );
          },
          reject,
        );

        data.forEach(com202021_consultation_issues_others_ques => {
          tx.executeSql(
            `INSERT INTO com202021_consultation_issues_others_ques VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              com202021_consultation_issues_others_ques._URI || null,
              com202021_consultation_issues_others_ques._CREATOR_URI_USER ||
                null,
              com202021_consultation_issues_others_ques._CREATION_DATE || null,
              com202021_consultation_issues_others_ques._LAST_UPDATE_URI_USER ||
                null,
              com202021_consultation_issues_others_ques._LAST_UPDATE_DATE ||
                null,
              com202021_consultation_issues_others_ques._PARENT_AURI || null,
              com202021_consultation_issues_others_ques._ORDINAL_NUMBER || null,
              com202021_consultation_issues_others_ques._TOP_LEVEL_AURI || null,
              com202021_consultation_issues_others_ques.GENERATED_NOTE_NAME_56 ||
                null,
              com202021_consultation_issues_others_ques.OTHERS_ISSUES || null,
              com202021_consultation_issues_others_ques.OTHERS_ISSUES_ANS ||
                null,
            ],
            (_, resultSet) =>
              console.log(
                'com202021_consultation_issues_others_ques data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting com202021_consultation_issues_others_ques data',
                error,
                com202021_consultation_issues_others_ques,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching com202021_consultation_issues_others_ques data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const com202021_consultation_issues_others_ques_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/com202021_consultation_issues_others_ques?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total com202021_consultation_issues_others_ques items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_consultation_issues_others_ques`,
          [],
          () => {
            console.log(
              'com202021_consultation_issues_others_ques table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_consultation_issues_others_ques (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GENERATED_NOTE_NAME_56 TEXT,OTHERS_ISSUES TEXT,OTHERS_ISSUES_ANS TEXT)`,
          [],
          () => {
            console.log(
              'com202021_consultation_issues_others_ques table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching com202021_consultation_issues_others_ques data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const com202021_consultation_issues_others_ques_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM com202021_consultation_issues_others_ques`, // Query the com202021_consultation_issues_others_ques table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying com202021_consultation_issues_others_ques`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const com202021_consultation_issues_others_ques_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM com202021_consultation_issues_others_ques`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from com202021_consultation_issues_others_ques:',
            resultSet,
          );

          try {
            await com202021_consultation_issues_others_ques_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from com202021_consultation_issues_others_ques`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const com202021_consultation_issues_others_ques_create =
  com202021_consultation_issues_others_ques => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert com202021_consultation_issues_others_ques
        tx.executeSql(
          `INSERT INTO com202021_consultation_issues_others_ques (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,GENERATED_NOTE_NAME_56,OTHERS_ISSUES,OTHERS_ISSUES_ANS) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            com202021_consultation_issues_others_ques._URI || null,
            com202021_consultation_issues_others_ques._CREATOR_URI_USER || null,
            com202021_consultation_issues_others_ques._CREATION_DATE || null,
            com202021_consultation_issues_others_ques._LAST_UPDATE_URI_USER ||
              null,
            com202021_consultation_issues_others_ques._LAST_UPDATE_DATE || null,
            com202021_consultation_issues_others_ques._PARENT_AURI || null,
            com202021_consultation_issues_others_ques._ORDINAL_NUMBER || null,
            com202021_consultation_issues_others_ques._TOP_LEVEL_AURI || null,
            com202021_consultation_issues_others_ques.GENERATED_NOTE_NAME_56 ||
              null,
            com202021_consultation_issues_others_ques.OTHERS_ISSUES || null,
            com202021_consultation_issues_others_ques.OTHERS_ISSUES_ANS || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const com202021_consultation_photo_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/com202021_consultation_photo?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total com202021_consultation_photo items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_consultation_photo`,
          [],
          () => {
            console.log(
              'com202021_consultation_photo table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_consultation_photo (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GENERATED_NOTE_NAME_36 TEXT)`,
          [],
          () => {
            console.log(
              'com202021_consultation_photo table created successfully',
            );
          },
          reject,
        );

        data.forEach(com202021_consultation_photo => {
          tx.executeSql(
            `INSERT INTO com202021_consultation_photo VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              com202021_consultation_photo._URI || null,
              com202021_consultation_photo._CREATOR_URI_USER || null,
              com202021_consultation_photo._CREATION_DATE || null,
              com202021_consultation_photo._LAST_UPDATE_URI_USER || null,
              com202021_consultation_photo._LAST_UPDATE_DATE || null,
              com202021_consultation_photo._PARENT_AURI || null,
              com202021_consultation_photo._ORDINAL_NUMBER || null,
              com202021_consultation_photo._TOP_LEVEL_AURI || null,
              com202021_consultation_photo.GENERATED_NOTE_NAME_36 || null,
            ],
            (_, resultSet) =>
              console.log(
                'com202021_consultation_photo data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting com202021_consultation_photo data',
                error,
                com202021_consultation_photo,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching com202021_consultation_photo data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const com202021_consultation_photo_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/com202021_consultation_photo?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total com202021_consultation_photo items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_consultation_photo`,
          [],
          () => {
            console.log(
              'com202021_consultation_photo table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_consultation_photo (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GENERATED_NOTE_NAME_36 TEXT)`,
          [],
          () => {
            console.log(
              'com202021_consultation_photo table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching com202021_consultation_photo data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const com202021_consultation_photo_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM com202021_consultation_photo`, // Query the com202021_consultation_photo table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying com202021_consultation_photo`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const com202021_consultation_photo_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM com202021_consultation_photo`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from com202021_consultation_photo:',
            resultSet,
          );

          try {
            await com202021_consultation_photo_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from com202021_consultation_photo`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const com202021_consultation_photo_create =
  com202021_consultation_photo => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert com202021_consultation_photo
        tx.executeSql(
          `INSERT INTO com202021_consultation_photo (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,GENERATED_NOTE_NAME_36) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            com202021_consultation_photo._URI || null,
            com202021_consultation_photo._CREATOR_URI_USER || null,
            com202021_consultation_photo._CREATION_DATE || null,
            com202021_consultation_photo._LAST_UPDATE_URI_USER || null,
            com202021_consultation_photo._LAST_UPDATE_DATE || null,
            com202021_consultation_photo._PARENT_AURI || null,
            com202021_consultation_photo._ORDINAL_NUMBER || null,
            com202021_consultation_photo._TOP_LEVEL_AURI || null,
            com202021_consultation_photo.GENERATED_NOTE_NAME_36 || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const com202021_consultation_picture_blb_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/com202021_consultation_picture_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total com202021_consultation_picture_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_consultation_picture_blb`,
          [],
          () => {
            console.log(
              'com202021_consultation_picture_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_consultation_picture_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'com202021_consultation_picture_blb table created successfully',
            );
          },
          reject,
        );

        data.forEach(com202021_consultation_picture_blb => {
          tx.executeSql(
            `INSERT INTO com202021_consultation_picture_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              com202021_consultation_picture_blb._URI || null,
              com202021_consultation_picture_blb._CREATOR_URI_USER || null,
              com202021_consultation_picture_blb._CREATION_DATE || null,
              com202021_consultation_picture_blb._LAST_UPDATE_URI_USER || null,
              com202021_consultation_picture_blb._LAST_UPDATE_DATE || null,
              com202021_consultation_picture_blb._TOP_LEVEL_AURI || null,
              com202021_consultation_picture_blb.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'com202021_consultation_picture_blb data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting com202021_consultation_picture_blb data',
                error,
                com202021_consultation_picture_blb,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching com202021_consultation_picture_blb data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const com202021_consultation_picture_blb_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/com202021_consultation_picture_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total com202021_consultation_picture_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS com202021_consultation_picture_blb`,
          [],
          () => {
            console.log(
              'com202021_consultation_picture_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS com202021_consultation_picture_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'com202021_consultation_picture_blb table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching com202021_consultation_picture_blb data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const com202021_consultation_picture_blb_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM com202021_consultation_picture_blb`, // Query the com202021_consultation_picture_blb table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying com202021_consultation_picture_blb`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const com202021_consultation_picture_blb_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM com202021_consultation_picture_blb`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from com202021_consultation_picture_blb:',
            resultSet,
          );

          try {
            await com202021_consultation_picture_blb_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from com202021_consultation_picture_blb`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const com202021_consultation_picture_blb_create =
  com202021_consultation_picture_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert com202021_consultation_picture_blb
        tx.executeSql(
          `INSERT INTO com202021_consultation_picture_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            com202021_consultation_picture_blb._URI || null,
            com202021_consultation_picture_blb._CREATOR_URI_USER || null,
            com202021_consultation_picture_blb._CREATION_DATE || null,
            com202021_consultation_picture_blb._LAST_UPDATE_URI_USER || null,
            com202021_consultation_picture_blb._LAST_UPDATE_DATE || null,
            com202021_consultation_picture_blb._TOP_LEVEL_AURI || null,
            com202021_consultation_picture_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const gener43_2021_beat_index_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_beat_index?token=${token}`,
    );
    const data = await response.json();
    console.log('Total gener43_2021_beat_index items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_beat_index`,
          [],
          () => {
            console.log('gener43_2021_beat_index table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_beat_index (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GENERATED_NOTE_NAME_48 TEXT)`,
          [],
          () => {
            console.log('gener43_2021_beat_index table created successfully');
          },
          reject,
        );

        data.forEach(gener43_2021_beat_index => {
          tx.executeSql(
            `INSERT INTO gener43_2021_beat_index VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              gener43_2021_beat_index._URI || null,
              gener43_2021_beat_index._CREATOR_URI_USER || null,
              gener43_2021_beat_index._CREATION_DATE || null,
              gener43_2021_beat_index._LAST_UPDATE_URI_USER || null,
              gener43_2021_beat_index._LAST_UPDATE_DATE || null,
              gener43_2021_beat_index._PARENT_AURI || null,
              gener43_2021_beat_index._ORDINAL_NUMBER || null,
              gener43_2021_beat_index._TOP_LEVEL_AURI || null,
              gener43_2021_beat_index.GENERATED_NOTE_NAME_48 || null,
            ],
            (_, resultSet) =>
              console.log(
                'gener43_2021_beat_index data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting gener43_2021_beat_index data',
                error,
                gener43_2021_beat_index,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_beat_index data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const gener43_2021_beat_index_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_beat_index?token=${token}`,
    );
    const data = await response.json();
    console.log('Total gener43_2021_beat_index items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_beat_index`,
          [],
          () => {
            console.log('gener43_2021_beat_index table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_beat_index (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GENERATED_NOTE_NAME_48 TEXT)`,
          [],
          () => {
            console.log('gener43_2021_beat_index table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_beat_index data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const gener43_2021_beat_index_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM gener43_2021_beat_index`, // Query the gener43_2021_beat_index table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying gener43_2021_beat_index`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const gener43_2021_beat_index_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM gener43_2021_beat_index`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from gener43_2021_beat_index:',
            resultSet,
          );

          try {
            await gener43_2021_beat_index_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from gener43_2021_beat_index`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const gener43_2021_beat_index_create = gener43_2021_beat_index => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert gener43_2021_beat_index
      tx.executeSql(
        `INSERT INTO gener43_2021_beat_index (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,GENERATED_NOTE_NAME_48) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          gener43_2021_beat_index._URI || null,
          gener43_2021_beat_index._CREATOR_URI_USER || null,
          gener43_2021_beat_index._CREATION_DATE || null,
          gener43_2021_beat_index._LAST_UPDATE_URI_USER || null,
          gener43_2021_beat_index._LAST_UPDATE_DATE || null,
          gener43_2021_beat_index._PARENT_AURI || null,
          gener43_2021_beat_index._ORDINAL_NUMBER || null,
          gener43_2021_beat_index._TOP_LEVEL_AURI || null,
          gener43_2021_beat_index.GENERATED_NOTE_NAME_48 || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const gener43_2021_ghumissues_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_ghumissues?token=${token}`,
    );
    const data = await response.json();
    console.log('Total gener43_2021_ghumissues items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_ghumissues`,
          [],
          () => {
            // console.log('gener43_2021_ghumissues table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_ghumissues (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GENERATED_NOTE_NAME_89 TEXT,HUMISSUES TEXT,HUM_LEVEL TEXT,HUM_OTHER TEXT)`,
          [],
          () => {
            //console.log('gener43_2021_ghumissues table created successfully');
          },
          reject,
        );

        data.forEach(gener43_2021_ghumissues => {
          tx.executeSql(
            `INSERT INTO gener43_2021_ghumissues VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              gener43_2021_ghumissues._URI || null,
              gener43_2021_ghumissues._CREATOR_URI_USER || null,
              gener43_2021_ghumissues._CREATION_DATE || null,
              gener43_2021_ghumissues._LAST_UPDATE_URI_USER || null,
              gener43_2021_ghumissues._LAST_UPDATE_DATE || null,
              gener43_2021_ghumissues._PARENT_AURI || null,
              gener43_2021_ghumissues._ORDINAL_NUMBER || null,
              gener43_2021_ghumissues._TOP_LEVEL_AURI || null,
              gener43_2021_ghumissues.GENERATED_NOTE_NAME_89 || null,
              gener43_2021_ghumissues.HUMISSUES || null,
              gener43_2021_ghumissues.HUM_LEVEL || null,
              gener43_2021_ghumissues.HUM_OTHER || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'gener43_2021_ghumissues data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting gener43_2021_ghumissues data',
                  error,
                  gener43_2021_ghumissues,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_ghumissues data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const gener43_2021_ghumissues_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_ghumissues?token=${token}`,
    );
    const data = await response.json();
    console.log('Total gener43_2021_ghumissues items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_ghumissues`,
          [],
          () => {
            console.log('gener43_2021_ghumissues table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_ghumissues (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GENERATED_NOTE_NAME_89 TEXT,HUMISSUES TEXT,HUM_LEVEL TEXT,HUM_OTHER TEXT)`,
          [],
          () => {
            console.log('gener43_2021_ghumissues table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_ghumissues data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const gener43_2021_ghumissues_list = async (uri) => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM gener43_2021_ghumissues WHERE _PARENT_AURI =? OR _TOP_LEVEL_AURI = ?`, // Query the gener43_2021_ghumissues table
        [uri],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying gener43_2021_ghumissues`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const gener43_2021_ghumissues_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM gener43_2021_ghumissues`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from gener43_2021_ghumissues:',
            resultSet,
          );

          try {
            await gener43_2021_ghumissues_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from gener43_2021_ghumissues`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const gener43_2021_ghumissues_create = gener43_2021_ghumissues => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert gener43_2021_ghumissues
      tx.executeSql(
        `INSERT INTO gener43_2021_ghumissues (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,GENERATED_NOTE_NAME_89,HUMISSUES,HUM_LEVEL,HUM_OTHER) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          gener43_2021_ghumissues._URI || '',
          gener43_2021_ghumissues._CREATOR_URI_USER || '',
          gener43_2021_ghumissues._CREATION_DATE || '',
          gener43_2021_ghumissues._LAST_UPDATE_URI_USER || '',
          gener43_2021_ghumissues._LAST_UPDATE_DATE || '',
          gener43_2021_ghumissues._PARENT_AURI || '',
          gener43_2021_ghumissues._ORDINAL_NUMBER || '',
          gener43_2021_ghumissues._TOP_LEVEL_AURI || '',
          gener43_2021_ghumissues.GENERATED_NOTE_NAME_89 || '',
          gener43_2021_ghumissues.HUMISSUES || '',
          gener43_2021_ghumissues.HUM_LEVEL || '',
          gener43_2021_ghumissues.HUM_OTHER || '',
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const gener43_2021_gnatissues_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_gnatissues?token=${token}`,
    );
    const data = await response.json();
    console.log('Total gener43_2021_gnatissues items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_gnatissues`,
          [],
          () => {
            // console.log('gener43_2021_gnatissues table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_gnatissues (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,NATISSUES TEXT,NAT_LEVEL TEXT,GENERATED_NOTE_NAME_83 TEXT,NAT_OTHER TEXT)`,
          [],
          () => {
            // console.log('gener43_2021_gnatissues table created successfully');
          },
          reject,
        );

        data.forEach(gener43_2021_gnatissues => {
          tx.executeSql(
            `INSERT INTO gener43_2021_gnatissues VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              gener43_2021_gnatissues._URI || null,
              gener43_2021_gnatissues._CREATOR_URI_USER || null,
              gener43_2021_gnatissues._CREATION_DATE || null,
              gener43_2021_gnatissues._LAST_UPDATE_URI_USER || null,
              gener43_2021_gnatissues._LAST_UPDATE_DATE || null,
              gener43_2021_gnatissues._PARENT_AURI || null,
              gener43_2021_gnatissues._ORDINAL_NUMBER || null,
              gener43_2021_gnatissues._TOP_LEVEL_AURI || null,
              gener43_2021_gnatissues.NATISSUES || null,
              gener43_2021_gnatissues.NAT_LEVEL || null,
              gener43_2021_gnatissues.GENERATED_NOTE_NAME_83 || null,
              gener43_2021_gnatissues.NAT_OTHER || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'gener43_2021_gnatissues data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting gener43_2021_gnatissues data',
                  error,
                  gener43_2021_gnatissues,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_gnatissues data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const gener43_2021_gnatissues_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_gnatissues?token=${token}`,
    );
    const data = await response.json();
    console.log('Total gener43_2021_gnatissues items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_gnatissues`,
          [],
          () => {
            console.log('gener43_2021_gnatissues table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_gnatissues (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,NATISSUES TEXT,NAT_LEVEL TEXT,GENERATED_NOTE_NAME_83 TEXT,NAT_OTHER TEXT)`,
          [],
          () => {
            console.log('gener43_2021_gnatissues table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_gnatissues data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const gener43_2021_gnatissues_list = async (uri) => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM gener43_2021_gnatissues WHERE _PARENT_AURI =? OR _TOP_LEVEL_AURI = ?`, // Query the gener43_2021_gnatissues table
        [uri],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying gener43_2021_gnatissues`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const gener43_2021_gnatissues_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM gener43_2021_gnatissues`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from gener43_2021_gnatissues:',
            resultSet,
          );

          try {
            await gener43_2021_gnatissues_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from gener43_2021_gnatissues`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const gener43_2021_gnatissues_create = gener43_2021_gnatissues => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert gener43_2021_gnatissues
      tx.executeSql(
        `INSERT INTO gener43_2021_gnatissues (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,NATISSUES,NAT_LEVEL,GENERATED_NOTE_NAME_83,NAT_OTHER) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          gener43_2021_gnatissues._URI || '',
          gener43_2021_gnatissues._CREATOR_URI_USER || '',
          gener43_2021_gnatissues._CREATION_DATE || '',
          gener43_2021_gnatissues._LAST_UPDATE_URI_USER || '',
          gener43_2021_gnatissues._LAST_UPDATE_DATE || '',
          gener43_2021_gnatissues._PARENT_AURI || '',
          gener43_2021_gnatissues._ORDINAL_NUMBER || '',
          gener43_2021_gnatissues._TOP_LEVEL_AURI || '',
          gener43_2021_gnatissues.NATISSUES || '',
          gener43_2021_gnatissues.NAT_LEVEL || '',
          gener43_2021_gnatissues.GENERATED_NOTE_NAME_83 || '',
          gener43_2021_gnatissues.NAT_OTHER || '',
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const gener43_2021_gvillages_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_gvillages?token=${token}`,
    );
    const data = await response.json();
    console.log('Total gener43_2021_gvillages items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_gvillages`,
          [],
          () => {
            // console.log('gener43_2021_gvillages table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_gvillages (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,SOCFOR_PARTIC TEXT,VRECORD_HOW TEXT,VILLA_AD_UNION TEXT,FOREST_VILGRS TEXT,TOT_HH TEXT,VSITEPOINT_ACC TEXT,VSITEPOINT_LAT TEXT,FCV_PARTC TEXT,TVILLAGE_NAME TEXT,VSITEPOINT_ALT TEXT,GRCOORDS_VSITE_EAST TEXT,VILLA_AD_UPZILLA TEXT,GENERATED_NOTE_NAME_170 TEXT,GRCOORDS_VSITE_NORTH TEXT,VSITEPOINT_LNG TEXT,VILLA_DIST TEXT)`,
          [],
          () => {
            //console.log('gener43_2021_gvillages table created successfully');
          },
          reject,
        );

        data.forEach(gener43_2021_gvillages => {
          tx.executeSql(
            `INSERT INTO gener43_2021_gvillages VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              gener43_2021_gvillages._URI || null,
              gener43_2021_gvillages._CREATOR_URI_USER || null,
              gener43_2021_gvillages._CREATION_DATE || null,
              gener43_2021_gvillages._LAST_UPDATE_URI_USER || null,
              gener43_2021_gvillages._LAST_UPDATE_DATE || null,
              gener43_2021_gvillages._PARENT_AURI || null,
              gener43_2021_gvillages._ORDINAL_NUMBER || null,
              gener43_2021_gvillages._TOP_LEVEL_AURI || null,
              gener43_2021_gvillages.SOCFOR_PARTIC || null,
              gener43_2021_gvillages.VRECORD_HOW || null,
              gener43_2021_gvillages.VILLA_AD_UNION || null,
              gener43_2021_gvillages.FOREST_VILGRS || null,
              gener43_2021_gvillages.TOT_HH || null,
              gener43_2021_gvillages.VSITEPOINT_ACC || null,
              gener43_2021_gvillages.VSITEPOINT_LAT || null,
              gener43_2021_gvillages.FCV_PARTC || null,
              gener43_2021_gvillages.TVILLAGE_NAME || null,
              gener43_2021_gvillages.VSITEPOINT_ALT || null,
              gener43_2021_gvillages.GRCOORDS_VSITE_EAST || null,
              gener43_2021_gvillages.VILLA_AD_UPZILLA || null,
              gener43_2021_gvillages.GENERATED_NOTE_NAME_170 || null,
              gener43_2021_gvillages.GRCOORDS_VSITE_NORTH || null,
              gener43_2021_gvillages.VSITEPOINT_LNG || null,
              gener43_2021_gvillages.VILLA_DIST || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'gener43_2021_gvillages data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting gener43_2021_gvillages data',
                  error,
                  gener43_2021_gvillages,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching gener43_2021_gvillages data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const gener43_2021_gvillages_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_gvillages?token=${token}`,
    );
    const data = await response.json();
    console.log('Total gener43_2021_gvillages items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_gvillages`,
          [],
          () => {
            console.log('gener43_2021_gvillages table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_gvillages (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,SOCFOR_PARTIC TEXT,VRECORD_HOW TEXT,VILLA_AD_UNION TEXT,FOREST_VILGRS TEXT,TOT_HH TEXT,VSITEPOINT_ACC TEXT,VSITEPOINT_LAT TEXT,FCV_PARTC TEXT,TVILLAGE_NAME TEXT,VSITEPOINT_ALT TEXT,GRCOORDS_VSITE_EAST TEXT,VILLA_AD_UPZILLA TEXT,GENERATED_NOTE_NAME_170 TEXT,GRCOORDS_VSITE_NORTH TEXT,VSITEPOINT_LNG TEXT,VILLA_DIST TEXT)`,
          [],
          () => {
            console.log('gener43_2021_gvillages table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching gener43_2021_gvillages data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const gener43_2021_gvillages_list = async (uri) => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM gener43_2021_gvillages WHERE _PARENT_AURI =? OR _TOP_LEVEL_AURI = ?`, // Query the gener43_2021_gvillages table
        [uri],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying gener43_2021_gvillages`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const gener43_2021_gvillages_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM gener43_2021_gvillages`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from gener43_2021_gvillages:',
            resultSet,
          );

          try {
            await gener43_2021_gvillages_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from gener43_2021_gvillages`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const gener43_2021_gvillages_create = gener43_2021_gvillages => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert gener43_2021_gvillages
      tx.executeSql(
        `INSERT INTO gener43_2021_gvillages (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,SOCFOR_PARTIC,VRECORD_HOW,VILLA_AD_UNION,FOREST_VILGRS,TOT_HH,VSITEPOINT_ACC,VSITEPOINT_LAT,FCV_PARTC,TVILLAGE_NAME,VSITEPOINT_ALT,GRCOORDS_VSITE_EAST,VILLA_AD_UPZILLA,GENERATED_NOTE_NAME_170,GRCOORDS_VSITE_NORTH,VSITEPOINT_LNG,VILLA_DIST) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          gener43_2021_gvillages._URI || '',
          gener43_2021_gvillages._CREATOR_URI_USER || '',
          gener43_2021_gvillages._CREATION_DATE || '',
          gener43_2021_gvillages._LAST_UPDATE_URI_USER || '',
          gener43_2021_gvillages._LAST_UPDATE_DATE || '',
          gener43_2021_gvillages._PARENT_AURI || '',
          gener43_2021_gvillages._ORDINAL_NUMBER || '',
          gener43_2021_gvillages._TOP_LEVEL_AURI || '',
          gener43_2021_gvillages.SOCFOR_PARTIC || '',
          gener43_2021_gvillages.VRECORD_HOW || '',
          gener43_2021_gvillages.VILLA_AD_UNION || '',
          gener43_2021_gvillages.FOREST_VILGRS || '',
          gener43_2021_gvillages.TOT_HH || '',
          gener43_2021_gvillages.VSITEPOINT_ACC || '',
          gener43_2021_gvillages.VSITEPOINT_LAT || '',
          gener43_2021_gvillages.FCV_PARTC || '',
          gener43_2021_gvillages.TVILLAGE_NAME || '',
          gener43_2021_gvillages.VSITEPOINT_ALT || '',
          gener43_2021_gvillages.GRCOORDS_VSITE_EAST || '',
          gener43_2021_gvillages.VILLA_AD_UPZILLA || '',
          gener43_2021_gvillages.GENERATED_NOTE_NAME_170 || '',
          gener43_2021_gvillages.GRCOORDS_VSITE_NORTH || '',
          gener43_2021_gvillages.VSITEPOINT_LNG || '',
          gener43_2021_gvillages.VILLA_DIST || '',
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const gener43_2021_overallnotes_ima_bn_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_overallnotes_ima_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total gener43_2021_overallnotes_ima_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_overallnotes_ima_bn`,
          [],
          () => {
            // console.log(
            //   'gener43_2021_overallnotes_ima_bn table dropped successfully',
            // );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_overallnotes_ima_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            // console.log(
            //   'gener43_2021_overallnotes_ima_bn table created successfully',
            // );
          },
          reject,
        );

        data.forEach(gener43_2021_overallnotes_ima_bn => {
          tx.executeSql(
            `INSERT INTO gener43_2021_overallnotes_ima_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              gener43_2021_overallnotes_ima_bn._URI || null,
              gener43_2021_overallnotes_ima_bn._CREATOR_URI_USER || null,
              gener43_2021_overallnotes_ima_bn._CREATION_DATE || null,
              gener43_2021_overallnotes_ima_bn._LAST_UPDATE_URI_USER || null,
              gener43_2021_overallnotes_ima_bn._LAST_UPDATE_DATE || null,
              gener43_2021_overallnotes_ima_bn._PARENT_AURI || null,
              gener43_2021_overallnotes_ima_bn._ORDINAL_NUMBER || null,
              gener43_2021_overallnotes_ima_bn._TOP_LEVEL_AURI || null,
              gener43_2021_overallnotes_ima_bn.UNROOTED_FILE_PATH || null,
              gener43_2021_overallnotes_ima_bn.CONTENT_TYPE || null,
              gener43_2021_overallnotes_ima_bn.CONTENT_LENGTH || null,
              gener43_2021_overallnotes_ima_bn.CONTENT_HASH || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'gener43_2021_overallnotes_ima_bn data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting gener43_2021_overallnotes_ima_bn data',
                  error,
                  gener43_2021_overallnotes_ima_bn,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_overallnotes_ima_bn data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const gener43_2021_overallnotes_ima_bn_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_overallnotes_ima_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total gener43_2021_overallnotes_ima_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_overallnotes_ima_bn`,
          [],
          () => {
            console.log(
              'gener43_2021_overallnotes_ima_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_overallnotes_ima_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'gener43_2021_overallnotes_ima_bn table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_overallnotes_ima_bn data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const gener43_2021_overallnotes_ima_bn_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM gener43_2021_overallnotes_ima_bn`, // Query the gener43_2021_overallnotes_ima_bn table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying gener43_2021_overallnotes_ima_bn`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const gener43_2021_overallnotes_ima_bn_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM gener43_2021_overallnotes_ima_bn`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from gener43_2021_overallnotes_ima_bn:',
            resultSet,
          );

          try {
            await gener43_2021_overallnotes_ima_bn_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from gener43_2021_overallnotes_ima_bn`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const gener43_2021_overallnotes_ima_bn_create =
  gener43_2021_overallnotes_ima_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert gener43_2021_overallnotes_ima_bn
        tx.executeSql(
          `INSERT INTO gener43_2021_overallnotes_ima_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            gener43_2021_overallnotes_ima_bn._URI || null,
            gener43_2021_overallnotes_ima_bn._CREATOR_URI_USER || null,
            gener43_2021_overallnotes_ima_bn._CREATION_DATE || null,
            gener43_2021_overallnotes_ima_bn._LAST_UPDATE_URI_USER || null,
            gener43_2021_overallnotes_ima_bn._LAST_UPDATE_DATE || null,
            gener43_2021_overallnotes_ima_bn._PARENT_AURI || null,
            gener43_2021_overallnotes_ima_bn._ORDINAL_NUMBER || null,
            gener43_2021_overallnotes_ima_bn._TOP_LEVEL_AURI || null,
            gener43_2021_overallnotes_ima_bn.UNROOTED_FILE_PATH || null,
            gener43_2021_overallnotes_ima_bn.CONTENT_TYPE || null,
            gener43_2021_overallnotes_ima_bn.CONTENT_LENGTH || null,
            gener43_2021_overallnotes_ima_bn.CONTENT_HASH || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const gener43_2021_overallnotes_ima_ref_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_overallnotes_ima_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total gener43_2021_overallnotes_ima_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_overallnotes_ima_ref`,
          [],
          () => {
            // console.log(
            //   'gener43_2021_overallnotes_ima_ref table dropped successfully',
            // );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_overallnotes_ima_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            // console.log(
            //   'gener43_2021_overallnotes_ima_ref table created successfully',
            // );
          },
          reject,
        );

        data.forEach(gener43_2021_overallnotes_ima_ref => {
          tx.executeSql(
            `INSERT INTO gener43_2021_overallnotes_ima_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              gener43_2021_overallnotes_ima_ref._URI || null,
              gener43_2021_overallnotes_ima_ref._CREATOR_URI_USER || null,
              gener43_2021_overallnotes_ima_ref._CREATION_DATE || null,
              gener43_2021_overallnotes_ima_ref._LAST_UPDATE_URI_USER || null,
              gener43_2021_overallnotes_ima_ref._LAST_UPDATE_DATE || null,
              gener43_2021_overallnotes_ima_ref._DOM_AURI || null,
              gener43_2021_overallnotes_ima_ref._SUB_AURI || null,
              gener43_2021_overallnotes_ima_ref._TOP_LEVEL_AURI || null,
              gener43_2021_overallnotes_ima_ref.PART || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'gener43_2021_overallnotes_ima_ref data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting gener43_2021_overallnotes_ima_ref data',
                  error,
                  gener43_2021_overallnotes_ima_ref,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_overallnotes_ima_ref data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const gener43_2021_overallnotes_ima_ref_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_overallnotes_ima_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total gener43_2021_overallnotes_ima_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_overallnotes_ima_ref`,
          [],
          () => {
            console.log(
              'gener43_2021_overallnotes_ima_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_overallnotes_ima_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'gener43_2021_overallnotes_ima_ref table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_overallnotes_ima_ref data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const gener43_2021_overallnotes_ima_ref_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM gener43_2021_overallnotes_ima_ref`, // Query the gener43_2021_overallnotes_ima_ref table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying gener43_2021_overallnotes_ima_ref`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const gener43_2021_overallnotes_ima_ref_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM gener43_2021_overallnotes_ima_ref`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from gener43_2021_overallnotes_ima_ref:',
            resultSet,
          );

          try {
            await gener43_2021_overallnotes_ima_ref_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from gener43_2021_overallnotes_ima_ref`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const gener43_2021_overallnotes_ima_ref_create =
  gener43_2021_overallnotes_ima_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert gener43_2021_overallnotes_ima_ref
        tx.executeSql(
          `INSERT INTO gener43_2021_overallnotes_ima_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            gener43_2021_overallnotes_ima_ref._URI || '',
            gener43_2021_overallnotes_ima_ref._CREATOR_URI_USER || '',
            gener43_2021_overallnotes_ima_ref._CREATION_DATE || '',
            gener43_2021_overallnotes_ima_ref._LAST_UPDATE_URI_USER || '',
            gener43_2021_overallnotes_ima_ref._LAST_UPDATE_DATE || '',
            gener43_2021_overallnotes_ima_ref._DOM_AURI || '',
            gener43_2021_overallnotes_ima_ref._SUB_AURI || '',
            gener43_2021_overallnotes_ima_ref._TOP_LEVEL_AURI || '',
            gener43_2021_overallnotes_ima_ref.PART || '',
          ],
          (tx, results) => {
            console.log('Data inserted successfully: in over ref...', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const gener43_2021_xpic_beat_index_bn_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_xpic_beat_index_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total gener43_2021_xpic_beat_index_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_xpic_beat_index_bn`,
          [],
          () => {
            console.log(
              'gener43_2021_xpic_beat_index_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_xpic_beat_index_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'gener43_2021_xpic_beat_index_bn table created successfully',
            );
          },
          reject,
        );

        data.forEach(gener43_2021_xpic_beat_index_bn => {
          tx.executeSql(
            `INSERT INTO gener43_2021_xpic_beat_index_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              gener43_2021_xpic_beat_index_bn._URI || null,
              gener43_2021_xpic_beat_index_bn._CREATOR_URI_USER || null,
              gener43_2021_xpic_beat_index_bn._CREATION_DATE || null,
              gener43_2021_xpic_beat_index_bn._LAST_UPDATE_URI_USER || null,
              gener43_2021_xpic_beat_index_bn._LAST_UPDATE_DATE || null,
              gener43_2021_xpic_beat_index_bn._PARENT_AURI || null,
              gener43_2021_xpic_beat_index_bn._ORDINAL_NUMBER || null,
              gener43_2021_xpic_beat_index_bn._TOP_LEVEL_AURI || null,
              gener43_2021_xpic_beat_index_bn.UNROOTED_FILE_PATH || null,
              gener43_2021_xpic_beat_index_bn.CONTENT_TYPE || null,
              gener43_2021_xpic_beat_index_bn.CONTENT_LENGTH || null,
              gener43_2021_xpic_beat_index_bn.CONTENT_HASH || null,
            ],
            (_, resultSet) =>
              console.log(
                'gener43_2021_xpic_beat_index_bn data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting gener43_2021_xpic_beat_index_bn data',
                error,
                gener43_2021_xpic_beat_index_bn,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_xpic_beat_index_bn data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const gener43_2021_xpic_beat_index_bn_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_xpic_beat_index_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total gener43_2021_xpic_beat_index_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_xpic_beat_index_bn`,
          [],
          () => {
            console.log(
              'gener43_2021_xpic_beat_index_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_xpic_beat_index_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'gener43_2021_xpic_beat_index_bn table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_xpic_beat_index_bn data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const gener43_2021_xpic_beat_index_bn_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM gener43_2021_xpic_beat_index_bn`, // Query the gener43_2021_xpic_beat_index_bn table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying gener43_2021_xpic_beat_index_bn`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const gener43_2021_xpic_beat_index_bn_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM gener43_2021_xpic_beat_index_bn`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from gener43_2021_xpic_beat_index_bn:',
            resultSet,
          );

          try {
            await gener43_2021_xpic_beat_index_bn_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from gener43_2021_xpic_beat_index_bn`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const gener43_2021_xpic_beat_index_bn_create =
  gener43_2021_xpic_beat_index_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert gener43_2021_xpic_beat_index_bn
        tx.executeSql(
          `INSERT INTO gener43_2021_xpic_beat_index_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            gener43_2021_xpic_beat_index_bn._URI || null,
            gener43_2021_xpic_beat_index_bn._CREATOR_URI_USER || null,
            gener43_2021_xpic_beat_index_bn._CREATION_DATE || null,
            gener43_2021_xpic_beat_index_bn._LAST_UPDATE_URI_USER || null,
            gener43_2021_xpic_beat_index_bn._LAST_UPDATE_DATE || null,
            gener43_2021_xpic_beat_index_bn._PARENT_AURI || null,
            gener43_2021_xpic_beat_index_bn._ORDINAL_NUMBER || null,
            gener43_2021_xpic_beat_index_bn._TOP_LEVEL_AURI || null,
            gener43_2021_xpic_beat_index_bn.UNROOTED_FILE_PATH || null,
            gener43_2021_xpic_beat_index_bn.CONTENT_TYPE || null,
            gener43_2021_xpic_beat_index_bn.CONTENT_LENGTH || null,
            gener43_2021_xpic_beat_index_bn.CONTENT_HASH || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const gener43_2021_xpic_beat_index_ref_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_xpic_beat_index_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total gener43_2021_xpic_beat_index_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_xpic_beat_index_ref`,
          [],
          () => {
            // console.log(
            //   'gener43_2021_xpic_beat_index_ref table dropped successfully',
            // );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_xpic_beat_index_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            // console.log(
            //   'gener43_2021_xpic_beat_index_ref table created successfully',
            // );
          },
          reject,
        );

        data.forEach(gener43_2021_xpic_beat_index_ref => {
          tx.executeSql(
            `INSERT INTO gener43_2021_xpic_beat_index_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              gener43_2021_xpic_beat_index_ref._URI || null,
              gener43_2021_xpic_beat_index_ref._CREATOR_URI_USER || null,
              gener43_2021_xpic_beat_index_ref._CREATION_DATE || null,
              gener43_2021_xpic_beat_index_ref._LAST_UPDATE_URI_USER || null,
              gener43_2021_xpic_beat_index_ref._LAST_UPDATE_DATE || null,
              gener43_2021_xpic_beat_index_ref._DOM_AURI || null,
              gener43_2021_xpic_beat_index_ref._SUB_AURI || null,
              gener43_2021_xpic_beat_index_ref._TOP_LEVEL_AURI || null,
              gener43_2021_xpic_beat_index_ref.PART || null,
            ],
            (_, resultSet) =>
              // console.log(
              //   'gener43_2021_xpic_beat_index_ref data inserted successfully',
              //   resultSet,
              // ),
              (_, error) => {
                console.error(
                  'Error inserting gener43_2021_xpic_beat_index_ref data',
                  error,
                  gener43_2021_xpic_beat_index_ref,
                );
              },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_xpic_beat_index_ref data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const gener43_2021_xpic_beat_index_ref_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/gener43_2021_xpic_beat_index_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total gener43_2021_xpic_beat_index_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS gener43_2021_xpic_beat_index_ref`,
          [],
          () => {
            console.log(
              'gener43_2021_xpic_beat_index_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS gener43_2021_xpic_beat_index_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'gener43_2021_xpic_beat_index_ref table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching gener43_2021_xpic_beat_index_ref data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const gener43_2021_xpic_beat_index_ref_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM gener43_2021_xpic_beat_index_ref`, // Query the gener43_2021_xpic_beat_index_ref table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying gener43_2021_xpic_beat_index_ref`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const gener43_2021_xpic_beat_index_ref_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM gener43_2021_xpic_beat_index_ref`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from gener43_2021_xpic_beat_index_ref:',
            resultSet,
          );

          try {
            await gener43_2021_xpic_beat_index_ref_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from gener43_2021_xpic_beat_index_ref`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const gener43_2021_xpic_beat_index_ref_create =
  gener43_2021_xpic_beat_index_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert gener43_2021_xpic_beat_index_ref
        tx.executeSql(
          `INSERT INTO gener43_2021_xpic_beat_index_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            gener43_2021_xpic_beat_index_ref._URI || '',
            gener43_2021_xpic_beat_index_ref._CREATOR_URI_USER || '',
            gener43_2021_xpic_beat_index_ref._CREATION_DATE || '',
            gener43_2021_xpic_beat_index_ref._LAST_UPDATE_URI_USER || '',
            gener43_2021_xpic_beat_index_ref._LAST_UPDATE_DATE || '',
            gener43_2021_xpic_beat_index_ref._DOM_AURI || '',
            gener43_2021_xpic_beat_index_ref._SUB_AURI || '',
            gener43_2021_xpic_beat_index_ref._TOP_LEVEL_AURI || '',
            gener43_2021_xpic_beat_index_ref.PART || '',
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_community_month_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_community_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_community_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_community_month`,
          [],
          () => {
            console.log(
              'plant27_2021_community_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_community_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_community_month table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_community_month => {
          tx.executeSql(
            `INSERT INTO plant27_2021_community_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_community_month._URI || null,
              plant27_2021_community_month._CREATOR_URI_USER || null,
              plant27_2021_community_month._CREATION_DATE || null,
              plant27_2021_community_month._LAST_UPDATE_URI_USER || null,
              plant27_2021_community_month._LAST_UPDATE_DATE || null,
              plant27_2021_community_month._PARENT_AURI || null,
              plant27_2021_community_month._ORDINAL_NUMBER || null,
              plant27_2021_community_month._TOP_LEVEL_AURI || null,
              plant27_2021_community_month.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_community_month data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_community_month data',
                error,
                plant27_2021_community_month,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_community_month data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_community_month_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_community_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_community_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_community_month`,
          [],
          () => {
            console.log(
              'plant27_2021_community_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_community_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_community_month table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_community_month data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_community_month_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_community_month`, // Query the plant27_2021_community_month table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying plant27_2021_community_month`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_community_month_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_community_month`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_community_month:',
            resultSet,
          );

          try {
            await plant27_2021_community_month_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_community_month`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_community_month_create =
  plant27_2021_community_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_community_month
        tx.executeSql(
          `INSERT INTO plant27_2021_community_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_community_month._URI || null,
            plant27_2021_community_month._CREATOR_URI_USER || null,
            plant27_2021_community_month._CREATION_DATE || null,
            plant27_2021_community_month._LAST_UPDATE_URI_USER || null,
            plant27_2021_community_month._LAST_UPDATE_DATE || null,
            plant27_2021_community_month._PARENT_AURI || null,
            plant27_2021_community_month._ORDINAL_NUMBER || null,
            plant27_2021_community_month._TOP_LEVEL_AURI || null,
            plant27_2021_community_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref table created successfully',
              );
            },
            reject,
          );

          data.forEach(plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref => {
            tx.executeSql(
              `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref._URI || null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref._CREATOR_URI_USER ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref._CREATION_DATE ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref._LAST_UPDATE_URI_USER ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref._LAST_UPDATE_DATE ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref._DOM_AURI ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref._SUB_AURI ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref._TOP_LEVEL_AURI ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref.PART || null,
              ],
              (_, resultSet) =>
                console.log(
                  'plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref data',
                  error,
                  plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref`, // Query the plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref:',
              resultSet,
            );

            try {
              await plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref_create =
  plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref
        tx.executeSql(
          `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref._URI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref._CREATOR_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref._CREATION_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref._LAST_UPDATE_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref._DOM_AURI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref._SUB_AURI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref._TOP_LEVEL_AURI ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb table created successfully',
              );
            },
            reject,
          );

          data.forEach(plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb => {
            tx.executeSql(
              `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
              [
                plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb._URI || null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb._CREATOR_URI_USER ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb._CREATION_DATE ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb._LAST_UPDATE_URI_USER ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb._LAST_UPDATE_DATE ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb._TOP_LEVEL_AURI ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb.VALUE || null,
              ],
              (_, resultSet) =>
                console.log(
                  'plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb data',
                  error,
                  plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb`, // Query the plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb:',
              resultSet,
            );

            try {
              await plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb_create =
  plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb
        tx.executeSql(
          `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb._URI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb._CREATOR_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb._CREATION_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb._LAST_UPDATE_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb._TOP_LEVEL_AURI ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb table created successfully',
              );
            },
            reject,
          );

          data.forEach(plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb => {
            tx.executeSql(
              `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
              [
                plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb._URI || null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb._CREATOR_URI_USER ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb._CREATION_DATE ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb._LAST_UPDATE_URI_USER ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb._LAST_UPDATE_DATE ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb._TOP_LEVEL_AURI ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb.VALUE || null,
              ],
              (_, resultSet) =>
                console.log(
                  'plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb data',
                  error,
                  plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb`, // Query the plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb:',
              resultSet,
            );

            try {
              await plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb_create =
  plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb
        tx.executeSql(
          `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb._URI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb._CREATOR_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb._CREATION_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb._LAST_UPDATE_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb._TOP_LEVEL_AURI ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn`,
          [],
          () => {
            console.log(
              'plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn => {
          tx.executeSql(
            `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn._URI || null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn._CREATOR_URI_USER ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn._CREATION_DATE ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn._LAST_UPDATE_URI_USER ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn._LAST_UPDATE_DATE ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn._PARENT_AURI ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn._ORDINAL_NUMBER ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn._TOP_LEVEL_AURI ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn.UNROOTED_FILE_PATH ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn.CONTENT_TYPE ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn.CONTENT_LENGTH ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn.CONTENT_HASH ||
                null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn data',
                error,
                plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn`, // Query the plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn:',
              resultSet,
            );

            try {
              await plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn_create =
  plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn
        tx.executeSql(
          `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn._URI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn._CREATOR_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn._CREATION_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn._LAST_UPDATE_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn._PARENT_AURI ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn._ORDINAL_NUMBER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn._TOP_LEVEL_AURI ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn.UNROOTED_FILE_PATH ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn.CONTENT_TYPE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn.CONTENT_LENGTH ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn.CONTENT_HASH ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref table created successfully',
              );
            },
            reject,
          );

          data.forEach(plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref => {
            tx.executeSql(
              `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref._URI || null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref._CREATOR_URI_USER ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref._CREATION_DATE ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref._LAST_UPDATE_URI_USER ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref._LAST_UPDATE_DATE ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref._DOM_AURI ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref._SUB_AURI ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref._TOP_LEVEL_AURI ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref.PART || null,
              ],
              (_, resultSet) =>
                console.log(
                  'plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref data',
                  error,
                  plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref`, // Query the plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref:',
              resultSet,
            );

            try {
              await plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref_create =
  plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref
        tx.executeSql(
          `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref._URI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref._CREATOR_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref._CREATION_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref._LAST_UPDATE_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref._DOM_AURI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref._SUB_AURI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref._TOP_LEVEL_AURI ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb table created successfully',
              );
            },
            reject,
          );

          data.forEach(plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb => {
            tx.executeSql(
              `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
              [
                plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb._URI || null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb._CREATOR_URI_USER ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb._CREATION_DATE ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb._LAST_UPDATE_URI_USER ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb._LAST_UPDATE_DATE ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb._TOP_LEVEL_AURI ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb.VALUE || null,
              ],
              (_, resultSet) =>
                console.log(
                  'plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb data',
                  error,
                  plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb`, // Query the plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb:',
              resultSet,
            );

            try {
              await plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb_create =
  plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb
        tx.executeSql(
          `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb._URI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb._CREATOR_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb._CREATION_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb._LAST_UPDATE_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb._TOP_LEVEL_AURI ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn`,
          [],
          () => {
            console.log(
              'plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn => {
          tx.executeSql(
            `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn._URI || null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn._CREATOR_URI_USER ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn._CREATION_DATE ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn._LAST_UPDATE_URI_USER ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn._LAST_UPDATE_DATE ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn._PARENT_AURI ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn._ORDINAL_NUMBER ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn._TOP_LEVEL_AURI ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn.UNROOTED_FILE_PATH ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn.CONTENT_TYPE ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn.CONTENT_LENGTH ||
                null,
              plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn.CONTENT_HASH ||
                null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn data',
                error,
                plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn`, // Query the plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn:',
              resultSet,
            );

            try {
              await plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn_create =
  plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn
        tx.executeSql(
          `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn._URI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn._CREATOR_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn._CREATION_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn._LAST_UPDATE_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn._PARENT_AURI ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn._ORDINAL_NUMBER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn._TOP_LEVEL_AURI ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn.UNROOTED_FILE_PATH ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn.CONTENT_TYPE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn.CONTENT_LENGTH ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn.CONTENT_HASH ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref table created successfully',
              );
            },
            reject,
          );

          data.forEach(plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref => {
            tx.executeSql(
              `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref._URI || null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref._CREATOR_URI_USER ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref._CREATION_DATE ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref._LAST_UPDATE_URI_USER ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref._LAST_UPDATE_DATE ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref._DOM_AURI ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref._SUB_AURI ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref._TOP_LEVEL_AURI ||
                  null,
                plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref.PART || null,
              ],
              (_, resultSet) =>
                console.log(
                  'plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref data',
                  error,
                  plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref`, // Query the plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref:',
              resultSet,
            );

            try {
              await plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref_create =
  plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref
        tx.executeSql(
          `INSERT INTO plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref._URI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref._CREATOR_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref._CREATION_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref._LAST_UPDATE_DATE ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref._DOM_AURI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref._SUB_AURI || null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref._TOP_LEVEL_AURI ||
              null,
            plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gregen_spp_regen_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gregen_spp_regen?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gregen_spp_regen items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gregen_spp_regen`,
          [],
          () => {
            console.log(
              'plant27_2021_gregen_spp_regen table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_spp_regen (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,NUM_TREES TEXT,RSPP_NAME TEXT,GENERATED_NOTE_NAME_95 TEXT,RSPP_NR_NAT TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gregen_spp_regen table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_gregen_spp_regen => {
          tx.executeSql(
            `INSERT INTO plant27_2021_gregen_spp_regen VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_gregen_spp_regen._URI || null,
              plant27_2021_gregen_spp_regen._CREATOR_URI_USER || null,
              plant27_2021_gregen_spp_regen._CREATION_DATE || null,
              plant27_2021_gregen_spp_regen._LAST_UPDATE_URI_USER || null,
              plant27_2021_gregen_spp_regen._LAST_UPDATE_DATE || null,
              plant27_2021_gregen_spp_regen._PARENT_AURI || null,
              plant27_2021_gregen_spp_regen._ORDINAL_NUMBER || null,
              plant27_2021_gregen_spp_regen._TOP_LEVEL_AURI || null,
              plant27_2021_gregen_spp_regen.NUM_TREES || null,
              plant27_2021_gregen_spp_regen.RSPP_NAME || null,
              plant27_2021_gregen_spp_regen.GENERATED_NOTE_NAME_95 || null,
              plant27_2021_gregen_spp_regen.RSPP_NR_NAT || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_gregen_spp_regen data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_gregen_spp_regen data',
                error,
                plant27_2021_gregen_spp_regen,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gregen_spp_regen data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gregen_spp_regen_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gregen_spp_regen?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gregen_spp_regen items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gregen_spp_regen`,
          [],
          () => {
            console.log(
              'plant27_2021_gregen_spp_regen table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gregen_spp_regen (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,NUM_TREES TEXT,RSPP_NAME TEXT,GENERATED_NOTE_NAME_95 TEXT,RSPP_NR_NAT TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gregen_spp_regen table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gregen_spp_regen data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gregen_spp_regen_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_gregen_spp_regen`, // Query the plant27_2021_gregen_spp_regen table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying plant27_2021_gregen_spp_regen`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gregen_spp_regen_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_gregen_spp_regen`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_gregen_spp_regen:',
            resultSet,
          );

          try {
            await plant27_2021_gregen_spp_regen_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_gregen_spp_regen`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gregen_spp_regen_create =
  plant27_2021_gregen_spp_regen => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gregen_spp_regen
        tx.executeSql(
          `INSERT INTO plant27_2021_gregen_spp_regen (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,NUM_TREES,RSPP_NAME,GENERATED_NOTE_NAME_95,RSPP_NR_NAT) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gregen_spp_regen._URI || null,
            plant27_2021_gregen_spp_regen._CREATOR_URI_USER || null,
            plant27_2021_gregen_spp_regen._CREATION_DATE || null,
            plant27_2021_gregen_spp_regen._LAST_UPDATE_URI_USER || null,
            plant27_2021_gregen_spp_regen._LAST_UPDATE_DATE || null,
            plant27_2021_gregen_spp_regen._PARENT_AURI || null,
            plant27_2021_gregen_spp_regen._ORDINAL_NUMBER || null,
            plant27_2021_gregen_spp_regen._TOP_LEVEL_AURI || null,
            plant27_2021_gregen_spp_regen.NUM_TREES || null,
            plant27_2021_gregen_spp_regen.RSPP_NAME || null,
            plant27_2021_gregen_spp_regen.GENERATED_NOTE_NAME_95 || null,
            plant27_2021_gregen_spp_regen.RSPP_NR_NAT || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gr_regen_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gr_regen?token=${token}`,
    );
    const data = await response.json();
    console.log('Total plant27_2021_gr_regen items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gr_regen`,
          [],
          () => {
            console.log('plant27_2021_gr_regen table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gr_regen (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,REG_AVG_SEEDLING_PER_HA_PER_PLOT TEXT,GREGEN_GREGEN_PLOT_CROWN_CLOSURE TEXT,REG_AVG_SEEDLING_PER_PLOT TEXT,GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_80 TEXT,REG_AVG_TREES_PER_HA_PER_PLOT TEXT,GENERATED_NOTE_NAME_106 TEXT,GENERATED_NOTE_NAME_103 TEXT,GREGEN_GREGEN_PLOT_RSITEPOINT_ALT TEXT,GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST TEXT,GREGEN_GREGEN_PLOT_RSITEPOINT_LNG TEXT,GREGEN_GREGEN_PLOT_REGEN_PLOT_NO TEXT,GREGEN_GREGEN_PLOT_RSITEPOINT_LAT TEXT,GREGEN_GREGEN_PLOT_RSITEPOINT_ACC TEXT,REG_AVG_TREES_PER_PLOT TEXT,GREGEN_GREGEN_PLOT_RRECORD_HOW TEXT,GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH TEXT)`,
          [],
          () => {
            console.log('plant27_2021_gr_regen table created successfully');
          },
          reject,
        );

        data.forEach(plant27_2021_gr_regen => {
          tx.executeSql(
            `INSERT INTO plant27_2021_gr_regen VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_gr_regen._URI || null,
              plant27_2021_gr_regen._CREATOR_URI_USER || null,
              plant27_2021_gr_regen._CREATION_DATE || null,
              plant27_2021_gr_regen._LAST_UPDATE_URI_USER || null,
              plant27_2021_gr_regen._LAST_UPDATE_DATE || null,
              plant27_2021_gr_regen._PARENT_AURI || null,
              plant27_2021_gr_regen._ORDINAL_NUMBER || null,
              plant27_2021_gr_regen._TOP_LEVEL_AURI || null,
              plant27_2021_gr_regen.REG_AVG_SEEDLING_PER_HA_PER_PLOT || null,
              plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_CROWN_CLOSURE || null,
              plant27_2021_gr_regen.REG_AVG_SEEDLING_PER_PLOT || null,
              plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_80 ||
                null,
              plant27_2021_gr_regen.REG_AVG_TREES_PER_HA_PER_PLOT || null,
              plant27_2021_gr_regen.GENERATED_NOTE_NAME_106 || null,
              plant27_2021_gr_regen.GENERATED_NOTE_NAME_103 || null,
              plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_RSITEPOINT_ALT || null,
              plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST ||
                null,
              plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_RSITEPOINT_LNG || null,
              plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_REGEN_PLOT_NO || null,
              plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_RSITEPOINT_LAT || null,
              plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_RSITEPOINT_ACC || null,
              plant27_2021_gr_regen.REG_AVG_TREES_PER_PLOT || null,
              plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_RRECORD_HOW || null,
              plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH ||
                null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_gr_regen data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_gr_regen data',
                error,
                plant27_2021_gr_regen,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching plant27_2021_gr_regen data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gr_regen_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gr_regen?token=${token}`,
    );
    const data = await response.json();
    console.log('Total plant27_2021_gr_regen items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gr_regen`,
          [],
          () => {
            console.log('plant27_2021_gr_regen table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gr_regen (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,REG_AVG_SEEDLING_PER_HA_PER_PLOT TEXT,GREGEN_GREGEN_PLOT_CROWN_CLOSURE TEXT,REG_AVG_SEEDLING_PER_PLOT TEXT,GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_80 TEXT,REG_AVG_TREES_PER_HA_PER_PLOT TEXT,GENERATED_NOTE_NAME_106 TEXT,GENERATED_NOTE_NAME_103 TEXT,GREGEN_GREGEN_PLOT_RSITEPOINT_ALT TEXT,GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST TEXT,GREGEN_GREGEN_PLOT_RSITEPOINT_LNG TEXT,GREGEN_GREGEN_PLOT_REGEN_PLOT_NO TEXT,GREGEN_GREGEN_PLOT_RSITEPOINT_LAT TEXT,GREGEN_GREGEN_PLOT_RSITEPOINT_ACC TEXT,REG_AVG_TREES_PER_PLOT TEXT,GREGEN_GREGEN_PLOT_RRECORD_HOW TEXT,GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH TEXT)`,
          [],
          () => {
            console.log('plant27_2021_gr_regen table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching plant27_2021_gr_regen data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gr_regen_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_gr_regen`, // Query the plant27_2021_gr_regen table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying plant27_2021_gr_regen`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gr_regen_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_gr_regen`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_gr_regen:',
            resultSet,
          );

          try {
            await plant27_2021_gr_regen_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_gr_regen`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gr_regen_create = plant27_2021_gr_regen => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert plant27_2021_gr_regen
      tx.executeSql(
        `INSERT INTO plant27_2021_gr_regen (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,REG_AVG_SEEDLING_PER_HA_PER_PLOT,GREGEN_GREGEN_PLOT_CROWN_CLOSURE,REG_AVG_SEEDLING_PER_PLOT,GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_80,REG_AVG_TREES_PER_HA_PER_PLOT,GENERATED_NOTE_NAME_106,GENERATED_NOTE_NAME_103,GREGEN_GREGEN_PLOT_RSITEPOINT_ALT,GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST,GREGEN_GREGEN_PLOT_RSITEPOINT_LNG,GREGEN_GREGEN_PLOT_REGEN_PLOT_NO,GREGEN_GREGEN_PLOT_RSITEPOINT_LAT,GREGEN_GREGEN_PLOT_RSITEPOINT_ACC,REG_AVG_TREES_PER_PLOT,GREGEN_GREGEN_PLOT_RRECORD_HOW,GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          plant27_2021_gr_regen._URI || null,
          plant27_2021_gr_regen._CREATOR_URI_USER || null,
          plant27_2021_gr_regen._CREATION_DATE || null,
          plant27_2021_gr_regen._LAST_UPDATE_URI_USER || null,
          plant27_2021_gr_regen._LAST_UPDATE_DATE || null,
          plant27_2021_gr_regen._PARENT_AURI || null,
          plant27_2021_gr_regen._ORDINAL_NUMBER || null,
          plant27_2021_gr_regen._TOP_LEVEL_AURI || null,
          plant27_2021_gr_regen.REG_AVG_SEEDLING_PER_HA_PER_PLOT || null,
          plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_CROWN_CLOSURE || null,
          plant27_2021_gr_regen.REG_AVG_SEEDLING_PER_PLOT || null,
          plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_80 ||
            null,
          plant27_2021_gr_regen.REG_AVG_TREES_PER_HA_PER_PLOT || null,
          plant27_2021_gr_regen.GENERATED_NOTE_NAME_106 || null,
          plant27_2021_gr_regen.GENERATED_NOTE_NAME_103 || null,
          plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_RSITEPOINT_ALT || null,
          plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST ||
            null,
          plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_RSITEPOINT_LNG || null,
          plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_REGEN_PLOT_NO || null,
          plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_RSITEPOINT_LAT || null,
          plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_RSITEPOINT_ACC || null,
          plant27_2021_gr_regen.REG_AVG_TREES_PER_PLOT || null,
          plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_RRECORD_HOW || null,
          plant27_2021_gr_regen.GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH ||
            null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gtrts_climber_cutting_climber_month_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gtrts_climber_cutting_climber_month?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gtrts_climber_cutting_climber_month items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gtrts_climber_cutting_climber_month`,
            [],
            () => {
              console.log(
                'plant27_2021_gtrts_climber_cutting_climber_month table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_climber_cutting_climber_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gtrts_climber_cutting_climber_month table created successfully',
              );
            },
            reject,
          );

          data.forEach(plant27_2021_gtrts_climber_cutting_climber_month => {
            tx.executeSql(
              `INSERT INTO plant27_2021_gtrts_climber_cutting_climber_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                plant27_2021_gtrts_climber_cutting_climber_month._URI || null,
                plant27_2021_gtrts_climber_cutting_climber_month._CREATOR_URI_USER ||
                  null,
                plant27_2021_gtrts_climber_cutting_climber_month._CREATION_DATE ||
                  null,
                plant27_2021_gtrts_climber_cutting_climber_month._LAST_UPDATE_URI_USER ||
                  null,
                plant27_2021_gtrts_climber_cutting_climber_month._LAST_UPDATE_DATE ||
                  null,
                plant27_2021_gtrts_climber_cutting_climber_month._PARENT_AURI ||
                  null,
                plant27_2021_gtrts_climber_cutting_climber_month._ORDINAL_NUMBER ||
                  null,
                plant27_2021_gtrts_climber_cutting_climber_month._TOP_LEVEL_AURI ||
                  null,
                plant27_2021_gtrts_climber_cutting_climber_month.VALUE || null,
              ],
              (_, resultSet) =>
                console.log(
                  'plant27_2021_gtrts_climber_cutting_climber_month data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting plant27_2021_gtrts_climber_cutting_climber_month data',
                  error,
                  plant27_2021_gtrts_climber_cutting_climber_month,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gtrts_climber_cutting_climber_month data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gtrts_climber_cutting_climber_month_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gtrts_climber_cutting_climber_month?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gtrts_climber_cutting_climber_month items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gtrts_climber_cutting_climber_month`,
            [],
            () => {
              console.log(
                'plant27_2021_gtrts_climber_cutting_climber_month table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_climber_cutting_climber_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gtrts_climber_cutting_climber_month table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gtrts_climber_cutting_climber_month data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gtrts_climber_cutting_climber_month_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM plant27_2021_gtrts_climber_cutting_climber_month`, // Query the plant27_2021_gtrts_climber_cutting_climber_month table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying plant27_2021_gtrts_climber_cutting_climber_month`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gtrts_climber_cutting_climber_month_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM plant27_2021_gtrts_climber_cutting_climber_month`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from plant27_2021_gtrts_climber_cutting_climber_month:',
              resultSet,
            );

            try {
              await plant27_2021_gtrts_climber_cutting_climber_month_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from plant27_2021_gtrts_climber_cutting_climber_month`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gtrts_climber_cutting_climber_month_create =
  plant27_2021_gtrts_climber_cutting_climber_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gtrts_climber_cutting_climber_month
        tx.executeSql(
          `INSERT INTO plant27_2021_gtrts_climber_cutting_climber_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gtrts_climber_cutting_climber_month._URI || null,
            plant27_2021_gtrts_climber_cutting_climber_month._CREATOR_URI_USER ||
              null,
            plant27_2021_gtrts_climber_cutting_climber_month._CREATION_DATE ||
              null,
            plant27_2021_gtrts_climber_cutting_climber_month._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gtrts_climber_cutting_climber_month._LAST_UPDATE_DATE ||
              null,
            plant27_2021_gtrts_climber_cutting_climber_month._PARENT_AURI ||
              null,
            plant27_2021_gtrts_climber_cutting_climber_month._ORDINAL_NUMBER ||
              null,
            plant27_2021_gtrts_climber_cutting_climber_month._TOP_LEVEL_AURI ||
              null,
            plant27_2021_gtrts_climber_cutting_climber_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gtrts_community_protection_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gtrts_community_protection?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gtrts_community_protection items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gtrts_community_protection`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_community_protection table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_community_protection (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GENERATED_NOTE_NAME_257 TEXT,COMMUNITY_YEAR_RAW TEXT,COMMUNITY_YEAR TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_community_protection table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_gtrts_community_protection => {
          tx.executeSql(
            `INSERT INTO plant27_2021_gtrts_community_protection VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_gtrts_community_protection._URI || null,
              plant27_2021_gtrts_community_protection._CREATOR_URI_USER || null,
              plant27_2021_gtrts_community_protection._CREATION_DATE || null,
              plant27_2021_gtrts_community_protection._LAST_UPDATE_URI_USER ||
                null,
              plant27_2021_gtrts_community_protection._LAST_UPDATE_DATE || null,
              plant27_2021_gtrts_community_protection._PARENT_AURI || null,
              plant27_2021_gtrts_community_protection._ORDINAL_NUMBER || null,
              plant27_2021_gtrts_community_protection._TOP_LEVEL_AURI || null,
              plant27_2021_gtrts_community_protection.GENERATED_NOTE_NAME_257 ||
                null,
              plant27_2021_gtrts_community_protection.COMMUNITY_YEAR_RAW ||
                null,
              plant27_2021_gtrts_community_protection.COMMUNITY_YEAR || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_gtrts_community_protection data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_gtrts_community_protection data',
                error,
                plant27_2021_gtrts_community_protection,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gtrts_community_protection data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gtrts_community_protection_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gtrts_community_protection?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gtrts_community_protection items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gtrts_community_protection`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_community_protection table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_community_protection (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,GENERATED_NOTE_NAME_257 TEXT,COMMUNITY_YEAR_RAW TEXT,COMMUNITY_YEAR TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_community_protection table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gtrts_community_protection data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gtrts_community_protection_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_gtrts_community_protection`, // Query the plant27_2021_gtrts_community_protection table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying plant27_2021_gtrts_community_protection`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gtrts_community_protection_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_gtrts_community_protection`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_gtrts_community_protection:',
            resultSet,
          );

          try {
            await plant27_2021_gtrts_community_protection_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_gtrts_community_protection`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gtrts_community_protection_create =
  plant27_2021_gtrts_community_protection => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gtrts_community_protection
        tx.executeSql(
          `INSERT INTO plant27_2021_gtrts_community_protection (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,GENERATED_NOTE_NAME_257,COMMUNITY_YEAR_RAW,COMMUNITY_YEAR) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gtrts_community_protection._URI || null,
            plant27_2021_gtrts_community_protection._CREATOR_URI_USER || null,
            plant27_2021_gtrts_community_protection._CREATION_DATE || null,
            plant27_2021_gtrts_community_protection._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gtrts_community_protection._LAST_UPDATE_DATE || null,
            plant27_2021_gtrts_community_protection._PARENT_AURI || null,
            plant27_2021_gtrts_community_protection._ORDINAL_NUMBER || null,
            plant27_2021_gtrts_community_protection._TOP_LEVEL_AURI || null,
            plant27_2021_gtrts_community_protection.GENERATED_NOTE_NAME_257 ||
              null,
            plant27_2021_gtrts_community_protection.COMMUNITY_YEAR_RAW || null,
            plant27_2021_gtrts_community_protection.COMMUNITY_YEAR || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gtrts_compost_compost_month_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gtrts_compost_compost_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gtrts_compost_compost_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gtrts_compost_compost_month`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_compost_compost_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_compost_compost_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_compost_compost_month table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_gtrts_compost_compost_month => {
          tx.executeSql(
            `INSERT INTO plant27_2021_gtrts_compost_compost_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_gtrts_compost_compost_month._URI || null,
              plant27_2021_gtrts_compost_compost_month._CREATOR_URI_USER ||
                null,
              plant27_2021_gtrts_compost_compost_month._CREATION_DATE || null,
              plant27_2021_gtrts_compost_compost_month._LAST_UPDATE_URI_USER ||
                null,
              plant27_2021_gtrts_compost_compost_month._LAST_UPDATE_DATE ||
                null,
              plant27_2021_gtrts_compost_compost_month._PARENT_AURI || null,
              plant27_2021_gtrts_compost_compost_month._ORDINAL_NUMBER || null,
              plant27_2021_gtrts_compost_compost_month._TOP_LEVEL_AURI || null,
              plant27_2021_gtrts_compost_compost_month.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_gtrts_compost_compost_month data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_gtrts_compost_compost_month data',
                error,
                plant27_2021_gtrts_compost_compost_month,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gtrts_compost_compost_month data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gtrts_compost_compost_month_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gtrts_compost_compost_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gtrts_compost_compost_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gtrts_compost_compost_month`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_compost_compost_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_compost_compost_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_compost_compost_month table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gtrts_compost_compost_month data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gtrts_compost_compost_month_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_gtrts_compost_compost_month`, // Query the plant27_2021_gtrts_compost_compost_month table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying plant27_2021_gtrts_compost_compost_month`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gtrts_compost_compost_month_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_gtrts_compost_compost_month`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_gtrts_compost_compost_month:',
            resultSet,
          );

          try {
            await plant27_2021_gtrts_compost_compost_month_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_gtrts_compost_compost_month`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gtrts_compost_compost_month_create =
  plant27_2021_gtrts_compost_compost_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gtrts_compost_compost_month
        tx.executeSql(
          `INSERT INTO plant27_2021_gtrts_compost_compost_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gtrts_compost_compost_month._URI || null,
            plant27_2021_gtrts_compost_compost_month._CREATOR_URI_USER || null,
            plant27_2021_gtrts_compost_compost_month._CREATION_DATE || null,
            plant27_2021_gtrts_compost_compost_month._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gtrts_compost_compost_month._LAST_UPDATE_DATE || null,
            plant27_2021_gtrts_compost_compost_month._PARENT_AURI || null,
            plant27_2021_gtrts_compost_compost_month._ORDINAL_NUMBER || null,
            plant27_2021_gtrts_compost_compost_month._TOP_LEVEL_AURI || null,
            plant27_2021_gtrts_compost_compost_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gtrts_nuersery_raising_nursery_month_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gtrts_nuersery_raising_nursery_month?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gtrts_nuersery_raising_nursery_month items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gtrts_nuersery_raising_nursery_month`,
            [],
            () => {
              console.log(
                'plant27_2021_gtrts_nuersery_raising_nursery_month table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_nuersery_raising_nursery_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gtrts_nuersery_raising_nursery_month table created successfully',
              );
            },
            reject,
          );

          data.forEach(plant27_2021_gtrts_nuersery_raising_nursery_month => {
            tx.executeSql(
              `INSERT INTO plant27_2021_gtrts_nuersery_raising_nursery_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                plant27_2021_gtrts_nuersery_raising_nursery_month._URI || null,
                plant27_2021_gtrts_nuersery_raising_nursery_month._CREATOR_URI_USER ||
                  null,
                plant27_2021_gtrts_nuersery_raising_nursery_month._CREATION_DATE ||
                  null,
                plant27_2021_gtrts_nuersery_raising_nursery_month._LAST_UPDATE_URI_USER ||
                  null,
                plant27_2021_gtrts_nuersery_raising_nursery_month._LAST_UPDATE_DATE ||
                  null,
                plant27_2021_gtrts_nuersery_raising_nursery_month._PARENT_AURI ||
                  null,
                plant27_2021_gtrts_nuersery_raising_nursery_month._ORDINAL_NUMBER ||
                  null,
                plant27_2021_gtrts_nuersery_raising_nursery_month._TOP_LEVEL_AURI ||
                  null,
                plant27_2021_gtrts_nuersery_raising_nursery_month.VALUE || null,
              ],
              (_, resultSet) =>
                console.log(
                  'plant27_2021_gtrts_nuersery_raising_nursery_month data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting plant27_2021_gtrts_nuersery_raising_nursery_month data',
                  error,
                  plant27_2021_gtrts_nuersery_raising_nursery_month,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gtrts_nuersery_raising_nursery_month data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gtrts_nuersery_raising_nursery_month_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/plant27_2021_gtrts_nuersery_raising_nursery_month?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total plant27_2021_gtrts_nuersery_raising_nursery_month items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS plant27_2021_gtrts_nuersery_raising_nursery_month`,
            [],
            () => {
              console.log(
                'plant27_2021_gtrts_nuersery_raising_nursery_month table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_nuersery_raising_nursery_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'plant27_2021_gtrts_nuersery_raising_nursery_month table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching plant27_2021_gtrts_nuersery_raising_nursery_month data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gtrts_nuersery_raising_nursery_month_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM plant27_2021_gtrts_nuersery_raising_nursery_month`, // Query the plant27_2021_gtrts_nuersery_raising_nursery_month table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying plant27_2021_gtrts_nuersery_raising_nursery_month`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gtrts_nuersery_raising_nursery_month_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM plant27_2021_gtrts_nuersery_raising_nursery_month`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from plant27_2021_gtrts_nuersery_raising_nursery_month:',
              resultSet,
            );

            try {
              await plant27_2021_gtrts_nuersery_raising_nursery_month_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from plant27_2021_gtrts_nuersery_raising_nursery_month`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gtrts_nuersery_raising_nursery_month_create =
  plant27_2021_gtrts_nuersery_raising_nursery_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gtrts_nuersery_raising_nursery_month
        tx.executeSql(
          `INSERT INTO plant27_2021_gtrts_nuersery_raising_nursery_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gtrts_nuersery_raising_nursery_month._URI || null,
            plant27_2021_gtrts_nuersery_raising_nursery_month._CREATOR_URI_USER ||
              null,
            plant27_2021_gtrts_nuersery_raising_nursery_month._CREATION_DATE ||
              null,
            plant27_2021_gtrts_nuersery_raising_nursery_month._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gtrts_nuersery_raising_nursery_month._LAST_UPDATE_DATE ||
              null,
            plant27_2021_gtrts_nuersery_raising_nursery_month._PARENT_AURI ||
              null,
            plant27_2021_gtrts_nuersery_raising_nursery_month._ORDINAL_NUMBER ||
              null,
            plant27_2021_gtrts_nuersery_raising_nursery_month._TOP_LEVEL_AURI ||
              null,
            plant27_2021_gtrts_nuersery_raising_nursery_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gtrts_other_treatment_other_month_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gtrts_other_treatment_other_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gtrts_other_treatment_other_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gtrts_other_treatment_other_month`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_other_treatment_other_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_other_treatment_other_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_other_treatment_other_month table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_gtrts_other_treatment_other_month => {
          tx.executeSql(
            `INSERT INTO plant27_2021_gtrts_other_treatment_other_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_gtrts_other_treatment_other_month._URI || null,
              plant27_2021_gtrts_other_treatment_other_month._CREATOR_URI_USER ||
                null,
              plant27_2021_gtrts_other_treatment_other_month._CREATION_DATE ||
                null,
              plant27_2021_gtrts_other_treatment_other_month._LAST_UPDATE_URI_USER ||
                null,
              plant27_2021_gtrts_other_treatment_other_month._LAST_UPDATE_DATE ||
                null,
              plant27_2021_gtrts_other_treatment_other_month._PARENT_AURI ||
                null,
              plant27_2021_gtrts_other_treatment_other_month._ORDINAL_NUMBER ||
                null,
              plant27_2021_gtrts_other_treatment_other_month._TOP_LEVEL_AURI ||
                null,
              plant27_2021_gtrts_other_treatment_other_month.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_gtrts_other_treatment_other_month data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_gtrts_other_treatment_other_month data',
                error,
                plant27_2021_gtrts_other_treatment_other_month,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gtrts_other_treatment_other_month data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gtrts_other_treatment_other_month_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gtrts_other_treatment_other_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gtrts_other_treatment_other_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gtrts_other_treatment_other_month`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_other_treatment_other_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_other_treatment_other_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_other_treatment_other_month table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gtrts_other_treatment_other_month data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gtrts_other_treatment_other_month_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_gtrts_other_treatment_other_month`, // Query the plant27_2021_gtrts_other_treatment_other_month table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying plant27_2021_gtrts_other_treatment_other_month`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gtrts_other_treatment_other_month_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM plant27_2021_gtrts_other_treatment_other_month`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from plant27_2021_gtrts_other_treatment_other_month:',
              resultSet,
            );

            try {
              await plant27_2021_gtrts_other_treatment_other_month_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from plant27_2021_gtrts_other_treatment_other_month`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gtrts_other_treatment_other_month_create =
  plant27_2021_gtrts_other_treatment_other_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gtrts_other_treatment_other_month
        tx.executeSql(
          `INSERT INTO plant27_2021_gtrts_other_treatment_other_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gtrts_other_treatment_other_month._URI || null,
            plant27_2021_gtrts_other_treatment_other_month._CREATOR_URI_USER ||
              null,
            plant27_2021_gtrts_other_treatment_other_month._CREATION_DATE ||
              null,
            plant27_2021_gtrts_other_treatment_other_month._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gtrts_other_treatment_other_month._LAST_UPDATE_DATE ||
              null,
            plant27_2021_gtrts_other_treatment_other_month._PARENT_AURI || null,
            plant27_2021_gtrts_other_treatment_other_month._ORDINAL_NUMBER ||
              null,
            plant27_2021_gtrts_other_treatment_other_month._TOP_LEVEL_AURI ||
              null,
            plant27_2021_gtrts_other_treatment_other_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_gtrts_plantation_site_month_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gtrts_plantation_site_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gtrts_plantation_site_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gtrts_plantation_site_month`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_plantation_site_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_plantation_site_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_plantation_site_month table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_gtrts_plantation_site_month => {
          tx.executeSql(
            `INSERT INTO plant27_2021_gtrts_plantation_site_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_gtrts_plantation_site_month._URI || null,
              plant27_2021_gtrts_plantation_site_month._CREATOR_URI_USER ||
                null,
              plant27_2021_gtrts_plantation_site_month._CREATION_DATE || null,
              plant27_2021_gtrts_plantation_site_month._LAST_UPDATE_URI_USER ||
                null,
              plant27_2021_gtrts_plantation_site_month._LAST_UPDATE_DATE ||
                null,
              plant27_2021_gtrts_plantation_site_month._PARENT_AURI || null,
              plant27_2021_gtrts_plantation_site_month._ORDINAL_NUMBER || null,
              plant27_2021_gtrts_plantation_site_month._TOP_LEVEL_AURI || null,
              plant27_2021_gtrts_plantation_site_month.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_gtrts_plantation_site_month data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_gtrts_plantation_site_month data',
                error,
                plant27_2021_gtrts_plantation_site_month,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gtrts_plantation_site_month data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_gtrts_plantation_site_month_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_gtrts_plantation_site_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_gtrts_plantation_site_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_gtrts_plantation_site_month`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_plantation_site_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_gtrts_plantation_site_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_gtrts_plantation_site_month table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_gtrts_plantation_site_month data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_gtrts_plantation_site_month_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_gtrts_plantation_site_month`, // Query the plant27_2021_gtrts_plantation_site_month table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying plant27_2021_gtrts_plantation_site_month`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_gtrts_plantation_site_month_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_gtrts_plantation_site_month`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_gtrts_plantation_site_month:',
            resultSet,
          );

          try {
            await plant27_2021_gtrts_plantation_site_month_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_gtrts_plantation_site_month`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_gtrts_plantation_site_month_create =
  plant27_2021_gtrts_plantation_site_month => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_gtrts_plantation_site_month
        tx.executeSql(
          `INSERT INTO plant27_2021_gtrts_plantation_site_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_gtrts_plantation_site_month._URI || null,
            plant27_2021_gtrts_plantation_site_month._CREATOR_URI_USER || null,
            plant27_2021_gtrts_plantation_site_month._CREATION_DATE || null,
            plant27_2021_gtrts_plantation_site_month._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_gtrts_plantation_site_month._LAST_UPDATE_DATE || null,
            plant27_2021_gtrts_plantation_site_month._PARENT_AURI || null,
            plant27_2021_gtrts_plantation_site_month._ORDINAL_NUMBER || null,
            plant27_2021_gtrts_plantation_site_month._TOP_LEVEL_AURI || null,
            plant27_2021_gtrts_plantation_site_month.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_location_data_ca_tloc_ad_upzilla_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_location_data_ca_tloc_ad_upzilla?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_location_data_ca_tloc_ad_upzilla items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_location_data_ca_tloc_ad_upzilla`,
          [],
          () => {
            console.log(
              'plant27_2021_location_data_ca_tloc_ad_upzilla table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_location_data_ca_tloc_ad_upzilla (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_location_data_ca_tloc_ad_upzilla table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_location_data_ca_tloc_ad_upzilla => {
          tx.executeSql(
            `INSERT INTO plant27_2021_location_data_ca_tloc_ad_upzilla VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_location_data_ca_tloc_ad_upzilla._URI || null,
              plant27_2021_location_data_ca_tloc_ad_upzilla._CREATOR_URI_USER ||
                null,
              plant27_2021_location_data_ca_tloc_ad_upzilla._CREATION_DATE ||
                null,
              plant27_2021_location_data_ca_tloc_ad_upzilla._LAST_UPDATE_URI_USER ||
                null,
              plant27_2021_location_data_ca_tloc_ad_upzilla._LAST_UPDATE_DATE ||
                null,
              plant27_2021_location_data_ca_tloc_ad_upzilla._PARENT_AURI ||
                null,
              plant27_2021_location_data_ca_tloc_ad_upzilla._ORDINAL_NUMBER ||
                null,
              plant27_2021_location_data_ca_tloc_ad_upzilla._TOP_LEVEL_AURI ||
                null,
              plant27_2021_location_data_ca_tloc_ad_upzilla.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_location_data_ca_tloc_ad_upzilla data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_location_data_ca_tloc_ad_upzilla data',
                error,
                plant27_2021_location_data_ca_tloc_ad_upzilla,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_location_data_ca_tloc_ad_upzilla data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_location_data_ca_tloc_ad_upzilla_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_location_data_ca_tloc_ad_upzilla?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_location_data_ca_tloc_ad_upzilla items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_location_data_ca_tloc_ad_upzilla`,
          [],
          () => {
            console.log(
              'plant27_2021_location_data_ca_tloc_ad_upzilla table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_location_data_ca_tloc_ad_upzilla (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_location_data_ca_tloc_ad_upzilla table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_location_data_ca_tloc_ad_upzilla data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_location_data_ca_tloc_ad_upzilla_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_location_data_ca_tloc_ad_upzilla`, // Query the plant27_2021_location_data_ca_tloc_ad_upzilla table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying plant27_2021_location_data_ca_tloc_ad_upzilla`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_location_data_ca_tloc_ad_upzilla_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM plant27_2021_location_data_ca_tloc_ad_upzilla`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from plant27_2021_location_data_ca_tloc_ad_upzilla:',
              resultSet,
            );

            try {
              await plant27_2021_location_data_ca_tloc_ad_upzilla_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from plant27_2021_location_data_ca_tloc_ad_upzilla`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_location_data_ca_tloc_ad_upzilla_create =
  plant27_2021_location_data_ca_tloc_ad_upzilla => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_location_data_ca_tloc_ad_upzilla
        tx.executeSql(
          `INSERT INTO plant27_2021_location_data_ca_tloc_ad_upzilla (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_location_data_ca_tloc_ad_upzilla._URI || null,
            plant27_2021_location_data_ca_tloc_ad_upzilla._CREATOR_URI_USER ||
              null,
            plant27_2021_location_data_ca_tloc_ad_upzilla._CREATION_DATE ||
              null,
            plant27_2021_location_data_ca_tloc_ad_upzilla._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_location_data_ca_tloc_ad_upzilla._LAST_UPDATE_DATE ||
              null,
            plant27_2021_location_data_ca_tloc_ad_upzilla._PARENT_AURI || null,
            plant27_2021_location_data_ca_tloc_ad_upzilla._ORDINAL_NUMBER ||
              null,
            plant27_2021_location_data_ca_tloc_ad_upzilla._TOP_LEVEL_AURI ||
              null,
            plant27_2021_location_data_ca_tloc_ad_upzilla.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_location_data_m_sh1_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_location_data_m_sh1?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_location_data_m_sh1 items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_location_data_m_sh1`,
          [],
          () => {
            console.log(
              'plant27_2021_location_data_m_sh1 table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_location_data_m_sh1 (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,MOUZA1 TEXT,GENERATED_NOTE_NAME_45 TEXT,SURVEY_TYPES TEXT,OTHERS_S_TYPES TEXT,SHEET1 TEXT,PLOT_NO TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_location_data_m_sh1 table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_location_data_m_sh1 => {
          tx.executeSql(
            `INSERT INTO plant27_2021_location_data_m_sh1 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_location_data_m_sh1._URI || null,
              plant27_2021_location_data_m_sh1._CREATOR_URI_USER || null,
              plant27_2021_location_data_m_sh1._CREATION_DATE || null,
              plant27_2021_location_data_m_sh1._LAST_UPDATE_URI_USER || null,
              plant27_2021_location_data_m_sh1._LAST_UPDATE_DATE || null,
              plant27_2021_location_data_m_sh1._PARENT_AURI || null,
              plant27_2021_location_data_m_sh1._ORDINAL_NUMBER || null,
              plant27_2021_location_data_m_sh1._TOP_LEVEL_AURI || null,
              plant27_2021_location_data_m_sh1.MOUZA1 || null,
              plant27_2021_location_data_m_sh1.GENERATED_NOTE_NAME_45 || null,
              plant27_2021_location_data_m_sh1.SURVEY_TYPES || null,
              plant27_2021_location_data_m_sh1.OTHERS_S_TYPES || null,
              plant27_2021_location_data_m_sh1.SHEET1 || null,
              plant27_2021_location_data_m_sh1.PLOT_NO || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_location_data_m_sh1 data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_location_data_m_sh1 data',
                error,
                plant27_2021_location_data_m_sh1,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_location_data_m_sh1 data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_location_data_m_sh1_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_location_data_m_sh1?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_location_data_m_sh1 items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_location_data_m_sh1`,
          [],
          () => {
            console.log(
              'plant27_2021_location_data_m_sh1 table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_location_data_m_sh1 (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,MOUZA1 TEXT,GENERATED_NOTE_NAME_45 TEXT,SURVEY_TYPES TEXT,OTHERS_S_TYPES TEXT,SHEET1 TEXT,PLOT_NO TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_location_data_m_sh1 table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_location_data_m_sh1 data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_location_data_m_sh1_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_location_data_m_sh1`, // Query the plant27_2021_location_data_m_sh1 table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying plant27_2021_location_data_m_sh1`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_location_data_m_sh1_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_location_data_m_sh1`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_location_data_m_sh1:',
            resultSet,
          );

          try {
            await plant27_2021_location_data_m_sh1_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_location_data_m_sh1`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_location_data_m_sh1_create =
  plant27_2021_location_data_m_sh1 => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_location_data_m_sh1
        tx.executeSql(
          `INSERT INTO plant27_2021_location_data_m_sh1 (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,MOUZA1,GENERATED_NOTE_NAME_45,SURVEY_TYPES,OTHERS_S_TYPES,SHEET1,PLOT_NO) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_location_data_m_sh1._URI || null,
            plant27_2021_location_data_m_sh1._CREATOR_URI_USER || null,
            plant27_2021_location_data_m_sh1._CREATION_DATE || null,
            plant27_2021_location_data_m_sh1._LAST_UPDATE_URI_USER || null,
            plant27_2021_location_data_m_sh1._LAST_UPDATE_DATE || null,
            plant27_2021_location_data_m_sh1._PARENT_AURI || null,
            plant27_2021_location_data_m_sh1._ORDINAL_NUMBER || null,
            plant27_2021_location_data_m_sh1._TOP_LEVEL_AURI || null,
            plant27_2021_location_data_m_sh1.MOUZA1 || null,
            plant27_2021_location_data_m_sh1.GENERATED_NOTE_NAME_45 || null,
            plant27_2021_location_data_m_sh1.SURVEY_TYPES || null,
            plant27_2021_location_data_m_sh1.OTHERS_S_TYPES || null,
            plant27_2021_location_data_m_sh1.SHEET1 || null,
            plant27_2021_location_data_m_sh1.PLOT_NO || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_overallnotes_ima_blb_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_overallnotes_ima_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_overallnotes_ima_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_overallnotes_ima_blb`,
          [],
          () => {
            console.log(
              'plant27_2021_overallnotes_ima_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_overallnotes_ima_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_overallnotes_ima_blb table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_overallnotes_ima_blb => {
          tx.executeSql(
            `INSERT INTO plant27_2021_overallnotes_ima_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_overallnotes_ima_blb._URI || null,
              plant27_2021_overallnotes_ima_blb._CREATOR_URI_USER || null,
              plant27_2021_overallnotes_ima_blb._CREATION_DATE || null,
              plant27_2021_overallnotes_ima_blb._LAST_UPDATE_URI_USER || null,
              plant27_2021_overallnotes_ima_blb._LAST_UPDATE_DATE || null,
              plant27_2021_overallnotes_ima_blb._TOP_LEVEL_AURI || null,
              plant27_2021_overallnotes_ima_blb.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_overallnotes_ima_blb data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_overallnotes_ima_blb data',
                error,
                plant27_2021_overallnotes_ima_blb,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_overallnotes_ima_blb data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_overallnotes_ima_blb_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_overallnotes_ima_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_overallnotes_ima_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_overallnotes_ima_blb`,
          [],
          () => {
            console.log(
              'plant27_2021_overallnotes_ima_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_overallnotes_ima_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_overallnotes_ima_blb table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_overallnotes_ima_blb data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_overallnotes_ima_blb_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_overallnotes_ima_blb`, // Query the plant27_2021_overallnotes_ima_blb table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying plant27_2021_overallnotes_ima_blb`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_overallnotes_ima_blb_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_overallnotes_ima_blb`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_overallnotes_ima_blb:',
            resultSet,
          );

          try {
            await plant27_2021_overallnotes_ima_blb_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_overallnotes_ima_blb`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_overallnotes_ima_blb_create =
  plant27_2021_overallnotes_ima_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_overallnotes_ima_blb
        tx.executeSql(
          `INSERT INTO plant27_2021_overallnotes_ima_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_overallnotes_ima_blb._URI || null,
            plant27_2021_overallnotes_ima_blb._CREATOR_URI_USER || null,
            plant27_2021_overallnotes_ima_blb._CREATION_DATE || null,
            plant27_2021_overallnotes_ima_blb._LAST_UPDATE_URI_USER || null,
            plant27_2021_overallnotes_ima_blb._LAST_UPDATE_DATE || null,
            plant27_2021_overallnotes_ima_blb._TOP_LEVEL_AURI || null,
            plant27_2021_overallnotes_ima_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully: in over blb', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data: in over blb', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_overallnotes_ima_bn_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_overallnotes_ima_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_overallnotes_ima_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_overallnotes_ima_bn`,
          [],
          () => {
            console.log(
              'plant27_2021_overallnotes_ima_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_overallnotes_ima_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_overallnotes_ima_bn table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_overallnotes_ima_bn => {
          tx.executeSql(
            `INSERT INTO plant27_2021_overallnotes_ima_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_overallnotes_ima_bn._URI || null,
              plant27_2021_overallnotes_ima_bn._CREATOR_URI_USER || null,
              plant27_2021_overallnotes_ima_bn._CREATION_DATE || null,
              plant27_2021_overallnotes_ima_bn._LAST_UPDATE_URI_USER || null,
              plant27_2021_overallnotes_ima_bn._LAST_UPDATE_DATE || null,
              plant27_2021_overallnotes_ima_bn._PARENT_AURI || null,
              plant27_2021_overallnotes_ima_bn._ORDINAL_NUMBER || null,
              plant27_2021_overallnotes_ima_bn._TOP_LEVEL_AURI || null,
              plant27_2021_overallnotes_ima_bn.UNROOTED_FILE_PATH || null,
              plant27_2021_overallnotes_ima_bn.CONTENT_TYPE || null,
              plant27_2021_overallnotes_ima_bn.CONTENT_LENGTH || null,
              plant27_2021_overallnotes_ima_bn.CONTENT_HASH || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_overallnotes_ima_bn data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_overallnotes_ima_bn data',
                error,
                plant27_2021_overallnotes_ima_bn,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_overallnotes_ima_bn data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_overallnotes_ima_bn_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_overallnotes_ima_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_overallnotes_ima_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_overallnotes_ima_bn`,
          [],
          () => {
            console.log(
              'plant27_2021_overallnotes_ima_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_overallnotes_ima_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_overallnotes_ima_bn table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_overallnotes_ima_bn data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_overallnotes_ima_bn_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_overallnotes_ima_bn`, // Query the plant27_2021_overallnotes_ima_bn table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying plant27_2021_overallnotes_ima_bn`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_overallnotes_ima_bn_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_overallnotes_ima_bn`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_overallnotes_ima_bn:',
            resultSet,
          );

          try {
            await plant27_2021_overallnotes_ima_bn_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_overallnotes_ima_bn`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_overallnotes_ima_bn_create =
  plant27_2021_overallnotes_ima_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_overallnotes_ima_bn
        tx.executeSql(
          `INSERT INTO plant27_2021_overallnotes_ima_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_overallnotes_ima_bn._URI || null,
            plant27_2021_overallnotes_ima_bn._CREATOR_URI_USER || null,
            plant27_2021_overallnotes_ima_bn._CREATION_DATE || null,
            plant27_2021_overallnotes_ima_bn._LAST_UPDATE_URI_USER || null,
            plant27_2021_overallnotes_ima_bn._LAST_UPDATE_DATE || null,
            plant27_2021_overallnotes_ima_bn._PARENT_AURI || null,
            plant27_2021_overallnotes_ima_bn._ORDINAL_NUMBER || null,
            plant27_2021_overallnotes_ima_bn._TOP_LEVEL_AURI || null,
            plant27_2021_overallnotes_ima_bn.UNROOTED_FILE_PATH || null,
            plant27_2021_overallnotes_ima_bn.CONTENT_TYPE || null,
            plant27_2021_overallnotes_ima_bn.CONTENT_LENGTH || null,
            plant27_2021_overallnotes_ima_bn.CONTENT_HASH || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_overallnotes_ima_ref_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_overallnotes_ima_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_overallnotes_ima_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_overallnotes_ima_ref`,
          [],
          () => {
            console.log(
              'plant27_2021_overallnotes_ima_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_overallnotes_ima_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_overallnotes_ima_ref table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_overallnotes_ima_ref => {
          tx.executeSql(
            `INSERT INTO plant27_2021_overallnotes_ima_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_overallnotes_ima_ref._URI || null,
              plant27_2021_overallnotes_ima_ref._CREATOR_URI_USER || null,
              plant27_2021_overallnotes_ima_ref._CREATION_DATE || null,
              plant27_2021_overallnotes_ima_ref._LAST_UPDATE_URI_USER || null,
              plant27_2021_overallnotes_ima_ref._LAST_UPDATE_DATE || null,
              plant27_2021_overallnotes_ima_ref._DOM_AURI || null,
              plant27_2021_overallnotes_ima_ref._SUB_AURI || null,
              plant27_2021_overallnotes_ima_ref._TOP_LEVEL_AURI || null,
              plant27_2021_overallnotes_ima_ref.PART || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_overallnotes_ima_ref data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_overallnotes_ima_ref data',
                error,
                plant27_2021_overallnotes_ima_ref,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_overallnotes_ima_ref data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_overallnotes_ima_ref_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_overallnotes_ima_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_overallnotes_ima_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_overallnotes_ima_ref`,
          [],
          () => {
            console.log(
              'plant27_2021_overallnotes_ima_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_overallnotes_ima_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_overallnotes_ima_ref table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_overallnotes_ima_ref data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_overallnotes_ima_ref_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_overallnotes_ima_ref`, // Query the plant27_2021_overallnotes_ima_ref table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying plant27_2021_overallnotes_ima_ref`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_overallnotes_ima_ref_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_overallnotes_ima_ref`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_overallnotes_ima_ref:',
            resultSet,
          );

          try {
            await plant27_2021_overallnotes_ima_ref_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_overallnotes_ima_ref`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_overallnotes_ima_ref_create =
  plant27_2021_overallnotes_ima_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_overallnotes_ima_ref
        tx.executeSql(
          `INSERT INTO plant27_2021_overallnotes_ima_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_overallnotes_ima_ref._URI || null,
            plant27_2021_overallnotes_ima_ref._CREATOR_URI_USER || null,
            plant27_2021_overallnotes_ima_ref._CREATION_DATE || null,
            plant27_2021_overallnotes_ima_ref._LAST_UPDATE_URI_USER || null,
            plant27_2021_overallnotes_ima_ref._LAST_UPDATE_DATE || null,
            plant27_2021_overallnotes_ima_ref._DOM_AURI || null,
            plant27_2021_overallnotes_ima_ref._SUB_AURI || null,
            plant27_2021_overallnotes_ima_ref._TOP_LEVEL_AURI || null,
            plant27_2021_overallnotes_ima_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_planting_plan_gplanting_gspp_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_planting_plan_gplanting_gspp?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_planting_plan_gplanting_gspp items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_planting_plan_gplanting_gspp`,
          [],
          () => {
            console.log(
              'plant27_2021_planting_plan_gplanting_gspp table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_planting_plan_gplanting_gspp (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,PREF_SOURCE TEXT,GENERATED_NOTE_NAME_156 TEXT,PREF_OTHER_SOURCE TEXT,PREF_SPECIES TEXT,PREF_REPRO_TYPE TEXT,PREF_NRSEEDLINGS TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_planting_plan_gplanting_gspp table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_planting_plan_gplanting_gspp => {
          tx.executeSql(
            `INSERT INTO plant27_2021_planting_plan_gplanting_gspp VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_planting_plan_gplanting_gspp._URI || null,
              plant27_2021_planting_plan_gplanting_gspp._CREATOR_URI_USER ||
                null,
              plant27_2021_planting_plan_gplanting_gspp._CREATION_DATE || null,
              plant27_2021_planting_plan_gplanting_gspp._LAST_UPDATE_URI_USER ||
                null,
              plant27_2021_planting_plan_gplanting_gspp._LAST_UPDATE_DATE ||
                null,
              plant27_2021_planting_plan_gplanting_gspp._PARENT_AURI || null,
              plant27_2021_planting_plan_gplanting_gspp._ORDINAL_NUMBER || null,
              plant27_2021_planting_plan_gplanting_gspp._TOP_LEVEL_AURI || null,
              plant27_2021_planting_plan_gplanting_gspp.PREF_SOURCE || null,
              plant27_2021_planting_plan_gplanting_gspp.GENERATED_NOTE_NAME_156 ||
                null,
              plant27_2021_planting_plan_gplanting_gspp.PREF_OTHER_SOURCE ||
                null,
              plant27_2021_planting_plan_gplanting_gspp.PREF_SPECIES || null,
              plant27_2021_planting_plan_gplanting_gspp.PREF_REPRO_TYPE || null,
              plant27_2021_planting_plan_gplanting_gspp.PREF_NRSEEDLINGS ||
                null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_planting_plan_gplanting_gspp data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_planting_plan_gplanting_gspp data',
                error,
                plant27_2021_planting_plan_gplanting_gspp,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_planting_plan_gplanting_gspp data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_planting_plan_gplanting_gspp_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_planting_plan_gplanting_gspp?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_planting_plan_gplanting_gspp items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_planting_plan_gplanting_gspp`,
          [],
          () => {
            console.log(
              'plant27_2021_planting_plan_gplanting_gspp table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_planting_plan_gplanting_gspp (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,PREF_SOURCE TEXT,GENERATED_NOTE_NAME_156 TEXT,PREF_OTHER_SOURCE TEXT,PREF_SPECIES TEXT,PREF_REPRO_TYPE TEXT,PREF_NRSEEDLINGS TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_planting_plan_gplanting_gspp table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_planting_plan_gplanting_gspp data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_planting_plan_gplanting_gspp_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_planting_plan_gplanting_gspp`, // Query the plant27_2021_planting_plan_gplanting_gspp table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(
            `Error querying plant27_2021_planting_plan_gplanting_gspp`,
            error,
          );
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_planting_plan_gplanting_gspp_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_planting_plan_gplanting_gspp`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_planting_plan_gplanting_gspp:',
            resultSet,
          );

          try {
            await plant27_2021_planting_plan_gplanting_gspp_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_planting_plan_gplanting_gspp`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_planting_plan_gplanting_gspp_create =
  plant27_2021_planting_plan_gplanting_gspp => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_planting_plan_gplanting_gspp
        tx.executeSql(
          `INSERT INTO plant27_2021_planting_plan_gplanting_gspp (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,PREF_SOURCE,GENERATED_NOTE_NAME_156,PREF_OTHER_SOURCE,PREF_SPECIES,PREF_REPRO_TYPE,PREF_NRSEEDLINGS) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_planting_plan_gplanting_gspp._URI || null,
            plant27_2021_planting_plan_gplanting_gspp._CREATOR_URI_USER || null,
            plant27_2021_planting_plan_gplanting_gspp._CREATION_DATE || null,
            plant27_2021_planting_plan_gplanting_gspp._LAST_UPDATE_URI_USER ||
              null,
            plant27_2021_planting_plan_gplanting_gspp._LAST_UPDATE_DATE || null,
            plant27_2021_planting_plan_gplanting_gspp._PARENT_AURI || null,
            plant27_2021_planting_plan_gplanting_gspp._ORDINAL_NUMBER || null,
            plant27_2021_planting_plan_gplanting_gspp._TOP_LEVEL_AURI || null,
            plant27_2021_planting_plan_gplanting_gspp.PREF_SOURCE || null,
            plant27_2021_planting_plan_gplanting_gspp.GENERATED_NOTE_NAME_156 ||
              null,
            plant27_2021_planting_plan_gplanting_gspp.PREF_OTHER_SOURCE || null,
            plant27_2021_planting_plan_gplanting_gspp.PREF_SPECIES || null,
            plant27_2021_planting_plan_gplanting_gspp.PREF_REPRO_TYPE || null,
            plant27_2021_planting_plan_gplanting_gspp.PREF_NRSEEDLINGS || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_rphotoextra_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_rphotoextra?token=${token}`,
    );
    const data = await response.json();
    console.log('Total plant27_2021_rphotoextra items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_rphotoextra`,
          [],
          () => {
            console.log('plant27_2021_rphotoextra table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_rphotoextra (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,PPICLOCATIONEXTRA_ALT TEXT,XPIC_BEARING TEXT,GENERATED_NOTE_NAME_65 TEXT,PPICLOCATIONEXTRA_LNG TEXT,PPICLOCATIONEXTRA_ACC TEXT,PPICLOCATIONEXTRA_LAT TEXT)`,
          [],
          () => {
            console.log('plant27_2021_rphotoextra table created successfully');
          },
          reject,
        );

        data.forEach(plant27_2021_rphotoextra => {
          tx.executeSql(
            `INSERT INTO plant27_2021_rphotoextra VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_rphotoextra._URI || null,
              plant27_2021_rphotoextra._CREATOR_URI_USER || null,
              plant27_2021_rphotoextra._CREATION_DATE || null,
              plant27_2021_rphotoextra._LAST_UPDATE_URI_USER || null,
              plant27_2021_rphotoextra._LAST_UPDATE_DATE || null,
              plant27_2021_rphotoextra._PARENT_AURI || null,
              plant27_2021_rphotoextra._ORDINAL_NUMBER || null,
              plant27_2021_rphotoextra._TOP_LEVEL_AURI || null,
              plant27_2021_rphotoextra.PPICLOCATIONEXTRA_ALT || null,
              plant27_2021_rphotoextra.XPIC_BEARING || null,
              plant27_2021_rphotoextra.GENERATED_NOTE_NAME_65 || null,
              plant27_2021_rphotoextra.PPICLOCATIONEXTRA_LNG || null,
              plant27_2021_rphotoextra.PPICLOCATIONEXTRA_ACC || null,
              plant27_2021_rphotoextra.PPICLOCATIONEXTRA_LAT || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_rphotoextra data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_rphotoextra data',
                error,
                plant27_2021_rphotoextra,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_rphotoextra data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_rphotoextra_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_rphotoextra?token=${token}`,
    );
    const data = await response.json();
    console.log('Total plant27_2021_rphotoextra items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_rphotoextra`,
          [],
          () => {
            console.log('plant27_2021_rphotoextra table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_rphotoextra (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,PPICLOCATIONEXTRA_ALT TEXT,XPIC_BEARING TEXT,GENERATED_NOTE_NAME_65 TEXT,PPICLOCATIONEXTRA_LNG TEXT,PPICLOCATIONEXTRA_ACC TEXT,PPICLOCATIONEXTRA_LAT TEXT)`,
          [],
          () => {
            console.log('plant27_2021_rphotoextra table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_rphotoextra data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_rphotoextra_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_rphotoextra`, // Query the plant27_2021_rphotoextra table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying plant27_2021_rphotoextra`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_rphotoextra_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_rphotoextra`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_rphotoextra:',
            resultSet,
          );

          try {
            await plant27_2021_rphotoextra_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_rphotoextra`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_rphotoextra_create = plant27_2021_rphotoextra => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert plant27_2021_rphotoextra
      tx.executeSql(
        `INSERT INTO plant27_2021_rphotoextra (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,PPICLOCATIONEXTRA_ALT,XPIC_BEARING,GENERATED_NOTE_NAME_65,PPICLOCATIONEXTRA_LNG,PPICLOCATIONEXTRA_ACC,PPICLOCATIONEXTRA_LAT) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          plant27_2021_rphotoextra._URI || null,
          plant27_2021_rphotoextra._CREATOR_URI_USER || null,
          plant27_2021_rphotoextra._CREATION_DATE || null,
          plant27_2021_rphotoextra._LAST_UPDATE_URI_USER || null,
          plant27_2021_rphotoextra._LAST_UPDATE_DATE || null,
          plant27_2021_rphotoextra._PARENT_AURI || null,
          plant27_2021_rphotoextra._ORDINAL_NUMBER || null,
          plant27_2021_rphotoextra._TOP_LEVEL_AURI || null,
          plant27_2021_rphotoextra.PPICLOCATIONEXTRA_ALT || null,
          plant27_2021_rphotoextra.XPIC_BEARING || null,
          plant27_2021_rphotoextra.GENERATED_NOTE_NAME_65 || null,
          plant27_2021_rphotoextra.PPICLOCATIONEXTRA_LNG || null,
          plant27_2021_rphotoextra.PPICLOCATIONEXTRA_ACC || null,
          plant27_2021_rphotoextra.PPICLOCATIONEXTRA_LAT || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_s_site_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_s_site?token=${token}`,
    );
    const data = await response.json();
    console.log('Total plant27_2021_s_site items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_s_site`,
          [],
          () => {
            console.log('plant27_2021_s_site table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_s_site (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,TRACE_GPX TEXT,POLYLINE TEXT,TOTAREA_HA TEXT,TMAIN_POLYTYPE TEXT,POLYTRACE TEXT,GENERATED_NOTE_NAME_54 TEXT,TOTAREA_AC TEXT)`,
          [],
          () => {
            console.log('plant27_2021_s_site table created successfully');
          },
          reject,
        );

        data.forEach(plant27_2021_s_site => {
          tx.executeSql(
            `INSERT INTO plant27_2021_s_site VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_s_site._URI || null,
              plant27_2021_s_site._CREATOR_URI_USER || null,
              plant27_2021_s_site._CREATION_DATE || null,
              plant27_2021_s_site._LAST_UPDATE_URI_USER || null,
              plant27_2021_s_site._LAST_UPDATE_DATE || null,
              plant27_2021_s_site._PARENT_AURI || null,
              plant27_2021_s_site._ORDINAL_NUMBER || null,
              plant27_2021_s_site._TOP_LEVEL_AURI || null,
              plant27_2021_s_site.TRACE_GPX || null,
              plant27_2021_s_site.POLYLINE || null,
              plant27_2021_s_site.TOTAREA_HA || null,
              plant27_2021_s_site.TMAIN_POLYTYPE || null,
              plant27_2021_s_site.POLYTRACE || null,
              plant27_2021_s_site.GENERATED_NOTE_NAME_54 || null,
              plant27_2021_s_site.TOTAREA_AC || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_s_site data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_s_site data',
                error,
                plant27_2021_s_site,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching plant27_2021_s_site data from API', error);
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_s_site_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_s_site?token=${token}`,
    );
    const data = await response.json();
    console.log('Total plant27_2021_s_site items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_s_site`,
          [],
          () => {
            console.log('plant27_2021_s_site table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_s_site (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,TRACE_GPX TEXT,POLYLINE TEXT,TOTAREA_HA TEXT,TMAIN_POLYTYPE TEXT,POLYTRACE TEXT,GENERATED_NOTE_NAME_54 TEXT,TOTAREA_AC TEXT)`,
          [],
          () => {
            console.log('plant27_2021_s_site table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error('Error fetching plant27_2021_s_site data from API', error);
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_s_site_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_s_site`, // Query the plant27_2021_s_site table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying plant27_2021_s_site`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_s_site_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_s_site`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log('All data deleted from plant27_2021_s_site:', resultSet);

          try {
            await plant27_2021_s_site_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(`Error deleting data from plant27_2021_s_site`, error);
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_s_site_create = plant27_2021_s_site => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert plant27_2021_s_site
      tx.executeSql(
        `INSERT INTO plant27_2021_s_site (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,TRACE_GPX,POLYLINE,TOTAREA_HA,TMAIN_POLYTYPE,POLYTRACE,GENERATED_NOTE_NAME_54,TOTAREA_AC) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          plant27_2021_s_site._URI || null,
          plant27_2021_s_site._CREATOR_URI_USER || null,
          plant27_2021_s_site._CREATION_DATE || null,
          plant27_2021_s_site._LAST_UPDATE_URI_USER || null,
          plant27_2021_s_site._LAST_UPDATE_DATE || null,
          plant27_2021_s_site._PARENT_AURI || null,
          plant27_2021_s_site._ORDINAL_NUMBER || null,
          plant27_2021_s_site._TOP_LEVEL_AURI || null,
          plant27_2021_s_site.TRACE_GPX || null,
          plant27_2021_s_site.POLYLINE || null,
          plant27_2021_s_site.TOTAREA_HA || null,
          plant27_2021_s_site.TMAIN_POLYTYPE || null,
          plant27_2021_s_site.POLYTRACE || null,
          plant27_2021_s_site.GENERATED_NOTE_NAME_54 || null,
          plant27_2021_s_site.TOTAREA_AC || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_weeding_month_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_weeding_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_weeding_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_weeding_month`,
          [],
          () => {
            console.log(
              'plant27_2021_weeding_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_weeding_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_weeding_month table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_weeding_month => {
          tx.executeSql(
            `INSERT INTO plant27_2021_weeding_month VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_weeding_month._URI || null,
              plant27_2021_weeding_month._CREATOR_URI_USER || null,
              plant27_2021_weeding_month._CREATION_DATE || null,
              plant27_2021_weeding_month._LAST_UPDATE_URI_USER || null,
              plant27_2021_weeding_month._LAST_UPDATE_DATE || null,
              plant27_2021_weeding_month._PARENT_AURI || null,
              plant27_2021_weeding_month._ORDINAL_NUMBER || null,
              plant27_2021_weeding_month._TOP_LEVEL_AURI || null,
              plant27_2021_weeding_month.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_weeding_month data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_weeding_month data',
                error,
                plant27_2021_weeding_month,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_weeding_month data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_weeding_month_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_weeding_month?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_weeding_month items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_weeding_month`,
          [],
          () => {
            console.log(
              'plant27_2021_weeding_month table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_weeding_month (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_weeding_month table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_weeding_month data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_weeding_month_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_weeding_month`, // Query the plant27_2021_weeding_month table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying plant27_2021_weeding_month`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_weeding_month_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_weeding_month`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_weeding_month:',
            resultSet,
          );

          try {
            await plant27_2021_weeding_month_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_weeding_month`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_weeding_month_create = plant27_2021_weeding_month => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert plant27_2021_weeding_month
      tx.executeSql(
        `INSERT INTO plant27_2021_weeding_month (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          plant27_2021_weeding_month._URI || null,
          plant27_2021_weeding_month._CREATOR_URI_USER || null,
          plant27_2021_weeding_month._CREATION_DATE || null,
          plant27_2021_weeding_month._LAST_UPDATE_URI_USER || null,
          plant27_2021_weeding_month._LAST_UPDATE_DATE || null,
          plant27_2021_weeding_month._PARENT_AURI || null,
          plant27_2021_weeding_month._ORDINAL_NUMBER || null,
          plant27_2021_weeding_month._TOP_LEVEL_AURI || null,
          plant27_2021_weeding_month.VALUE || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_xpictureextra_blb_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_xpictureextra_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_xpictureextra_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_xpictureextra_blb`,
          [],
          () => {
            console.log(
              'plant27_2021_xpictureextra_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_xpictureextra_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_xpictureextra_blb table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_xpictureextra_blb => {
          tx.executeSql(
            `INSERT INTO plant27_2021_xpictureextra_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_xpictureextra_blb._URI || null,
              plant27_2021_xpictureextra_blb._CREATOR_URI_USER || null,
              plant27_2021_xpictureextra_blb._CREATION_DATE || null,
              plant27_2021_xpictureextra_blb._LAST_UPDATE_URI_USER || null,
              plant27_2021_xpictureextra_blb._LAST_UPDATE_DATE || null,
              plant27_2021_xpictureextra_blb._TOP_LEVEL_AURI || null,
              plant27_2021_xpictureextra_blb.VALUE || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_xpictureextra_blb data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_xpictureextra_blb data',
                error,
                plant27_2021_xpictureextra_blb,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_xpictureextra_blb data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_xpictureextra_blb_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_xpictureextra_blb?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_xpictureextra_blb items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_xpictureextra_blb`,
          [],
          () => {
            console.log(
              'plant27_2021_xpictureextra_blb table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_xpictureextra_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_xpictureextra_blb table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_xpictureextra_blb data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_xpictureextra_blb_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_xpictureextra_blb`, // Query the plant27_2021_xpictureextra_blb table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying plant27_2021_xpictureextra_blb`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_xpictureextra_blb_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_xpictureextra_blb`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_xpictureextra_blb:',
            resultSet,
          );

          try {
            await plant27_2021_xpictureextra_blb_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_xpictureextra_blb`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_xpictureextra_blb_create =
  plant27_2021_xpictureextra_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_xpictureextra_blb
        tx.executeSql(
          `INSERT INTO plant27_2021_xpictureextra_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_xpictureextra_blb._URI || null,
            plant27_2021_xpictureextra_blb._CREATOR_URI_USER || null,
            plant27_2021_xpictureextra_blb._CREATION_DATE || null,
            plant27_2021_xpictureextra_blb._LAST_UPDATE_URI_USER || null,
            plant27_2021_xpictureextra_blb._LAST_UPDATE_DATE || null,
            plant27_2021_xpictureextra_blb._TOP_LEVEL_AURI || null,
            plant27_2021_xpictureextra_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully: in xpic ', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data: in xpic', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_xpictureextra_bn_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_xpictureextra_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_xpictureextra_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_xpictureextra_bn`,
          [],
          () => {
            console.log(
              'plant27_2021_xpictureextra_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_xpictureextra_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_xpictureextra_bn table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_xpictureextra_bn => {
          tx.executeSql(
            `INSERT INTO plant27_2021_xpictureextra_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_xpictureextra_bn._URI || null,
              plant27_2021_xpictureextra_bn._CREATOR_URI_USER || null,
              plant27_2021_xpictureextra_bn._CREATION_DATE || null,
              plant27_2021_xpictureextra_bn._LAST_UPDATE_URI_USER || null,
              plant27_2021_xpictureextra_bn._LAST_UPDATE_DATE || null,
              plant27_2021_xpictureextra_bn._PARENT_AURI || null,
              plant27_2021_xpictureextra_bn._ORDINAL_NUMBER || null,
              plant27_2021_xpictureextra_bn._TOP_LEVEL_AURI || null,
              plant27_2021_xpictureextra_bn.UNROOTED_FILE_PATH || null,
              plant27_2021_xpictureextra_bn.CONTENT_TYPE || null,
              plant27_2021_xpictureextra_bn.CONTENT_LENGTH || null,
              plant27_2021_xpictureextra_bn.CONTENT_HASH || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_xpictureextra_bn data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_xpictureextra_bn data',
                error,
                plant27_2021_xpictureextra_bn,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_xpictureextra_bn data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_xpictureextra_bn_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_xpictureextra_bn?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_xpictureextra_bn items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_xpictureextra_bn`,
          [],
          () => {
            console.log(
              'plant27_2021_xpictureextra_bn table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_xpictureextra_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_xpictureextra_bn table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_xpictureextra_bn data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_xpictureextra_bn_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_xpictureextra_bn`, // Query the plant27_2021_xpictureextra_bn table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying plant27_2021_xpictureextra_bn`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_xpictureextra_bn_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_xpictureextra_bn`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_xpictureextra_bn:',
            resultSet,
          );

          try {
            await plant27_2021_xpictureextra_bn_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_xpictureextra_bn`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_xpictureextra_bn_create =
  plant27_2021_xpictureextra_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_xpictureextra_bn
        tx.executeSql(
          `INSERT INTO plant27_2021_xpictureextra_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_xpictureextra_bn._URI || null,
            plant27_2021_xpictureextra_bn._CREATOR_URI_USER || null,
            plant27_2021_xpictureextra_bn._CREATION_DATE || null,
            plant27_2021_xpictureextra_bn._LAST_UPDATE_URI_USER || null,
            plant27_2021_xpictureextra_bn._LAST_UPDATE_DATE || null,
            plant27_2021_xpictureextra_bn._PARENT_AURI || null,
            plant27_2021_xpictureextra_bn._ORDINAL_NUMBER || null,
            plant27_2021_xpictureextra_bn._TOP_LEVEL_AURI || null,
            plant27_2021_xpictureextra_bn.UNROOTED_FILE_PATH || null,
            plant27_2021_xpictureextra_bn.CONTENT_TYPE || null,
            plant27_2021_xpictureextra_bn.CONTENT_LENGTH || null,
            plant27_2021_xpictureextra_bn.CONTENT_HASH || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const plant27_2021_xpictureextra_ref_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_xpictureextra_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_xpictureextra_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_xpictureextra_ref`,
          [],
          () => {
            console.log(
              'plant27_2021_xpictureextra_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_xpictureextra_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_xpictureextra_ref table created successfully',
            );
          },
          reject,
        );

        data.forEach(plant27_2021_xpictureextra_ref => {
          tx.executeSql(
            `INSERT INTO plant27_2021_xpictureextra_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              plant27_2021_xpictureextra_ref._URI || null,
              plant27_2021_xpictureextra_ref._CREATOR_URI_USER || null,
              plant27_2021_xpictureextra_ref._CREATION_DATE || null,
              plant27_2021_xpictureextra_ref._LAST_UPDATE_URI_USER || null,
              plant27_2021_xpictureextra_ref._LAST_UPDATE_DATE || null,
              plant27_2021_xpictureextra_ref._DOM_AURI || null,
              plant27_2021_xpictureextra_ref._SUB_AURI || null,
              plant27_2021_xpictureextra_ref._TOP_LEVEL_AURI || null,
              plant27_2021_xpictureextra_ref.PART || null,
            ],
            (_, resultSet) =>
              console.log(
                'plant27_2021_xpictureextra_ref data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting plant27_2021_xpictureextra_ref data',
                error,
                plant27_2021_xpictureextra_ref,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_xpictureextra_ref data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const plant27_2021_xpictureextra_ref_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/plant27_2021_xpictureextra_ref?token=${token}`,
    );
    const data = await response.json();
    console.log(
      'Total plant27_2021_xpictureextra_ref items from API:',
      data.length,
    );

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS plant27_2021_xpictureextra_ref`,
          [],
          () => {
            console.log(
              'plant27_2021_xpictureextra_ref table dropped successfully',
            );
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS plant27_2021_xpictureextra_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
          [],
          () => {
            console.log(
              'plant27_2021_xpictureextra_ref table created successfully',
            );
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching plant27_2021_xpictureextra_ref data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const plant27_2021_xpictureextra_ref_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM plant27_2021_xpictureextra_ref`, // Query the plant27_2021_xpictureextra_ref table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying plant27_2021_xpictureextra_ref`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const plant27_2021_xpictureextra_ref_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM plant27_2021_xpictureextra_ref`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from plant27_2021_xpictureextra_ref:',
            resultSet,
          );

          try {
            await plant27_2021_xpictureextra_ref_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from plant27_2021_xpictureextra_ref`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const plant27_2021_xpictureextra_ref_create =
  plant27_2021_xpictureextra_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert plant27_2021_xpictureextra_ref
        tx.executeSql(
          `INSERT INTO plant27_2021_xpictureextra_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            plant27_2021_xpictureextra_ref._URI || null,
            plant27_2021_xpictureextra_ref._CREATOR_URI_USER || null,
            plant27_2021_xpictureextra_ref._CREATION_DATE || null,
            plant27_2021_xpictureextra_ref._LAST_UPDATE_URI_USER || null,
            plant27_2021_xpictureextra_ref._LAST_UPDATE_DATE || null,
            plant27_2021_xpictureextra_ref._DOM_AURI || null,
            plant27_2021_xpictureextra_ref._SUB_AURI || null,
            plant27_2021_xpictureextra_ref._TOP_LEVEL_AURI || null,
            plant27_2021_xpictureextra_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref table created successfully',
              );
            },
            reject,
          );

          data.forEach(sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref => {
            tx.executeSql(
              `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref._URI || null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref._CREATOR_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref._CREATION_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref._LAST_UPDATE_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref._LAST_UPDATE_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref._DOM_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref._SUB_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref._TOP_LEVEL_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref.PART || null,
              ],
              (_, resultSet) =>
                console.log(
                  'sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref data',
                  error,
                  sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_DOM_AURI TEXT,_SUB_AURI TEXT,_TOP_LEVEL_AURI TEXT,PART TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref`, // Query the sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref:',
              resultSet,
            );

            try {
              await sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref_create =
  sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref
        tx.executeSql(
          `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_DOM_AURI,_SUB_AURI,_TOP_LEVEL_AURI,PART) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref._URI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref._CREATOR_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref._CREATION_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref._LAST_UPDATE_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref._LAST_UPDATE_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref._DOM_AURI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref._SUB_AURI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref._TOP_LEVEL_AURI ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref.PART || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb table created successfully',
              );
            },
            reject,
          );

          data.forEach(sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb => {
            tx.executeSql(
              `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb VALUES (?, ?, ?, ?, ?, ?, ?)`,
              [
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb._URI || null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb._CREATOR_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb._CREATION_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb._LAST_UPDATE_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb._LAST_UPDATE_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb._TOP_LEVEL_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb.VALUE || null,
              ],
              (_, resultSet) =>
                console.log(
                  'sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb data',
                  error,
                  sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_TOP_LEVEL_AURI TEXT,VALUE TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb`, // Query the sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb:',
              resultSet,
            );

            try {
              await sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb_create =
  sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb
        tx.executeSql(
          `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_TOP_LEVEL_AURI,VALUE) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb._URI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb._CREATOR_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb._CREATION_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb._LAST_UPDATE_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb._LAST_UPDATE_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb._TOP_LEVEL_AURI ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb.VALUE || null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn_api =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn table created successfully',
              );
            },
            reject,
          );

          data.forEach(sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn => {
            tx.executeSql(
              `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn._URI || null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn._CREATOR_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn._CREATION_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn._LAST_UPDATE_URI_USER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn._LAST_UPDATE_DATE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn._PARENT_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn._ORDINAL_NUMBER ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn._TOP_LEVEL_AURI ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn.UNROOTED_FILE_PATH ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn.CONTENT_TYPE ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn.CONTENT_LENGTH ||
                  null,
                sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn.CONTENT_HASH ||
                  null,
              ],
              (_, resultSet) =>
                console.log(
                  'sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn data inserted successfully',
                  resultSet,
                ),
              (_, error) => {
                console.error(
                  'Error inserting sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn data',
                  error,
                  sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn,
                );
              },
            );
          });
          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn data from API',
        error,
      );
    }
  };
//API End
//---------------------------------------------------------//
//API2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn_api2 =
  async () => {
    try {
      const response = await fetch(
        `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn?token=${token}`,
      );
      const data = await response.json();
      console.log(
        'Total sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn items from API:',
        data.length,
      );

      await new Promise((resolve, reject) => {
        database.transaction(tx => {
          tx.executeSql(
            `DROP TABLE IF EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn table dropped successfully',
              );
            },
            reject,
          );

          tx.executeSql(
            `CREATE TABLE IF NOT EXISTS sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,_PARENT_AURI TEXT,_ORDINAL_NUMBER TEXT,_TOP_LEVEL_AURI TEXT,UNROOTED_FILE_PATH TEXT,CONTENT_TYPE TEXT,CONTENT_LENGTH TEXT,CONTENT_HASH TEXT)`,
            [],
            () => {
              console.log(
                'sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn table created successfully',
              );
            },
            reject,
          );

          resolve();
        });
      });
    } catch (error) {
      console.error(
        'Error fetching sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn data from API',
        error,
      );
    }
  };
//API2 End
//---------------------------------------------------------//
// List Start

export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn_list =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn`, // Query the sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn table
          [],
          (_, resultSet) => {
            console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
            }
            resolve(data);
          },
          (_, error) => {
            console.error(
              `Error querying sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn`,
              error,
            );
            reject(error);
          },
        );
      });
    });
  };
// List End
//---------------------------------------------------------//
// Delete Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn_delete =
  async () => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DELETE FROM sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn`, // Correct SQL to delete all rows
          [],
          async (_, resultSet) => {
            console.log(
              'All data deleted from sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn:',
              resultSet,
            );

            try {
              await sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn_api();
              resolve(resultSet);
            } catch (apiError) {
              console.error('Error fetching data from API:', apiError);
              reject(apiError);
            }
          },
          (_, error) => {
            console.error(
              `Error deleting data from sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn`,
              error,
            );
            reject(error); // Reject in case of a SQL error
          },
        );
      });
    });
  };

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn_create =
  sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        // Insert sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn
        tx.executeSql(
          `INSERT INTO sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,_PARENT_AURI,_ORDINAL_NUMBER,_TOP_LEVEL_AURI,UNROOTED_FILE_PATH,CONTENT_TYPE,CONTENT_LENGTH,CONTENT_HASH) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn._URI || null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn._CREATOR_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn._CREATION_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn._LAST_UPDATE_URI_USER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn._LAST_UPDATE_DATE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn._PARENT_AURI ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn._ORDINAL_NUMBER ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn._TOP_LEVEL_AURI ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn.UNROOTED_FILE_PATH ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn.CONTENT_TYPE ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn.CONTENT_LENGTH ||
              null,
            sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn.CONTENT_HASH ||
              null,
          ],
          (tx, results) => {
            console.log('Data inserted successfully:', results);
            resolve(results);
          },
          (tx, error) => {
            console.error('Error inserting data:', error);
            reject(error);
          },
        );
      });
    });
  };
// create end
//---------------------------------------------------------//
//API Start
export const _user_granted_authority_api = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_user_granted_authority?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _user_granted_authority items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _user_granted_authority`,
          [],
          () => {
            console.log('_user_granted_authority table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _user_granted_authority (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,USER TEXT,GRANTED_AUTHORITY TEXT)`,
          [],
          () => {
            console.log('_user_granted_authority table created successfully');
          },
          reject,
        );

        data.forEach(_user_granted_authority => {
          tx.executeSql(
            `INSERT INTO _user_granted_authority VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [
              _user_granted_authority._URI || null,
              _user_granted_authority._CREATOR_URI_USER || null,
              _user_granted_authority._CREATION_DATE || null,
              _user_granted_authority._LAST_UPDATE_URI_USER || null,
              _user_granted_authority._LAST_UPDATE_DATE || null,
              _user_granted_authority.USER || null,
              _user_granted_authority.GRANTED_AUTHORITY || null,
            ],
            (_, resultSet) =>
              console.log(
                '_user_granted_authority data inserted successfully',
                resultSet,
              ),
            (_, error) => {
              console.error(
                'Error inserting _user_granted_authority data',
                error,
                _user_granted_authority,
              );
            },
          );
        });
        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _user_granted_authority data from API',
      error,
    );
  }
};
//API End
//---------------------------------------------------------//
//API2 Start
export const _user_granted_authority_api2 = async () => {
  try {
    const response = await fetch(
      `${baseApi}/_user_granted_authority?token=${token}`,
    );
    const data = await response.json();
    console.log('Total _user_granted_authority items from API:', data.length);

    await new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `DROP TABLE IF EXISTS _user_granted_authority`,
          [],
          () => {
            console.log('_user_granted_authority table dropped successfully');
          },
          reject,
        );

        tx.executeSql(
          `CREATE TABLE IF NOT EXISTS _user_granted_authority (_URI TEXT,_CREATOR_URI_USER TEXT,_CREATION_DATE TEXT,_LAST_UPDATE_URI_USER TEXT,_LAST_UPDATE_DATE TEXT,USER TEXT,GRANTED_AUTHORITY TEXT)`,
          [],
          () => {
            console.log('_user_granted_authority table created successfully');
          },
          reject,
        );

        resolve();
      });
    });
  } catch (error) {
    console.error(
      'Error fetching _user_granted_authority data from API',
      error,
    );
  }
};
//API2 End
//---------------------------------------------------------//
// List Start

export const _user_granted_authority_list = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _user_granted_authority`, // Query the _user_granted_authority table
        [],
        (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          }
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying _user_granted_authority`, error);
          reject(error);
        },
      );
    });
  });
};
// List End
//---------------------------------------------------------//
// Delete Start
export const _user_granted_authority_delete = async () => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `DELETE FROM _user_granted_authority`, // Correct SQL to delete all rows
        [],
        async (_, resultSet) => {
          console.log(
            'All data deleted from _user_granted_authority:',
            resultSet,
          );

          try {
            await _user_granted_authority_api();
            resolve(resultSet);
          } catch (apiError) {
            console.error('Error fetching data from API:', apiError);
            reject(apiError);
          }
        },
        (_, error) => {
          console.error(
            `Error deleting data from _user_granted_authority`,
            error,
          );
          reject(error); // Reject in case of a SQL error
        },
      );
    });
  });
};

// Delete End
//---------------------------------------------------------//
// create start
//---------------------------------------------------------//
export const _user_granted_authority_create = _user_granted_authority => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      // Insert _user_granted_authority
      tx.executeSql(
        `INSERT INTO _user_granted_authority (_URI,_CREATOR_URI_USER,_CREATION_DATE,_LAST_UPDATE_URI_USER,_LAST_UPDATE_DATE,USER,GRANTED_AUTHORITY) VALUES (?, ?, ?, ?, ?, ?, ?)`,
        [
          _user_granted_authority._URI || null,
          _user_granted_authority._CREATOR_URI_USER || null,
          _user_granted_authority._CREATION_DATE || null,
          _user_granted_authority._LAST_UPDATE_URI_USER || null,
          _user_granted_authority._LAST_UPDATE_DATE || null,
          _user_granted_authority.USER || null,
          _user_granted_authority.GRANTED_AUTHORITY || null,
        ],
        (tx, results) => {
          console.log('Data inserted successfully:', results);
          resolve(results);
        },
        (tx, error) => {
          console.error('Error inserting data:', error);
          reject(error);
        },
      );
    });
  });
};
// create end
//---------------------------------------------------------//
//com202021_conslttn_ttndnc_pctre_consultation_attendence_blb,
//com202021_conslttn_ttndnc_pctre_consultation_attendence_bn,
//com202021_conslttn_ttndnc_pctre_consultation_attendence_ref,
//com202021_consultation_picture_bn,
//com202021_consultation_picture_ref,
//com202021_core_audit,
//com202021_core_test,
//gener43_2021_core,
//gener43_2021_fbli_ca_tloc_ad_upzilla,
//gener43_2021_others_info1,
//gener43_2021_overallnotes_ima_blb,
//plant27_2021_core,
//plant27_2021_filling_month,
//plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb,
//odk_b39_2022_core,
//plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn,
//plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref,
//plant27_2021_gtrts_planting_planting_month,
//plant27_2021_gtrts_vacancy_filling,
//plant27_2021_gtrts_weeding,
//sufal192020_overallnotes_ima_bn,
//sufal192020_overallnotes_ima_ref,
//sufal192020_planting_plan_gplanting_gspp,
//sufal192020_plantngplngplntnggnrsry_spp_repeat,
//sufal192020_rphotoextra,
//sufal192020_s_site,
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn,
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref,
//_form_info_xform_blb,
//_form_info_manifest_bin,
//_form_info_manifest_blb,
//_form_info_manifest_ref,
//sufal192020_gregen_reg_cen_to_w_bn,
//sufal192020_gregen_reg_cen_to_w_ref,
//com202021_conslttn_ttndnc_pctre_consultation_notes_blb,
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref,
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb,
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb,
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn,
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref,
//sufal_13_2021_gregen_spp_regen,
//sufal_13_2021_gr_regen,
//_backend_actions,
//_filter_group,
//_form_data_model,
//_form_info,
//_form_info_fileset,
//_form_info_submission_association,
//_form_info_xform_bin,
//_form_info_xform_ref,
//_form_service_cursor_2,
//_granted_authority_hierarchy,
//_misc_tasks,
//_persistent_result_file_bin,
//_persistent_result_file_blb,
//_persistent_result_file_ref,
//_persistent_results,
//_registered_users,
//_security_revisions,
//_server_preferences_properties,
//_task_lock,
//com202021_core,
//gener43_2021_core_audit,
//gener43_2021_core_test,
//gener43_2021_fbli_m_sh1,
//com202021_stakeholder_engagement,
//plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn,
//plant27_2021_core_audit,
//plant27_2021_core_test,
//gener43_2021_xpic_beat_index_blb,
//sufal192020_core,
//sufal192020_gregen_reg_cen_to_e_blb,
//sufal192020_gregen_reg_cen_to_e_bn,
//sufal192020_gregen_reg_cen_to_e_ref,
//sufal192020_gregen_reg_cen_to_n_blb,
//sufal192020_gregen_reg_cen_to_n_bn,
//sufal192020_gregen_reg_cen_to_n_ref,
//sufal192020_gregen_reg_cen_to_s_blb,
//sufal192020_gregen_reg_cen_to_s_bn,
//sufal192020_gregen_reg_cen_to_s_ref,
//sufal192020_gregen_reg_cen_to_w_blb,
//sufal192020_gregen_spp_regen,
//sufal192020_gr_regen,
//sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb,
//sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn,
//sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref,
//sufal192020_gtrts_cleaning_cutting_cutting_month,
//sufal192020_gtrts_climber_cutting_climber_month,
//sufal192020_gtrts_commnty_protcton_community_month,
//sufal192020_gtrts_composts_pit_composts_pit_month,
//sufal192020_gtrts_compost_compost_month,
//sufal192020_gtrts_layout_layout_month,
//sufal192020_gtrts_nuersery_raising_nursery_month,
//sufal192020_gtrts_other_treatment_other_month,
//sufal192020_gtrts_pit_digging_digging_month,
//sufal192020_gtrts_plantation_site_month,
//sufal192020_gtrts_planting_planting_month,
//sufal192020_gtrts_vacancy_filling_filling_month,
//sufal192020_gtrts_weeding,
//sufal192020_location_data_ca_tloc_ad_upzilla,
//sufal192020_location_data_m_sh1,
//sufal192020_overallnotes_ima_blb,
//sufal192020_weeding_month,
//sufal192020_xpictureextra_blb,
//sufal192020_xpictureextra_bn,
//sufal192020_xpictureextra_ref,
//sufal_13_2021_core,
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb,
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn,
//com202021_conslttn_ttndnc_pctre_consultation_notes_bn,
//com202021_conslttn_ttndnc_pctre_consultation_notes_ref,
//com202021_consultation_issues_others_ques,
//com202021_consultation_photo,
//com202021_consultation_picture_blb,
//gener43_2021_beat_index,
//gener43_2021_ghumissues,
//gener43_2021_gnatissues,
//gener43_2021_gvillages,
//gener43_2021_overallnotes_ima_bn,
//gener43_2021_overallnotes_ima_ref,
//gener43_2021_xpic_beat_index_bn,
//gener43_2021_xpic_beat_index_ref,
//plant27_2021_community_month,
//plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref,
//plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb,
//plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb,
//plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn,
//plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref,
//plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb,
//plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn,
//plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref,
//plant27_2021_gregen_spp_regen,
//plant27_2021_gr_regen,
//plant27_2021_gtrts_climber_cutting_climber_month,
//plant27_2021_gtrts_community_protection,
//plant27_2021_gtrts_compost_compost_month,
//plant27_2021_gtrts_nuersery_raising_nursery_month,
//plant27_2021_gtrts_other_treatment_other_month,
//plant27_2021_gtrts_plantation_site_month,
//plant27_2021_location_data_ca_tloc_ad_upzilla,
//plant27_2021_location_data_m_sh1,
//plant27_2021_overallnotes_ima_blb,
//plant27_2021_overallnotes_ima_bn,
//plant27_2021_overallnotes_ima_ref,
//plant27_2021_planting_plan_gplanting_gspp,
//plant27_2021_rphotoextra,
//plant27_2021_s_site,
//plant27_2021_weeding_month,
//plant27_2021_xpictureextra_blb,
//plant27_2021_xpictureextra_bn,
//plant27_2021_xpictureextra_ref,
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref,
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb,
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn,
//_user_granted_authority,

//com202021_conslttn_ttndnc_pctre_consultation_attendence_blb(),
//com202021_conslttn_ttndnc_pctre_consultation_attendence_bn(),
//com202021_conslttn_ttndnc_pctre_consultation_attendence_ref(),
//com202021_consultation_picture_bn(),
//com202021_consultation_picture_ref(),
//com202021_core_audit(),
//com202021_core_test(),
//gener43_2021_core(),
//gener43_2021_fbli_ca_tloc_ad_upzilla(),
//gener43_2021_others_info1(),
//gener43_2021_overallnotes_ima_blb(),
//plant27_2021_core(),
//plant27_2021_filling_month(),
//plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb(),
//odk_b39_2022_core(),
//plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn(),
//plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref(),
//plant27_2021_gtrts_planting_planting_month(),
//plant27_2021_gtrts_vacancy_filling(),
//plant27_2021_gtrts_weeding(),
//sufal192020_overallnotes_ima_bn(),
//sufal192020_overallnotes_ima_ref(),
//sufal192020_planting_plan_gplanting_gspp(),
//sufal192020_plantngplngplntnggnrsry_spp_repeat(),
//sufal192020_rphotoextra(),
//sufal192020_s_site(),
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn(),
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref(),
//_form_info_xform_blb(),
//_form_info_manifest_bin(),
//_form_info_manifest_blb(),
//_form_info_manifest_ref(),
//sufal192020_gregen_reg_cen_to_w_bn(),
//sufal192020_gregen_reg_cen_to_w_ref(),
//com202021_conslttn_ttndnc_pctre_consultation_notes_blb(),
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref(),
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb(),
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb(),
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn(),
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref(),
//sufal_13_2021_gregen_spp_regen(),
//sufal_13_2021_gr_regen(),
//_backend_actions(),
//_filter_group(),
//_form_data_model(),
//_form_info(),
//_form_info_fileset(),
//_form_info_submission_association(),
//_form_info_xform_bin(),
//_form_info_xform_ref(),
//_form_service_cursor_2(),
//_granted_authority_hierarchy(),
//_misc_tasks(),
//_persistent_result_file_bin(),
//_persistent_result_file_blb(),
//_persistent_result_file_ref(),
//_persistent_results(),
//_registered_users(),
//_security_revisions(),
//_server_preferences_properties(),
//_task_lock(),
//com202021_core(),
//gener43_2021_core_audit(),
//gener43_2021_core_test(),
//gener43_2021_fbli_m_sh1(),
//com202021_stakeholder_engagement(),
//plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn(),
//plant27_2021_core_audit(),
//plant27_2021_core_test(),
//gener43_2021_xpic_beat_index_blb(),
//sufal192020_core(),
//sufal192020_gregen_reg_cen_to_e_blb(),
//sufal192020_gregen_reg_cen_to_e_bn(),
//sufal192020_gregen_reg_cen_to_e_ref(),
//sufal192020_gregen_reg_cen_to_n_blb(),
//sufal192020_gregen_reg_cen_to_n_bn(),
//sufal192020_gregen_reg_cen_to_n_ref(),
//sufal192020_gregen_reg_cen_to_s_blb(),
//sufal192020_gregen_reg_cen_to_s_bn(),
//sufal192020_gregen_reg_cen_to_s_ref(),
//sufal192020_gregen_reg_cen_to_w_blb(),
//sufal192020_gregen_spp_regen(),
//sufal192020_gr_regen(),
//sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb(),
//sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn(),
//sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref(),
//sufal192020_gtrts_cleaning_cutting_cutting_month(),
//sufal192020_gtrts_climber_cutting_climber_month(),
//sufal192020_gtrts_commnty_protcton_community_month(),
//sufal192020_gtrts_composts_pit_composts_pit_month(),
//sufal192020_gtrts_compost_compost_month(),
//sufal192020_gtrts_layout_layout_month(),
//sufal192020_gtrts_nuersery_raising_nursery_month(),
//sufal192020_gtrts_other_treatment_other_month(),
//sufal192020_gtrts_pit_digging_digging_month(),
//sufal192020_gtrts_plantation_site_month(),
//sufal192020_gtrts_planting_planting_month(),
//sufal192020_gtrts_vacancy_filling_filling_month(),
//sufal192020_gtrts_weeding(),
//sufal192020_location_data_ca_tloc_ad_upzilla(),
//sufal192020_location_data_m_sh1(),
//sufal192020_overallnotes_ima_blb(),
//sufal192020_weeding_month(),
//sufal192020_xpictureextra_blb(),
//sufal192020_xpictureextra_bn(),
//sufal192020_xpictureextra_ref(),
//sufal_13_2021_core(),
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb(),
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn(),
//com202021_conslttn_ttndnc_pctre_consultation_notes_bn(),
//com202021_conslttn_ttndnc_pctre_consultation_notes_ref(),
//com202021_consultation_issues_others_ques(),
//com202021_consultation_photo(),
//com202021_consultation_picture_blb(),
//gener43_2021_beat_index(),
//gener43_2021_ghumissues(),
//gener43_2021_gnatissues(),
//gener43_2021_gvillages(),
//gener43_2021_overallnotes_ima_bn(),
//gener43_2021_overallnotes_ima_ref(),
//gener43_2021_xpic_beat_index_bn(),
//gener43_2021_xpic_beat_index_ref(),
//plant27_2021_community_month(),
//plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref(),
//plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb(),
//plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb(),
//plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn(),
//plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref(),
//plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb(),
//plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn(),
//plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref(),
//plant27_2021_gregen_spp_regen(),
//plant27_2021_gr_regen(),
//plant27_2021_gtrts_climber_cutting_climber_month(),
//plant27_2021_gtrts_community_protection(),
//plant27_2021_gtrts_compost_compost_month(),
//plant27_2021_gtrts_nuersery_raising_nursery_month(),
//plant27_2021_gtrts_other_treatment_other_month(),
//plant27_2021_gtrts_plantation_site_month(),
//plant27_2021_location_data_ca_tloc_ad_upzilla(),
//plant27_2021_location_data_m_sh1(),
//plant27_2021_overallnotes_ima_blb(),
//plant27_2021_overallnotes_ima_bn(),
//plant27_2021_overallnotes_ima_ref(),
//plant27_2021_planting_plan_gplanting_gspp(),
//plant27_2021_rphotoextra(),
//plant27_2021_s_site(),
//plant27_2021_weeding_month(),
//plant27_2021_xpictureextra_blb(),
//plant27_2021_xpictureextra_bn(),
//plant27_2021_xpictureextra_ref(),
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref(),
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb(),
//sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn(),
//_user_granted_authority(),

// ----------------------------live
//sync Start
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_blb_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM COM202021_CONSLTTN_TTNDNC_PCTRE_CONSULTATION_ATTENDENCE_BLB WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_attendence_blb?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_blb_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM COM202021_CONSLTTN_TTNDNC_PCTRE_CONSULTATION_ATTENDENCE_BLB`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_attendence_blb?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_bn_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM COM202021_CONSLTTN_TTNDNC_PCTRE_CONSULTATION_ATTENDENCE_BN WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_attendence_bn?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_bn_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM COM202021_CONSLTTN_TTNDNC_PCTRE_CONSULTATION_ATTENDENCE_BN`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);
            }
            const response = await fetch(
              `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_attendence_bn?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_ref_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM COM202021_CONSLTTN_TTNDNC_PCTRE_CONSULTATION_ATTENDENCE_REF WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_attendence_ref?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const com202021_conslttn_ttndnc_pctre_consultation_attendence_ref_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM COM202021_CONSLTTN_TTNDNC_PCTRE_CONSULTATION_ATTENDENCE_REF`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);
            }
            const response = await fetch(
              `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_attendence_ref?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const com202021_consultation_picture_bn_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM COM202021_CONSULTATION_PICTURE_BN WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/com202021_consultation_picture_bn?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const com202021_consultation_picture_bn_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM COM202021_CONSULTATION_PICTURE_BN`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);
          }
          const response = await fetch(
            `${baseApi}/com202021_consultation_picture_bn?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const com202021_consultation_picture_ref_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM COM202021_CONSULTATION_PICTURE_REF WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/com202021_consultation_picture_ref?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const com202021_consultation_picture_ref_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM COM202021_CONSULTATION_PICTURE_REF`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);
          }
          const response = await fetch(
            `${baseApi}/com202021_consultation_picture_ref?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const com202021_core_audit_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM COM202021_CORE_AUDIT WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('id', row.id);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BEAT_TXT',
              row.LOCATION_DATA_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE',
              row.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE,
            );
            formData.append(
              'CONSULTATION_GENERATED_NOTE_NAME_11',
              row.CONSULTATION_GENERATED_NOTE_NAME_11,
            );
            formData.append(
              'CONSULTATION_USER_CELL',
              row.CONSULTATION_USER_CELL,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_CHAR',
              row.LOCATION_DATA_TLOC_FD_CHAR,
            );
            formData.append(
              'CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47',
              row.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47,
            );
            formData.append(
              'CONSULTATION_CONSULTATION_PLACE',
              row.CONSULTATION_CONSULTATION_PLACE,
            );
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION',
              row.CONSULTATION_DCONSULTATION,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ENTER_DIV',
              row.LOCATION_DATA_TLOC_ENTER_DIV,
            );
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_22',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_22,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_RANGE',
              row.LOCATION_DATA_TLOC_FD_RANGE,
            );
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_24',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_24,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_START',
              row.CONSULTATION_DCONSULTATION_START,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BEAT',
              row.LOCATION_DATA_TLOC_FD_BEAT,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1,
            );
            formData.append(
              'CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES',
              row.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_END_RAW',
              row.CONSULTATION_DCONSULTATION_END_RAW,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ECOZONE',
              row.LOCATION_DATA_TLOC_ECOZONE,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BLOCK',
              row.LOCATION_DATA_TLOC_FD_BLOCK,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_END',
              row.CONSULTATION_DCONSULTATION_END,
            );
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'LOCATION_DATA_TLOC_FD_DIVISION',
              row.LOCATION_DATA_TLOC_FD_DIVISION,
            );
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE',
              row.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE,
            );
            formData.append('END', row.END);
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79',
              row.CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append(
              'CONSULTATION_THOC_UNION',
              row.CONSULTATION_THOC_UNION,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ENTER_RANGE',
              row.LOCATION_DATA_TLOC_ENTER_RANGE,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'CONSULTATION_USER_EMAIL',
              row.CONSULTATION_USER_EMAIL,
            );
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append('NOTES', row.NOTES);
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_START_RAW',
              row.CONSULTATION_DCONSULTATION_START_RAW,
            );
            formData.append(
              'CONSULTATION_USER_NAME',
              row.CONSULTATION_USER_NAME,
            );
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO,
            );
            formData.append('TODAY', row.TODAY);
            formData.append(
              'LOCATION_DATA_TLOC_FD_CIR',
              row.LOCATION_DATA_TLOC_FD_CIR,
            );
            formData.append('START', row.START);
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT,
            );
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);
            formData.append('UserName', row.UserName);
            formData.append('AdditionTime', row.AdditionTime);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/com202021_core_audit?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const com202021_core_audit_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM COM202021_CORE_AUDIT`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('id', row.id);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BEAT_TXT',
              row.LOCATION_DATA_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE',
              row.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE,
            );
            formData.append(
              'CONSULTATION_GENERATED_NOTE_NAME_11',
              row.CONSULTATION_GENERATED_NOTE_NAME_11,
            );
            formData.append(
              'CONSULTATION_USER_CELL',
              row.CONSULTATION_USER_CELL,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_CHAR',
              row.LOCATION_DATA_TLOC_FD_CHAR,
            );
            formData.append(
              'CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47',
              row.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47,
            );
            formData.append(
              'CONSULTATION_CONSULTATION_PLACE',
              row.CONSULTATION_CONSULTATION_PLACE,
            );
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION',
              row.CONSULTATION_DCONSULTATION,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ENTER_DIV',
              row.LOCATION_DATA_TLOC_ENTER_DIV,
            );
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_22',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_22,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_RANGE',
              row.LOCATION_DATA_TLOC_FD_RANGE,
            );
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_24',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_24,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_START',
              row.CONSULTATION_DCONSULTATION_START,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BEAT',
              row.LOCATION_DATA_TLOC_FD_BEAT,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1,
            );
            formData.append(
              'CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES',
              row.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_END_RAW',
              row.CONSULTATION_DCONSULTATION_END_RAW,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ECOZONE',
              row.LOCATION_DATA_TLOC_ECOZONE,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BLOCK',
              row.LOCATION_DATA_TLOC_FD_BLOCK,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_END',
              row.CONSULTATION_DCONSULTATION_END,
            );
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'LOCATION_DATA_TLOC_FD_DIVISION',
              row.LOCATION_DATA_TLOC_FD_DIVISION,
            );
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE',
              row.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE,
            );
            formData.append('END', row.END);
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79',
              row.CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append(
              'CONSULTATION_THOC_UNION',
              row.CONSULTATION_THOC_UNION,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ENTER_RANGE',
              row.LOCATION_DATA_TLOC_ENTER_RANGE,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'CONSULTATION_USER_EMAIL',
              row.CONSULTATION_USER_EMAIL,
            );
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append('NOTES', row.NOTES);
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_START_RAW',
              row.CONSULTATION_DCONSULTATION_START_RAW,
            );
            formData.append(
              'CONSULTATION_USER_NAME',
              row.CONSULTATION_USER_NAME,
            );
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO,
            );
            formData.append('TODAY', row.TODAY);
            formData.append(
              'LOCATION_DATA_TLOC_FD_CIR',
              row.LOCATION_DATA_TLOC_FD_CIR,
            );
            formData.append('START', row.START);
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT,
            );
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);
            formData.append('UserName', row.UserName);
            formData.append('AdditionTime', row.AdditionTime);
          }
          const response = await fetch(
            `${baseApi}/com202021_core_audit?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const com202021_core_test_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM COM202021_CORE_TEST WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BEAT_TXT',
              row.LOCATION_DATA_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE',
              row.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE,
            );
            formData.append(
              'CONSULTATION_GENERATED_NOTE_NAME_11',
              row.CONSULTATION_GENERATED_NOTE_NAME_11,
            );
            formData.append(
              'CONSULTATION_USER_CELL',
              row.CONSULTATION_USER_CELL,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_CHAR',
              row.LOCATION_DATA_TLOC_FD_CHAR,
            );
            formData.append(
              'CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47',
              row.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47,
            );
            formData.append(
              'CONSULTATION_CONSULTATION_PLACE',
              row.CONSULTATION_CONSULTATION_PLACE,
            );
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION',
              row.CONSULTATION_DCONSULTATION,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ENTER_DIV',
              row.LOCATION_DATA_TLOC_ENTER_DIV,
            );
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_22',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_22,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_RANGE',
              row.LOCATION_DATA_TLOC_FD_RANGE,
            );
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_24',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_24,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_START',
              row.CONSULTATION_DCONSULTATION_START,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BEAT',
              row.LOCATION_DATA_TLOC_FD_BEAT,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1,
            );
            formData.append(
              'CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES',
              row.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_END_RAW',
              row.CONSULTATION_DCONSULTATION_END_RAW,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ECOZONE',
              row.LOCATION_DATA_TLOC_ECOZONE,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BLOCK',
              row.LOCATION_DATA_TLOC_FD_BLOCK,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_END',
              row.CONSULTATION_DCONSULTATION_END,
            );
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'LOCATION_DATA_TLOC_FD_DIVISION',
              row.LOCATION_DATA_TLOC_FD_DIVISION,
            );
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE',
              row.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE,
            );
            formData.append('END', row.END);
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79',
              row.CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append(
              'CONSULTATION_THOC_UNION',
              row.CONSULTATION_THOC_UNION,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ENTER_RANGE',
              row.LOCATION_DATA_TLOC_ENTER_RANGE,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'CONSULTATION_USER_EMAIL',
              row.CONSULTATION_USER_EMAIL,
            );
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append('NOTES', row.NOTES);
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_START_RAW',
              row.CONSULTATION_DCONSULTATION_START_RAW,
            );
            formData.append(
              'CONSULTATION_USER_NAME',
              row.CONSULTATION_USER_NAME,
            );
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO,
            );
            formData.append('TODAY', row.TODAY);
            formData.append(
              'LOCATION_DATA_TLOC_FD_CIR',
              row.LOCATION_DATA_TLOC_FD_CIR,
            );
            formData.append('START', row.START);
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT,
            );
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/com202021_core_test?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const com202021_core_test_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM COM202021_CORE_TEST`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BEAT_TXT',
              row.LOCATION_DATA_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE',
              row.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE,
            );
            formData.append(
              'CONSULTATION_GENERATED_NOTE_NAME_11',
              row.CONSULTATION_GENERATED_NOTE_NAME_11,
            );
            formData.append(
              'CONSULTATION_USER_CELL',
              row.CONSULTATION_USER_CELL,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_CHAR',
              row.LOCATION_DATA_TLOC_FD_CHAR,
            );
            formData.append(
              'CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47',
              row.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47,
            );
            formData.append(
              'CONSULTATION_CONSULTATION_PLACE',
              row.CONSULTATION_CONSULTATION_PLACE,
            );
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION',
              row.CONSULTATION_DCONSULTATION,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ENTER_DIV',
              row.LOCATION_DATA_TLOC_ENTER_DIV,
            );
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_22',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_22,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_RANGE',
              row.LOCATION_DATA_TLOC_FD_RANGE,
            );
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_24',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_24,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_START',
              row.CONSULTATION_DCONSULTATION_START,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BEAT',
              row.LOCATION_DATA_TLOC_FD_BEAT,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1,
            );
            formData.append(
              'CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES',
              row.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_END_RAW',
              row.CONSULTATION_DCONSULTATION_END_RAW,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ECOZONE',
              row.LOCATION_DATA_TLOC_ECOZONE,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BLOCK',
              row.LOCATION_DATA_TLOC_FD_BLOCK,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_END',
              row.CONSULTATION_DCONSULTATION_END,
            );
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'LOCATION_DATA_TLOC_FD_DIVISION',
              row.LOCATION_DATA_TLOC_FD_DIVISION,
            );
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE',
              row.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE,
            );
            formData.append('END', row.END);
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79',
              row.CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append(
              'CONSULTATION_THOC_UNION',
              row.CONSULTATION_THOC_UNION,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ENTER_RANGE',
              row.LOCATION_DATA_TLOC_ENTER_RANGE,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'CONSULTATION_USER_EMAIL',
              row.CONSULTATION_USER_EMAIL,
            );
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append('NOTES', row.NOTES);
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_START_RAW',
              row.CONSULTATION_DCONSULTATION_START_RAW,
            );
            formData.append(
              'CONSULTATION_USER_NAME',
              row.CONSULTATION_USER_NAME,
            );
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO,
            );
            formData.append('TODAY', row.TODAY);
            formData.append(
              'LOCATION_DATA_TLOC_FD_CIR',
              row.LOCATION_DATA_TLOC_FD_CIR,
            );
            formData.append('START', row.START);
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT,
            );
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);
          }
          const response = await fetch(
            `${baseApi}/com202021_core_test?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//
function getCurrentDateandTimeMain() {
  const date = new Date();
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');

  // Format: YYYY-MM-DD HH:mm:ss (no milliseconds)
  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}

//sync Start
// export const gener43_2021_core_sync = async uri => {
//   return new Promise((resolve, reject) => {
//     console.log('Starting database transaction for URI:', uri);

//     // Begin database transaction
//     database.transaction(tx => {
//       console.log('Executing SQL query...');

//       // Execute SQL query to fetch data
//       tx.executeSql(
//         `SELECT * FROM GENER43_2021_CORE WHERE _URI = ?`,
//         [uri],
//         async (_, resultSet) => {
//           if (resultSet.rows.length > 0) {
//             const row = resultSet.rows.item(0);
//             console.log('Data to be sent:', row);

//             // Create FormData instance and append data
//             const formData = new FormData();
//             formData.append('_URI', row._URI);
//             formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
//             formData.append('_CREATION_DATE', getCurrentDateandTimeMain());
//             formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
//             formData.append('_LAST_UPDATE_DATE', getCurrentDateandTimeMain());
//             formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW);
//             formData.append('GUSER_USER', row.GUSER_USER);
//             // formData.append(
//             //   'GUSER_TLOC_FD_BEAT_POINT_LNG',
//             //   row.GUSER_TLOC_FD_BEAT_POINT_LNG,
//             // );
//             // row.GUSER_TLOC_FD_BEAT_POINT_LAT != ''
//             //   ? formData.append(
//             //       'GUSER_TLOC_FD_BEAT_POINT_LAT',
//             //       row.GUSER_TLOC_FD_BEAT_POINT_LAT,
//             //     )
//             //   : '';
//             //
//             formData.append('FBLI_FA_TLOC_FD_BEAT', row.FBLI_FA_TLOC_FD_BEAT);
//             formData.append(
//               'FBLI_FA_TLOC_FD_DIVISION',
//               row.FBLI_FA_TLOC_FD_DIVISION,
//             );
//             formData.append('FBLI_FA_TLOC_FD_BLOCK', row.FBLI_FA_TLOC_FD_BLOCK);
//             formData.append('FBLI_FA_TLOC_FD_CIR', row.FBLI_FA_TLOC_FD_CIR);

//             formData.append('GUSER_USER_CELL', row.GUSER_USER_CELL);
//             formData.append(
//               'FBLI_CA_TLOC_AD_DISTRICT',
//               row.FBLI_CA_TLOC_AD_DISTRICT,
//             );
//             formData.append(
//               'FBLI_CA_TLOC_AD_DIVISION',
//               row.FBLI_CA_TLOC_AD_DIVISION,
//             );
//             formData.append('GUSER_BEAT_ADDRESS', row.GUSER_BEAT_ADDRESS);
//             formData.append('FBLI_TLOC_ECOZONE', row.FBLI_TLOC_ECOZONE);
//             formData.append('FBLI_FA_TLOC_FD_RANGE', row.FBLI_FA_TLOC_FD_RANGE);
//             formData.append('FBLI_CA_UNION', row.FBLI_CA_UNION);
//             formData.append(
//               'LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA',
//               row.LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA,
//             );

//             formData.append('RO_INFO_NAME_OF_RO', row.RO_INFO_NAME_OF_RO);
//             formData.append('RO_INFO_RO_CELL', row.RO_INFO_RO_CELL);
//             formData.append(
//               'RO_INFO_RO_JOINING_DATE_RAW',
//               row.RO_INFO_RO_JOINING_DATE_RAW,
//               // getCurrentDateandTimeMain(),
//             );
//             formData.append('RO_INFO_RO_MAIL', row.RO_INFO_RO_MAIL);
//             formData.append('RO_INFO_RO_NID', row.RO_INFO_RO_NID);
//             formData.append('RO_INFO_RO_RANK', row.RO_INFO_RO_RANK);

//             formData.append(
//               'BO_INFO_BO_JOINING_DATE_RAW',
//               row.BO_INFO_BO_JOINING_DATE_RAW,
//             );
//             formData.append('BO_INFO_NAME_OF_BO', row.BO_INFO_NAME_OF_BO);
//             formData.append('BO_INFO_BO_MAIL', row.BO_INFO_BO_MAIL);
//             formData.append('BO_INFO_BO_RANK', row.BO_INFO_BO_RANK);
//             formData.append('BO_INFO_BO_CELL', row.BO_INFO_BO_CELL);
//             formData.append('BO_INFO_BO_NID', row.BO_INFO_BO_NID);

//             formData.append(
//               'LAND_TRANSPORTS_MOTORB_CONDITION',
//               row.LAND_TRANSPORTS_MOTORB_CONDITION,
//             );
//             // formData.append(
//             //   'LAND_TRANSPORTS_BICYCLE_AVAIL',
//             //   row.LAND_TRANSPORTS_BICYCLE_AVAIL,
//             // );

//             formData.append(
//               'LAND_TRANSPORTS_BICYCLE_CONDITION',
//               row.LAND_TRANSPORTS_BICYCLE_CONDITION,
//             );

//             // formData.append(
//             //   'LAND_TRANSPORTS_MOTORB_AVAIL',
//             //   row.LAND_TRANSPORTS_MOTORB_AVAIL,
//             // );
//             formData.append(
//               'LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION',
//               row.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION,
//             );

//             formData.append(
//               'LOGISTICS3_TVESSEL_CONDITION',
//               row.LOGISTICS3_TVESSEL_CONDITION,
//             );

//             formData.append(
//               'LOGISTICS3_COUNTRYBOAT_CONDITION',
//               row.LOGISTICS3_COUNTRYBOAT_CONDITION,
//             );

//             // formData.append(
//             //   'LOGISTICS3_TVESSEL_AVAIL',
//             //   row.LOGISTICS3_TVESSEL_AVAIL,
//             // );

//             formData.append(
//               'LOGISTICS3_OTHERS_WATER_TRA_CONDITION',
//               row.LOGISTICS3_OTHERS_WATER_TRA_CONDITION,
//             );

//             // formData.append(
//             //   'LOGISTICS3_COUNTRYBOAT_AVAIL',
//             //   row.LOGISTICS3_COUNTRYBOAT_AVAIL,
//             // );

//             formData.append(
//               'LOGISTICS3_SPEEDBOAT_CONDITION',
//               row.LOGISTICS3_SPEEDBOAT_CONDITION,
//             );

//             // formData.append(
//             //   'LOGISTICS3_SPEEDBOAT_AVAIL',
//             //   row.LOGISTICS3_SPEEDBOAT_AVAIL,
//             // );

//             // formData.append(
//             //   'LOGISTICS3_OTHERS_WATER_TRA_AVAIL',
//             //   row.LOGISTICS3_OTHERS_WATER_TRA_AVAIL,
//             // );
//             // formData.append(
//             //   'LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL',
//             //   row.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL,
//             // );

//             // -----------

//             // formData.append(
//             //   'LAND_TRANSPORTS_OTHERS_LAND_TRA',
//             //   row.LAND_TRANSPORTS_OTHERS_LAND_TRA,
//             // );
//             // formData.append('_MODEL_VERSION', row._MODEL_VERSION);
//             // formData.append('_UI_VERSION', row._UI_VERSION);
//             // formData.append('_IS_COMPLETE', row._IS_COMPLETE);
//             // formData.append('_SUBMISSION_DATE', getCurrentDateandTimeMain());
//             // formData.append(
//             //   '_MARKED_AS_COMPLETE_DATE',
//             //   getCurrentDateandTimeMain(),
//             // );
//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA',
//             //   row.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA,
//             // );

//             // formData.append(
//             //   'LOGISTICS4_GFIREARMS_303RIFLE',
//             //   row.LOGISTICS4_GFIREARMS_303RIFLE,
//             // );
//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA',
//             //   row.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA,
//             // );
//             // formData.append(
//             //   'LOGISTICS4_OTHERS_WATER_TRA',
//             //   row.LOGISTICS4_OTHERS_WATER_TRA,
//             // );

//             formData.append(
//               'LOGISTICS4_OTHERS_WATER_TRA_CONDITION',
//               row.LOGISTICS4_OTHERS_WATER_TRA_CONDITION,
//             );

//             formData.append(
//               'LOGISTICS4_SHORTGUN_CONDITION',
//               row.LOGISTICS4_SHORTGUN_CONDITION,
//             );

//             formData.append(
//               'LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL',
//               row.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL,
//             );

//             formData.append(
//               'LOGISTICS4_CHINESERIFLE_CONDITION',
//               row.LOGISTICS4_CHINESERIFLE_CONDITION,
//             );

//             formData.append(
//               'LOGISTICS4_SLR_CONDITION',
//               row.LOGISTICS4_SLR_CONDITION,
//             );

//             formData.append(
//               'LOGISTICS4_RIFLE303_CONDITION',
//               row.LOGISTICS4_RIFLE303_CONDITION,
//             );

//             formData.append(
//               'LOGISTICS4_OTHERS_WATER_TRA_AVAIL',
//               row.LOGISTICS4_OTHERS_WATER_TRA_AVAIL,
//             );

//             formData.append(
//               'LOGISTICS4_TFIREARMS_303RIFLE_AVAIL',
//               row.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL,
//             );

//             formData.append(
//               'LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL',
//               row.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL,
//             );

//             // formData.append(
//             //   'LOGISTICS4_TFIREARMS_SLR_AVAIL',
//             //   row.LOGISTICS4_TFIREARMS_SLR_AVAIL,
//             // );

//             // formData.append(
//             //   'FBLI_FA_TLOC_FD_BEAT_TXT',
//             //   row.FBLI_FA_TLOC_FD_BEAT_TXT,
//             // );

//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA',
//             //   row.LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA,
//             // );
//             // formData.append('SUBSCRIBERID', row.SUBSCRIBERID);

//             // formData.append('DEVICEID', row.DEVICEID);

//             // formData.append(
//             //   'FBLI_GENERATED_NOTE_NAME_18',
//             //   row.FBLI_GENERATED_NOTE_NAME_18,
//             // );
//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74',
//             //   row.LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74,
//             // );

//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA',
//             //   row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA,
//             // );
//             // formData.append(
//             //   'LOGISTICS4_GENERATED_NOTE_NAME_152',
//             //   row.LOGISTICS4_GENERATED_NOTE_NAME_152,
//             // );
//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA',
//             //   row.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA,
//             // );
//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA',
//             //   row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA,
//             // );
//             // formData.append('SIMSERIAL', row.SIMSERIAL);

//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA',
//             //   row.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA,
//             // );
//             // formData.append(
//             //   'GUSER_GENERATED_NOTE_NAME_10',
//             //   row.GUSER_GENERATED_NOTE_NAME_10,
//             // );
//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA',
//             //   row.LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA,
//             // );

//             // formData.append(
//             //   'LAND_TRANSPORTS_GBI_CYCLE',
//             //   row.LAND_TRANSPORTS_GBI_CYCLE,
//             // );

//             // formData.append(
//             //   'LOGISTICS3_GCOUNTRY_BOAT',
//             //   row.LOGISTICS3_GCOUNTRY_BOAT,
//             // );
//             // formData.append(
//             //   'LOGISTICS4_GFIREARMS_SLR',
//             //   row.LOGISTICS4_GFIREARMS_SLR,
//             // );

//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA',
//             //   row.LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA,
//             // );

//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA',
//             //   row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA,
//             // );
//             // formData.append(
//             //   'BO_INFO_BO_JOINING_DATE',
//             //   row.BO_INFO_BO_JOINING_DATE,
//             // );

//             // formData.append(
//             //   'GUSER_TLOC_FD_BEAT_POINT_ALT',
//             //   row.GUSER_TLOC_FD_BEAT_POINT_ALT,
//             // );
//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA',
//             //   row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA,
//             // );

//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA',
//             //   row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA,
//             // );

//             // formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION);
//             // formData.append('END_RAW', row.END_RAW);
//             // formData.append(
//             //   'BO_INFO_GENERATED_NOTE_NAME_106',
//             //   row.BO_INFO_GENERATED_NOTE_NAME_106,
//             // );
//             // formData.append(
//             //   'GENERATED_NOTE_NAME_81',
//             //   row.GENERATED_NOTE_NAME_81,
//             // );
//             // formData.append(
//             //   'RO_INFO_GENERATED_NOTE_NAME_97',
//             //   row.RO_INFO_GENERATED_NOTE_NAME_97,
//             // );
//             // formData.append(
//             //   'FBLI_FA_GENERATED_NOTE_NAME_21',
//             //   row.FBLI_FA_GENERATED_NOTE_NAME_21,
//             // );
//             // formData.append(
//             //   'LAND_TRANSPORTS_GENERATED_NOTE_NAME_125',
//             //   row.LAND_TRANSPORTS_GENERATED_NOTE_NAME_125,
//             // );

//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA',
//             //   row.LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA,
//             // );

//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA',
//             //   row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA,
//             // );
//             // formData.append(
//             //   'GUSER_TLOC_FD_BEAT_POINT_ACC',
//             //   row.GUSER_TLOC_FD_BEAT_POINT_ACC,
//             // );

//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53',
//             //   row.LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53,
//             // );

//             // formData.append(
//             //   'LOGISTICS3_OTHERS_WATER_TRA',
//             //   row.LOGISTICS3_OTHERS_WATER_TRA,
//             // );

//             // formData.append('END', row.END);

//             // formData.append(
//             //   'RO_INFO_RO_JOINING_DATE_RAW',
//             //   row.RO_INFO_RO_JOINING_DATE_RAW,
//             // );
//             // formData.append('PHONENUMBER', row.PHONENUMBER);
//             // formData.append('LOGISTICS3_TRAWLER', row.LOGISTICS3_TRAWLER);
//             // formData.append(
//             //   'LOGISTICS4_GFIREARMS_SHORTGUN',
//             //   row.LOGISTICS4_GFIREARMS_SHORTGUN,
//             // );

//             // formData.append('START_RAW', row.START_RAW);
//             // formData.append(
//             //   'LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS',
//             //   row.LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS,
//             // );

//             // formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);

//             // formData.append(
//             //   'FBLI_CA_GENERATED_NOTE_NAME_33',
//             //   row.FBLI_CA_GENERATED_NOTE_NAME_33,
//             // );

//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65',
//             //   row.LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65,
//             // );

//             // formData.append(
//             //   'LOGISTICS3_GSPEED_BOAT',
//             //   row.LOGISTICS3_GSPEED_BOAT,
//             // );

//             // formData.append(
//             //   'LOGISTICS4_GFIREARMS_CHINESERIFLE',
//             //   row.LOGISTICS4_GFIREARMS_CHINESERIFLE,
//             // );
//             // formData.append('TODAY', row.TODAY);
//             // formData.append('FBLI_FA_TLOC_FD_CHAR', row.FBLI_FA_TLOC_FD_CHAR);
//             // formData.append(
//             //   'LAND_TRANSPORTS_GMOTORBIKE',
//             //   row.LAND_TRANSPORTS_GMOTORBIKE,
//             // );
//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA',
//             //   row.LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA,
//             // );
//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA',
//             //   row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA,
//             // );
//             // formData.append(
//             //   'FBLI_FA_TLOC_ENTER_RANGE',
//             //   row.FBLI_FA_TLOC_ENTER_RANGE,
//             // );
//             // formData.append(
//             //   'LAND_STATISTICS_AREA_SUM',
//             //   row.LAND_STATISTICS_AREA_SUM,
//             // );

//             // formData.append(
//             //   'GENERATED_NOTE_NAME_123',
//             //   row.GENERATED_NOTE_NAME_123,
//             // );
//             // formData.append('START', row.START);

//             // formData.append(
//             //   'FBLI_FA_TLOC_ENTER_DIV',
//             //   row.FBLI_FA_TLOC_ENTER_DIV,
//             // );
//             // formData.append('TODAY_RAW', row.TODAY_RAW);
//             // formData.append(
//             //   'GENERATED_NOTE_NAME_94',
//             //   row.GENERATED_NOTE_NAME_94,
//             // );

//             // formData.append(
//             //   'GENERATED_NOTE_NAME_95',
//             //   row.GENERATED_NOTE_NAME_95,
//             // );

//             // formData.append(
//             //   'LOGISTICS3_GENERATED_NOTE_NAME_137',
//             //   row.LOGISTICS3_GENERATED_NOTE_NAME_137,
//             // );
//             // formData.append('project_id', row.project_id);
//             // formData.append('sort', row.sort);
//             // formData.append('last_log_id', row.last_log_id);
//             // formData.append('restore_id', row.restore_id);
//             // formData.append('created_at', getCurrentDateandTimeMain());
//             // formData.append('created_by', row.created_by);
//             // formData.append('updated_at', getCurrentDateandTimeMain());
//             // formData.append('updated_by', row.updated_by);
//             // formData.append('deleted_at', getCurrentDateandTimeMain());
//             // formData.append('deleted_by', row.deleted_by);
//             // formData.append('deleted_status', row.deleted_status);
//             // formData.append('status', true);
//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_SKM',
//             //   row.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_SKM,
//             // );
//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_SKM',
//             //   row.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_SKM,
//             // );
//             // formData.append(
//             //   'LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_SKM',
//             //   row.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_SKM,
//             // );

//             console.log('FormData to be sent:', formData._parts);
//             formData._parts.forEach((value, key) => {
//               console.log(`${value},`);
//             });
//             //Send data to the API using FormData
//             try {
//               const response = await fetch(
//                 `${baseApi}/gener43_2021_core_create?token=${token}`,
//                 {
//                   method: 'POST',
//                   headers: {
//                     Accept: 'application/json',
//                     // Note: 'Content-Type' should NOT be set when using FormData
//                   },
//                   body: formData,
//                 },
//               );

//               console.log(response, 'response...');

//               if (!response.ok) {
//                 console.error(
//                   'API response error:',
//                   response.status,
//                   response.statusText,
//                 );
//                 throw new Error(`HTTP error! Status: ${response.status}`);
//               }

//               const result = await response.json();
//               console.log('API response:', result);
//               resolve(result);
//             } catch (error) {
//               console.error('Error sending data to API:', error);
//               reject(error);
//             }
//           } else {
//             console.error('No data found for the given URI:', uri);
//             reject(new Error('No data found.'));
//           }
//         },
//         (_, error) => {
//           console.error('Error executing SQL query:', error);
//           reject(error);
//         },
//       );
//     });
//   });
// };

export const gener43_2021_core_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM GENER43_2021_CORE WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row);

            // Create FormData instance and append data
            // const formData = new FormData();
            // formData.append('_URI', row._URI);
            // formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            // formData.append('_CREATION_DATE', getCurrentDateandTimeMain());
            // formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            // formData.append('_LAST_UPDATE_DATE', getCurrentDateandTimeMain());
            // formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW);
            // formData.append('GUSER_USER', row.GUSER_USER);
            // formData.append(
            //   'GUSER_TLOC_FD_BEAT_POINT_LNG',
            //   row.GUSER_TLOC_FD_BEAT_POINT_LNG,
            // );
            // row.GUSER_TLOC_FD_BEAT_POINT_LAT != ''
            //   ? formData.append(
            //       'GUSER_TLOC_FD_BEAT_POINT_LAT',
            //       row.GUSER_TLOC_FD_BEAT_POINT_LAT,
            //     )
            //   : '';
            // /*formData.append('FBLI_FA_TLOC_FD_BEAT', row.FBLI_FA_TLOC_FD_BEAT);
            // formData.append(
            //   'FBLI_FA_TLOC_FD_DIVISION',
            //   row.FBLI_FA_TLOC_FD_DIVISION,
            // );
            // formData.append('FBLI_FA_TLOC_FD_BLOCK', row.FBLI_FA_TLOC_FD_BLOCK);
            // formData.append('FBLI_FA_TLOC_FD_CIR', row.FBLI_FA_TLOC_FD_CIR);

            // formData.append('GUSER_USER_CELL', row.GUSER_USER_CELL);
            // formData.append(
            //   'FBLI_CA_TLOC_AD_DISTRICT',
            //   row.FBLI_CA_TLOC_AD_DISTRICT,
            // );
            // formData.append(
            //   'FBLI_CA_TLOC_AD_DIVISION',
            //   row.FBLI_CA_TLOC_AD_DIVISION,
            // );*/
            // row.FBLI_FA_TLOC_FD_BEAT != ''
            //   ? formData.append(
            //       'FBLI_FA_TLOC_FD_BEAT',
            //       row.FBLI_FA_TLOC_FD_BEAT,
            //     )
            //   : '';
            // row.FBLI_FA_TLOC_FD_DIVISION != ''
            //   ? formData.append(
            //       'FBLI_FA_TLOC_FD_DIVISION',
            //       row.FBLI_FA_TLOC_FD_DIVISION,
            //     )
            //   : '';
            // row.FBLI_FA_TLOC_FD_BLOCK != ''
            //   ? formData.append(
            //       'FBLI_FA_TLOC_FD_BLOCK',
            //       row.FBLI_FA_TLOC_FD_BLOCK,
            //     )
            //   : '';
            // row.FBLI_FA_TLOC_FD_CIR != ''
            //   ? formData.append('FBLI_FA_TLOC_FD_CIR', row.FBLI_FA_TLOC_FD_CIR)
            //   : '';
            // row.GUSER_USER_CELL != ''
            //   ? formData.append('GUSER_USER_CELL', row.GUSER_USER_CELL)
            //   : '';
            // row.FBLI_CA_TLOC_AD_DISTRICT != ''
            //   ? formData.append(
            //       'FBLI_CA_TLOC_AD_DISTRICT',
            //       row.FBLI_CA_TLOC_AD_DISTRICT,
            //     )
            //   : '';
            // row.FBLI_CA_TLOC_AD_DIVISION != ''
            //   ? formData.append(
            //       'FBLI_CA_TLOC_AD_DIVISION',
            //       row.FBLI_CA_TLOC_AD_DIVISION,
            //     )
            //   : '';

            // row.GUSER_BEAT_ADDRESS != ''
            //   ? formData.append('GUSER_BEAT_ADDRESS', row.GUSER_BEAT_ADDRESS)
            //   : '';
            // row.FBLI_TLOC_ECOZONE != ''
            //   ? formData.append('FBLI_TLOC_ECOZONE', row.FBLI_TLOC_ECOZONE)
            //   : '';
            // row.FBLI_FA_TLOC_FD_RANGE != ''
            //   ? formData.append(
            //       'FBLI_FA_TLOC_FD_RANGE',
            //       row.FBLI_FA_TLOC_FD_RANGE,
            //     )
            //   : '';
            // row.FBLI_CA_UNION != ''
            //   ? formData.append('FBLI_CA_UNION', row.FBLI_CA_UNION)
            //   : '';
            // row.LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA != ''
            //   ? formData.append(
            //       'LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA',
            //       row.LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA,
            //     )
            //   : '';

            // row.RO_INFO_NAME_OF_RO != ''
            //   ? formData.append('RO_INFO_NAME_OF_RO', row.RO_INFO_NAME_OF_RO)
            //   : '';
            // row.RO_INFO_RO_CELL != ''
            //   ? formData.append('RO_INFO_RO_CELL', row.RO_INFO_RO_CELL)
            //   : '';
            // row.RO_INFO_RO_JOINING_DATE_RAW != ''
            //   ? formData.append(
            //       'RO_INFO_RO_JOINING_DATE_RAW',
            //       row.RO_INFO_RO_JOINING_DATE_RAW,
            //     )
            //   : '';
            // row.RO_INFO_RO_MAIL != ''
            //   ? formData.append('RO_INFO_RO_MAIL', row.RO_INFO_RO_MAIL)
            //   : '';
            // row.RO_INFO_RO_NID != ''
            //   ? formData.append('RO_INFO_RO_NID', row.RO_INFO_RO_NID)
            //   : '';
            // row.RO_INFO_RO_RANK != ''
            //   ? formData.append('RO_INFO_RO_RANK', row.RO_INFO_RO_RANK)
            //   : '';
            // row.BO_INFO_BO_JOINING_DATE_RAW != ''
            //   ? formData.append(
            //       'BO_INFO_BO_JOINING_DATE_RAW',
            //       row.BO_INFO_BO_JOINING_DATE_RAW,
            //     )
            //   : '';
            // row.BO_INFO_NAME_OF_BO != ''
            //   ? formData.append('BO_INFO_NAME_OF_BO', row.BO_INFO_NAME_OF_BO)
            //   : '';
            // row.BO_INFO_BO_MAIL != ''
            //   ? formData.append('BO_INFO_BO_MAIL', row.BO_INFO_BO_MAIL)
            //   : '';
            // row.BO_INFO_BO_RANK != ''
            //   ? formData.append('BO_INFO_BO_RANK', row.BO_INFO_BO_RANK)
            //   : '';
            // row.BO_INFO_BO_CELL != ''
            //   ? formData.append('BO_INFO_BO_CELL', row.BO_INFO_BO_CELL)
            //   : '';
            // row.BO_INFO_BO_NID != ''
            //   ? formData.append('BO_INFO_BO_NID', row.BO_INFO_BO_NID)
            //   : '';

            // /*formData.append(
            //   'LAND_TRANSPORTS_MOTORB_CONDITION',
            //   row.LAND_TRANSPORTS_MOTORB_CONDITION,
            // );
            // // formData.append(
            // //   'LAND_TRANSPORTS_BICYCLE_AVAIL',
            // //   row.LAND_TRANSPORTS_BICYCLE_AVAIL,
            // // );

            // formData.append(
            //   'LAND_TRANSPORTS_BICYCLE_CONDITION',
            //   row.LAND_TRANSPORTS_BICYCLE_CONDITION,
            // );

            // // formData.append(
            // //   'LAND_TRANSPORTS_MOTORB_AVAIL',
            // //   row.LAND_TRANSPORTS_MOTORB_AVAIL,
            // // );
            // formData.append(
            //   'LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION',
            //   row.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION,
            // );

            // // formData.append(
            // //   'LOGISTICS3_TVESSEL_CONDITION',
            // //   row.LOGISTICS3_TVESSEL_CONDITION,
            // // );

            // // formData.append(
            // //   'LOGISTICS3_COUNTRYBOAT_CONDITION',
            // //   row.LOGISTICS3_COUNTRYBOAT_CONDITION,
            // // );

            // // formData.append(
            // //   'LOGISTICS3_TVESSEL_AVAIL',
            // //   row.LOGISTICS3_TVESSEL_AVAIL,
            // // );

            // // formData.append(
            // //   'LOGISTICS3_OTHERS_WATER_TRA_CONDITION',
            // //   row.LOGISTICS3_OTHERS_WATER_TRA_CONDITION,
            // // );

            // // formData.append(
            // //   'LOGISTICS3_COUNTRYBOAT_AVAIL',
            // //   row.LOGISTICS3_COUNTRYBOAT_AVAIL,
            // // );

            // // formData.append(
            // //   'LOGISTICS3_SPEEDBOAT_CONDITION',
            // //   row.LOGISTICS3_SPEEDBOAT_CONDITION,
            // // );

            // // formData.append(
            // //   'LOGISTICS3_SPEEDBOAT_AVAIL',
            // //   row.LOGISTICS3_SPEEDBOAT_AVAIL,
            // // );

            // // formData.append(
            // //   'LOGISTICS3_OTHERS_WATER_TRA_AVAIL',
            // //   row.LOGISTICS3_OTHERS_WATER_TRA_AVAIL,
            // // );
            // // formData.append(
            // //   'LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL',
            // //   row.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL,
            // // );

            // // -----------

            // // formData.append(
            // //   'LAND_TRANSPORTS_OTHERS_LAND_TRA',
            // //   row.LAND_TRANSPORTS_OTHERS_LAND_TRA,
            // // );
            // // formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            // // formData.append('_UI_VERSION', row._UI_VERSION);
            // // formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            // // formData.append('_SUBMISSION_DATE', getCurrentDateandTimeMain());
            // // formData.append(
            // //   '_MARKED_AS_COMPLETE_DATE',
            // //   getCurrentDateandTimeMain(),
            // // );
            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA',
            // //   row.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA,
            // // );

            // // formData.append(
            // //   'LOGISTICS4_GFIREARMS_303RIFLE',
            // //   row.LOGISTICS4_GFIREARMS_303RIFLE,
            // // );
            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA',
            // //   row.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA,
            // // );
            // // formData.append(
            // //   'LOGISTICS4_OTHERS_WATER_TRA',
            // //   row.LOGISTICS4_OTHERS_WATER_TRA,
            // // );*/
            // row.LAND_TRANSPORTS_MOTORB_CONDITION != ''
            //   ? formData.append(
            //       'LAND_TRANSPORTS_MOTORB_CONDITION',
            //       row.LAND_TRANSPORTS_MOTORB_CONDITION,
            //     )
            //   : '';
            // row.LAND_TRANSPORTS_BICYCLE_AVAIL != ''
            //   ? formData.append(
            //       'LAND_TRANSPORTS_BICYCLE_AVAIL',
            //       row.LAND_TRANSPORTS_BICYCLE_AVAIL,
            //     )
            //   : '';
            // row.LAND_TRANSPORTS_BICYCLE_CONDITION != ''
            //   ? formData.append(
            //       'LAND_TRANSPORTS_BICYCLE_CONDITION',
            //       row.LAND_TRANSPORTS_BICYCLE_CONDITION,
            //     )
            //   : '';
            // row.LAND_TRANSPORTS_MOTORB_AVAIL != ''
            //   ? formData.append(
            //       'LAND_TRANSPORTS_MOTORB_AVAIL',
            //       row.LAND_TRANSPORTS_MOTORB_AVAIL,
            //     )
            //   : '';
            // row.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION != ''
            //   ? formData.append(
            //       'LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION',
            //       row.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION,
            //     )
            //   : '';
            // row.LOGISTICS3_TVESSEL_CONDITION != ''
            //   ? formData.append(
            //       'LOGISTICS3_TVESSEL_CONDITION',
            //       row.LOGISTICS3_TVESSEL_CONDITION,
            //     )
            //   : '';
            // row.LOGISTICS3_COUNTRYBOAT_CONDITION != ''
            //   ? formData.append(
            //       'LOGISTICS3_COUNTRYBOAT_CONDITION',
            //       row.LOGISTICS3_COUNTRYBOAT_CONDITION,
            //     )
            //   : '';
            // row.LOGISTICS3_TVESSEL_AVAIL != ''
            //   ? formData.append(
            //       'LOGISTICS3_TVESSEL_AVAIL',
            //       row.LOGISTICS3_TVESSEL_AVAIL,
            //     )
            //   : '';
            // row.LOGISTICS3_OTHERS_WATER_TRA_CONDITION != ''
            //   ? formData.append(
            //       'LOGISTICS3_OTHERS_WATER_TRA_CONDITION',
            //       row.LOGISTICS3_OTHERS_WATER_TRA_CONDITION,
            //     )
            //   : '';
            // row.LOGISTICS3_COUNTRYBOAT_AVAIL != ''
            //   ? formData.append(
            //       'LOGISTICS3_COUNTRYBOAT_AVAIL',
            //       row.LOGISTICS3_COUNTRYBOAT_AVAIL,
            //     )
            //   : '';
            // row.LOGISTICS3_SPEEDBOAT_CONDITION != ''
            //   ? formData.append(
            //       'LOGISTICS3_SPEEDBOAT_CONDITION',
            //       row.LOGISTICS3_SPEEDBOAT_CONDITION,
            //     )
            //   : '';
            // row.LOGISTICS3_SPEEDBOAT_AVAIL != ''
            //   ? formData.append(
            //       'LOGISTICS3_SPEEDBOAT_AVAIL',
            //       row.LOGISTICS3_SPEEDBOAT_AVAIL,
            //     )
            //   : '';
            // row.LOGISTICS3_OTHERS_WATER_TRA_AVAIL != ''
            //   ? formData.append(
            //       'LOGISTICS3_OTHERS_WATER_TRA_AVAIL',
            //       row.LOGISTICS3_OTHERS_WATER_TRA_AVAIL,
            //     )
            //   : '';
            // row.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL != ''
            //   ? formData.append(
            //       'LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL',
            //       row.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL,
            //     )
            //   : '';
            // row.LAND_TRANSPORTS_OTHERS_LAND_TRA != ''
            //   ? formData.append(
            //       'LAND_TRANSPORTS_OTHERS_LAND_TRA',
            //       row.LAND_TRANSPORTS_OTHERS_LAND_TRA,
            //     )
            //   : '';
            // row._MODEL_VERSION != ''
            //   ? formData.append('_MODEL_VERSION', row._MODEL_VERSION)
            //   : '';
            // row._UI_VERSION != ''
            //   ? formData.append('_UI_VERSION', row._UI_VERSION)
            //   : '';
            // row._IS_COMPLETE != ''
            //   ? formData.append('_IS_COMPLETE', row._IS_COMPLETE)
            //   : '';
            // row._SUBMISSION_DATE != ''
            //   ? formData.append('_SUBMISSION_DATE', getCurrentDateandTimeMain())
            //   : '';
            // row._MARKED_AS_COMPLETE_DATE != ''
            //   ? formData.append(
            //       '_MARKED_AS_COMPLETE_DATE',
            //       getCurrentDateandTimeMain(),
            //     )
            //   : '';
            // row.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA != ''
            //   ? formData.append(
            //       'LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA',
            //       row.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA,
            //     )
            //   : '';
            // row.LOGISTICS4_GFIREARMS_303RIFLE != ''
            //   ? formData.append(
            //       'LOGISTICS4_GFIREARMS_303RIFLE',
            //       row.LOGISTICS4_GFIREARMS_303RIFLE,
            //     )
            //   : '';
            // row.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA != ''
            //   ? formData.append(
            //       'LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA',
            //       row.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA,
            //     )
            //   : '';
            // row.LOGISTICS4_OTHERS_WATER_TRA != ''
            //   ? formData.append(
            //       'LOGISTICS4_OTHERS_WATER_TRA',
            //       row.LOGISTICS4_OTHERS_WATER_TRA,
            //     )
            //   : '';

            // row.LOGISTICS4_OTHERS_WATER_TRA_CONDITION != ''
            //   ? formData.append(
            //       'LOGISTICS4_OTHERS_WATER_TRA_CONDITION',
            //       row.LOGISTICS4_OTHERS_WATER_TRA_CONDITION,
            //     )
            //   : '';
            // row.LOGISTICS4_SHORTGUN_CONDITION != ''
            //   ? formData.append(
            //       'LOGISTICS4_SHORTGUN_CONDITION',
            //       row.LOGISTICS4_SHORTGUN_CONDITION,
            //     )
            //   : '';
            // row.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL != ''
            //   ? formData.append(
            //       'LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL',
            //       row.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL,
            //     )
            //   : '';
            // row.LOGISTICS4_CHINESERIFLE_CONDITION != ''
            //   ? formData.append(
            //       'LOGISTICS4_CHINESERIFLE_CONDITION',
            //       row.LOGISTICS4_CHINESERIFLE_CONDITION,
            //     )
            //   : '';
            // row.LOGISTICS4_SLR_CONDITION != ''
            //   ? formData.append(
            //       'LOGISTICS4_SLR_CONDITION',
            //       row.LOGISTICS4_SLR_CONDITION,
            //     )
            //   : '';
            // row.LOGISTICS4_RIFLE303_CONDITION != ''
            //   ? formData.append(
            //       'LOGISTICS4_RIFLE303_CONDITION',
            //       row.LOGISTICS4_RIFLE303_CONDITION,
            //     )
            //   : '';
            // row.LOGISTICS4_OTHERS_WATER_TRA_AVAIL != ''
            //   ? formData.append(
            //       'LOGISTICS4_OTHERS_WATER_TRA_AVAIL',
            //       row.LOGISTICS4_OTHERS_WATER_TRA_AVAIL,
            //     )
            //   : '';
            // row.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL != ''
            //   ? formData.append(
            //       'LOGISTICS4_TFIREARMS_303RIFLE_AVAIL',
            //       row.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL,
            //     )
            //   : '';
            // row.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL != ''
            //   ? formData.append(
            //       'LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL',
            //       row.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL,
            //     )
            //   : '';
            // row.LOGISTICS4_TFIREARMS_SLR_AVAIL != ''
            //   ? formData.append(
            //       'LOGISTICS4_TFIREARMS_SLR_AVAIL',
            //       row.LOGISTICS4_TFIREARMS_SLR_AVAIL,
            //     )
            //   : '';

            // /*formData.append(
            //   'LOGISTICS4_OTHERS_WATER_TRA_CONDITION',
            //   row.LOGISTICS4_OTHERS_WATER_TRA_CONDITION,
            // );

            // formData.append(
            //   'LOGISTICS4_SHORTGUN_CONDITION',
            //   row.LOGISTICS4_SHORTGUN_CONDITION,
            // );

            // formData.append(
            //   'LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL',
            //   row.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL,
            // );

            // formData.append(
            //   'LOGISTICS4_CHINESERIFLE_CONDITION',
            //   row.LOGISTICS4_CHINESERIFLE_CONDITION,
            // );

            // formData.append(
            //   'LOGISTICS4_SLR_CONDITION',
            //   row.LOGISTICS4_SLR_CONDITION,
            // );

            // formData.append(
            //   'LOGISTICS4_RIFLE303_CONDITION',
            //   row.LOGISTICS4_RIFLE303_CONDITION,
            // );

            // formData.append(
            //   'LOGISTICS4_OTHERS_WATER_TRA_AVAIL',
            //   row.LOGISTICS4_OTHERS_WATER_TRA_AVAIL,
            // );

            // formData.append(
            //   'LOGISTICS4_TFIREARMS_303RIFLE_AVAIL',
            //   row.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL,
            // );

            // formData.append(
            //   'LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL',
            //   row.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL,
            // );

            // formData.append(
            //   'LOGISTICS4_TFIREARMS_SLR_AVAIL',
            //   row.LOGISTICS4_TFIREARMS_SLR_AVAIL,
            // );*/

            // // formData.append(
            // //   'FBLI_FA_TLOC_FD_BEAT_TXT',
            // //   row.FBLI_FA_TLOC_FD_BEAT_TXT,
            // // );

            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA',
            // //   row.LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA,
            // // );
            // // formData.append('SUBSCRIBERID', row.SUBSCRIBERID);

            // // formData.append('DEVICEID', row.DEVICEID);

            // // formData.append(
            // //   'FBLI_GENERATED_NOTE_NAME_18',
            // //   row.FBLI_GENERATED_NOTE_NAME_18,
            // // );
            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74',
            // //   row.LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74,
            // // );

            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA',
            // //   row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA,
            // // );
            // // formData.append(
            // //   'LOGISTICS4_GENERATED_NOTE_NAME_152',
            // //   row.LOGISTICS4_GENERATED_NOTE_NAME_152,
            // // );
            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA',
            // //   row.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA,
            // // );
            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA',
            // //   row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA,
            // // );
            // // formData.append('SIMSERIAL', row.SIMSERIAL);

            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA',
            // //   row.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA,
            // // );
            // // formData.append(
            // //   'GUSER_GENERATED_NOTE_NAME_10',
            // //   row.GUSER_GENERATED_NOTE_NAME_10,
            // // );
            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA',
            // //   row.LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA,
            // // );

            // // formData.append(
            // //   'LAND_TRANSPORTS_GBI_CYCLE',
            // //   row.LAND_TRANSPORTS_GBI_CYCLE,
            // // );

            // // formData.append(
            // //   'LOGISTICS3_GCOUNTRY_BOAT',
            // //   row.LOGISTICS3_GCOUNTRY_BOAT,
            // // );
            // // formData.append(
            // //   'LOGISTICS4_GFIREARMS_SLR',
            // //   row.LOGISTICS4_GFIREARMS_SLR,
            // // );

            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA',
            // //   row.LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA,
            // // );

            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA',
            // //   row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA,
            // // );
            // // formData.append(
            // //   'BO_INFO_BO_JOINING_DATE',
            // //   row.BO_INFO_BO_JOINING_DATE,
            // // );

            // // formData.append(
            // //   'GUSER_TLOC_FD_BEAT_POINT_ALT',
            // //   row.GUSER_TLOC_FD_BEAT_POINT_ALT,
            // // );
            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA',
            // //   row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA,
            // // );

            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA',
            // //   row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA,
            // // );

            // // formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION);
            // // formData.append('END_RAW', row.END_RAW);
            // // formData.append(
            // //   'BO_INFO_GENERATED_NOTE_NAME_106',
            // //   row.BO_INFO_GENERATED_NOTE_NAME_106,
            // // );
            // // formData.append(
            // //   'GENERATED_NOTE_NAME_81',
            // //   row.GENERATED_NOTE_NAME_81,
            // // );
            // // formData.append(
            // //   'RO_INFO_GENERATED_NOTE_NAME_97',
            // //   row.RO_INFO_GENERATED_NOTE_NAME_97,
            // // );
            // // formData.append(
            // //   'FBLI_FA_GENERATED_NOTE_NAME_21',
            // //   row.FBLI_FA_GENERATED_NOTE_NAME_21,
            // // );
            // // formData.append(
            // //   'LAND_TRANSPORTS_GENERATED_NOTE_NAME_125',
            // //   row.LAND_TRANSPORTS_GENERATED_NOTE_NAME_125,
            // // );

            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA',
            // //   row.LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA,
            // // );

            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA',
            // //   row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA,
            // // );
            // // formData.append(
            // //   'GUSER_TLOC_FD_BEAT_POINT_ACC',
            // //   row.GUSER_TLOC_FD_BEAT_POINT_ACC,
            // // );

            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53',
            // //   row.LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53,
            // // );

            // // formData.append(
            // //   'LOGISTICS3_OTHERS_WATER_TRA',
            // //   row.LOGISTICS3_OTHERS_WATER_TRA,
            // // );

            // // formData.append('END', row.END);

            // // formData.append(
            // //   'RO_INFO_RO_JOINING_DATE_RAW',
            // //   row.RO_INFO_RO_JOINING_DATE_RAW,
            // // );
            // // formData.append('PHONENUMBER', row.PHONENUMBER);
            // // formData.append('LOGISTICS3_TRAWLER', row.LOGISTICS3_TRAWLER);
            // // formData.append(
            // //   'LOGISTICS4_GFIREARMS_SHORTGUN',
            // //   row.LOGISTICS4_GFIREARMS_SHORTGUN,
            // // );

            // // formData.append('START_RAW', row.START_RAW);
            // // formData.append(
            // //   'LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS',
            // //   row.LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS,
            // // );

            // // formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);

            // // formData.append(
            // //   'FBLI_CA_GENERATED_NOTE_NAME_33',
            // //   row.FBLI_CA_GENERATED_NOTE_NAME_33,
            // // );

            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65',
            // //   row.LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65,
            // // );

            // // formData.append(
            // //   'LOGISTICS3_GSPEED_BOAT',
            // //   row.LOGISTICS3_GSPEED_BOAT,
            // // );

            // // formData.append(
            // //   'LOGISTICS4_GFIREARMS_CHINESERIFLE',
            // //   row.LOGISTICS4_GFIREARMS_CHINESERIFLE,
            // // );
            // // formData.append('TODAY', row.TODAY);
            // // formData.append('FBLI_FA_TLOC_FD_CHAR', row.FBLI_FA_TLOC_FD_CHAR);
            // // formData.append(
            // //   'LAND_TRANSPORTS_GMOTORBIKE',
            // //   row.LAND_TRANSPORTS_GMOTORBIKE,
            // // );
            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA',
            // //   row.LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA,
            // // );
            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA',
            // //   row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA,
            // // );
            // // formData.append(
            // //   'FBLI_FA_TLOC_ENTER_RANGE',
            // //   row.FBLI_FA_TLOC_ENTER_RANGE,
            // // );
            // // formData.append(
            // //   'LAND_STATISTICS_AREA_SUM',
            // //   row.LAND_STATISTICS_AREA_SUM,
            // // );

            // // formData.append(
            // //   'GENERATED_NOTE_NAME_123',
            // //   row.GENERATED_NOTE_NAME_123,
            // // );
            // // formData.append('START', row.START);

            // // formData.append(
            // //   'FBLI_FA_TLOC_ENTER_DIV',
            // //   row.FBLI_FA_TLOC_ENTER_DIV,
            // // );
            // // formData.append('TODAY_RAW', row.TODAY_RAW);
            // // formData.append(
            // //   'GENERATED_NOTE_NAME_94',
            // //   row.GENERATED_NOTE_NAME_94,
            // // );

            // // formData.append(
            // //   'GENERATED_NOTE_NAME_95',
            // //   row.GENERATED_NOTE_NAME_95,
            // // );

            // // formData.append(
            // //   'LOGISTICS3_GENERATED_NOTE_NAME_137',
            // //   row.LOGISTICS3_GENERATED_NOTE_NAME_137,
            // // );
            // // formData.append('project_id', row.project_id);
            // // formData.append('sort', row.sort);
            // // formData.append('last_log_id', row.last_log_id);
            // // formData.append('restore_id', row.restore_id);
            // // formData.append('created_at', getCurrentDateandTimeMain());
            // // formData.append('created_by', row.created_by);
            // // formData.append('updated_at', getCurrentDateandTimeMain());
            // // formData.append('updated_by', row.updated_by);
            // // formData.append('deleted_at', getCurrentDateandTimeMain());
            // // formData.append('deleted_by', row.deleted_by);
            // // formData.append('deleted_status', row.deleted_status);
            // // formData.append('status', true);
            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_SKM',
            // //   row.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_SKM,
            // // );
            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_SKM',
            // //   row.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_SKM,
            // // );
            // // formData.append(
            // //   'LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_SKM',
            // //   row.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_SKM,
            // // );

            const formData = new FormData();
             //sync data here
			(row._URI != '' ) ? formData.append('_URI', row._URI) : '';
(row._CREATOR_URI_USER != '' ) ? formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER) : '';
(row._CREATION_DATE != '' ) ? formData.append('_CREATION_DATE', row._CREATION_DATE) : '';
(row._LAST_UPDATE_URI_USER != '' ) ? formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER) : '';
(row._LAST_UPDATE_DATE != '' ) ? formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE) : '';
(row._MODEL_VERSION != '' ) ? formData.append('_MODEL_VERSION', row._MODEL_VERSION) : '';
(row._UI_VERSION != '' ) ? formData.append('_UI_VERSION', row._UI_VERSION) : '';
(row._IS_COMPLETE != '' ) ? formData.append('_IS_COMPLETE', row._IS_COMPLETE) : '';
(row._SUBMISSION_DATE != '' ) ? formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE) : '';
(row._MARKED_AS_COMPLETE_DATE != '' ) ? formData.append('_MARKED_AS_COMPLETE_DATE', row._MARKED_AS_COMPLETE_DATE) : '';
(row.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA != '' ) ? formData.append('LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA', row.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA) : '';
(row.GUSER_TLOC_FD_BEAT_POINT_LNG != '' ) ? formData.append('GUSER_TLOC_FD_BEAT_POINT_LNG', row.GUSER_TLOC_FD_BEAT_POINT_LNG) : '';
(row.FBLI_FA_TLOC_FD_BEAT != '' ) ? formData.append('FBLI_FA_TLOC_FD_BEAT', row.FBLI_FA_TLOC_FD_BEAT) : '';
(row.LOGISTICS3_COUNTRYBOAT_CONDITION != '' ) ? formData.append('LOGISTICS3_COUNTRYBOAT_CONDITION', row.LOGISTICS3_COUNTRYBOAT_CONDITION) : '';
(row.LOGISTICS4_GFIREARMS_303RIFLE != '' ) ? formData.append('LOGISTICS4_GFIREARMS_303RIFLE', row.LOGISTICS4_GFIREARMS_303RIFLE) : '';
(row.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA != '' ) ? formData.append('LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA', row.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA) : '';
(row.LOGISTICS4_OTHERS_WATER_TRA != '' ) ? formData.append('LOGISTICS4_OTHERS_WATER_TRA', row.LOGISTICS4_OTHERS_WATER_TRA) : '';
(row.BO_INFO_BO_CELL != '' ) ? formData.append('BO_INFO_BO_CELL', row.BO_INFO_BO_CELL) : '';
(row.LOGISTICS3_TVESSEL_CONDITION != '' ) ? formData.append('LOGISTICS3_TVESSEL_CONDITION', row.LOGISTICS3_TVESSEL_CONDITION) : '';
(row.RO_INFO_RO_CELL != '' ) ? formData.append('RO_INFO_RO_CELL', row.RO_INFO_RO_CELL) : '';
(row.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL != '' ) ? formData.append('LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL', row.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL) : '';
(row.LOGISTICS3_TVESSEL_AVAIL != '' ) ? formData.append('LOGISTICS3_TVESSEL_AVAIL', row.LOGISTICS3_TVESSEL_AVAIL) : '';
(row.FBLI_FA_TLOC_FD_BEAT_TXT != '' ) ? formData.append('FBLI_FA_TLOC_FD_BEAT_TXT', row.FBLI_FA_TLOC_FD_BEAT_TXT) : '';
(row.LOGISTICS3_SPEEDBOAT_CONDITION != '' ) ? formData.append('LOGISTICS3_SPEEDBOAT_CONDITION', row.LOGISTICS3_SPEEDBOAT_CONDITION) : '';
(row.FBLI_FA_TLOC_FD_DIVISION != '' ) ? formData.append('FBLI_FA_TLOC_FD_DIVISION', row.FBLI_FA_TLOC_FD_DIVISION) : '';
(row.LAND_TRANSPORTS_BICYCLE_AVAIL != '' ) ? formData.append('LAND_TRANSPORTS_BICYCLE_AVAIL', row.LAND_TRANSPORTS_BICYCLE_AVAIL) : '';
(row.LOGISTICS3_OTHERS_WATER_TRA_CONDITION != '' ) ? formData.append('LOGISTICS3_OTHERS_WATER_TRA_CONDITION', row.LOGISTICS3_OTHERS_WATER_TRA_CONDITION) : '';
(row.LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA != '' ) ? formData.append('LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA', row.LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA) : '';
(row.SUBSCRIBERID != '' ) ? formData.append('SUBSCRIBERID', row.SUBSCRIBERID) : '';
(row.GUSER_USER != '' ) ? formData.append('GUSER_USER', row.GUSER_USER) : '';
(row.RO_INFO_NAME_OF_RO != '' ) ? formData.append('RO_INFO_NAME_OF_RO', row.RO_INFO_NAME_OF_RO) : '';
(row.FBLI_FA_TLOC_FD_BLOCK != '' ) ? formData.append('FBLI_FA_TLOC_FD_BLOCK', row.FBLI_FA_TLOC_FD_BLOCK) : '';
(row.DEVICEID != '' ) ? formData.append('DEVICEID', row.DEVICEID) : '';
(row.LAND_TRANSPORTS_MOTORB_CONDITION != '' ) ? formData.append('LAND_TRANSPORTS_MOTORB_CONDITION', row.LAND_TRANSPORTS_MOTORB_CONDITION) : '';
(row.FBLI_GENERATED_NOTE_NAME_18 != '' ) ? formData.append('FBLI_GENERATED_NOTE_NAME_18', row.FBLI_GENERATED_NOTE_NAME_18) : '';
(row.LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74 != '' ) ? formData.append('LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74', row.LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74) : '';
(row.LOGISTICS4_CHINESERIFLE_CONDITION != '' ) ? formData.append('LOGISTICS4_CHINESERIFLE_CONDITION', row.LOGISTICS4_CHINESERIFLE_CONDITION) : '';
(row.LOGISTICS3_SPEEDBOAT_AVAIL != '' ) ? formData.append('LOGISTICS3_SPEEDBOAT_AVAIL', row.LOGISTICS3_SPEEDBOAT_AVAIL) : '';
(row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA != '' ) ? formData.append('LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA', row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA) : '';
(row.LOGISTICS4_GENERATED_NOTE_NAME_152 != '' ) ? formData.append('LOGISTICS4_GENERATED_NOTE_NAME_152', row.LOGISTICS4_GENERATED_NOTE_NAME_152) : '';
(row.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA != '' ) ? formData.append('LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA', row.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA) : '';
(row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA != '' ) ? formData.append('LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA', row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA) : '';
(row.SIMSERIAL != '' ) ? formData.append('SIMSERIAL', row.SIMSERIAL) : '';
(row.GUSER_DCOLLECTION_RAW != '' ) ? formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW) : '';
(row.LAND_TRANSPORTS_BICYCLE_CONDITION != '' ) ? formData.append('LAND_TRANSPORTS_BICYCLE_CONDITION', row.LAND_TRANSPORTS_BICYCLE_CONDITION) : '';
(row.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA != '' ) ? formData.append('LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA', row.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA) : '';
(row.GUSER_GENERATED_NOTE_NAME_10 != '' ) ? formData.append('GUSER_GENERATED_NOTE_NAME_10', row.GUSER_GENERATED_NOTE_NAME_10) : '';
(row.LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA != '' ) ? formData.append('LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA', row.LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA) : '';
(row.BO_INFO_BO_NID != '' ) ? formData.append('BO_INFO_BO_NID', row.BO_INFO_BO_NID) : '';
(row.LAND_TRANSPORTS_GBI_CYCLE != '' ) ? formData.append('LAND_TRANSPORTS_GBI_CYCLE', row.LAND_TRANSPORTS_GBI_CYCLE) : '';
(row.LAND_TRANSPORTS_OTHERS_LAND_TRA != '' ) ? formData.append('LAND_TRANSPORTS_OTHERS_LAND_TRA', row.LAND_TRANSPORTS_OTHERS_LAND_TRA) : '';
(row.LOGISTICS3_GCOUNTRY_BOAT != '' ) ? formData.append('LOGISTICS3_GCOUNTRY_BOAT', row.LOGISTICS3_GCOUNTRY_BOAT) : '';
(row.LOGISTICS4_GFIREARMS_SLR != '' ) ? formData.append('LOGISTICS4_GFIREARMS_SLR', row.LOGISTICS4_GFIREARMS_SLR) : '';
(row.FBLI_FA_TLOC_FD_CIR != '' ) ? formData.append('FBLI_FA_TLOC_FD_CIR', row.FBLI_FA_TLOC_FD_CIR) : '';
(row.LAND_TRANSPORTS_MOTORB_AVAIL != '' ) ? formData.append('LAND_TRANSPORTS_MOTORB_AVAIL', row.LAND_TRANSPORTS_MOTORB_AVAIL) : '';
(row.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION != '' ) ? formData.append('LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION', row.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION) : '';
(row.RO_INFO_RO_JOINING_DATE != '' ) ? formData.append('RO_INFO_RO_JOINING_DATE', row.RO_INFO_RO_JOINING_DATE) : '';
(row.LOGISTICS4_OTHERS_WATER_TRA_CONDITION != '' ) ? formData.append('LOGISTICS4_OTHERS_WATER_TRA_CONDITION', row.LOGISTICS4_OTHERS_WATER_TRA_CONDITION) : '';
(row.LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA != '' ) ? formData.append('LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA', row.LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA) : '';
(row.RO_INFO_RO_RANK != '' ) ? formData.append('RO_INFO_RO_RANK', row.RO_INFO_RO_RANK) : '';
(row.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL != '' ) ? formData.append('LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL', row.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL) : '';
(row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA != '' ) ? formData.append('LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA', row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA) : '';
(row.BO_INFO_BO_JOINING_DATE != '' ) ? formData.append('BO_INFO_BO_JOINING_DATE', row.BO_INFO_BO_JOINING_DATE) : '';
(row.GUSER_USER_CELL != '' ) ? formData.append('GUSER_USER_CELL', row.GUSER_USER_CELL) : '';
(row.RO_INFO_RO_NID != '' ) ? formData.append('RO_INFO_RO_NID', row.RO_INFO_RO_NID) : '';
(row.GUSER_TLOC_FD_BEAT_POINT_ALT != '' ) ? formData.append('GUSER_TLOC_FD_BEAT_POINT_ALT', row.GUSER_TLOC_FD_BEAT_POINT_ALT) : '';
(row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA != '' ) ? formData.append('LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA', row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA) : '';
(row.GUSER_TLOC_FD_BEAT_POINT_LAT != '' ) ? formData.append('GUSER_TLOC_FD_BEAT_POINT_LAT', row.GUSER_TLOC_FD_BEAT_POINT_LAT) : '';
(row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA != '' ) ? formData.append('LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA', row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA) : '';
(row.LOGISTICS4_RIFLE303_CONDITION != '' ) ? formData.append('LOGISTICS4_RIFLE303_CONDITION', row.LOGISTICS4_RIFLE303_CONDITION) : '';
(row.GUSER_DCOLLECTION != '' ) ? formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION) : '';
(row.END_RAW != '' ) ? formData.append('END_RAW', row.END_RAW) : '';
(row.BO_INFO_GENERATED_NOTE_NAME_106 != '' ) ? formData.append('BO_INFO_GENERATED_NOTE_NAME_106', row.BO_INFO_GENERATED_NOTE_NAME_106) : '';
(row.GENERATED_NOTE_NAME_81 != '' ) ? formData.append('GENERATED_NOTE_NAME_81', row.GENERATED_NOTE_NAME_81) : '';
(row.RO_INFO_GENERATED_NOTE_NAME_97 != '' ) ? formData.append('RO_INFO_GENERATED_NOTE_NAME_97', row.RO_INFO_GENERATED_NOTE_NAME_97) : '';
(row.FBLI_FA_GENERATED_NOTE_NAME_21 != '' ) ? formData.append('FBLI_FA_GENERATED_NOTE_NAME_21', row.FBLI_FA_GENERATED_NOTE_NAME_21) : '';
(row.LAND_TRANSPORTS_GENERATED_NOTE_NAME_125 != '' ) ? formData.append('LAND_TRANSPORTS_GENERATED_NOTE_NAME_125', row.LAND_TRANSPORTS_GENERATED_NOTE_NAME_125) : '';
(row.GUSER_BEAT_ADDRESS != '' ) ? formData.append('GUSER_BEAT_ADDRESS', row.GUSER_BEAT_ADDRESS) : '';
(row.LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA != '' ) ? formData.append('LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA', row.LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA) : '';
(row.BO_INFO_BO_JOINING_DATE_RAW != '' ) ? formData.append('BO_INFO_BO_JOINING_DATE_RAW', row.BO_INFO_BO_JOINING_DATE_RAW) : '';
(row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA != '' ) ? formData.append('LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA', row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA) : '';
(row.GUSER_TLOC_FD_BEAT_POINT_ACC != '' ) ? formData.append('GUSER_TLOC_FD_BEAT_POINT_ACC', row.GUSER_TLOC_FD_BEAT_POINT_ACC) : '';
(row.LOGISTICS3_COUNTRYBOAT_AVAIL != '' ) ? formData.append('LOGISTICS3_COUNTRYBOAT_AVAIL', row.LOGISTICS3_COUNTRYBOAT_AVAIL) : '';
(row.FBLI_CA_TLOC_AD_DISTRICT != '' ) ? formData.append('FBLI_CA_TLOC_AD_DISTRICT', row.FBLI_CA_TLOC_AD_DISTRICT) : '';
(row.BO_INFO_NAME_OF_BO != '' ) ? formData.append('BO_INFO_NAME_OF_BO', row.BO_INFO_NAME_OF_BO) : '';
(row.LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53 != '' ) ? formData.append('LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53', row.LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53) : '';
(row.LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA != '' ) ? formData.append('LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA', row.LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA) : '';
(row.LOGISTICS3_OTHERS_WATER_TRA != '' ) ? formData.append('LOGISTICS3_OTHERS_WATER_TRA', row.LOGISTICS3_OTHERS_WATER_TRA) : '';
(row.FBLI_TLOC_ECOZONE != '' ) ? formData.append('FBLI_TLOC_ECOZONE', row.FBLI_TLOC_ECOZONE) : '';
(row.BO_INFO_BO_RANK != '' ) ? formData.append('BO_INFO_BO_RANK', row.BO_INFO_BO_RANK) : '';
(row.LOGISTICS4_SLR_CONDITION != '' ) ? formData.append('LOGISTICS4_SLR_CONDITION', row.LOGISTICS4_SLR_CONDITION) : '';
(row.END != '' ) ? formData.append('END', row.END) : '';
(row.FBLI_FA_TLOC_FD_RANGE != '' ) ? formData.append('FBLI_FA_TLOC_FD_RANGE', row.FBLI_FA_TLOC_FD_RANGE) : '';
(row.RO_INFO_RO_JOINING_DATE_RAW != '' ) ? formData.append('RO_INFO_RO_JOINING_DATE_RAW', row.RO_INFO_RO_JOINING_DATE_RAW) : '';
(row.PHONENUMBER != '' ) ? formData.append('PHONENUMBER', row.PHONENUMBER) : '';
(row.LOGISTICS3_TRAWLER != '' ) ? formData.append('LOGISTICS3_TRAWLER', row.LOGISTICS3_TRAWLER) : '';
(row.LOGISTICS4_GFIREARMS_SHORTGUN != '' ) ? formData.append('LOGISTICS4_GFIREARMS_SHORTGUN', row.LOGISTICS4_GFIREARMS_SHORTGUN) : '';
(row.LOGISTICS4_SHORTGUN_CONDITION != '' ) ? formData.append('LOGISTICS4_SHORTGUN_CONDITION', row.LOGISTICS4_SHORTGUN_CONDITION) : '';
(row.START_RAW != '' ) ? formData.append('START_RAW', row.START_RAW) : '';
(row.LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS != '' ) ? formData.append('LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS', row.LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS) : '';
(row.BO_INFO_BO_MAIL != '' ) ? formData.append('BO_INFO_BO_MAIL', row.BO_INFO_BO_MAIL) : '';
(row.META_INSTANCE_ID != '' ) ? formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID) : '';
(row.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL != '' ) ? formData.append('LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL', row.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL) : '';
(row.FBLI_CA_GENERATED_NOTE_NAME_33 != '' ) ? formData.append('FBLI_CA_GENERATED_NOTE_NAME_33', row.FBLI_CA_GENERATED_NOTE_NAME_33) : '';
(row.FBLI_CA_TLOC_AD_DIVISION != '' ) ? formData.append('FBLI_CA_TLOC_AD_DIVISION', row.FBLI_CA_TLOC_AD_DIVISION) : '';
(row.LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65 != '' ) ? formData.append('LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65', row.LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65) : '';
(row.LOGISTICS4_OTHERS_WATER_TRA_AVAIL != '' ) ? formData.append('LOGISTICS4_OTHERS_WATER_TRA_AVAIL', row.LOGISTICS4_OTHERS_WATER_TRA_AVAIL) : '';
(row.LOGISTICS3_GSPEED_BOAT != '' ) ? formData.append('LOGISTICS3_GSPEED_BOAT', row.LOGISTICS3_GSPEED_BOAT) : '';
(row.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL != '' ) ? formData.append('LOGISTICS4_TFIREARMS_303RIFLE_AVAIL', row.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL) : '';
(row.LOGISTICS4_GFIREARMS_CHINESERIFLE != '' ) ? formData.append('LOGISTICS4_GFIREARMS_CHINESERIFLE', row.LOGISTICS4_GFIREARMS_CHINESERIFLE) : '';
(row.TODAY != '' ) ? formData.append('TODAY', row.TODAY) : '';
(row.FBLI_FA_TLOC_FD_CHAR != '' ) ? formData.append('FBLI_FA_TLOC_FD_CHAR', row.FBLI_FA_TLOC_FD_CHAR) : '';
(row.LAND_TRANSPORTS_GMOTORBIKE != '' ) ? formData.append('LAND_TRANSPORTS_GMOTORBIKE', row.LAND_TRANSPORTS_GMOTORBIKE) : '';
(row.LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA != '' ) ? formData.append('LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA', row.LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA) : '';
(row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA != '' ) ? formData.append('LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA', row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA) : '';
(row.FBLI_FA_TLOC_ENTER_RANGE != '' ) ? formData.append('FBLI_FA_TLOC_ENTER_RANGE', row.FBLI_FA_TLOC_ENTER_RANGE) : '';
(row.LAND_STATISTICS_AREA_SUM != '' ) ? formData.append('LAND_STATISTICS_AREA_SUM', row.LAND_STATISTICS_AREA_SUM) : '';
(row.RO_INFO_RO_MAIL != '' ) ? formData.append('RO_INFO_RO_MAIL', row.RO_INFO_RO_MAIL) : '';
(row.GENERATED_NOTE_NAME_123 != '' ) ? formData.append('GENERATED_NOTE_NAME_123', row.GENERATED_NOTE_NAME_123) : '';
(row.START != '' ) ? formData.append('START', row.START) : '';
(row.FBLI_CA_UNION != '' ) ? formData.append('FBLI_CA_UNION', row.FBLI_CA_UNION) : '';
(row.FBLI_FA_TLOC_ENTER_DIV != '' ) ? formData.append('FBLI_FA_TLOC_ENTER_DIV', row.FBLI_FA_TLOC_ENTER_DIV) : '';
(row.TODAY_RAW != '' ) ? formData.append('TODAY_RAW', row.TODAY_RAW) : '';
(row.GENERATED_NOTE_NAME_94 != '' ) ? formData.append('GENERATED_NOTE_NAME_94', row.GENERATED_NOTE_NAME_94) : '';
(row.LOGISTICS3_OTHERS_WATER_TRA_AVAIL != '' ) ? formData.append('LOGISTICS3_OTHERS_WATER_TRA_AVAIL', row.LOGISTICS3_OTHERS_WATER_TRA_AVAIL) : '';
(row.GENERATED_NOTE_NAME_95 != '' ) ? formData.append('GENERATED_NOTE_NAME_95', row.GENERATED_NOTE_NAME_95) : '';
(row.LOGISTICS4_TFIREARMS_SLR_AVAIL != '' ) ? formData.append('LOGISTICS4_TFIREARMS_SLR_AVAIL', row.LOGISTICS4_TFIREARMS_SLR_AVAIL) : '';
(row.LOGISTICS3_GENERATED_NOTE_NAME_137 != '' ) ? formData.append('LOGISTICS3_GENERATED_NOTE_NAME_137', row.LOGISTICS3_GENERATED_NOTE_NAME_137) : '';
(row.project_id != '' ) ? formData.append('project_id', row.project_id) : '';
(row.sort != '' ) ? formData.append('sort', row.sort) : '';
(row.last_log_id != '' ) ? formData.append('last_log_id', row.last_log_id) : '';
(row.restore_id != '' ) ? formData.append('restore_id', row.restore_id) : '';
(row.created_at != '' ) ? formData.append('created_at', row.created_at) : '';
(row.created_by != '' ) ? formData.append('created_by', row.created_by) : '';
(row.updated_at != '' ) ? formData.append('updated_at', row.updated_at) : '';
(row.updated_by != '' ) ? formData.append('updated_by', row.updated_by) : '';
(row.deleted_at != '' ) ? formData.append('deleted_at', row.deleted_at) : '';
(row.deleted_by != '' ) ? formData.append('deleted_by', row.deleted_by) : '';
(row.deleted_status != '' ) ? formData.append('deleted_status', row.deleted_status) : '';
(row.status != '' ) ? formData.append('status', row.status) : '';
(row.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_SKM != '' ) ? formData.append('LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_SKM', row.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_SKM) : '';
(row.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_SKM != '' ) ? formData.append('LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_SKM', row.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_SKM) : '';
(row.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_SKM != '' ) ? formData.append('LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_SKM', row.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_SKM) : '';

            console.log('FormData to be sent:', formData._parts);
            formData._parts.forEach((value, key) => {
              console.log(`${value},`);
            });
            //Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/gener43_2021_core_create?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              console.log(response, 'response...');

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const gener43_2021_core_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM GENER43_2021_CORE`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA,
            );
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_LNG',
              row.GUSER_TLOC_FD_BEAT_POINT_LNG,
            );
            formData.append('FBLI_FA_TLOC_FD_BEAT', row.FBLI_FA_TLOC_FD_BEAT);
            formData.append(
              'LOGISTICS3_COUNTRYBOAT_CONDITION',
              row.LOGISTICS3_COUNTRYBOAT_CONDITION,
            );
            formData.append(
              'LOGISTICS4_GFIREARMS_303RIFLE',
              row.LOGISTICS4_GFIREARMS_303RIFLE,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA,
            );
            formData.append(
              'LOGISTICS4_OTHERS_WATER_TRA',
              row.LOGISTICS4_OTHERS_WATER_TRA,
            );
            formData.append('BO_INFO_BO_CELL', row.BO_INFO_BO_CELL);
            formData.append(
              'LOGISTICS3_TVESSEL_CONDITION',
              row.LOGISTICS3_TVESSEL_CONDITION,
            );
            formData.append('RO_INFO_RO_CELL', row.RO_INFO_RO_CELL);
            formData.append(
              'LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL',
              row.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL,
            );
            formData.append(
              'LOGISTICS3_TVESSEL_AVAIL',
              row.LOGISTICS3_TVESSEL_AVAIL,
            );
            formData.append(
              'FBLI_FA_TLOC_FD_BEAT_TXT',
              row.FBLI_FA_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'LOGISTICS3_SPEEDBOAT_CONDITION',
              row.LOGISTICS3_SPEEDBOAT_CONDITION,
            );
            formData.append(
              'FBLI_FA_TLOC_FD_DIVISION',
              row.FBLI_FA_TLOC_FD_DIVISION,
            );
            formData.append(
              'LAND_TRANSPORTS_BICYCLE_AVAIL',
              row.LAND_TRANSPORTS_BICYCLE_AVAIL,
            );
            formData.append(
              'LOGISTICS3_OTHERS_WATER_TRA_CONDITION',
              row.LOGISTICS3_OTHERS_WATER_TRA_CONDITION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append('GUSER_USER', row.GUSER_USER);
            formData.append('RO_INFO_NAME_OF_RO', row.RO_INFO_NAME_OF_RO);
            formData.append('FBLI_FA_TLOC_FD_BLOCK', row.FBLI_FA_TLOC_FD_BLOCK);
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'LAND_TRANSPORTS_MOTORB_CONDITION',
              row.LAND_TRANSPORTS_MOTORB_CONDITION,
            );
            formData.append(
              'FBLI_GENERATED_NOTE_NAME_18',
              row.FBLI_GENERATED_NOTE_NAME_18,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74',
              row.LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74,
            );
            formData.append(
              'LOGISTICS4_CHINESERIFLE_CONDITION',
              row.LOGISTICS4_CHINESERIFLE_CONDITION,
            );
            formData.append(
              'LOGISTICS3_SPEEDBOAT_AVAIL',
              row.LOGISTICS3_SPEEDBOAT_AVAIL,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA,
            );
            formData.append(
              'LOGISTICS4_GENERATED_NOTE_NAME_152',
              row.LOGISTICS4_GENERATED_NOTE_NAME_152,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA,
            );
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW);
            formData.append(
              'LAND_TRANSPORTS_BICYCLE_CONDITION',
              row.LAND_TRANSPORTS_BICYCLE_CONDITION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA,
            );
            formData.append(
              'GUSER_GENERATED_NOTE_NAME_10',
              row.GUSER_GENERATED_NOTE_NAME_10,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA,
            );
            formData.append('BO_INFO_BO_NID', row.BO_INFO_BO_NID);
            formData.append(
              'LAND_TRANSPORTS_GBI_CYCLE',
              row.LAND_TRANSPORTS_GBI_CYCLE,
            );
            formData.append(
              'LAND_TRANSPORTS_OTHERS_LAND_TRA',
              row.LAND_TRANSPORTS_OTHERS_LAND_TRA,
            );
            formData.append(
              'LOGISTICS3_GCOUNTRY_BOAT',
              row.LOGISTICS3_GCOUNTRY_BOAT,
            );
            formData.append(
              'LOGISTICS4_GFIREARMS_SLR',
              row.LOGISTICS4_GFIREARMS_SLR,
            );
            formData.append('FBLI_FA_TLOC_FD_CIR', row.FBLI_FA_TLOC_FD_CIR);
            formData.append(
              'LAND_TRANSPORTS_MOTORB_AVAIL',
              row.LAND_TRANSPORTS_MOTORB_AVAIL,
            );
            formData.append(
              'LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION',
              row.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION,
            );
            formData.append(
              'RO_INFO_RO_JOINING_DATE',
              row.RO_INFO_RO_JOINING_DATE,
            );
            formData.append(
              'LOGISTICS4_OTHERS_WATER_TRA_CONDITION',
              row.LOGISTICS4_OTHERS_WATER_TRA_CONDITION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA,
            );
            formData.append('RO_INFO_RO_RANK', row.RO_INFO_RO_RANK);
            formData.append(
              'LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL',
              row.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA,
            );
            formData.append(
              'BO_INFO_BO_JOINING_DATE',
              row.BO_INFO_BO_JOINING_DATE,
            );
            formData.append('GUSER_USER_CELL', row.GUSER_USER_CELL);
            formData.append('RO_INFO_RO_NID', row.RO_INFO_RO_NID);
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_ALT',
              row.GUSER_TLOC_FD_BEAT_POINT_ALT,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA,
            );
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_LAT',
              row.GUSER_TLOC_FD_BEAT_POINT_LAT,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA,
            );
            formData.append(
              'LOGISTICS4_RIFLE303_CONDITION',
              row.LOGISTICS4_RIFLE303_CONDITION,
            );
            formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION);
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'BO_INFO_GENERATED_NOTE_NAME_106',
              row.BO_INFO_GENERATED_NOTE_NAME_106,
            );
            formData.append(
              'GENERATED_NOTE_NAME_81',
              row.GENERATED_NOTE_NAME_81,
            );
            formData.append(
              'RO_INFO_GENERATED_NOTE_NAME_97',
              row.RO_INFO_GENERATED_NOTE_NAME_97,
            );
            formData.append(
              'FBLI_FA_GENERATED_NOTE_NAME_21',
              row.FBLI_FA_GENERATED_NOTE_NAME_21,
            );
            formData.append(
              'LAND_TRANSPORTS_GENERATED_NOTE_NAME_125',
              row.LAND_TRANSPORTS_GENERATED_NOTE_NAME_125,
            );
            formData.append('GUSER_BEAT_ADDRESS', row.GUSER_BEAT_ADDRESS);
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA,
            );
            formData.append(
              'BO_INFO_BO_JOINING_DATE_RAW',
              row.BO_INFO_BO_JOINING_DATE_RAW,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA,
            );
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_ACC',
              row.GUSER_TLOC_FD_BEAT_POINT_ACC,
            );
            formData.append(
              'LOGISTICS3_COUNTRYBOAT_AVAIL',
              row.LOGISTICS3_COUNTRYBOAT_AVAIL,
            );
            formData.append(
              'FBLI_CA_TLOC_AD_DISTRICT',
              row.FBLI_CA_TLOC_AD_DISTRICT,
            );
            formData.append('BO_INFO_NAME_OF_BO', row.BO_INFO_NAME_OF_BO);
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53',
              row.LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA,
            );
            formData.append(
              'LOGISTICS3_OTHERS_WATER_TRA',
              row.LOGISTICS3_OTHERS_WATER_TRA,
            );
            formData.append('FBLI_TLOC_ECOZONE', row.FBLI_TLOC_ECOZONE);
            formData.append('BO_INFO_BO_RANK', row.BO_INFO_BO_RANK);
            formData.append(
              'LOGISTICS4_SLR_CONDITION',
              row.LOGISTICS4_SLR_CONDITION,
            );
            formData.append('END', row.END);
            formData.append('FBLI_FA_TLOC_FD_RANGE', row.FBLI_FA_TLOC_FD_RANGE);
            formData.append(
              'RO_INFO_RO_JOINING_DATE_RAW',
              row.RO_INFO_RO_JOINING_DATE_RAW,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append('LOGISTICS3_TRAWLER', row.LOGISTICS3_TRAWLER);
            formData.append(
              'LOGISTICS4_GFIREARMS_SHORTGUN',
              row.LOGISTICS4_GFIREARMS_SHORTGUN,
            );
            formData.append(
              'LOGISTICS4_SHORTGUN_CONDITION',
              row.LOGISTICS4_SHORTGUN_CONDITION,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS',
              row.LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS,
            );
            formData.append('BO_INFO_BO_MAIL', row.BO_INFO_BO_MAIL);
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append(
              'LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL',
              row.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL,
            );
            formData.append(
              'FBLI_CA_GENERATED_NOTE_NAME_33',
              row.FBLI_CA_GENERATED_NOTE_NAME_33,
            );
            formData.append(
              'FBLI_CA_TLOC_AD_DIVISION',
              row.FBLI_CA_TLOC_AD_DIVISION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65,
            );
            formData.append(
              'LOGISTICS4_OTHERS_WATER_TRA_AVAIL',
              row.LOGISTICS4_OTHERS_WATER_TRA_AVAIL,
            );
            formData.append(
              'LOGISTICS3_GSPEED_BOAT',
              row.LOGISTICS3_GSPEED_BOAT,
            );
            formData.append(
              'LOGISTICS4_TFIREARMS_303RIFLE_AVAIL',
              row.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL,
            );
            formData.append(
              'LOGISTICS4_GFIREARMS_CHINESERIFLE',
              row.LOGISTICS4_GFIREARMS_CHINESERIFLE,
            );
            formData.append('TODAY', row.TODAY);
            formData.append('FBLI_FA_TLOC_FD_CHAR', row.FBLI_FA_TLOC_FD_CHAR);
            formData.append(
              'LAND_TRANSPORTS_GMOTORBIKE',
              row.LAND_TRANSPORTS_GMOTORBIKE,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA,
            );
            formData.append(
              'FBLI_FA_TLOC_ENTER_RANGE',
              row.FBLI_FA_TLOC_ENTER_RANGE,
            );
            formData.append(
              'LAND_STATISTICS_AREA_SUM',
              row.LAND_STATISTICS_AREA_SUM,
            );
            formData.append('RO_INFO_RO_MAIL', row.RO_INFO_RO_MAIL);
            formData.append(
              'GENERATED_NOTE_NAME_123',
              row.GENERATED_NOTE_NAME_123,
            );
            formData.append('START', row.START);
            formData.append('FBLI_CA_UNION', row.FBLI_CA_UNION);
            formData.append(
              'FBLI_FA_TLOC_ENTER_DIV',
              row.FBLI_FA_TLOC_ENTER_DIV,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append(
              'GENERATED_NOTE_NAME_94',
              row.GENERATED_NOTE_NAME_94,
            );
            formData.append(
              'LOGISTICS3_OTHERS_WATER_TRA_AVAIL',
              row.LOGISTICS3_OTHERS_WATER_TRA_AVAIL,
            );
            formData.append(
              'GENERATED_NOTE_NAME_95',
              row.GENERATED_NOTE_NAME_95,
            );
            formData.append(
              'LOGISTICS4_TFIREARMS_SLR_AVAIL',
              row.LOGISTICS4_TFIREARMS_SLR_AVAIL,
            );
            formData.append(
              'LOGISTICS3_GENERATED_NOTE_NAME_137',
              row.LOGISTICS3_GENERATED_NOTE_NAME_137,
            );
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_SKM',
              row.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_SKM,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_SKM',
              row.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_SKM,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_SKM',
              row.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_SKM,
            );
          }
          const response = await fetch(
            `${baseApi}/gener43_2021_core?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
                'Content-Type': 'multipart/form-data',
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const gener43_2021_fbli_ca_tloc_ad_upzilla_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM GENER43_2021_FBLI_CA_TLOC_AD_UPZILLA WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/gener43_2021_fbli_ca_tloc_ad_upzilla?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const gener43_2021_fbli_ca_tloc_ad_upzilla_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM GENER43_2021_FBLI_CA_TLOC_AD_UPZILLA`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/gener43_2021_fbli_ca_tloc_ad_upzilla?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const gener43_2021_others_info1_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM GENER43_2021_OTHERS_INFO1 WHERE _PARENT_AURI =? OR _TOP_LEVEL_AURI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent: in others info', row);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            // formData.append(
            //   'GENERATED_NOTE_NAME_115',
            //   row.GENERATED_NOTE_NAME_115,
            // );
            formData.append('OTHERS_JOINING_DATE', row.OTHERS_JOINING_DATE);
            formData.append('OTHERS_NID', row.OTHERS_NID);
            formData.append('OTHERS_RANK', row.OTHERS_RANK);
            formData.append('OTHERS_CELL', row.OTHERS_CELL);
            formData.append('NAME_OF_OTHERS', row.NAME_OF_OTHERS);
            formData.append(
              'OTHERS_JOINING_DATE_RAW',
              row.OTHERS_JOINING_DATE_RAW,
            );
            formData.append('OTHERS_MAIL', row.OTHERS_MAIL);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/gener43_2021_others_info1_create?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const gener43_2021_others_info1_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM GENER43_2021_OTHERS_INFO1 WHERE _PARENT_AURI =? OR _TOP_LEVEL_AURI = ?`, // Query the aspects table
        [uri],
        async (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          
          const formData = new FormData();
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            
            formData.append('_URI[]', row._URI);
            formData.append('_CREATOR_URI_USER[]', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE[]', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER[]', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE[]', row._LAST_UPDATE_DATE);
            formData.append('_ORDINAL_NUMBER[]', row._ORDINAL_NUMBER);
            formData.append('_PARENT_AURI[]', row._PARENT_AURI);
            formData.append('_TOP_LEVEL_AURI[]', row._TOP_LEVEL_AURI);
            formData.append('GENERATED_NOTE_NAME_115[]',row.GENERATED_NOTE_NAME_115);
            formData.append('OTHERS_JOINING_DATE[]', row.OTHERS_JOINING_DATE);
            formData.append('OTHERS_NID[]', row.OTHERS_NID);
            formData.append('OTHERS_RANK[]', row.OTHERS_RANK);
            formData.append('OTHERS_CELL[]', row.OTHERS_CELL);
            formData.append('NAME_OF_OTHERS[]', row.NAME_OF_OTHERS);
            formData.append('OTHERS_JOINING_DATE_RAW[]',row.OTHERS_JOINING_DATE_RAW);
            formData.append('OTHERS_MAIL[]', row.OTHERS_MAIL);
            
          }
          
          resolve(data);
          
          const response2 = await fetch(
              `${baseApi}/gener43_2021_others_info1_create?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            
          const result = await response2.json();
          console.log('API response2:', result);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const gener43_2021_overallnotes_ima_blb_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM GENER43_2021_OVERALLNOTES_IMA_BLB WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/gener43_2021_overallnotes_ima_blb?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const gener43_2021_overallnotes_ima_blb_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM GENER43_2021_OVERALLNOTES_IMA_BLB`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/gener43_2021_overallnotes_ima_blb?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_core_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_CORE WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173',
              row.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173,
            );
            formData.append(
              'REG_AVG_SEEDLING_ALL_PLOTS',
              row.REG_AVG_SEEDLING_ALL_PLOTS,
            );
            formData.append(
              'PLANTING_PLAN_GRPSTOCKS_NTE_1',
              row.PLANTING_PLAN_GRPSTOCKS_NTE_1,
            );
            formData.append(
              'PLANTING_PLAN_GRPSTOCKS_NTE_2',
              row.PLANTING_PLAN_GRPSTOCKS_NTE_2,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174',
              row.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174,
            );
            formData.append(
              'LOCATION_DATA_CA_TLOC_AD_DISTRICT',
              row.LOCATION_DATA_CA_TLOC_AD_DISTRICT,
            );
            formData.append(
              'MAGROVE_PLANT_WIND_DIR',
              row.MAGROVE_PLANT_WIND_DIR,
            );
            formData.append('GSITE_HISTORY', row.GSITE_HISTORY);
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_20',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_20,
            );
            formData.append(
              'GTRTS_PLANTING_PLANTING_YEAR',
              row.GTRTS_PLANTING_PLANTING_YEAR,
            );
            formData.append(
              'INTERVENTION_DETAILS_PATCHES_PLANT',
              row.INTERVENTION_DETAILS_PATCHES_PLANT,
            );
            formData.append(
              'INTERVENTION_DETAILS_SEEDING_PLANT',
              row.INTERVENTION_DETAILS_SEEDING_PLANT,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_SPACING',
              row.PLANTING_PLAN_GPLANTING_SPACING,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_CLAY_LAYER',
              row.MAGROVE_PLANT_MAN_AFF_CLAY_LAYER,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHER_YEAR',
              row.GTRTS_OTHER_TREATMENT_OTHER_YEAR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT,
            );
            formData.append(
              'MAGROVE_PLANT_CRABS_HOLE',
              row.MAGROVE_PLANT_CRABS_HOLE,
            );
            formData.append(
              'REG_AVG_SEEDLING_PER_HA_ALL_PLOTS',
              row.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS,
            );
            formData.append(
              'LOCATION_DATA_CA_UNION',
              row.LOCATION_DATA_CA_UNION,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append(
              'GTRTS_PLANTING_PLANTING_YEAR_RAW',
              row.GTRTS_PLANTING_PLANTING_YEAR_RAW,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW',
              row.GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW,
            );
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'PLANTING_PLAN_GENERATED_NOTE_NAME_151',
              row.PLANTING_PLAN_GENERATED_NOTE_NAME_151,
            );
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_YEAR',
              row.INTERVENTION_DETAILS_TLOC_PLANT_YEAR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179',
              row.NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179,
            );
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_TYPE',
              row.INTERVENTION_DETAILS_TLOC_PLANT_TYPE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT,
            );
            formData.append('LOCATION_DATA_ECOZONE', row.LOCATION_DATA_ECOZONE);
            formData.append(
              'GTRTS_PLANTATION_SITE_YEAR',
              row.GTRTS_PLANTATION_SITE_YEAR,
            );
            formData.append('GUSER_TUSER_CELL', row.GUSER_TUSER_CELL);
            formData.append(
              'REG_AVG_TREES_PER_HA_ALL_PLOTS',
              row.REG_AVG_TREES_PER_HA_ALL_PLOTS,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_NURSERY_YEAR',
              row.GTRTS_NUERSERY_RAISING_NURSERY_YEAR,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR',
              row.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221',
              row.GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLINGS_PER_HA',
              row.PLANTING_PLAN_SEEDLINGS_PER_HA,
            );
            formData.append(
              'GTRTS_COMPOST_COMPOST_YEAR_RAW',
              row.GTRTS_COMPOST_COMPOST_YEAR_RAW,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_NURSERY_LOCATION',
              row.NURSERY_NURSERY_SITE_NURSERY_LOCATION,
            );
            formData.append('GSITE_LAND_COV_DESC', row.GSITE_LAND_COV_DESC);
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append(
              'GUSER_GENERATED_NOTE_NAME_13',
              row.GUSER_GENERATED_NOTE_NAME_13,
            );
            formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW);
            formData.append(
              'NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR',
              row.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED',
              row.GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_LEVEL_INUND',
              row.MAGROVE_PLANT_MAN_AFF_LEVEL_INUND,
            );
            formData.append('ALLPATCHES', row.ALLPATCHES);
            formData.append(
              'GENERATED_NOTE_NAME_63',
              row.GENERATED_NOTE_NAME_63,
            );
            formData.append('GUSER_TUSER_EMAIL', row.GUSER_TUSER_EMAIL);
            formData.append('CHECKED_BY', row.CHECKED_BY);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CIR',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CIR,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190,
            );
            formData.append(
              'LOCATION_DATA_TLOCATION',
              row.LOCATION_DATA_TLOCATION,
            );
            formData.append(
              'MAGROVE_PLANT_FACING_ISLAND',
              row.MAGROVE_PLANT_FACING_ISLAND,
            );
            formData.append('GUSER_TUSER', row.GUSER_TUSER);
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23',
              row.LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW',
              row.GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC,
            );
            formData.append(
              'GTRTS_PLANTATION_SITE_YEAR_RAW',
              row.GTRTS_PLANTATION_SITE_YEAR_RAW,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_115',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_115,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_114',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_114,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262',
              row.GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_119',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_119,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_118',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_118,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_117',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_117,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_116',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_116,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK,
            );
            formData.append(
              'GTRTS_COMPOST_GENERATED_NOTE_NAME_247',
              row.GTRTS_COMPOST_GENERATED_NOTE_NAME_247,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION,
            );
            formData.append(
              'GTRTS_COMPOST_COMPOST_YEAR',
              row.GTRTS_COMPOST_COMPOST_YEAR,
            );
            formData.append(
              'GTRTS_PLANTING_GENERATED_NOTE_NAME_231',
              row.GTRTS_PLANTING_GENERATED_NOTE_NAME_231,
            );
            formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION);
            formData.append('CHECKED', row.CHECKED);
            formData.append('GSITE_HIST_OTHER', row.GSITE_HIST_OTHER);
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137',
              row.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137,
            );
            formData.append(
              'INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122',
              row.INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133',
              row.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133,
            );
            formData.append(
              'PLANTING_PLAN_TXT_BUILD1',
              row.PLANTING_PLAN_TXT_BUILD1,
            );
            formData.append(
              'PLANTING_PLAN_TXT_BUILD2',
              row.PLANTING_PLAN_TXT_BUILD2,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252',
              row.GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252,
            );
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE',
              row.LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS,
            );
            formData.append(
              'PLANTING_PLAN_BPLANTING',
              row.PLANTING_PLAN_BPLANTING,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC,
            );
            formData.append(
              'LOCATION_DATA_CA_GENERATED_NOTE_NAME_36',
              row.LOCATION_DATA_CA_GENERATED_NOTE_NAME_36,
            );
            formData.append(
              'INTERVENTION_DETAILS_LLOC_PLANT_AREA',
              row.INTERVENTION_DETAILS_LLOC_PLANT_AREA,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2,
            );
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE,
            );
            formData.append('REG_PLOT_NO', row.REG_PLOT_NO);
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3,
            );
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4,
            );
            formData.append('END', row.END);
            formData.append(
              'PLANTING_PLAN_MAX_SEEDLINGS',
              row.PLANTING_PLAN_MAX_SEEDLINGS,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append(
              'GTRTS_PLANTATION_GENERATED_NOTE_NAME_226',
              row.GTRTS_PLANTATION_GENERATED_NOTE_NAME_226,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212,
            );
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_OTHERS',
              row.INTERVENTION_DETAILS_TLOC_PLANT_OTHERS,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR',
              row.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT,
            );
            formData.append(
              'MAGROVE_PLANT_FACING_DIR',
              row.MAGROVE_PLANT_FACING_DIR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_TPOLYTYPE_NUR',
              row.NURSERY_NURSERY_SITE_TPOLYTYPE_NUR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_PIONEERS_SP',
              row.MAGROVE_PLANT_MAN_AFF_PIONEERS_SP,
            );
            formData.append('TODAY', row.TODAY);
            formData.append(
              'LOCATION_DATA_CA_TLOC_AD_DIVISION',
              row.LOCATION_DATA_CA_TLOC_AD_DIVISION,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW',
              row.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV',
              row.LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV,
            );
            formData.append(
              'LOCATION_DATA_CA_VILLAGE',
              row.LOCATION_DATA_CA_VILLAGE,
            );
            formData.append(
              'MAGROVE_PLANT_WAVE_DIR',
              row.MAGROVE_PLANT_WAVE_DIR,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199,
            );
            formData.append(
              'GSITE_GENERATED_NOTE_NAME_72',
              row.GSITE_GENERATED_NOTE_NAME_72,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE,
            );
            formData.append('START', row.START);
            formData.append(
              'REG_AVG_TREES_ALL_PLOTS',
              row.REG_AVG_TREES_ALL_PLOTS,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append('APPROVED', row.APPROVED);
            formData.append(
              'MAGROVE_PLANT_GENERATED_NOTE_NAME_131',
              row.MAGROVE_PLANT_GENERATED_NOTE_NAME_131,
            );
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_core?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_core_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_CORE`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173',
              row.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173,
            );
            formData.append(
              'REG_AVG_SEEDLING_ALL_PLOTS',
              row.REG_AVG_SEEDLING_ALL_PLOTS,
            );
            formData.append(
              'PLANTING_PLAN_GRPSTOCKS_NTE_1',
              row.PLANTING_PLAN_GRPSTOCKS_NTE_1,
            );
            formData.append(
              'PLANTING_PLAN_GRPSTOCKS_NTE_2',
              row.PLANTING_PLAN_GRPSTOCKS_NTE_2,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174',
              row.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174,
            );
            formData.append(
              'LOCATION_DATA_CA_TLOC_AD_DISTRICT',
              row.LOCATION_DATA_CA_TLOC_AD_DISTRICT,
            );
            formData.append(
              'MAGROVE_PLANT_WIND_DIR',
              row.MAGROVE_PLANT_WIND_DIR,
            );
            formData.append('GSITE_HISTORY', row.GSITE_HISTORY);
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_20',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_20,
            );
            formData.append(
              'GTRTS_PLANTING_PLANTING_YEAR',
              row.GTRTS_PLANTING_PLANTING_YEAR,
            );
            formData.append(
              'INTERVENTION_DETAILS_PATCHES_PLANT',
              row.INTERVENTION_DETAILS_PATCHES_PLANT,
            );
            formData.append(
              'INTERVENTION_DETAILS_SEEDING_PLANT',
              row.INTERVENTION_DETAILS_SEEDING_PLANT,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_SPACING',
              row.PLANTING_PLAN_GPLANTING_SPACING,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_CLAY_LAYER',
              row.MAGROVE_PLANT_MAN_AFF_CLAY_LAYER,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHER_YEAR',
              row.GTRTS_OTHER_TREATMENT_OTHER_YEAR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT,
            );
            formData.append(
              'MAGROVE_PLANT_CRABS_HOLE',
              row.MAGROVE_PLANT_CRABS_HOLE,
            );
            formData.append(
              'REG_AVG_SEEDLING_PER_HA_ALL_PLOTS',
              row.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS,
            );
            formData.append(
              'LOCATION_DATA_CA_UNION',
              row.LOCATION_DATA_CA_UNION,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append(
              'GTRTS_PLANTING_PLANTING_YEAR_RAW',
              row.GTRTS_PLANTING_PLANTING_YEAR_RAW,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW',
              row.GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW,
            );
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'PLANTING_PLAN_GENERATED_NOTE_NAME_151',
              row.PLANTING_PLAN_GENERATED_NOTE_NAME_151,
            );
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_YEAR',
              row.INTERVENTION_DETAILS_TLOC_PLANT_YEAR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179',
              row.NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179,
            );
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_TYPE',
              row.INTERVENTION_DETAILS_TLOC_PLANT_TYPE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT,
            );
            formData.append('LOCATION_DATA_ECOZONE', row.LOCATION_DATA_ECOZONE);
            formData.append(
              'GTRTS_PLANTATION_SITE_YEAR',
              row.GTRTS_PLANTATION_SITE_YEAR,
            );
            formData.append('GUSER_TUSER_CELL', row.GUSER_TUSER_CELL);
            formData.append(
              'REG_AVG_TREES_PER_HA_ALL_PLOTS',
              row.REG_AVG_TREES_PER_HA_ALL_PLOTS,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_NURSERY_YEAR',
              row.GTRTS_NUERSERY_RAISING_NURSERY_YEAR,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR',
              row.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221',
              row.GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLINGS_PER_HA',
              row.PLANTING_PLAN_SEEDLINGS_PER_HA,
            );
            formData.append(
              'GTRTS_COMPOST_COMPOST_YEAR_RAW',
              row.GTRTS_COMPOST_COMPOST_YEAR_RAW,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_NURSERY_LOCATION',
              row.NURSERY_NURSERY_SITE_NURSERY_LOCATION,
            );
            formData.append('GSITE_LAND_COV_DESC', row.GSITE_LAND_COV_DESC);
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append(
              'GUSER_GENERATED_NOTE_NAME_13',
              row.GUSER_GENERATED_NOTE_NAME_13,
            );
            formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW);
            formData.append(
              'NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR',
              row.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED',
              row.GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_LEVEL_INUND',
              row.MAGROVE_PLANT_MAN_AFF_LEVEL_INUND,
            );
            formData.append('ALLPATCHES', row.ALLPATCHES);
            formData.append(
              'GENERATED_NOTE_NAME_63',
              row.GENERATED_NOTE_NAME_63,
            );
            formData.append('GUSER_TUSER_EMAIL', row.GUSER_TUSER_EMAIL);
            formData.append('CHECKED_BY', row.CHECKED_BY);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CIR',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CIR,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190,
            );
            formData.append(
              'LOCATION_DATA_TLOCATION',
              row.LOCATION_DATA_TLOCATION,
            );
            formData.append(
              'MAGROVE_PLANT_FACING_ISLAND',
              row.MAGROVE_PLANT_FACING_ISLAND,
            );
            formData.append('GUSER_TUSER', row.GUSER_TUSER);
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23',
              row.LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW',
              row.GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC,
            );
            formData.append(
              'GTRTS_PLANTATION_SITE_YEAR_RAW',
              row.GTRTS_PLANTATION_SITE_YEAR_RAW,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_115',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_115,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_114',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_114,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262',
              row.GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_119',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_119,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_118',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_118,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_117',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_117,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_116',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_116,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK,
            );
            formData.append(
              'GTRTS_COMPOST_GENERATED_NOTE_NAME_247',
              row.GTRTS_COMPOST_GENERATED_NOTE_NAME_247,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION,
            );
            formData.append(
              'GTRTS_COMPOST_COMPOST_YEAR',
              row.GTRTS_COMPOST_COMPOST_YEAR,
            );
            formData.append(
              'GTRTS_PLANTING_GENERATED_NOTE_NAME_231',
              row.GTRTS_PLANTING_GENERATED_NOTE_NAME_231,
            );
            formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION);
            formData.append('CHECKED', row.CHECKED);
            formData.append('GSITE_HIST_OTHER', row.GSITE_HIST_OTHER);
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137',
              row.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137,
            );
            formData.append(
              'INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122',
              row.INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133',
              row.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133,
            );
            formData.append(
              'PLANTING_PLAN_TXT_BUILD1',
              row.PLANTING_PLAN_TXT_BUILD1,
            );
            formData.append(
              'PLANTING_PLAN_TXT_BUILD2',
              row.PLANTING_PLAN_TXT_BUILD2,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252',
              row.GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252,
            );
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE',
              row.LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS,
            );
            formData.append(
              'PLANTING_PLAN_BPLANTING',
              row.PLANTING_PLAN_BPLANTING,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC,
            );
            formData.append(
              'LOCATION_DATA_CA_GENERATED_NOTE_NAME_36',
              row.LOCATION_DATA_CA_GENERATED_NOTE_NAME_36,
            );
            formData.append(
              'INTERVENTION_DETAILS_LLOC_PLANT_AREA',
              row.INTERVENTION_DETAILS_LLOC_PLANT_AREA,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2,
            );
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE,
            );
            formData.append('REG_PLOT_NO', row.REG_PLOT_NO);
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3,
            );
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4,
            );
            formData.append('END', row.END);
            formData.append(
              'PLANTING_PLAN_MAX_SEEDLINGS',
              row.PLANTING_PLAN_MAX_SEEDLINGS,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append(
              'GTRTS_PLANTATION_GENERATED_NOTE_NAME_226',
              row.GTRTS_PLANTATION_GENERATED_NOTE_NAME_226,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212,
            );
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_OTHERS',
              row.INTERVENTION_DETAILS_TLOC_PLANT_OTHERS,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR',
              row.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT,
            );
            formData.append(
              'MAGROVE_PLANT_FACING_DIR',
              row.MAGROVE_PLANT_FACING_DIR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_TPOLYTYPE_NUR',
              row.NURSERY_NURSERY_SITE_TPOLYTYPE_NUR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_PIONEERS_SP',
              row.MAGROVE_PLANT_MAN_AFF_PIONEERS_SP,
            );
            formData.append('TODAY', row.TODAY);
            formData.append(
              'LOCATION_DATA_CA_TLOC_AD_DIVISION',
              row.LOCATION_DATA_CA_TLOC_AD_DIVISION,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW',
              row.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV',
              row.LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV,
            );
            formData.append(
              'LOCATION_DATA_CA_VILLAGE',
              row.LOCATION_DATA_CA_VILLAGE,
            );
            formData.append(
              'MAGROVE_PLANT_WAVE_DIR',
              row.MAGROVE_PLANT_WAVE_DIR,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199,
            );
            formData.append(
              'GSITE_GENERATED_NOTE_NAME_72',
              row.GSITE_GENERATED_NOTE_NAME_72,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE,
            );
            formData.append('START', row.START);
            formData.append(
              'REG_AVG_TREES_ALL_PLOTS',
              row.REG_AVG_TREES_ALL_PLOTS,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append('APPROVED', row.APPROVED);
            formData.append(
              'MAGROVE_PLANT_GENERATED_NOTE_NAME_131',
              row.MAGROVE_PLANT_GENERATED_NOTE_NAME_131,
            );
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_core?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_filling_month_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_FILLING_MONTH WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_filling_month?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_filling_month_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_FILLING_MONTH`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_filling_month?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_E_BLB WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_E_BLB`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const odk_b39_2022_core_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM ODK_B39_2022_CORE WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append('GUSER_USER_CELL', row.GUSER_USER_CELL);
            formData.append('TODAY', row.TODAY);
            formData.append(
              'GUSER_TLOC_ENTER_RANGE',
              row.GUSER_TLOC_ENTER_RANGE,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION);
            formData.append(
              'GUSER_TLOC_FD_DIVISION',
              row.GUSER_TLOC_FD_DIVISION,
            );
            formData.append('GUSER_TLOC_FD_RANGE', row.GUSER_TLOC_FD_RANGE);
            formData.append('GUSER_USER', row.GUSER_USER);
            formData.append('GUSER_TLOC_FD_BEAT', row.GUSER_TLOC_FD_BEAT);
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append('GUSER_DESIGNATION', row.GUSER_DESIGNATION);
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW);
            formData.append('DEVICEID', row.DEVICEID);
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'GUSER_TLOC_FD_BEAT_TXT',
              row.GUSER_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'GUSER_GENERATED_NOTE_NAME_10',
              row.GUSER_GENERATED_NOTE_NAME_10,
            );
            formData.append('START', row.START);
            formData.append('END', row.END);
            formData.append('GUSER_TLOC_ECOZONE', row.GUSER_TLOC_ECOZONE);
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append('GUSER_TLOC_FD_CIR', row.GUSER_TLOC_FD_CIR);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/odk_b39_2022_core?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const odk_b39_2022_core_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM ODK_B39_2022_CORE`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append('GUSER_USER_CELL', row.GUSER_USER_CELL);
            formData.append('TODAY', row.TODAY);
            formData.append(
              'GUSER_TLOC_ENTER_RANGE',
              row.GUSER_TLOC_ENTER_RANGE,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION);
            formData.append(
              'GUSER_TLOC_FD_DIVISION',
              row.GUSER_TLOC_FD_DIVISION,
            );
            formData.append('GUSER_TLOC_FD_RANGE', row.GUSER_TLOC_FD_RANGE);
            formData.append('GUSER_USER', row.GUSER_USER);
            formData.append('GUSER_TLOC_FD_BEAT', row.GUSER_TLOC_FD_BEAT);
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append('GUSER_DESIGNATION', row.GUSER_DESIGNATION);
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW);
            formData.append('DEVICEID', row.DEVICEID);
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'GUSER_TLOC_FD_BEAT_TXT',
              row.GUSER_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'GUSER_GENERATED_NOTE_NAME_10',
              row.GUSER_GENERATED_NOTE_NAME_10,
            );
            formData.append('START', row.START);
            formData.append('END', row.END);
            formData.append('GUSER_TLOC_ECOZONE', row.GUSER_TLOC_ECOZONE);
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append('GUSER_TLOC_FD_CIR', row.GUSER_TLOC_FD_CIR);
          }
          const response = await fetch(
            `${baseApi}/odk_b39_2022_core?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_N_BN WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_N_BN`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);
            }
            const response = await fetch(
              `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_n_bn?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_N_REF WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_N_REF`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);
            }
            const response = await fetch(
              `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_n_ref?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gtrts_planting_planting_month_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_GTRTS_PLANTING_PLANTING_MONTH WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_gtrts_planting_planting_month?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gtrts_planting_planting_month_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_GTRTS_PLANTING_PLANTING_MONTH`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_gtrts_planting_planting_month?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gtrts_vacancy_filling_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_GTRTS_VACANCY_FILLING WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'GENERATED_NOTE_NAME_242',
              row.GENERATED_NOTE_NAME_242,
            );
            formData.append('FILLING_YEAR_RAW', row.FILLING_YEAR_RAW);
            formData.append('FILLING_YEAR', row.FILLING_YEAR);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_gtrts_vacancy_filling?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gtrts_vacancy_filling_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_GTRTS_VACANCY_FILLING`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'GENERATED_NOTE_NAME_242',
              row.GENERATED_NOTE_NAME_242,
            );
            formData.append('FILLING_YEAR_RAW', row.FILLING_YEAR_RAW);
            formData.append('FILLING_YEAR', row.FILLING_YEAR);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_gtrts_vacancy_filling?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gtrts_weeding_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_GTRTS_WEEDING WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'GENERATED_NOTE_NAME_236',
              row.GENERATED_NOTE_NAME_236,
            );
            formData.append('WEEDING_CYCLE', row.WEEDING_CYCLE);
            formData.append('WEEDING_YEAR', row.WEEDING_YEAR);
            formData.append('WEEDING_YEAR_RAW', row.WEEDING_YEAR_RAW);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_gtrts_weeding?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gtrts_weeding_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_GTRTS_WEEDING`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'GENERATED_NOTE_NAME_236',
              row.GENERATED_NOTE_NAME_236,
            );
            formData.append('WEEDING_CYCLE', row.WEEDING_CYCLE);
            formData.append('WEEDING_YEAR', row.WEEDING_YEAR);
            formData.append('WEEDING_YEAR_RAW', row.WEEDING_YEAR_RAW);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_gtrts_weeding?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_overallnotes_ima_bn_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_OVERALLNOTES_IMA_BN WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_overallnotes_ima_bn?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_overallnotes_ima_bn_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_OVERALLNOTES_IMA_BN`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_overallnotes_ima_bn?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_overallnotes_ima_ref_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_OVERALLNOTES_IMA_REF WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_overallnotes_ima_ref?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_overallnotes_ima_ref_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_OVERALLNOTES_IMA_REF`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_overallnotes_ima_ref?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_planting_plan_gplanting_gspp_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_PLANTING_PLAN_GPLANTING_GSPP WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PREF_SOURCE', row.PREF_SOURCE);
            formData.append('PREF_OTHER_SOURCE', row.PREF_OTHER_SOURCE);
            formData.append('PREF_SPECIES', row.PREF_SPECIES);
            formData.append('PREF_REPRO_TYPE', row.PREF_REPRO_TYPE);
            formData.append('PREF_NRSEEDLINGS', row.PREF_NRSEEDLINGS);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_planting_plan_gplanting_gspp?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_planting_plan_gplanting_gspp_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_PLANTING_PLAN_GPLANTING_GSPP`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PREF_SOURCE', row.PREF_SOURCE);
            formData.append('PREF_OTHER_SOURCE', row.PREF_OTHER_SOURCE);
            formData.append('PREF_SPECIES', row.PREF_SPECIES);
            formData.append('PREF_REPRO_TYPE', row.PREF_REPRO_TYPE);
            formData.append('PREF_NRSEEDLINGS', row.PREF_NRSEEDLINGS);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_planting_plan_gplanting_gspp?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_plantngplngplntnggnrsry_spp_repeat_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL192020_PLANTNGPLNGPLNTNGGNRSRY_SPP_REPEAT WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('GNURS_SPP_GSPP_NAME', row.GNURS_SPP_GSPP_NAME);
              formData.append('GNURS_SPP_SPP_NR', row.GNURS_SPP_SPP_NR);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal192020_plantngplngplntnggnrsry_spp_repeat?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_plantngplngplntnggnrsry_spp_repeat_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL192020_PLANTNGPLNGPLNTNGGNRSRY_SPP_REPEAT`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('GNURS_SPP_GSPP_NAME', row.GNURS_SPP_GSPP_NAME);
              formData.append('GNURS_SPP_SPP_NR', row.GNURS_SPP_SPP_NR);
            }
            const response = await fetch(
              `${baseApi}/sufal192020_plantngplngplntnggnrsry_spp_repeat?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_rphotoextra_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_RPHOTOEXTRA WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PPICLOCATIONEXTRA_ALT', row.PPICLOCATIONEXTRA_ALT);
            formData.append('XPIC_BEARING', row.XPIC_BEARING);
            formData.append('PPICLOCATIONEXTRA_LNG', row.PPICLOCATIONEXTRA_LNG);
            formData.append('PPICLOCATIONEXTRA_ACC', row.PPICLOCATIONEXTRA_ACC);
            formData.append('PPICLOCATIONEXTRA_LAT', row.PPICLOCATIONEXTRA_LAT);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_rphotoextra?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_rphotoextra_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_RPHOTOEXTRA`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PPICLOCATIONEXTRA_ALT', row.PPICLOCATIONEXTRA_ALT);
            formData.append('XPIC_BEARING', row.XPIC_BEARING);
            formData.append('PPICLOCATIONEXTRA_LNG', row.PPICLOCATIONEXTRA_LNG);
            formData.append('PPICLOCATIONEXTRA_ACC', row.PPICLOCATIONEXTRA_ACC);
            formData.append('PPICLOCATIONEXTRA_LAT', row.PPICLOCATIONEXTRA_LAT);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_rphotoextra?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_s_site_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_S_SITE WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('TRACE_GPX', row.TRACE_GPX);
            formData.append('POLYLINE', row.POLYLINE);
            formData.append('TOTAREA_HA', row.TOTAREA_HA);
            formData.append('TMAIN_POLYTYPE', row.TMAIN_POLYTYPE);
            formData.append('POLYTRACE', row.POLYTRACE);
            formData.append('TOTAREA_AC', row.TOTAREA_AC);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_s_site?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_s_site_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_S_SITE`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('TRACE_GPX', row.TRACE_GPX);
            formData.append('POLYLINE', row.POLYLINE);
            formData.append('TOTAREA_HA', row.TOTAREA_HA);
            formData.append('TMAIN_POLYTYPE', row.TMAIN_POLYTYPE);
            formData.append('POLYTRACE', row.POLYTRACE);
            formData.append('TOTAREA_AC', row.TOTAREA_AC);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_s_site?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_S_BN WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_S_BN`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);
            }
            const response = await fetch(
              `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_bn?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_S_REF WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_S_REF`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);
            }
            const response = await fetch(
              `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_ref?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _form_info_xform_blb_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _form_info_xform_blb WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_form_info_xform_blb?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _form_info_xform_blb_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info_xform_blb`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/_form_info_xform_blb?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _form_info_manifest_bin_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _form_info_manifest_bin WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_form_info_manifest_bin?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _form_info_manifest_bin_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info_manifest_bin`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);
          }
          const response = await fetch(
            `${baseApi}/_form_info_manifest_bin?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _form_info_manifest_blb_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _form_info_manifest_blb WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_form_info_manifest_blb?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _form_info_manifest_blb_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info_manifest_blb`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/_form_info_manifest_blb?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _form_info_manifest_ref_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _form_info_manifest_ref WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_form_info_manifest_ref?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _form_info_manifest_ref_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info_manifest_ref`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);
          }
          const response = await fetch(
            `${baseApi}/_form_info_manifest_ref?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gregen_reg_cen_to_w_bn_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_W_BN WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gregen_reg_cen_to_w_bn?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gregen_reg_cen_to_w_bn_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_W_BN`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gregen_reg_cen_to_w_bn?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gregen_reg_cen_to_w_ref_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_W_REF WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gregen_reg_cen_to_w_ref?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gregen_reg_cen_to_w_ref_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_W_REF`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gregen_reg_cen_to_w_ref?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const com202021_conslttn_ttndnc_pctre_consultation_notes_blb_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM COM202021_CONSLTTN_TTNDNC_PCTRE_CONSULTATION_NOTES_BLB WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_notes_blb?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const com202021_conslttn_ttndnc_pctre_consultation_notes_blb_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM COM202021_CONSLTTN_TTNDNC_PCTRE_CONSULTATION_NOTES_BLB`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_notes_blb?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_N_REF WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_N_REF`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);
            }
            const response = await fetch(
              `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_ref?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_S_BLB WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_S_BLB`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_s_blb?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_W_BLB WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_W_BLB`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_blb?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_W_BN WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_W_BN`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);
            }
            const response = await fetch(
              `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_bn?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_W_REF WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_W_REF`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);
            }
            const response = await fetch(
              `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_w_ref?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal_13_2021_gregen_spp_regen_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL_13_2021_GREGEN_SPP_REGEN WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('NUM_TREES', row.NUM_TREES);
            formData.append(
              'GENERATED_NOTE_NAME_43',
              row.GENERATED_NOTE_NAME_43,
            );
            formData.append('RSPP_NAME', row.RSPP_NAME);
            formData.append('RSPP_NR_NAT', row.RSPP_NR_NAT);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal_13_2021_gregen_spp_regen?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal_13_2021_gregen_spp_regen_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL_13_2021_GREGEN_SPP_REGEN`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('NUM_TREES', row.NUM_TREES);
            formData.append(
              'GENERATED_NOTE_NAME_43',
              row.GENERATED_NOTE_NAME_43,
            );
            formData.append('RSPP_NAME', row.RSPP_NAME);
            formData.append('RSPP_NR_NAT', row.RSPP_NR_NAT);
          }
          const response = await fetch(
            `${baseApi}/sufal_13_2021_gregen_spp_regen?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal_13_2021_gr_regen_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL_13_2021_GR_REGEN WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'REG_AVG_SEEDLING_PER_HA_PER_PLOT',
              row.REG_AVG_SEEDLING_PER_HA_PER_PLOT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_CROWN_CLOSURE',
              row.GREGEN_GREGEN_PLOT_CROWN_CLOSURE,
            );
            formData.append(
              'REG_AVG_SEEDLING_PER_PLOT',
              row.REG_AVG_SEEDLING_PER_PLOT,
            );
            formData.append(
              'REG_AVG_TREES_PER_HA_PER_PLOT',
              row.REG_AVG_TREES_PER_HA_PER_PLOT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RSITEPOINT_ALT',
              row.GREGEN_GREGEN_PLOT_RSITEPOINT_ALT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST',
              row.GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RSITEPOINT_LNG',
              row.GREGEN_GREGEN_PLOT_RSITEPOINT_LNG,
            );
            formData.append(
              'GENERATED_NOTE_NAME_54',
              row.GENERATED_NOTE_NAME_54,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_REGEN_PLOT_NO',
              row.GREGEN_GREGEN_PLOT_REGEN_PLOT_NO,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RSITEPOINT_LAT',
              row.GREGEN_GREGEN_PLOT_RSITEPOINT_LAT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RSITEPOINT_ACC',
              row.GREGEN_GREGEN_PLOT_RSITEPOINT_ACC,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_28',
              row.GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_28,
            );
            formData.append(
              'GENERATED_NOTE_NAME_51',
              row.GENERATED_NOTE_NAME_51,
            );
            formData.append(
              'REG_AVG_TREES_PER_PLOT',
              row.REG_AVG_TREES_PER_PLOT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RRECORD_HOW',
              row.GREGEN_GREGEN_PLOT_RRECORD_HOW,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH',
              row.GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH,
            );

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal_13_2021_gr_regen?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal_13_2021_gr_regen_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL_13_2021_GR_REGEN`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'REG_AVG_SEEDLING_PER_HA_PER_PLOT',
              row.REG_AVG_SEEDLING_PER_HA_PER_PLOT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_CROWN_CLOSURE',
              row.GREGEN_GREGEN_PLOT_CROWN_CLOSURE,
            );
            formData.append(
              'REG_AVG_SEEDLING_PER_PLOT',
              row.REG_AVG_SEEDLING_PER_PLOT,
            );
            formData.append(
              'REG_AVG_TREES_PER_HA_PER_PLOT',
              row.REG_AVG_TREES_PER_HA_PER_PLOT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RSITEPOINT_ALT',
              row.GREGEN_GREGEN_PLOT_RSITEPOINT_ALT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST',
              row.GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RSITEPOINT_LNG',
              row.GREGEN_GREGEN_PLOT_RSITEPOINT_LNG,
            );
            formData.append(
              'GENERATED_NOTE_NAME_54',
              row.GENERATED_NOTE_NAME_54,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_REGEN_PLOT_NO',
              row.GREGEN_GREGEN_PLOT_REGEN_PLOT_NO,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RSITEPOINT_LAT',
              row.GREGEN_GREGEN_PLOT_RSITEPOINT_LAT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RSITEPOINT_ACC',
              row.GREGEN_GREGEN_PLOT_RSITEPOINT_ACC,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_28',
              row.GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_28,
            );
            formData.append(
              'GENERATED_NOTE_NAME_51',
              row.GENERATED_NOTE_NAME_51,
            );
            formData.append(
              'REG_AVG_TREES_PER_PLOT',
              row.REG_AVG_TREES_PER_PLOT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RRECORD_HOW',
              row.GREGEN_GREGEN_PLOT_RRECORD_HOW,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH',
              row.GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH,
            );
          }
          const response = await fetch(
            `${baseApi}/sufal_13_2021_gr_regen?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _backend_actions_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _backend_actions WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('LAST_REVISION', row.LAST_REVISION);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_backend_actions?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _backend_actions_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _backend_actions`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('LAST_REVISION', row.LAST_REVISION);
          }
          const response = await fetch(
            `${baseApi}/_backend_actions?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _filter_group_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _filter_group WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('FORM_ID', row.FORM_ID);
            formData.append('NAME', row.NAME);
            formData.append('URI_USER', row.URI_USER);
            formData.append('IS_PUBLIC', row.IS_PUBLIC);
            formData.append('INCLUDE_METADATA', row.INCLUDE_METADATA);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_filter_group?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _filter_group_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _filter_group`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('FORM_ID', row.FORM_ID);
            formData.append('NAME', row.NAME);
            formData.append('URI_USER', row.URI_USER);
            formData.append('IS_PUBLIC', row.IS_PUBLIC);
            formData.append('INCLUDE_METADATA', row.INCLUDE_METADATA);
          }
          const response = await fetch(
            `${baseApi}/_filter_group?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _form_data_model_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _form_data_model WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append(
              'URI_SUBMISSION_DATA_MODEL',
              row.URI_SUBMISSION_DATA_MODEL,
            );
            formData.append(
              'PARENT_URI_FORM_DATA_MODEL',
              row.PARENT_URI_FORM_DATA_MODEL,
            );
            formData.append('ORDINAL_NUMBER', row.ORDINAL_NUMBER);
            formData.append('ELEMENT_TYPE', row.ELEMENT_TYPE);
            formData.append('ELEMENT_NAME', row.ELEMENT_NAME);
            formData.append(
              'PERSIST_AS_COLUMN_NAME',
              row.PERSIST_AS_COLUMN_NAME,
            );
            formData.append('PERSIST_AS_TABLE_NAME', row.PERSIST_AS_TABLE_NAME);
            formData.append(
              'PERSIST_AS_SCHEMA_NAME',
              row.PERSIST_AS_SCHEMA_NAME,
            );

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_form_data_model?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _form_data_model_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_data_model`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append(
              'URI_SUBMISSION_DATA_MODEL',
              row.URI_SUBMISSION_DATA_MODEL,
            );
            formData.append(
              'PARENT_URI_FORM_DATA_MODEL',
              row.PARENT_URI_FORM_DATA_MODEL,
            );
            formData.append('ORDINAL_NUMBER', row.ORDINAL_NUMBER);
            formData.append('ELEMENT_TYPE', row.ELEMENT_TYPE);
            formData.append('ELEMENT_NAME', row.ELEMENT_NAME);
            formData.append(
              'PERSIST_AS_COLUMN_NAME',
              row.PERSIST_AS_COLUMN_NAME,
            );
            formData.append('PERSIST_AS_TABLE_NAME', row.PERSIST_AS_TABLE_NAME);
            formData.append(
              'PERSIST_AS_SCHEMA_NAME',
              row.PERSIST_AS_SCHEMA_NAME,
            );
          }
          const response = await fetch(
            `${baseApi}/_form_data_model?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _form_info_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _form_info WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append('FORM_ID', row.FORM_ID);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_form_info?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _form_info_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append('FORM_ID', row.FORM_ID);
          }
          const response = await fetch(`${baseApi}/_form_info?token=${token}`, {
            method: 'POST',
            headers: {
              Accept: 'application/json',
              // Note: 'Content-Type' should NOT be set when using FormData
            },
            body: formData,
          });
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _form_info_fileset_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _form_info_fileset WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'ROOT_ELEMENT_MODEL_VERSION',
              row.ROOT_ELEMENT_MODEL_VERSION,
            );
            formData.append('IS_ENCRYPTED_FORM', row.IS_ENCRYPTED_FORM);
            formData.append('IS_DOWNLOAD_ALLOWED', row.IS_DOWNLOAD_ALLOWED);
            formData.append('LANGUAGE_CODE', row.LANGUAGE_CODE);
            formData.append('FORM_NAME', row.FORM_NAME);
            formData.append('DESCRIPTION', row.DESCRIPTION);
            formData.append('DESCRIPTION_URL', row.DESCRIPTION_URL);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_form_info_fileset?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _form_info_fileset_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info_fileset`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'ROOT_ELEMENT_MODEL_VERSION',
              row.ROOT_ELEMENT_MODEL_VERSION,
            );
            formData.append('IS_ENCRYPTED_FORM', row.IS_ENCRYPTED_FORM);
            formData.append('IS_DOWNLOAD_ALLOWED', row.IS_DOWNLOAD_ALLOWED);
            formData.append('LANGUAGE_CODE', row.LANGUAGE_CODE);
            formData.append('FORM_NAME', row.FORM_NAME);
            formData.append('DESCRIPTION', row.DESCRIPTION);
            formData.append('DESCRIPTION_URL', row.DESCRIPTION_URL);
          }
          const response = await fetch(
            `${baseApi}/_form_info_fileset?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _form_info_submission_association_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _form_info_submission_association WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append(
              'URI_MD5_SUBMISSION_FORM_ID',
              row.URI_MD5_SUBMISSION_FORM_ID,
            );
            formData.append('URI_MD5_FORM_ID', row.URI_MD5_FORM_ID);
            formData.append('SUBMISSION_FORM_ID', row.SUBMISSION_FORM_ID);
            formData.append(
              'IS_PERSISTENCE_MODEL_COMPLETE',
              row.IS_PERSISTENCE_MODEL_COMPLETE,
            );
            formData.append('IS_SUBMISSION_ALLOWED', row.IS_SUBMISSION_ALLOWED);
            formData.append(
              'URI_SUBMISSION_DATA_MODEL',
              row.URI_SUBMISSION_DATA_MODEL,
            );

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_form_info_submission_association?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _form_info_submission_association_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info_submission_association`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append(
              'URI_MD5_SUBMISSION_FORM_ID',
              row.URI_MD5_SUBMISSION_FORM_ID,
            );
            formData.append('URI_MD5_FORM_ID', row.URI_MD5_FORM_ID);
            formData.append('SUBMISSION_FORM_ID', row.SUBMISSION_FORM_ID);
            formData.append(
              'IS_PERSISTENCE_MODEL_COMPLETE',
              row.IS_PERSISTENCE_MODEL_COMPLETE,
            );
            formData.append('IS_SUBMISSION_ALLOWED', row.IS_SUBMISSION_ALLOWED);
            formData.append(
              'URI_SUBMISSION_DATA_MODEL',
              row.URI_SUBMISSION_DATA_MODEL,
            );
          }
          const response = await fetch(
            `${baseApi}/_form_info_submission_association?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _form_info_xform_bin_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _form_info_xform_bin WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_form_info_xform_bin?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _form_info_xform_bin_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info_xform_bin`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);
          }
          const response = await fetch(
            `${baseApi}/_form_info_xform_bin?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _form_info_xform_ref_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _form_info_xform_ref WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_form_info_xform_ref?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _form_info_xform_ref_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_info_xform_ref`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);
          }
          const response = await fetch(
            `${baseApi}/_form_info_xform_ref?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _form_service_cursor_2_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _form_service_cursor_2 WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('URI_MD5_FORM_ID', row.URI_MD5_FORM_ID);
            formData.append('AURI_SERVICE', row.AURI_SERVICE);
            formData.append('EXT_SERVICE_TYPE', row.EXT_SERVICE_TYPE);
            formData.append(
              'EXTERNAL_SERVICE_OPTION',
              row.EXTERNAL_SERVICE_OPTION,
            );
            formData.append(
              'IS_EXTERNAL_SERVICE_PREPARED',
              row.IS_EXTERNAL_SERVICE_PREPARED,
            );
            formData.append('OPERATIONAL_STATUS', row.OPERATIONAL_STATUS);
            formData.append('RETRY_STATUS', row.RETRY_STATUS);
            formData.append(
              'ESTABLISHMENT_DATETIME',
              row.ESTABLISHMENT_DATETIME,
            );
            formData.append('UPLOAD_COMPLETED', row.UPLOAD_COMPLETED);
            formData.append(
              'LAST_UPLOAD_PERSISTENCE_CURSOR',
              row.LAST_UPLOAD_PERSISTENCE_CURSOR,
            );
            formData.append('LAST_UPLOAD_KEY', row.LAST_UPLOAD_KEY);
            formData.append(
              'LAST_STREAMING_PERSISTENCE_CURSOR',
              row.LAST_STREAMING_PERSISTENCE_CURSOR,
            );
            formData.append('LAST_STREAMING_KEY', row.LAST_STREAMING_KEY);
            formData.append('FORM_ID', row.FORM_ID);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_form_service_cursor_2?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _form_service_cursor_2_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _form_service_cursor_2`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('URI_MD5_FORM_ID', row.URI_MD5_FORM_ID);
            formData.append('AURI_SERVICE', row.AURI_SERVICE);
            formData.append('EXT_SERVICE_TYPE', row.EXT_SERVICE_TYPE);
            formData.append(
              'EXTERNAL_SERVICE_OPTION',
              row.EXTERNAL_SERVICE_OPTION,
            );
            formData.append(
              'IS_EXTERNAL_SERVICE_PREPARED',
              row.IS_EXTERNAL_SERVICE_PREPARED,
            );
            formData.append('OPERATIONAL_STATUS', row.OPERATIONAL_STATUS);
            formData.append('RETRY_STATUS', row.RETRY_STATUS);
            formData.append(
              'ESTABLISHMENT_DATETIME',
              row.ESTABLISHMENT_DATETIME,
            );
            formData.append('UPLOAD_COMPLETED', row.UPLOAD_COMPLETED);
            formData.append(
              'LAST_UPLOAD_PERSISTENCE_CURSOR',
              row.LAST_UPLOAD_PERSISTENCE_CURSOR,
            );
            formData.append('LAST_UPLOAD_KEY', row.LAST_UPLOAD_KEY);
            formData.append(
              'LAST_STREAMING_PERSISTENCE_CURSOR',
              row.LAST_STREAMING_PERSISTENCE_CURSOR,
            );
            formData.append('LAST_STREAMING_KEY', row.LAST_STREAMING_KEY);
            formData.append('FORM_ID', row.FORM_ID);
          }
          const response = await fetch(
            `${baseApi}/_form_service_cursor_2?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _granted_authority_hierarchy_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _granted_authority_hierarchy WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append(
              'DOMINATING_GRANTED_AUTHORITY',
              row.DOMINATING_GRANTED_AUTHORITY,
            );
            formData.append(
              'SUBORDINATE_GRANTED_AUTHORITY',
              row.SUBORDINATE_GRANTED_AUTHORITY,
            );

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_granted_authority_hierarchy?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _granted_authority_hierarchy_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _granted_authority_hierarchy`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append(
              'DOMINATING_GRANTED_AUTHORITY',
              row.DOMINATING_GRANTED_AUTHORITY,
            );
            formData.append(
              'SUBORDINATE_GRANTED_AUTHORITY',
              row.SUBORDINATE_GRANTED_AUTHORITY,
            );
          }
          const response = await fetch(
            `${baseApi}/_granted_authority_hierarchy?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _misc_tasks_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _misc_tasks WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('FORM_ID', row.FORM_ID);
            formData.append('REQUESTING_USER', row.REQUESTING_USER);
            formData.append('REQUEST_DATE', row.REQUEST_DATE);
            formData.append('REQUEST_PARAMETERS', row.REQUEST_PARAMETERS);
            formData.append('LAST_ACTIVITY_DATE', row.LAST_ACTIVITY_DATE);
            formData.append('ATTEMPT_COUNT', row.ATTEMPT_COUNT);
            formData.append('STATUS', row.STATUS);
            formData.append('TASK_TYPE', row.TASK_TYPE);
            formData.append('COMPLETION_DATE', row.COMPLETION_DATE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_misc_tasks?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _misc_tasks_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _misc_tasks`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('FORM_ID', row.FORM_ID);
            formData.append('REQUESTING_USER', row.REQUESTING_USER);
            formData.append('REQUEST_DATE', row.REQUEST_DATE);
            formData.append('REQUEST_PARAMETERS', row.REQUEST_PARAMETERS);
            formData.append('LAST_ACTIVITY_DATE', row.LAST_ACTIVITY_DATE);
            formData.append('ATTEMPT_COUNT', row.ATTEMPT_COUNT);
            formData.append('STATUS', row.STATUS);
            formData.append('TASK_TYPE', row.TASK_TYPE);
            formData.append('COMPLETION_DATE', row.COMPLETION_DATE);
          }
          const response = await fetch(
            `${baseApi}/_misc_tasks?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _persistent_result_file_bin_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _persistent_result_file_bin WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_persistent_result_file_bin?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _persistent_result_file_bin_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _persistent_result_file_bin`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);
          }
          const response = await fetch(
            `${baseApi}/_persistent_result_file_bin?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _persistent_result_file_blb_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _persistent_result_file_blb WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_persistent_result_file_blb?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _persistent_result_file_blb_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _persistent_result_file_blb`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/_persistent_result_file_blb?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _persistent_result_file_ref_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _persistent_result_file_ref WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_persistent_result_file_ref?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _persistent_result_file_ref_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _persistent_result_file_ref`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);
          }
          const response = await fetch(
            `${baseApi}/_persistent_result_file_ref?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _persistent_results_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _persistent_results WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('REQUESTING_USER', row.REQUESTING_USER);
            formData.append('REQUEST_DATE', row.REQUEST_DATE);
            formData.append('REQUEST_PARAMETERS', row.REQUEST_PARAMETERS);
            formData.append('LAST_RETRY_DATE', row.LAST_RETRY_DATE);
            formData.append('ATTEMPT_COUNT', row.ATTEMPT_COUNT);
            formData.append('STATUS', row.STATUS);
            formData.append('RESULT_TYPE', row.RESULT_TYPE);
            formData.append('COMPLETION_DATE', row.COMPLETION_DATE);
            formData.append('FORM_ID_KEY', row.FORM_ID_KEY);
            formData.append('URI_FILTER_GROUP', row.URI_FILTER_GROUP);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_persistent_results?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _persistent_results_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _persistent_results`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('REQUESTING_USER', row.REQUESTING_USER);
            formData.append('REQUEST_DATE', row.REQUEST_DATE);
            formData.append('REQUEST_PARAMETERS', row.REQUEST_PARAMETERS);
            formData.append('LAST_RETRY_DATE', row.LAST_RETRY_DATE);
            formData.append('ATTEMPT_COUNT', row.ATTEMPT_COUNT);
            formData.append('STATUS', row.STATUS);
            formData.append('RESULT_TYPE', row.RESULT_TYPE);
            formData.append('COMPLETION_DATE', row.COMPLETION_DATE);
            formData.append('FORM_ID_KEY', row.FORM_ID_KEY);
            formData.append('URI_FILTER_GROUP', row.URI_FILTER_GROUP);
          }
          const response = await fetch(
            `${baseApi}/_persistent_results?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _registered_users_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _registered_users WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('LOCAL_USERNAME', row.LOCAL_USERNAME);
            formData.append('OPENID_EMAIL', row.OPENID_EMAIL);
            formData.append('FULL_NAME', row.FULL_NAME);
            formData.append('BASIC_AUTH_PASSWORD', row.BASIC_AUTH_PASSWORD);
            formData.append('BASIC_AUTH_SALT', row.BASIC_AUTH_SALT);
            formData.append('DIGEST_AUTH_PASSWORD', row.DIGEST_AUTH_PASSWORD);
            formData.append('IS_REMOVED', row.IS_REMOVED);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_registered_users?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _registered_users_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _registered_users`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('LOCAL_USERNAME', row.LOCAL_USERNAME);
            formData.append('OPENID_EMAIL', row.OPENID_EMAIL);
            formData.append('FULL_NAME', row.FULL_NAME);
            formData.append('BASIC_AUTH_PASSWORD', row.BASIC_AUTH_PASSWORD);
            formData.append('BASIC_AUTH_SALT', row.BASIC_AUTH_SALT);
            formData.append('DIGEST_AUTH_PASSWORD', row.DIGEST_AUTH_PASSWORD);
            formData.append('IS_REMOVED', row.IS_REMOVED);
          }
          const response = await fetch(
            `${baseApi}/_registered_users?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _security_revisions_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _security_revisions WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('LAST_REVISION', row.LAST_REVISION);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_security_revisions?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _security_revisions_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _security_revisions`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('LAST_REVISION', row.LAST_REVISION);
          }
          const response = await fetch(
            `${baseApi}/_security_revisions?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _server_preferences_properties_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _server_preferences_properties WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('KEY', row.KEY);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_server_preferences_properties?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _server_preferences_properties_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _server_preferences_properties`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('KEY', row.KEY);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/_server_preferences_properties?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _task_lock_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _task_lock WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('FORM_ID', row.FORM_ID);
            formData.append('TASK_TYPE', row.TASK_TYPE);
            formData.append('EXPIRATION_DATETIME', row.EXPIRATION_DATETIME);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_task_lock?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _task_lock_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _task_lock`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('FORM_ID', row.FORM_ID);
            formData.append('TASK_TYPE', row.TASK_TYPE);
            formData.append('EXPIRATION_DATETIME', row.EXPIRATION_DATETIME);
          }
          const response = await fetch(`${baseApi}/_task_lock?token=${token}`, {
            method: 'POST',
            headers: {
              Accept: 'application/json',
              // Note: 'Content-Type' should NOT be set when using FormData
            },
            body: formData,
          });
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const com202021_core_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM COM202021_CORE WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BEAT_TXT',
              row.LOCATION_DATA_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE',
              row.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE,
            );
            formData.append(
              'CONSULTATION_GENERATED_NOTE_NAME_11',
              row.CONSULTATION_GENERATED_NOTE_NAME_11,
            );
            formData.append(
              'CONSULTATION_USER_CELL',
              row.CONSULTATION_USER_CELL,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_CHAR',
              row.LOCATION_DATA_TLOC_FD_CHAR,
            );
            formData.append(
              'CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47',
              row.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47,
            );
            formData.append(
              'CONSULTATION_CONSULTATION_PLACE',
              row.CONSULTATION_CONSULTATION_PLACE,
            );
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION',
              row.CONSULTATION_DCONSULTATION,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ENTER_DIV',
              row.LOCATION_DATA_TLOC_ENTER_DIV,
            );
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_22',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_22,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_RANGE',
              row.LOCATION_DATA_TLOC_FD_RANGE,
            );
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_24',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_24,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_START',
              row.CONSULTATION_DCONSULTATION_START,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BEAT',
              row.LOCATION_DATA_TLOC_FD_BEAT,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1,
            );
            formData.append(
              'CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES',
              row.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_END_RAW',
              row.CONSULTATION_DCONSULTATION_END_RAW,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ECOZONE',
              row.LOCATION_DATA_TLOC_ECOZONE,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BLOCK',
              row.LOCATION_DATA_TLOC_FD_BLOCK,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_END',
              row.CONSULTATION_DCONSULTATION_END,
            );
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'LOCATION_DATA_TLOC_FD_DIVISION',
              row.LOCATION_DATA_TLOC_FD_DIVISION,
            );
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE',
              row.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE,
            );
            formData.append('END', row.END);
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79',
              row.CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append(
              'CONSULTATION_THOC_UNION',
              row.CONSULTATION_THOC_UNION,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ENTER_RANGE',
              row.LOCATION_DATA_TLOC_ENTER_RANGE,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'CONSULTATION_USER_EMAIL',
              row.CONSULTATION_USER_EMAIL,
            );
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append('NOTES', row.NOTES);
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_START_RAW',
              row.CONSULTATION_DCONSULTATION_START_RAW,
            );
            formData.append(
              'CONSULTATION_USER_NAME',
              row.CONSULTATION_USER_NAME,
            );
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO,
            );
            formData.append('TODAY', row.TODAY);
            formData.append(
              'LOCATION_DATA_TLOC_FD_CIR',
              row.LOCATION_DATA_TLOC_FD_CIR,
            );
            formData.append('START', row.START);
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT,
            );
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/com202021_core?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const com202021_core_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM COM202021_CORE`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BEAT_TXT',
              row.LOCATION_DATA_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE',
              row.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_MALE,
            );
            formData.append(
              'CONSULTATION_GENERATED_NOTE_NAME_11',
              row.CONSULTATION_GENERATED_NOTE_NAME_11,
            );
            formData.append(
              'CONSULTATION_USER_CELL',
              row.CONSULTATION_USER_CELL,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_CHAR',
              row.LOCATION_DATA_TLOC_FD_CHAR,
            );
            formData.append(
              'CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47',
              row.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_GENERATED_NOTE_NAME_47,
            );
            formData.append(
              'CONSULTATION_CONSULTATION_PLACE',
              row.CONSULTATION_CONSULTATION_PLACE,
            );
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_HIGH_BIODIVERSITY,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION',
              row.CONSULTATION_DCONSULTATION,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ENTER_DIV',
              row.LOCATION_DATA_TLOC_ENTER_DIV,
            );
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_22',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_22,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_RANGE',
              row.LOCATION_DATA_TLOC_FD_RANGE,
            );
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_24',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_24,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_COMMUNITY_RESTORATION,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_START',
              row.CONSULTATION_DCONSULTATION_START,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BEAT',
              row.LOCATION_DATA_TLOC_FD_BEAT,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_8,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_5,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_6,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_3,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_4,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_1,
            );
            formData.append(
              'CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES',
              row.CONSULTATION_ISSUES_LIVELIHOODS_AIGAS_CONSERVATION_ACTIVITIES,
            );
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_SEI_2,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_END_RAW',
              row.CONSULTATION_DCONSULTATION_END_RAW,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ECOZONE',
              row.LOCATION_DATA_TLOC_ECOZONE,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_GENERATED_NOTE_NAME_51,
            );
            formData.append(
              'LOCATION_DATA_TLOC_FD_BLOCK',
              row.LOCATION_DATA_TLOC_FD_BLOCK,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_END',
              row.CONSULTATION_DCONSULTATION_END,
            );
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'LOCATION_DATA_TLOC_FD_DIVISION',
              row.LOCATION_DATA_TLOC_FD_DIVISION,
            );
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE',
              row.CONSULTATION_ATTENDENCE_PICTURE_PARTICIPANTS_FEMALE,
            );
            formData.append('END', row.END);
            formData.append(
              'CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79',
              row.CONSULTATION_ATTENDENCE_PICTURE_GENERATED_NOTE_NAME_79,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append(
              'CONSULTATION_THOC_UNION',
              row.CONSULTATION_THOC_UNION,
            );
            formData.append(
              'LOCATION_DATA_TLOC_ENTER_RANGE',
              row.LOCATION_DATA_TLOC_ENTER_RANGE,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'CONSULTATION_USER_EMAIL',
              row.CONSULTATION_USER_EMAIL,
            );
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append('NOTES', row.NOTES);
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_BIODIVERSITY_LOSS,
            );
            formData.append(
              'CONSULTATION_DCONSULTATION_START_RAW',
              row.CONSULTATION_DCONSULTATION_START_RAW,
            );
            formData.append(
              'CONSULTATION_USER_NAME',
              row.CONSULTATION_USER_NAME,
            );
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_RESTORED_BIO,
            );
            formData.append('TODAY', row.TODAY);
            formData.append(
              'LOCATION_DATA_TLOC_FD_CIR',
              row.LOCATION_DATA_TLOC_FD_CIR,
            );
            formData.append('START', row.START);
            formData.append(
              'CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41',
              row.CONSLTTON_ISSUES_BIODIVERSITY_CONSRVTON_GENERATED_NOTE_NAME_41,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append(
              'SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69',
              row.SOCIAL_ENVIRONMENTAL_IMPACTS_GENERATED_NOTE_NAME_69,
            );
            formData.append(
              'CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT',
              row.CONSULTATION_ISSUES_FOREST_RESTORATION_JOINT_EFFORT,
            );
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);
          }
          const response = await fetch(
            `${baseApi}/com202021_core?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const gener43_2021_core_audit_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM GENER43_2021_CORE_AUDIT WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('id', row.id);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA,
            );
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_LNG',
              row.GUSER_TLOC_FD_BEAT_POINT_LNG,
            );
            formData.append('FBLI_FA_TLOC_FD_BEAT', row.FBLI_FA_TLOC_FD_BEAT);
            formData.append(
              'LOGISTICS3_COUNTRYBOAT_CONDITION',
              row.LOGISTICS3_COUNTRYBOAT_CONDITION,
            );
            formData.append(
              'LOGISTICS4_GFIREARMS_303RIFLE',
              row.LOGISTICS4_GFIREARMS_303RIFLE,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA,
            );
            formData.append(
              'LOGISTICS4_OTHERS_WATER_TRA',
              row.LOGISTICS4_OTHERS_WATER_TRA,
            );
            formData.append('BO_INFO_BO_CELL', row.BO_INFO_BO_CELL);
            formData.append(
              'LOGISTICS3_TVESSEL_CONDITION',
              row.LOGISTICS3_TVESSEL_CONDITION,
            );
            formData.append('RO_INFO_RO_CELL', row.RO_INFO_RO_CELL);
            formData.append(
              'LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL',
              row.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL,
            );
            formData.append(
              'LOGISTICS3_TVESSEL_AVAIL',
              row.LOGISTICS3_TVESSEL_AVAIL,
            );
            formData.append(
              'FBLI_FA_TLOC_FD_BEAT_TXT',
              row.FBLI_FA_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'LOGISTICS3_SPEEDBOAT_CONDITION',
              row.LOGISTICS3_SPEEDBOAT_CONDITION,
            );
            formData.append(
              'FBLI_FA_TLOC_FD_DIVISION',
              row.FBLI_FA_TLOC_FD_DIVISION,
            );
            formData.append(
              'LAND_TRANSPORTS_BICYCLE_AVAIL',
              row.LAND_TRANSPORTS_BICYCLE_AVAIL,
            );
            formData.append(
              'LOGISTICS3_OTHERS_WATER_TRA_CONDITION',
              row.LOGISTICS3_OTHERS_WATER_TRA_CONDITION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append('GUSER_USER', row.GUSER_USER);
            formData.append('RO_INFO_NAME_OF_RO', row.RO_INFO_NAME_OF_RO);
            formData.append('FBLI_FA_TLOC_FD_BLOCK', row.FBLI_FA_TLOC_FD_BLOCK);
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'LAND_TRANSPORTS_MOTORB_CONDITION',
              row.LAND_TRANSPORTS_MOTORB_CONDITION,
            );
            formData.append(
              'FBLI_GENERATED_NOTE_NAME_18',
              row.FBLI_GENERATED_NOTE_NAME_18,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74',
              row.LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74,
            );
            formData.append(
              'LOGISTICS4_CHINESERIFLE_CONDITION',
              row.LOGISTICS4_CHINESERIFLE_CONDITION,
            );
            formData.append(
              'LOGISTICS3_SPEEDBOAT_AVAIL',
              row.LOGISTICS3_SPEEDBOAT_AVAIL,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA,
            );
            formData.append(
              'LOGISTICS4_GENERATED_NOTE_NAME_152',
              row.LOGISTICS4_GENERATED_NOTE_NAME_152,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA,
            );
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW);
            formData.append(
              'LAND_TRANSPORTS_BICYCLE_CONDITION',
              row.LAND_TRANSPORTS_BICYCLE_CONDITION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA,
            );
            formData.append(
              'GUSER_GENERATED_NOTE_NAME_10',
              row.GUSER_GENERATED_NOTE_NAME_10,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA,
            );
            formData.append('BO_INFO_BO_NID', row.BO_INFO_BO_NID);
            formData.append(
              'LAND_TRANSPORTS_GBI_CYCLE',
              row.LAND_TRANSPORTS_GBI_CYCLE,
            );
            formData.append(
              'LAND_TRANSPORTS_OTHERS_LAND_TRA',
              row.LAND_TRANSPORTS_OTHERS_LAND_TRA,
            );
            formData.append(
              'LOGISTICS3_GCOUNTRY_BOAT',
              row.LOGISTICS3_GCOUNTRY_BOAT,
            );
            formData.append(
              'LOGISTICS4_GFIREARMS_SLR',
              row.LOGISTICS4_GFIREARMS_SLR,
            );
            formData.append('FBLI_FA_TLOC_FD_CIR', row.FBLI_FA_TLOC_FD_CIR);
            formData.append(
              'LAND_TRANSPORTS_MOTORB_AVAIL',
              row.LAND_TRANSPORTS_MOTORB_AVAIL,
            );
            formData.append(
              'LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION',
              row.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION,
            );
            formData.append(
              'RO_INFO_RO_JOINING_DATE',
              row.RO_INFO_RO_JOINING_DATE,
            );
            formData.append(
              'LOGISTICS4_OTHERS_WATER_TRA_CONDITION',
              row.LOGISTICS4_OTHERS_WATER_TRA_CONDITION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA,
            );
            formData.append('RO_INFO_RO_RANK', row.RO_INFO_RO_RANK);
            formData.append(
              'LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL',
              row.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA,
            );
            formData.append(
              'BO_INFO_BO_JOINING_DATE',
              row.BO_INFO_BO_JOINING_DATE,
            );
            formData.append('GUSER_USER_CELL', row.GUSER_USER_CELL);
            formData.append('RO_INFO_RO_NID', row.RO_INFO_RO_NID);
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_ALT',
              row.GUSER_TLOC_FD_BEAT_POINT_ALT,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA,
            );
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_LAT',
              row.GUSER_TLOC_FD_BEAT_POINT_LAT,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA,
            );
            formData.append(
              'LOGISTICS4_RIFLE303_CONDITION',
              row.LOGISTICS4_RIFLE303_CONDITION,
            );
            formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION);
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'BO_INFO_GENERATED_NOTE_NAME_106',
              row.BO_INFO_GENERATED_NOTE_NAME_106,
            );
            formData.append(
              'GENERATED_NOTE_NAME_81',
              row.GENERATED_NOTE_NAME_81,
            );
            formData.append(
              'RO_INFO_GENERATED_NOTE_NAME_97',
              row.RO_INFO_GENERATED_NOTE_NAME_97,
            );
            formData.append(
              'FBLI_FA_GENERATED_NOTE_NAME_21',
              row.FBLI_FA_GENERATED_NOTE_NAME_21,
            );
            formData.append(
              'LAND_TRANSPORTS_GENERATED_NOTE_NAME_125',
              row.LAND_TRANSPORTS_GENERATED_NOTE_NAME_125,
            );
            formData.append('GUSER_BEAT_ADDRESS', row.GUSER_BEAT_ADDRESS);
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA,
            );
            formData.append(
              'BO_INFO_BO_JOINING_DATE_RAW',
              row.BO_INFO_BO_JOINING_DATE_RAW,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA,
            );
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_ACC',
              row.GUSER_TLOC_FD_BEAT_POINT_ACC,
            );
            formData.append(
              'LOGISTICS3_COUNTRYBOAT_AVAIL',
              row.LOGISTICS3_COUNTRYBOAT_AVAIL,
            );
            formData.append(
              'FBLI_CA_TLOC_AD_DISTRICT',
              row.FBLI_CA_TLOC_AD_DISTRICT,
            );
            formData.append('BO_INFO_NAME_OF_BO', row.BO_INFO_NAME_OF_BO);
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53',
              row.LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA,
            );
            formData.append(
              'LOGISTICS3_OTHERS_WATER_TRA',
              row.LOGISTICS3_OTHERS_WATER_TRA,
            );
            formData.append('FBLI_TLOC_ECOZONE', row.FBLI_TLOC_ECOZONE);
            formData.append('BO_INFO_BO_RANK', row.BO_INFO_BO_RANK);
            formData.append(
              'LOGISTICS4_SLR_CONDITION',
              row.LOGISTICS4_SLR_CONDITION,
            );
            formData.append('END', row.END);
            formData.append('FBLI_FA_TLOC_FD_RANGE', row.FBLI_FA_TLOC_FD_RANGE);
            formData.append(
              'RO_INFO_RO_JOINING_DATE_RAW',
              row.RO_INFO_RO_JOINING_DATE_RAW,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append('LOGISTICS3_TRAWLER', row.LOGISTICS3_TRAWLER);
            formData.append(
              'LOGISTICS4_GFIREARMS_SHORTGUN',
              row.LOGISTICS4_GFIREARMS_SHORTGUN,
            );
            formData.append(
              'LOGISTICS4_SHORTGUN_CONDITION',
              row.LOGISTICS4_SHORTGUN_CONDITION,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS',
              row.LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS,
            );
            formData.append('BO_INFO_BO_MAIL', row.BO_INFO_BO_MAIL);
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append(
              'LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL',
              row.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL,
            );
            formData.append(
              'FBLI_CA_GENERATED_NOTE_NAME_33',
              row.FBLI_CA_GENERATED_NOTE_NAME_33,
            );
            formData.append(
              'FBLI_CA_TLOC_AD_DIVISION',
              row.FBLI_CA_TLOC_AD_DIVISION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65,
            );
            formData.append(
              'LOGISTICS4_OTHERS_WATER_TRA_AVAIL',
              row.LOGISTICS4_OTHERS_WATER_TRA_AVAIL,
            );
            formData.append(
              'LOGISTICS3_GSPEED_BOAT',
              row.LOGISTICS3_GSPEED_BOAT,
            );
            formData.append(
              'LOGISTICS4_TFIREARMS_303RIFLE_AVAIL',
              row.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL,
            );
            formData.append(
              'LOGISTICS4_GFIREARMS_CHINESERIFLE',
              row.LOGISTICS4_GFIREARMS_CHINESERIFLE,
            );
            formData.append('TODAY', row.TODAY);
            formData.append('FBLI_FA_TLOC_FD_CHAR', row.FBLI_FA_TLOC_FD_CHAR);
            formData.append(
              'LAND_TRANSPORTS_GMOTORBIKE',
              row.LAND_TRANSPORTS_GMOTORBIKE,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA,
            );
            formData.append(
              'FBLI_FA_TLOC_ENTER_RANGE',
              row.FBLI_FA_TLOC_ENTER_RANGE,
            );
            formData.append(
              'LAND_STATISTICS_AREA_SUM',
              row.LAND_STATISTICS_AREA_SUM,
            );
            formData.append('RO_INFO_RO_MAIL', row.RO_INFO_RO_MAIL);
            formData.append(
              'GENERATED_NOTE_NAME_123',
              row.GENERATED_NOTE_NAME_123,
            );
            formData.append('START', row.START);
            formData.append('FBLI_CA_UNION', row.FBLI_CA_UNION);
            formData.append(
              'FBLI_FA_TLOC_ENTER_DIV',
              row.FBLI_FA_TLOC_ENTER_DIV,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append(
              'GENERATED_NOTE_NAME_94',
              row.GENERATED_NOTE_NAME_94,
            );
            formData.append(
              'LOGISTICS3_OTHERS_WATER_TRA_AVAIL',
              row.LOGISTICS3_OTHERS_WATER_TRA_AVAIL,
            );
            formData.append(
              'GENERATED_NOTE_NAME_95',
              row.GENERATED_NOTE_NAME_95,
            );
            formData.append(
              'LOGISTICS4_TFIREARMS_SLR_AVAIL',
              row.LOGISTICS4_TFIREARMS_SLR_AVAIL,
            );
            formData.append(
              'LOGISTICS3_GENERATED_NOTE_NAME_137',
              row.LOGISTICS3_GENERATED_NOTE_NAME_137,
            );
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);
            formData.append('UserName', row.UserName);
            formData.append('AdditionTime', row.AdditionTime);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/gener43_2021_core_audit?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const gener43_2021_core_audit_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM GENER43_2021_CORE_AUDIT`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('id', row.id);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA,
            );
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_LNG',
              row.GUSER_TLOC_FD_BEAT_POINT_LNG,
            );
            formData.append('FBLI_FA_TLOC_FD_BEAT', row.FBLI_FA_TLOC_FD_BEAT);
            formData.append(
              'LOGISTICS3_COUNTRYBOAT_CONDITION',
              row.LOGISTICS3_COUNTRYBOAT_CONDITION,
            );
            formData.append(
              'LOGISTICS4_GFIREARMS_303RIFLE',
              row.LOGISTICS4_GFIREARMS_303RIFLE,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA,
            );
            formData.append(
              'LOGISTICS4_OTHERS_WATER_TRA',
              row.LOGISTICS4_OTHERS_WATER_TRA,
            );
            formData.append('BO_INFO_BO_CELL', row.BO_INFO_BO_CELL);
            formData.append(
              'LOGISTICS3_TVESSEL_CONDITION',
              row.LOGISTICS3_TVESSEL_CONDITION,
            );
            formData.append('RO_INFO_RO_CELL', row.RO_INFO_RO_CELL);
            formData.append(
              'LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL',
              row.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL,
            );
            formData.append(
              'LOGISTICS3_TVESSEL_AVAIL',
              row.LOGISTICS3_TVESSEL_AVAIL,
            );
            formData.append(
              'FBLI_FA_TLOC_FD_BEAT_TXT',
              row.FBLI_FA_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'LOGISTICS3_SPEEDBOAT_CONDITION',
              row.LOGISTICS3_SPEEDBOAT_CONDITION,
            );
            formData.append(
              'FBLI_FA_TLOC_FD_DIVISION',
              row.FBLI_FA_TLOC_FD_DIVISION,
            );
            formData.append(
              'LAND_TRANSPORTS_BICYCLE_AVAIL',
              row.LAND_TRANSPORTS_BICYCLE_AVAIL,
            );
            formData.append(
              'LOGISTICS3_OTHERS_WATER_TRA_CONDITION',
              row.LOGISTICS3_OTHERS_WATER_TRA_CONDITION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append('GUSER_USER', row.GUSER_USER);
            formData.append('RO_INFO_NAME_OF_RO', row.RO_INFO_NAME_OF_RO);
            formData.append('FBLI_FA_TLOC_FD_BLOCK', row.FBLI_FA_TLOC_FD_BLOCK);
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'LAND_TRANSPORTS_MOTORB_CONDITION',
              row.LAND_TRANSPORTS_MOTORB_CONDITION,
            );
            formData.append(
              'FBLI_GENERATED_NOTE_NAME_18',
              row.FBLI_GENERATED_NOTE_NAME_18,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74',
              row.LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74,
            );
            formData.append(
              'LOGISTICS4_CHINESERIFLE_CONDITION',
              row.LOGISTICS4_CHINESERIFLE_CONDITION,
            );
            formData.append(
              'LOGISTICS3_SPEEDBOAT_AVAIL',
              row.LOGISTICS3_SPEEDBOAT_AVAIL,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA,
            );
            formData.append(
              'LOGISTICS4_GENERATED_NOTE_NAME_152',
              row.LOGISTICS4_GENERATED_NOTE_NAME_152,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA,
            );
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW);
            formData.append(
              'LAND_TRANSPORTS_BICYCLE_CONDITION',
              row.LAND_TRANSPORTS_BICYCLE_CONDITION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA,
            );
            formData.append(
              'GUSER_GENERATED_NOTE_NAME_10',
              row.GUSER_GENERATED_NOTE_NAME_10,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA,
            );
            formData.append('BO_INFO_BO_NID', row.BO_INFO_BO_NID);
            formData.append(
              'LAND_TRANSPORTS_GBI_CYCLE',
              row.LAND_TRANSPORTS_GBI_CYCLE,
            );
            formData.append(
              'LAND_TRANSPORTS_OTHERS_LAND_TRA',
              row.LAND_TRANSPORTS_OTHERS_LAND_TRA,
            );
            formData.append(
              'LOGISTICS3_GCOUNTRY_BOAT',
              row.LOGISTICS3_GCOUNTRY_BOAT,
            );
            formData.append(
              'LOGISTICS4_GFIREARMS_SLR',
              row.LOGISTICS4_GFIREARMS_SLR,
            );
            formData.append('FBLI_FA_TLOC_FD_CIR', row.FBLI_FA_TLOC_FD_CIR);
            formData.append(
              'LAND_TRANSPORTS_MOTORB_AVAIL',
              row.LAND_TRANSPORTS_MOTORB_AVAIL,
            );
            formData.append(
              'LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION',
              row.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION,
            );
            formData.append(
              'RO_INFO_RO_JOINING_DATE',
              row.RO_INFO_RO_JOINING_DATE,
            );
            formData.append(
              'LOGISTICS4_OTHERS_WATER_TRA_CONDITION',
              row.LOGISTICS4_OTHERS_WATER_TRA_CONDITION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA,
            );
            formData.append('RO_INFO_RO_RANK', row.RO_INFO_RO_RANK);
            formData.append(
              'LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL',
              row.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA,
            );
            formData.append(
              'BO_INFO_BO_JOINING_DATE',
              row.BO_INFO_BO_JOINING_DATE,
            );
            formData.append('GUSER_USER_CELL', row.GUSER_USER_CELL);
            formData.append('RO_INFO_RO_NID', row.RO_INFO_RO_NID);
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_ALT',
              row.GUSER_TLOC_FD_BEAT_POINT_ALT,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA,
            );
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_LAT',
              row.GUSER_TLOC_FD_BEAT_POINT_LAT,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA,
            );
            formData.append(
              'LOGISTICS4_RIFLE303_CONDITION',
              row.LOGISTICS4_RIFLE303_CONDITION,
            );
            formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION);
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'BO_INFO_GENERATED_NOTE_NAME_106',
              row.BO_INFO_GENERATED_NOTE_NAME_106,
            );
            formData.append(
              'GENERATED_NOTE_NAME_81',
              row.GENERATED_NOTE_NAME_81,
            );
            formData.append(
              'RO_INFO_GENERATED_NOTE_NAME_97',
              row.RO_INFO_GENERATED_NOTE_NAME_97,
            );
            formData.append(
              'FBLI_FA_GENERATED_NOTE_NAME_21',
              row.FBLI_FA_GENERATED_NOTE_NAME_21,
            );
            formData.append(
              'LAND_TRANSPORTS_GENERATED_NOTE_NAME_125',
              row.LAND_TRANSPORTS_GENERATED_NOTE_NAME_125,
            );
            formData.append('GUSER_BEAT_ADDRESS', row.GUSER_BEAT_ADDRESS);
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA,
            );
            formData.append(
              'BO_INFO_BO_JOINING_DATE_RAW',
              row.BO_INFO_BO_JOINING_DATE_RAW,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA,
            );
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_ACC',
              row.GUSER_TLOC_FD_BEAT_POINT_ACC,
            );
            formData.append(
              'LOGISTICS3_COUNTRYBOAT_AVAIL',
              row.LOGISTICS3_COUNTRYBOAT_AVAIL,
            );
            formData.append(
              'FBLI_CA_TLOC_AD_DISTRICT',
              row.FBLI_CA_TLOC_AD_DISTRICT,
            );
            formData.append('BO_INFO_NAME_OF_BO', row.BO_INFO_NAME_OF_BO);
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53',
              row.LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA,
            );
            formData.append(
              'LOGISTICS3_OTHERS_WATER_TRA',
              row.LOGISTICS3_OTHERS_WATER_TRA,
            );
            formData.append('FBLI_TLOC_ECOZONE', row.FBLI_TLOC_ECOZONE);
            formData.append('BO_INFO_BO_RANK', row.BO_INFO_BO_RANK);
            formData.append(
              'LOGISTICS4_SLR_CONDITION',
              row.LOGISTICS4_SLR_CONDITION,
            );
            formData.append('END', row.END);
            formData.append('FBLI_FA_TLOC_FD_RANGE', row.FBLI_FA_TLOC_FD_RANGE);
            formData.append(
              'RO_INFO_RO_JOINING_DATE_RAW',
              row.RO_INFO_RO_JOINING_DATE_RAW,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append('LOGISTICS3_TRAWLER', row.LOGISTICS3_TRAWLER);
            formData.append(
              'LOGISTICS4_GFIREARMS_SHORTGUN',
              row.LOGISTICS4_GFIREARMS_SHORTGUN,
            );
            formData.append(
              'LOGISTICS4_SHORTGUN_CONDITION',
              row.LOGISTICS4_SHORTGUN_CONDITION,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS',
              row.LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS,
            );
            formData.append('BO_INFO_BO_MAIL', row.BO_INFO_BO_MAIL);
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append(
              'LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL',
              row.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL,
            );
            formData.append(
              'FBLI_CA_GENERATED_NOTE_NAME_33',
              row.FBLI_CA_GENERATED_NOTE_NAME_33,
            );
            formData.append(
              'FBLI_CA_TLOC_AD_DIVISION',
              row.FBLI_CA_TLOC_AD_DIVISION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65,
            );
            formData.append(
              'LOGISTICS4_OTHERS_WATER_TRA_AVAIL',
              row.LOGISTICS4_OTHERS_WATER_TRA_AVAIL,
            );
            formData.append(
              'LOGISTICS3_GSPEED_BOAT',
              row.LOGISTICS3_GSPEED_BOAT,
            );
            formData.append(
              'LOGISTICS4_TFIREARMS_303RIFLE_AVAIL',
              row.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL,
            );
            formData.append(
              'LOGISTICS4_GFIREARMS_CHINESERIFLE',
              row.LOGISTICS4_GFIREARMS_CHINESERIFLE,
            );
            formData.append('TODAY', row.TODAY);
            formData.append('FBLI_FA_TLOC_FD_CHAR', row.FBLI_FA_TLOC_FD_CHAR);
            formData.append(
              'LAND_TRANSPORTS_GMOTORBIKE',
              row.LAND_TRANSPORTS_GMOTORBIKE,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA,
            );
            formData.append(
              'FBLI_FA_TLOC_ENTER_RANGE',
              row.FBLI_FA_TLOC_ENTER_RANGE,
            );
            formData.append(
              'LAND_STATISTICS_AREA_SUM',
              row.LAND_STATISTICS_AREA_SUM,
            );
            formData.append('RO_INFO_RO_MAIL', row.RO_INFO_RO_MAIL);
            formData.append(
              'GENERATED_NOTE_NAME_123',
              row.GENERATED_NOTE_NAME_123,
            );
            formData.append('START', row.START);
            formData.append('FBLI_CA_UNION', row.FBLI_CA_UNION);
            formData.append(
              'FBLI_FA_TLOC_ENTER_DIV',
              row.FBLI_FA_TLOC_ENTER_DIV,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append(
              'GENERATED_NOTE_NAME_94',
              row.GENERATED_NOTE_NAME_94,
            );
            formData.append(
              'LOGISTICS3_OTHERS_WATER_TRA_AVAIL',
              row.LOGISTICS3_OTHERS_WATER_TRA_AVAIL,
            );
            formData.append(
              'GENERATED_NOTE_NAME_95',
              row.GENERATED_NOTE_NAME_95,
            );
            formData.append(
              'LOGISTICS4_TFIREARMS_SLR_AVAIL',
              row.LOGISTICS4_TFIREARMS_SLR_AVAIL,
            );
            formData.append(
              'LOGISTICS3_GENERATED_NOTE_NAME_137',
              row.LOGISTICS3_GENERATED_NOTE_NAME_137,
            );
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);
            formData.append('UserName', row.UserName);
            formData.append('AdditionTime', row.AdditionTime);
          }
          const response = await fetch(
            `${baseApi}/gener43_2021_core_audit?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const gener43_2021_core_test_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM GENER43_2021_CORE_TEST WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA,
            );
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_LNG',
              row.GUSER_TLOC_FD_BEAT_POINT_LNG,
            );
            formData.append('FBLI_FA_TLOC_FD_BEAT', row.FBLI_FA_TLOC_FD_BEAT);
            formData.append(
              'LOGISTICS3_COUNTRYBOAT_CONDITION',
              row.LOGISTICS3_COUNTRYBOAT_CONDITION,
            );
            formData.append(
              'LOGISTICS4_GFIREARMS_303RIFLE',
              row.LOGISTICS4_GFIREARMS_303RIFLE,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA,
            );
            formData.append(
              'LOGISTICS4_OTHERS_WATER_TRA',
              row.LOGISTICS4_OTHERS_WATER_TRA,
            );
            formData.append('BO_INFO_BO_CELL', row.BO_INFO_BO_CELL);
            formData.append(
              'LOGISTICS3_TVESSEL_CONDITION',
              row.LOGISTICS3_TVESSEL_CONDITION,
            );
            formData.append('RO_INFO_RO_CELL', row.RO_INFO_RO_CELL);
            formData.append(
              'LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL',
              row.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL,
            );
            formData.append(
              'LOGISTICS3_TVESSEL_AVAIL',
              row.LOGISTICS3_TVESSEL_AVAIL,
            );
            formData.append(
              'FBLI_FA_TLOC_FD_BEAT_TXT',
              row.FBLI_FA_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'LOGISTICS3_SPEEDBOAT_CONDITION',
              row.LOGISTICS3_SPEEDBOAT_CONDITION,
            );
            formData.append(
              'FBLI_FA_TLOC_FD_DIVISION',
              row.FBLI_FA_TLOC_FD_DIVISION,
            );
            formData.append(
              'LAND_TRANSPORTS_BICYCLE_AVAIL',
              row.LAND_TRANSPORTS_BICYCLE_AVAIL,
            );
            formData.append(
              'LOGISTICS3_OTHERS_WATER_TRA_CONDITION',
              row.LOGISTICS3_OTHERS_WATER_TRA_CONDITION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append('GUSER_USER', row.GUSER_USER);
            formData.append('RO_INFO_NAME_OF_RO', row.RO_INFO_NAME_OF_RO);
            formData.append('FBLI_FA_TLOC_FD_BLOCK', row.FBLI_FA_TLOC_FD_BLOCK);
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'LAND_TRANSPORTS_MOTORB_CONDITION',
              row.LAND_TRANSPORTS_MOTORB_CONDITION,
            );
            formData.append(
              'FBLI_GENERATED_NOTE_NAME_18',
              row.FBLI_GENERATED_NOTE_NAME_18,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74',
              row.LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74,
            );
            formData.append(
              'LOGISTICS4_CHINESERIFLE_CONDITION',
              row.LOGISTICS4_CHINESERIFLE_CONDITION,
            );
            formData.append(
              'LOGISTICS3_SPEEDBOAT_AVAIL',
              row.LOGISTICS3_SPEEDBOAT_AVAIL,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA,
            );
            formData.append(
              'LOGISTICS4_GENERATED_NOTE_NAME_152',
              row.LOGISTICS4_GENERATED_NOTE_NAME_152,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA,
            );
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW);
            formData.append(
              'LAND_TRANSPORTS_BICYCLE_CONDITION',
              row.LAND_TRANSPORTS_BICYCLE_CONDITION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA,
            );
            formData.append(
              'GUSER_GENERATED_NOTE_NAME_10',
              row.GUSER_GENERATED_NOTE_NAME_10,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA,
            );
            formData.append('BO_INFO_BO_NID', row.BO_INFO_BO_NID);
            formData.append(
              'LAND_TRANSPORTS_GBI_CYCLE',
              row.LAND_TRANSPORTS_GBI_CYCLE,
            );
            formData.append(
              'LAND_TRANSPORTS_OTHERS_LAND_TRA',
              row.LAND_TRANSPORTS_OTHERS_LAND_TRA,
            );
            formData.append(
              'LOGISTICS3_GCOUNTRY_BOAT',
              row.LOGISTICS3_GCOUNTRY_BOAT,
            );
            formData.append(
              'LOGISTICS4_GFIREARMS_SLR',
              row.LOGISTICS4_GFIREARMS_SLR,
            );
            formData.append('FBLI_FA_TLOC_FD_CIR', row.FBLI_FA_TLOC_FD_CIR);
            formData.append(
              'LAND_TRANSPORTS_MOTORB_AVAIL',
              row.LAND_TRANSPORTS_MOTORB_AVAIL,
            );
            formData.append(
              'LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION',
              row.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION,
            );
            formData.append(
              'RO_INFO_RO_JOINING_DATE',
              row.RO_INFO_RO_JOINING_DATE,
            );
            formData.append(
              'LOGISTICS4_OTHERS_WATER_TRA_CONDITION',
              row.LOGISTICS4_OTHERS_WATER_TRA_CONDITION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA,
            );
            formData.append('RO_INFO_RO_RANK', row.RO_INFO_RO_RANK);
            formData.append(
              'LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL',
              row.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA,
            );
            formData.append(
              'BO_INFO_BO_JOINING_DATE',
              row.BO_INFO_BO_JOINING_DATE,
            );
            formData.append('GUSER_USER_CELL', row.GUSER_USER_CELL);
            formData.append('RO_INFO_RO_NID', row.RO_INFO_RO_NID);
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_ALT',
              row.GUSER_TLOC_FD_BEAT_POINT_ALT,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA,
            );
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_LAT',
              row.GUSER_TLOC_FD_BEAT_POINT_LAT,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA,
            );
            formData.append(
              'LOGISTICS4_RIFLE303_CONDITION',
              row.LOGISTICS4_RIFLE303_CONDITION,
            );
            formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION);
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'BO_INFO_GENERATED_NOTE_NAME_106',
              row.BO_INFO_GENERATED_NOTE_NAME_106,
            );
            formData.append(
              'GENERATED_NOTE_NAME_81',
              row.GENERATED_NOTE_NAME_81,
            );
            formData.append(
              'RO_INFO_GENERATED_NOTE_NAME_97',
              row.RO_INFO_GENERATED_NOTE_NAME_97,
            );
            formData.append(
              'FBLI_FA_GENERATED_NOTE_NAME_21',
              row.FBLI_FA_GENERATED_NOTE_NAME_21,
            );
            formData.append(
              'LAND_TRANSPORTS_GENERATED_NOTE_NAME_125',
              row.LAND_TRANSPORTS_GENERATED_NOTE_NAME_125,
            );
            formData.append('GUSER_BEAT_ADDRESS', row.GUSER_BEAT_ADDRESS);
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA,
            );
            formData.append(
              'BO_INFO_BO_JOINING_DATE_RAW',
              row.BO_INFO_BO_JOINING_DATE_RAW,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA,
            );
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_ACC',
              row.GUSER_TLOC_FD_BEAT_POINT_ACC,
            );
            formData.append(
              'LOGISTICS3_COUNTRYBOAT_AVAIL',
              row.LOGISTICS3_COUNTRYBOAT_AVAIL,
            );
            formData.append(
              'FBLI_CA_TLOC_AD_DISTRICT',
              row.FBLI_CA_TLOC_AD_DISTRICT,
            );
            formData.append('BO_INFO_NAME_OF_BO', row.BO_INFO_NAME_OF_BO);
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53',
              row.LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA,
            );
            formData.append(
              'LOGISTICS3_OTHERS_WATER_TRA',
              row.LOGISTICS3_OTHERS_WATER_TRA,
            );
            formData.append('FBLI_TLOC_ECOZONE', row.FBLI_TLOC_ECOZONE);
            formData.append('BO_INFO_BO_RANK', row.BO_INFO_BO_RANK);
            formData.append(
              'LOGISTICS4_SLR_CONDITION',
              row.LOGISTICS4_SLR_CONDITION,
            );
            formData.append('END', row.END);
            formData.append('FBLI_FA_TLOC_FD_RANGE', row.FBLI_FA_TLOC_FD_RANGE);
            formData.append(
              'RO_INFO_RO_JOINING_DATE_RAW',
              row.RO_INFO_RO_JOINING_DATE_RAW,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append('LOGISTICS3_TRAWLER', row.LOGISTICS3_TRAWLER);
            formData.append(
              'LOGISTICS4_GFIREARMS_SHORTGUN',
              row.LOGISTICS4_GFIREARMS_SHORTGUN,
            );
            formData.append(
              'LOGISTICS4_SHORTGUN_CONDITION',
              row.LOGISTICS4_SHORTGUN_CONDITION,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS',
              row.LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS,
            );
            formData.append('BO_INFO_BO_MAIL', row.BO_INFO_BO_MAIL);
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append(
              'LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL',
              row.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL,
            );
            formData.append(
              'FBLI_CA_GENERATED_NOTE_NAME_33',
              row.FBLI_CA_GENERATED_NOTE_NAME_33,
            );
            formData.append(
              'FBLI_CA_TLOC_AD_DIVISION',
              row.FBLI_CA_TLOC_AD_DIVISION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65,
            );
            formData.append(
              'LOGISTICS4_OTHERS_WATER_TRA_AVAIL',
              row.LOGISTICS4_OTHERS_WATER_TRA_AVAIL,
            );
            formData.append(
              'LOGISTICS3_GSPEED_BOAT',
              row.LOGISTICS3_GSPEED_BOAT,
            );
            formData.append(
              'LOGISTICS4_TFIREARMS_303RIFLE_AVAIL',
              row.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL,
            );
            formData.append(
              'LOGISTICS4_GFIREARMS_CHINESERIFLE',
              row.LOGISTICS4_GFIREARMS_CHINESERIFLE,
            );
            formData.append('TODAY', row.TODAY);
            formData.append('FBLI_FA_TLOC_FD_CHAR', row.FBLI_FA_TLOC_FD_CHAR);
            formData.append(
              'LAND_TRANSPORTS_GMOTORBIKE',
              row.LAND_TRANSPORTS_GMOTORBIKE,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA,
            );
            formData.append(
              'FBLI_FA_TLOC_ENTER_RANGE',
              row.FBLI_FA_TLOC_ENTER_RANGE,
            );
            formData.append(
              'LAND_STATISTICS_AREA_SUM',
              row.LAND_STATISTICS_AREA_SUM,
            );
            formData.append('RO_INFO_RO_MAIL', row.RO_INFO_RO_MAIL);
            formData.append(
              'GENERATED_NOTE_NAME_123',
              row.GENERATED_NOTE_NAME_123,
            );
            formData.append('START', row.START);
            formData.append('FBLI_CA_UNION', row.FBLI_CA_UNION);
            formData.append(
              'FBLI_FA_TLOC_ENTER_DIV',
              row.FBLI_FA_TLOC_ENTER_DIV,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append(
              'GENERATED_NOTE_NAME_94',
              row.GENERATED_NOTE_NAME_94,
            );
            formData.append(
              'LOGISTICS3_OTHERS_WATER_TRA_AVAIL',
              row.LOGISTICS3_OTHERS_WATER_TRA_AVAIL,
            );
            formData.append(
              'GENERATED_NOTE_NAME_95',
              row.GENERATED_NOTE_NAME_95,
            );
            formData.append(
              'LOGISTICS4_TFIREARMS_SLR_AVAIL',
              row.LOGISTICS4_TFIREARMS_SLR_AVAIL,
            );
            formData.append(
              'LOGISTICS3_GENERATED_NOTE_NAME_137',
              row.LOGISTICS3_GENERATED_NOTE_NAME_137,
            );
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/gener43_2021_core_test?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const gener43_2021_core_test_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM GENER43_2021_CORE_TEST`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_OTHER_PLANT_HA,
            );
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_LNG',
              row.GUSER_TLOC_FD_BEAT_POINT_LNG,
            );
            formData.append('FBLI_FA_TLOC_FD_BEAT', row.FBLI_FA_TLOC_FD_BEAT);
            formData.append(
              'LOGISTICS3_COUNTRYBOAT_CONDITION',
              row.LOGISTICS3_COUNTRYBOAT_CONDITION,
            );
            formData.append(
              'LOGISTICS4_GFIREARMS_303RIFLE',
              row.LOGISTICS4_GFIREARMS_303RIFLE,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_OTHER_PA_AREA_HA,
            );
            formData.append(
              'LOGISTICS4_OTHERS_WATER_TRA',
              row.LOGISTICS4_OTHERS_WATER_TRA,
            );
            formData.append('BO_INFO_BO_CELL', row.BO_INFO_BO_CELL);
            formData.append(
              'LOGISTICS3_TVESSEL_CONDITION',
              row.LOGISTICS3_TVESSEL_CONDITION,
            );
            formData.append('RO_INFO_RO_CELL', row.RO_INFO_RO_CELL);
            formData.append(
              'LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL',
              row.LOGISTICS4_TFIREARMS_CHINESERIFLE_AVAIL,
            );
            formData.append(
              'LOGISTICS3_TVESSEL_AVAIL',
              row.LOGISTICS3_TVESSEL_AVAIL,
            );
            formData.append(
              'FBLI_FA_TLOC_FD_BEAT_TXT',
              row.FBLI_FA_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'LOGISTICS3_SPEEDBOAT_CONDITION',
              row.LOGISTICS3_SPEEDBOAT_CONDITION,
            );
            formData.append(
              'FBLI_FA_TLOC_FD_DIVISION',
              row.FBLI_FA_TLOC_FD_DIVISION,
            );
            formData.append(
              'LAND_TRANSPORTS_BICYCLE_AVAIL',
              row.LAND_TRANSPORTS_BICYCLE_AVAIL,
            );
            formData.append(
              'LOGISTICS3_OTHERS_WATER_TRA_CONDITION',
              row.LOGISTICS3_OTHERS_WATER_TRA_CONDITION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_VESTED_FOREST_HA,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append('GUSER_USER', row.GUSER_USER);
            formData.append('RO_INFO_NAME_OF_RO', row.RO_INFO_NAME_OF_RO);
            formData.append('FBLI_FA_TLOC_FD_BLOCK', row.FBLI_FA_TLOC_FD_BLOCK);
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'LAND_TRANSPORTS_MOTORB_CONDITION',
              row.LAND_TRANSPORTS_MOTORB_CONDITION,
            );
            formData.append(
              'FBLI_GENERATED_NOTE_NAME_18',
              row.FBLI_GENERATED_NOTE_NAME_18,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74',
              row.LAND_STATISTICS_BEAT_LAND_BIO_GENERATED_NOTE_NAME_74,
            );
            formData.append(
              'LOGISTICS4_CHINESERIFLE_CONDITION',
              row.LOGISTICS4_CHINESERIFLE_CONDITION,
            );
            formData.append(
              'LOGISTICS3_SPEEDBOAT_AVAIL',
              row.LOGISTICS3_SPEEDBOAT_AVAIL,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_WS_HA,
            );
            formData.append(
              'LOGISTICS4_GENERATED_NOTE_NAME_152',
              row.LOGISTICS4_GENERATED_NOTE_NAME_152,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_NON_PP_HA,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_6_HA,
            );
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW);
            formData.append(
              'LAND_TRANSPORTS_BICYCLE_CONDITION',
              row.LAND_TRANSPORTS_BICYCLE_CONDITION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_SOCIAL_ACCRETED_HA,
            );
            formData.append(
              'GUSER_GENERATED_NOTE_NAME_10',
              row.GUSER_GENERATED_NOTE_NAME_10,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_OTHER_FORESTAREA_HA,
            );
            formData.append('BO_INFO_BO_NID', row.BO_INFO_BO_NID);
            formData.append(
              'LAND_TRANSPORTS_GBI_CYCLE',
              row.LAND_TRANSPORTS_GBI_CYCLE,
            );
            formData.append(
              'LAND_TRANSPORTS_OTHERS_LAND_TRA',
              row.LAND_TRANSPORTS_OTHERS_LAND_TRA,
            );
            formData.append(
              'LOGISTICS3_GCOUNTRY_BOAT',
              row.LOGISTICS3_GCOUNTRY_BOAT,
            );
            formData.append(
              'LOGISTICS4_GFIREARMS_SLR',
              row.LOGISTICS4_GFIREARMS_SLR,
            );
            formData.append('FBLI_FA_TLOC_FD_CIR', row.FBLI_FA_TLOC_FD_CIR);
            formData.append(
              'LAND_TRANSPORTS_MOTORB_AVAIL',
              row.LAND_TRANSPORTS_MOTORB_AVAIL,
            );
            formData.append(
              'LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION',
              row.LAND_TRANSPORTS_OTHERS_LAND_TRA_CONDITION,
            );
            formData.append(
              'RO_INFO_RO_JOINING_DATE',
              row.RO_INFO_RO_JOINING_DATE,
            );
            formData.append(
              'LOGISTICS4_OTHERS_WATER_TRA_CONDITION',
              row.LOGISTICS4_OTHERS_WATER_TRA_CONDITION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA',
              row.LAND_STATISTICS_BEAT_LAND_BIO_NATURAL_TO_DC_HA,
            );
            formData.append('RO_INFO_RO_RANK', row.RO_INFO_RO_RANK);
            formData.append(
              'LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL',
              row.LAND_TRANSPORTS_OTHERS_LAND_TRA_AVAIL,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SAFARIPARK_HA,
            );
            formData.append(
              'BO_INFO_BO_JOINING_DATE',
              row.BO_INFO_BO_JOINING_DATE,
            );
            formData.append('GUSER_USER_CELL', row.GUSER_USER_CELL);
            formData.append('RO_INFO_RO_NID', row.RO_INFO_RO_NID);
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_ALT',
              row.GUSER_TLOC_FD_BEAT_POINT_ALT,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_SECTION_4_HA,
            );
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_LAT',
              row.GUSER_TLOC_FD_BEAT_POINT_LAT,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_SBCA_HA,
            );
            formData.append(
              'LOGISTICS4_RIFLE303_CONDITION',
              row.LOGISTICS4_RIFLE303_CONDITION,
            );
            formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION);
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'BO_INFO_GENERATED_NOTE_NAME_106',
              row.BO_INFO_GENERATED_NOTE_NAME_106,
            );
            formData.append(
              'GENERATED_NOTE_NAME_81',
              row.GENERATED_NOTE_NAME_81,
            );
            formData.append(
              'RO_INFO_GENERATED_NOTE_NAME_97',
              row.RO_INFO_GENERATED_NOTE_NAME_97,
            );
            formData.append(
              'FBLI_FA_GENERATED_NOTE_NAME_21',
              row.FBLI_FA_GENERATED_NOTE_NAME_21,
            );
            formData.append(
              'LAND_TRANSPORTS_GENERATED_NOTE_NAME_125',
              row.LAND_TRANSPORTS_GENERATED_NOTE_NAME_125,
            );
            formData.append('GUSER_BEAT_ADDRESS', row.GUSER_BEAT_ADDRESS);
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_AQUIRED_FOREST_HA,
            );
            formData.append(
              'BO_INFO_BO_JOINING_DATE_RAW',
              row.BO_INFO_BO_JOINING_DATE_RAW,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_NP_HA,
            );
            formData.append(
              'GUSER_TLOC_FD_BEAT_POINT_ACC',
              row.GUSER_TLOC_FD_BEAT_POINT_ACC,
            );
            formData.append(
              'LOGISTICS3_COUNTRYBOAT_AVAIL',
              row.LOGISTICS3_COUNTRYBOAT_AVAIL,
            );
            formData.append(
              'FBLI_CA_TLOC_AD_DISTRICT',
              row.FBLI_CA_TLOC_AD_DISTRICT,
            );
            formData.append('BO_INFO_NAME_OF_BO', row.BO_INFO_NAME_OF_BO);
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53',
              row.LAND_STATISTICS_BEAT_LAND_INFO_GENERATED_NOTE_NAME_53,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_RESERVED_FOREST_HA,
            );
            formData.append(
              'LOGISTICS3_OTHERS_WATER_TRA',
              row.LOGISTICS3_OTHERS_WATER_TRA,
            );
            formData.append('FBLI_TLOC_ECOZONE', row.FBLI_TLOC_ECOZONE);
            formData.append('BO_INFO_BO_RANK', row.BO_INFO_BO_RANK);
            formData.append(
              'LOGISTICS4_SLR_CONDITION',
              row.LOGISTICS4_SLR_CONDITION,
            );
            formData.append('END', row.END);
            formData.append('FBLI_FA_TLOC_FD_RANGE', row.FBLI_FA_TLOC_FD_RANGE);
            formData.append(
              'RO_INFO_RO_JOINING_DATE_RAW',
              row.RO_INFO_RO_JOINING_DATE_RAW,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append('LOGISTICS3_TRAWLER', row.LOGISTICS3_TRAWLER);
            formData.append(
              'LOGISTICS4_GFIREARMS_SHORTGUN',
              row.LOGISTICS4_GFIREARMS_SHORTGUN,
            );
            formData.append(
              'LOGISTICS4_SHORTGUN_CONDITION',
              row.LOGISTICS4_SHORTGUN_CONDITION,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS',
              row.LAND_STATISTICS_TOTAL_LEGAL_LAND_STATS,
            );
            formData.append('BO_INFO_BO_MAIL', row.BO_INFO_BO_MAIL);
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append(
              'LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL',
              row.LOGISTICS4_TFIREARMS_SHORTGUN_AVAIL,
            );
            formData.append(
              'FBLI_CA_GENERATED_NOTE_NAME_33',
              row.FBLI_CA_GENERATED_NOTE_NAME_33,
            );
            formData.append(
              'FBLI_CA_TLOC_AD_DIVISION',
              row.FBLI_CA_TLOC_AD_DIVISION,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_GENERATED_NOTE_NAME_65,
            );
            formData.append(
              'LOGISTICS4_OTHERS_WATER_TRA_AVAIL',
              row.LOGISTICS4_OTHERS_WATER_TRA_AVAIL,
            );
            formData.append(
              'LOGISTICS3_GSPEED_BOAT',
              row.LOGISTICS3_GSPEED_BOAT,
            );
            formData.append(
              'LOGISTICS4_TFIREARMS_303RIFLE_AVAIL',
              row.LOGISTICS4_TFIREARMS_303RIFLE_AVAIL,
            );
            formData.append(
              'LOGISTICS4_GFIREARMS_CHINESERIFLE',
              row.LOGISTICS4_GFIREARMS_CHINESERIFLE,
            );
            formData.append('TODAY', row.TODAY);
            formData.append('FBLI_FA_TLOC_FD_CHAR', row.FBLI_FA_TLOC_FD_CHAR);
            formData.append(
              'LAND_TRANSPORTS_GMOTORBIKE',
              row.LAND_TRANSPORTS_GMOTORBIKE,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA',
              row.LAND_STATISTICS_BEAT_LAND_INFO_PROTECTED_FOREST_HA,
            );
            formData.append(
              'LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA',
              row.LAND_STATISTICS_BEAT_MGT_APPROACH_PA_ECOPARK_HA,
            );
            formData.append(
              'FBLI_FA_TLOC_ENTER_RANGE',
              row.FBLI_FA_TLOC_ENTER_RANGE,
            );
            formData.append(
              'LAND_STATISTICS_AREA_SUM',
              row.LAND_STATISTICS_AREA_SUM,
            );
            formData.append('RO_INFO_RO_MAIL', row.RO_INFO_RO_MAIL);
            formData.append(
              'GENERATED_NOTE_NAME_123',
              row.GENERATED_NOTE_NAME_123,
            );
            formData.append('START', row.START);
            formData.append('FBLI_CA_UNION', row.FBLI_CA_UNION);
            formData.append(
              'FBLI_FA_TLOC_ENTER_DIV',
              row.FBLI_FA_TLOC_ENTER_DIV,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append(
              'GENERATED_NOTE_NAME_94',
              row.GENERATED_NOTE_NAME_94,
            );
            formData.append(
              'LOGISTICS3_OTHERS_WATER_TRA_AVAIL',
              row.LOGISTICS3_OTHERS_WATER_TRA_AVAIL,
            );
            formData.append(
              'GENERATED_NOTE_NAME_95',
              row.GENERATED_NOTE_NAME_95,
            );
            formData.append(
              'LOGISTICS4_TFIREARMS_SLR_AVAIL',
              row.LOGISTICS4_TFIREARMS_SLR_AVAIL,
            );
            formData.append(
              'LOGISTICS3_GENERATED_NOTE_NAME_137',
              row.LOGISTICS3_GENERATED_NOTE_NAME_137,
            );
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);
          }
          const response = await fetch(
            `${baseApi}/gener43_2021_core_test?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const gener43_2021_fbli_m_sh1_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM GENER43_2021_FBLI_M_SH1 WHERE _PARENT_AURI =? OR _TOP_LEVEL_AURI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent: for add new one', row);

            // Create FormData instance and append data
            const formData = new FormData();
            (row._URI != '' ) ? formData.append('_URI[]', row._URI) : '';
            (row._CREATOR_URI_USER != '' ) ? formData.append('_CREATOR_URI_USER[]', row._CREATOR_URI_USER) : '';
            (row._CREATION_DATE != '' ) ? formData.append('_CREATION_DATE[]', row._CREATION_DATE) : '';
            (row._LAST_UPDATE_URI_USER != '' ) ? formData.append('_LAST_UPDATE_URI_USER[]', row._LAST_UPDATE_URI_USER) : '';
            (row._LAST_UPDATE_DATE != '' ) ? formData.append('_LAST_UPDATE_DATE[]', row._LAST_UPDATE_DATE) : '';
            (row._PARENT_AURI != '' ) ? formData.append('_PARENT_AURI[]', row._PARENT_AURI) : '';
            (row._ORDINAL_NUMBER != '' ) ? formData.append('_ORDINAL_NUMBER[]', row._ORDINAL_NUMBER) : '';
            (row._TOP_LEVEL_AURI != '' ) ? formData.append('_TOP_LEVEL_AURI[]', row._TOP_LEVEL_AURI) : '';
            (row.MOUZA1 != '' ) ? formData.append('MOUZA1[]', row.MOUZA1) : '';
            (row.SURVEY_TYPES != '' ) ? formData.append('SURVEY_TYPES[]', row.SURVEY_TYPES) : '';
            (row.OTHERS_S_TYPES != '' ) ? formData.append('OTHERS_S_TYPES[]', row.OTHERS_S_TYPES) : '';
            (row.SHEET1 != '' ) ? formData.append('SHEET1[]', row.SHEET1) : '';
            (row.GENERATED_NOTE_NAME_40 != '' ) ? formData.append('GENERATED_NOTE_NAME_40[]', row.GENERATED_NOTE_NAME_40) : '';

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/gener43_2021_fbli_m_sh1_create?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:for fbli', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const gener43_2021_fbli_m_sh1_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM GENER43_2021_FBLI_M_SH1 WHERE _PARENT_AURI =? OR _TOP_LEVEL_AURI = ?`, // Query the aspects table
        [uri],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
		  const formData = new FormData();
            
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            console.log(row)
            data.push(row);
                  (row._URI != '' ) ? formData.append('_URI[]', row._URI) : '';
            (row._CREATOR_URI_USER != '' ) ? formData.append('_CREATOR_URI_USER[]', row._CREATOR_URI_USER) : '';
            (row._CREATION_DATE != '' ) ? formData.append('_CREATION_DATE[]', row._CREATION_DATE) : '';
            (row._LAST_UPDATE_URI_USER != '' ) ? formData.append('_LAST_UPDATE_URI_USER[]', row._LAST_UPDATE_URI_USER) : '';
            (row._LAST_UPDATE_DATE != '' ) ? formData.append('_LAST_UPDATE_DATE[]', row._LAST_UPDATE_DATE) : '';
            (row._PARENT_AURI != '' ) ? formData.append('_PARENT_AURI[]', row._PARENT_AURI) : '';
            (row._ORDINAL_NUMBER != '' ) ? formData.append('_ORDINAL_NUMBER[]', row._ORDINAL_NUMBER) : '';
            (row._TOP_LEVEL_AURI != '' ) ? formData.append('_TOP_LEVEL_AURI[]', row._TOP_LEVEL_AURI) : '';
            (row.MOUZA1 != '' ) ? formData.append('MOUZA1[]', row.MOUZA1) : '';
            (row.SURVEY_TYPES != '' ) ? formData.append('SURVEY_TYPES[]', row.SURVEY_TYPES) : '';
            (row.OTHERS_S_TYPES != '' ) ? formData.append('OTHERS_S_TYPES[]', row.OTHERS_S_TYPES) : '';
            (row.SHEET1 != '' ) ? formData.append('SHEET1[]', row.SHEET1) : '';
            (row.GENERATED_NOTE_NAME_40 != '' ) ? formData.append('GENERATED_NOTE_NAME_40[]', row.GENERATED_NOTE_NAME_40) : '';

          }
		  const response = await fetch(
			`${baseApi}/gener43_2021_fbli_m_sh1_create?token=${token}`,
			{
			  method: 'POST',
			  headers: {
				Accept: 'application/json',
				// Note: 'Content-Type' should NOT be set when using FormData
			  },
			  body: formData,
			},
		  );
          resolve(data);
          console.log(response)
          console.log(response.status)
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const com202021_stakeholder_engagement_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM COM202021_STAKEHOLDER_ENGAGEMENT WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('OCCUPATION_COM', row.OCCUPATION_COM);
            formData.append('OCCUPATION_OTHER', row.OCCUPATION_OTHER);
            formData.append(
              'FD_SUPPORTS_COMMUNITY_1',
              row.FD_SUPPORTS_COMMUNITY_1,
            );
            formData.append(
              'GENERATED_NOTE_NAME_62',
              row.GENERATED_NOTE_NAME_62,
            );
            formData.append(
              'COMMUNITY_SUPPORTS_FOREST_1',
              row.COMMUNITY_SUPPORTS_FOREST_1,
            );

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/com202021_stakeholder_engagement?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const com202021_stakeholder_engagement_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM COM202021_STAKEHOLDER_ENGAGEMENT`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('OCCUPATION_COM', row.OCCUPATION_COM);
            formData.append('OCCUPATION_OTHER', row.OCCUPATION_OTHER);
            formData.append(
              'FD_SUPPORTS_COMMUNITY_1',
              row.FD_SUPPORTS_COMMUNITY_1,
            );
            formData.append(
              'GENERATED_NOTE_NAME_62',
              row.GENERATED_NOTE_NAME_62,
            );
            formData.append(
              'COMMUNITY_SUPPORTS_FOREST_1',
              row.COMMUNITY_SUPPORTS_FOREST_1,
            );
          }
          const response = await fetch(
            `${baseApi}/com202021_stakeholder_engagement?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_E_BN WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_E_BN`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);
            }
            const response = await fetch(
              `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_e_bn?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_core_audit_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_CORE_AUDIT WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('id', row.id);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173',
              row.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173,
            );
            formData.append(
              'REG_AVG_SEEDLING_ALL_PLOTS',
              row.REG_AVG_SEEDLING_ALL_PLOTS,
            );
            formData.append(
              'PLANTING_PLAN_GRPSTOCKS_NTE_1',
              row.PLANTING_PLAN_GRPSTOCKS_NTE_1,
            );
            formData.append(
              'PLANTING_PLAN_GRPSTOCKS_NTE_2',
              row.PLANTING_PLAN_GRPSTOCKS_NTE_2,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174',
              row.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174,
            );
            formData.append(
              'LOCATION_DATA_CA_TLOC_AD_DISTRICT',
              row.LOCATION_DATA_CA_TLOC_AD_DISTRICT,
            );
            formData.append(
              'MAGROVE_PLANT_WIND_DIR',
              row.MAGROVE_PLANT_WIND_DIR,
            );
            formData.append('GSITE_HISTORY', row.GSITE_HISTORY);
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_20',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_20,
            );
            formData.append(
              'GTRTS_PLANTING_PLANTING_YEAR',
              row.GTRTS_PLANTING_PLANTING_YEAR,
            );
            formData.append(
              'INTERVENTION_DETAILS_PATCHES_PLANT',
              row.INTERVENTION_DETAILS_PATCHES_PLANT,
            );
            formData.append(
              'INTERVENTION_DETAILS_SEEDING_PLANT',
              row.INTERVENTION_DETAILS_SEEDING_PLANT,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_SPACING',
              row.PLANTING_PLAN_GPLANTING_SPACING,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_CLAY_LAYER',
              row.MAGROVE_PLANT_MAN_AFF_CLAY_LAYER,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHER_YEAR',
              row.GTRTS_OTHER_TREATMENT_OTHER_YEAR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT,
            );
            formData.append(
              'MAGROVE_PLANT_CRABS_HOLE',
              row.MAGROVE_PLANT_CRABS_HOLE,
            );
            formData.append(
              'REG_AVG_SEEDLING_PER_HA_ALL_PLOTS',
              row.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS,
            );
            formData.append(
              'LOCATION_DATA_CA_UNION',
              row.LOCATION_DATA_CA_UNION,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append(
              'GTRTS_PLANTING_PLANTING_YEAR_RAW',
              row.GTRTS_PLANTING_PLANTING_YEAR_RAW,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW',
              row.GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW,
            );
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'PLANTING_PLAN_GENERATED_NOTE_NAME_151',
              row.PLANTING_PLAN_GENERATED_NOTE_NAME_151,
            );
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_YEAR',
              row.INTERVENTION_DETAILS_TLOC_PLANT_YEAR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179',
              row.NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179,
            );
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_TYPE',
              row.INTERVENTION_DETAILS_TLOC_PLANT_TYPE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT,
            );
            formData.append('LOCATION_DATA_ECOZONE', row.LOCATION_DATA_ECOZONE);
            formData.append(
              'GTRTS_PLANTATION_SITE_YEAR',
              row.GTRTS_PLANTATION_SITE_YEAR,
            );
            formData.append('GUSER_TUSER_CELL', row.GUSER_TUSER_CELL);
            formData.append(
              'REG_AVG_TREES_PER_HA_ALL_PLOTS',
              row.REG_AVG_TREES_PER_HA_ALL_PLOTS,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_NURSERY_YEAR',
              row.GTRTS_NUERSERY_RAISING_NURSERY_YEAR,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR',
              row.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221',
              row.GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLINGS_PER_HA',
              row.PLANTING_PLAN_SEEDLINGS_PER_HA,
            );
            formData.append(
              'GTRTS_COMPOST_COMPOST_YEAR_RAW',
              row.GTRTS_COMPOST_COMPOST_YEAR_RAW,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_NURSERY_LOCATION',
              row.NURSERY_NURSERY_SITE_NURSERY_LOCATION,
            );
            formData.append('GSITE_LAND_COV_DESC', row.GSITE_LAND_COV_DESC);
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append(
              'GUSER_GENERATED_NOTE_NAME_13',
              row.GUSER_GENERATED_NOTE_NAME_13,
            );
            formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW);
            formData.append(
              'NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR',
              row.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED',
              row.GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_LEVEL_INUND',
              row.MAGROVE_PLANT_MAN_AFF_LEVEL_INUND,
            );
            formData.append('ALLPATCHES', row.ALLPATCHES);
            formData.append(
              'GENERATED_NOTE_NAME_63',
              row.GENERATED_NOTE_NAME_63,
            );
            formData.append('GUSER_TUSER_EMAIL', row.GUSER_TUSER_EMAIL);
            formData.append('CHECKED_BY', row.CHECKED_BY);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CIR',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CIR,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190,
            );
            formData.append(
              'LOCATION_DATA_TLOCATION',
              row.LOCATION_DATA_TLOCATION,
            );
            formData.append(
              'MAGROVE_PLANT_FACING_ISLAND',
              row.MAGROVE_PLANT_FACING_ISLAND,
            );
            formData.append('GUSER_TUSER', row.GUSER_TUSER);
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23',
              row.LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW',
              row.GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC,
            );
            formData.append(
              'GTRTS_PLANTATION_SITE_YEAR_RAW',
              row.GTRTS_PLANTATION_SITE_YEAR_RAW,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_115',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_115,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_114',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_114,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262',
              row.GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_119',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_119,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_118',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_118,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_117',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_117,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_116',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_116,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK,
            );
            formData.append(
              'GTRTS_COMPOST_GENERATED_NOTE_NAME_247',
              row.GTRTS_COMPOST_GENERATED_NOTE_NAME_247,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION,
            );
            formData.append(
              'GTRTS_COMPOST_COMPOST_YEAR',
              row.GTRTS_COMPOST_COMPOST_YEAR,
            );
            formData.append(
              'GTRTS_PLANTING_GENERATED_NOTE_NAME_231',
              row.GTRTS_PLANTING_GENERATED_NOTE_NAME_231,
            );
            formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION);
            formData.append('CHECKED', row.CHECKED);
            formData.append('GSITE_HIST_OTHER', row.GSITE_HIST_OTHER);
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137',
              row.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137,
            );
            formData.append(
              'INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122',
              row.INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133',
              row.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133,
            );
            formData.append(
              'PLANTING_PLAN_TXT_BUILD1',
              row.PLANTING_PLAN_TXT_BUILD1,
            );
            formData.append(
              'PLANTING_PLAN_TXT_BUILD2',
              row.PLANTING_PLAN_TXT_BUILD2,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252',
              row.GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252,
            );
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE',
              row.LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS,
            );
            formData.append(
              'PLANTING_PLAN_BPLANTING',
              row.PLANTING_PLAN_BPLANTING,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC,
            );
            formData.append(
              'LOCATION_DATA_CA_GENERATED_NOTE_NAME_36',
              row.LOCATION_DATA_CA_GENERATED_NOTE_NAME_36,
            );
            formData.append(
              'INTERVENTION_DETAILS_LLOC_PLANT_AREA',
              row.INTERVENTION_DETAILS_LLOC_PLANT_AREA,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2,
            );
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE,
            );
            formData.append('REG_PLOT_NO', row.REG_PLOT_NO);
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3,
            );
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4,
            );
            formData.append('END', row.END);
            formData.append(
              'PLANTING_PLAN_MAX_SEEDLINGS',
              row.PLANTING_PLAN_MAX_SEEDLINGS,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append(
              'GTRTS_PLANTATION_GENERATED_NOTE_NAME_226',
              row.GTRTS_PLANTATION_GENERATED_NOTE_NAME_226,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212,
            );
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_OTHERS',
              row.INTERVENTION_DETAILS_TLOC_PLANT_OTHERS,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR',
              row.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT,
            );
            formData.append(
              'MAGROVE_PLANT_FACING_DIR',
              row.MAGROVE_PLANT_FACING_DIR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_TPOLYTYPE_NUR',
              row.NURSERY_NURSERY_SITE_TPOLYTYPE_NUR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_PIONEERS_SP',
              row.MAGROVE_PLANT_MAN_AFF_PIONEERS_SP,
            );
            formData.append('TODAY', row.TODAY);
            formData.append(
              'LOCATION_DATA_CA_TLOC_AD_DIVISION',
              row.LOCATION_DATA_CA_TLOC_AD_DIVISION,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW',
              row.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV',
              row.LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV,
            );
            formData.append(
              'LOCATION_DATA_CA_VILLAGE',
              row.LOCATION_DATA_CA_VILLAGE,
            );
            formData.append(
              'MAGROVE_PLANT_WAVE_DIR',
              row.MAGROVE_PLANT_WAVE_DIR,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199,
            );
            formData.append(
              'GSITE_GENERATED_NOTE_NAME_72',
              row.GSITE_GENERATED_NOTE_NAME_72,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE,
            );
            formData.append('START', row.START);
            formData.append(
              'REG_AVG_TREES_ALL_PLOTS',
              row.REG_AVG_TREES_ALL_PLOTS,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append('APPROVED', row.APPROVED);
            formData.append(
              'MAGROVE_PLANT_GENERATED_NOTE_NAME_131',
              row.MAGROVE_PLANT_GENERATED_NOTE_NAME_131,
            );
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);
            formData.append('UserName', row.UserName);
            formData.append('AdditionTime', row.AdditionTime);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_core_audit?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_core_audit_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_CORE_AUDIT`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('id', row.id);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173',
              row.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173,
            );
            formData.append(
              'REG_AVG_SEEDLING_ALL_PLOTS',
              row.REG_AVG_SEEDLING_ALL_PLOTS,
            );
            formData.append(
              'PLANTING_PLAN_GRPSTOCKS_NTE_1',
              row.PLANTING_PLAN_GRPSTOCKS_NTE_1,
            );
            formData.append(
              'PLANTING_PLAN_GRPSTOCKS_NTE_2',
              row.PLANTING_PLAN_GRPSTOCKS_NTE_2,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174',
              row.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174,
            );
            formData.append(
              'LOCATION_DATA_CA_TLOC_AD_DISTRICT',
              row.LOCATION_DATA_CA_TLOC_AD_DISTRICT,
            );
            formData.append(
              'MAGROVE_PLANT_WIND_DIR',
              row.MAGROVE_PLANT_WIND_DIR,
            );
            formData.append('GSITE_HISTORY', row.GSITE_HISTORY);
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_20',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_20,
            );
            formData.append(
              'GTRTS_PLANTING_PLANTING_YEAR',
              row.GTRTS_PLANTING_PLANTING_YEAR,
            );
            formData.append(
              'INTERVENTION_DETAILS_PATCHES_PLANT',
              row.INTERVENTION_DETAILS_PATCHES_PLANT,
            );
            formData.append(
              'INTERVENTION_DETAILS_SEEDING_PLANT',
              row.INTERVENTION_DETAILS_SEEDING_PLANT,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_SPACING',
              row.PLANTING_PLAN_GPLANTING_SPACING,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_CLAY_LAYER',
              row.MAGROVE_PLANT_MAN_AFF_CLAY_LAYER,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHER_YEAR',
              row.GTRTS_OTHER_TREATMENT_OTHER_YEAR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT,
            );
            formData.append(
              'MAGROVE_PLANT_CRABS_HOLE',
              row.MAGROVE_PLANT_CRABS_HOLE,
            );
            formData.append(
              'REG_AVG_SEEDLING_PER_HA_ALL_PLOTS',
              row.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS,
            );
            formData.append(
              'LOCATION_DATA_CA_UNION',
              row.LOCATION_DATA_CA_UNION,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append(
              'GTRTS_PLANTING_PLANTING_YEAR_RAW',
              row.GTRTS_PLANTING_PLANTING_YEAR_RAW,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW',
              row.GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW,
            );
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'PLANTING_PLAN_GENERATED_NOTE_NAME_151',
              row.PLANTING_PLAN_GENERATED_NOTE_NAME_151,
            );
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_YEAR',
              row.INTERVENTION_DETAILS_TLOC_PLANT_YEAR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179',
              row.NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179,
            );
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_TYPE',
              row.INTERVENTION_DETAILS_TLOC_PLANT_TYPE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT,
            );
            formData.append('LOCATION_DATA_ECOZONE', row.LOCATION_DATA_ECOZONE);
            formData.append(
              'GTRTS_PLANTATION_SITE_YEAR',
              row.GTRTS_PLANTATION_SITE_YEAR,
            );
            formData.append('GUSER_TUSER_CELL', row.GUSER_TUSER_CELL);
            formData.append(
              'REG_AVG_TREES_PER_HA_ALL_PLOTS',
              row.REG_AVG_TREES_PER_HA_ALL_PLOTS,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_NURSERY_YEAR',
              row.GTRTS_NUERSERY_RAISING_NURSERY_YEAR,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR',
              row.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221',
              row.GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLINGS_PER_HA',
              row.PLANTING_PLAN_SEEDLINGS_PER_HA,
            );
            formData.append(
              'GTRTS_COMPOST_COMPOST_YEAR_RAW',
              row.GTRTS_COMPOST_COMPOST_YEAR_RAW,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_NURSERY_LOCATION',
              row.NURSERY_NURSERY_SITE_NURSERY_LOCATION,
            );
            formData.append('GSITE_LAND_COV_DESC', row.GSITE_LAND_COV_DESC);
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append(
              'GUSER_GENERATED_NOTE_NAME_13',
              row.GUSER_GENERATED_NOTE_NAME_13,
            );
            formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW);
            formData.append(
              'NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR',
              row.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED',
              row.GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_LEVEL_INUND',
              row.MAGROVE_PLANT_MAN_AFF_LEVEL_INUND,
            );
            formData.append('ALLPATCHES', row.ALLPATCHES);
            formData.append(
              'GENERATED_NOTE_NAME_63',
              row.GENERATED_NOTE_NAME_63,
            );
            formData.append('GUSER_TUSER_EMAIL', row.GUSER_TUSER_EMAIL);
            formData.append('CHECKED_BY', row.CHECKED_BY);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CIR',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CIR,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190,
            );
            formData.append(
              'LOCATION_DATA_TLOCATION',
              row.LOCATION_DATA_TLOCATION,
            );
            formData.append(
              'MAGROVE_PLANT_FACING_ISLAND',
              row.MAGROVE_PLANT_FACING_ISLAND,
            );
            formData.append('GUSER_TUSER', row.GUSER_TUSER);
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23',
              row.LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW',
              row.GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC,
            );
            formData.append(
              'GTRTS_PLANTATION_SITE_YEAR_RAW',
              row.GTRTS_PLANTATION_SITE_YEAR_RAW,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_115',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_115,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_114',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_114,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262',
              row.GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_119',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_119,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_118',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_118,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_117',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_117,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_116',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_116,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK,
            );
            formData.append(
              'GTRTS_COMPOST_GENERATED_NOTE_NAME_247',
              row.GTRTS_COMPOST_GENERATED_NOTE_NAME_247,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION,
            );
            formData.append(
              'GTRTS_COMPOST_COMPOST_YEAR',
              row.GTRTS_COMPOST_COMPOST_YEAR,
            );
            formData.append(
              'GTRTS_PLANTING_GENERATED_NOTE_NAME_231',
              row.GTRTS_PLANTING_GENERATED_NOTE_NAME_231,
            );
            formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION);
            formData.append('CHECKED', row.CHECKED);
            formData.append('GSITE_HIST_OTHER', row.GSITE_HIST_OTHER);
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137',
              row.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137,
            );
            formData.append(
              'INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122',
              row.INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133',
              row.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133,
            );
            formData.append(
              'PLANTING_PLAN_TXT_BUILD1',
              row.PLANTING_PLAN_TXT_BUILD1,
            );
            formData.append(
              'PLANTING_PLAN_TXT_BUILD2',
              row.PLANTING_PLAN_TXT_BUILD2,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252',
              row.GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252,
            );
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE',
              row.LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS,
            );
            formData.append(
              'PLANTING_PLAN_BPLANTING',
              row.PLANTING_PLAN_BPLANTING,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC,
            );
            formData.append(
              'LOCATION_DATA_CA_GENERATED_NOTE_NAME_36',
              row.LOCATION_DATA_CA_GENERATED_NOTE_NAME_36,
            );
            formData.append(
              'INTERVENTION_DETAILS_LLOC_PLANT_AREA',
              row.INTERVENTION_DETAILS_LLOC_PLANT_AREA,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2,
            );
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE,
            );
            formData.append('REG_PLOT_NO', row.REG_PLOT_NO);
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3,
            );
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4,
            );
            formData.append('END', row.END);
            formData.append(
              'PLANTING_PLAN_MAX_SEEDLINGS',
              row.PLANTING_PLAN_MAX_SEEDLINGS,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append(
              'GTRTS_PLANTATION_GENERATED_NOTE_NAME_226',
              row.GTRTS_PLANTATION_GENERATED_NOTE_NAME_226,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212,
            );
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_OTHERS',
              row.INTERVENTION_DETAILS_TLOC_PLANT_OTHERS,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR',
              row.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT,
            );
            formData.append(
              'MAGROVE_PLANT_FACING_DIR',
              row.MAGROVE_PLANT_FACING_DIR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_TPOLYTYPE_NUR',
              row.NURSERY_NURSERY_SITE_TPOLYTYPE_NUR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_PIONEERS_SP',
              row.MAGROVE_PLANT_MAN_AFF_PIONEERS_SP,
            );
            formData.append('TODAY', row.TODAY);
            formData.append(
              'LOCATION_DATA_CA_TLOC_AD_DIVISION',
              row.LOCATION_DATA_CA_TLOC_AD_DIVISION,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW',
              row.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV',
              row.LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV,
            );
            formData.append(
              'LOCATION_DATA_CA_VILLAGE',
              row.LOCATION_DATA_CA_VILLAGE,
            );
            formData.append(
              'MAGROVE_PLANT_WAVE_DIR',
              row.MAGROVE_PLANT_WAVE_DIR,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199,
            );
            formData.append(
              'GSITE_GENERATED_NOTE_NAME_72',
              row.GSITE_GENERATED_NOTE_NAME_72,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE,
            );
            formData.append('START', row.START);
            formData.append(
              'REG_AVG_TREES_ALL_PLOTS',
              row.REG_AVG_TREES_ALL_PLOTS,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append('APPROVED', row.APPROVED);
            formData.append(
              'MAGROVE_PLANT_GENERATED_NOTE_NAME_131',
              row.MAGROVE_PLANT_GENERATED_NOTE_NAME_131,
            );
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);
            formData.append('UserName', row.UserName);
            formData.append('AdditionTime', row.AdditionTime);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_core_audit?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_core_test_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_CORE_TEST WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173',
              row.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173,
            );
            formData.append(
              'REG_AVG_SEEDLING_ALL_PLOTS',
              row.REG_AVG_SEEDLING_ALL_PLOTS,
            );
            formData.append(
              'PLANTING_PLAN_GRPSTOCKS_NTE_1',
              row.PLANTING_PLAN_GRPSTOCKS_NTE_1,
            );
            formData.append(
              'PLANTING_PLAN_GRPSTOCKS_NTE_2',
              row.PLANTING_PLAN_GRPSTOCKS_NTE_2,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174',
              row.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174,
            );
            formData.append(
              'LOCATION_DATA_CA_TLOC_AD_DISTRICT',
              row.LOCATION_DATA_CA_TLOC_AD_DISTRICT,
            );
            formData.append(
              'MAGROVE_PLANT_WIND_DIR',
              row.MAGROVE_PLANT_WIND_DIR,
            );
            formData.append('GSITE_HISTORY', row.GSITE_HISTORY);
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_20',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_20,
            );
            formData.append(
              'GTRTS_PLANTING_PLANTING_YEAR',
              row.GTRTS_PLANTING_PLANTING_YEAR,
            );
            formData.append(
              'INTERVENTION_DETAILS_PATCHES_PLANT',
              row.INTERVENTION_DETAILS_PATCHES_PLANT,
            );
            formData.append(
              'INTERVENTION_DETAILS_SEEDING_PLANT',
              row.INTERVENTION_DETAILS_SEEDING_PLANT,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_SPACING',
              row.PLANTING_PLAN_GPLANTING_SPACING,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_CLAY_LAYER',
              row.MAGROVE_PLANT_MAN_AFF_CLAY_LAYER,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHER_YEAR',
              row.GTRTS_OTHER_TREATMENT_OTHER_YEAR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT,
            );
            formData.append(
              'MAGROVE_PLANT_CRABS_HOLE',
              row.MAGROVE_PLANT_CRABS_HOLE,
            );
            formData.append(
              'REG_AVG_SEEDLING_PER_HA_ALL_PLOTS',
              row.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS,
            );
            formData.append(
              'LOCATION_DATA_CA_UNION',
              row.LOCATION_DATA_CA_UNION,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append(
              'GTRTS_PLANTING_PLANTING_YEAR_RAW',
              row.GTRTS_PLANTING_PLANTING_YEAR_RAW,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW',
              row.GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW,
            );
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'PLANTING_PLAN_GENERATED_NOTE_NAME_151',
              row.PLANTING_PLAN_GENERATED_NOTE_NAME_151,
            );
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_YEAR',
              row.INTERVENTION_DETAILS_TLOC_PLANT_YEAR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179',
              row.NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179,
            );
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_TYPE',
              row.INTERVENTION_DETAILS_TLOC_PLANT_TYPE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT,
            );
            formData.append('LOCATION_DATA_ECOZONE', row.LOCATION_DATA_ECOZONE);
            formData.append(
              'GTRTS_PLANTATION_SITE_YEAR',
              row.GTRTS_PLANTATION_SITE_YEAR,
            );
            formData.append('GUSER_TUSER_CELL', row.GUSER_TUSER_CELL);
            formData.append(
              'REG_AVG_TREES_PER_HA_ALL_PLOTS',
              row.REG_AVG_TREES_PER_HA_ALL_PLOTS,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_NURSERY_YEAR',
              row.GTRTS_NUERSERY_RAISING_NURSERY_YEAR,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR',
              row.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221',
              row.GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLINGS_PER_HA',
              row.PLANTING_PLAN_SEEDLINGS_PER_HA,
            );
            formData.append(
              'GTRTS_COMPOST_COMPOST_YEAR_RAW',
              row.GTRTS_COMPOST_COMPOST_YEAR_RAW,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_NURSERY_LOCATION',
              row.NURSERY_NURSERY_SITE_NURSERY_LOCATION,
            );
            formData.append('GSITE_LAND_COV_DESC', row.GSITE_LAND_COV_DESC);
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append(
              'GUSER_GENERATED_NOTE_NAME_13',
              row.GUSER_GENERATED_NOTE_NAME_13,
            );
            formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW);
            formData.append(
              'NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR',
              row.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED',
              row.GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_LEVEL_INUND',
              row.MAGROVE_PLANT_MAN_AFF_LEVEL_INUND,
            );
            formData.append('ALLPATCHES', row.ALLPATCHES);
            formData.append(
              'GENERATED_NOTE_NAME_63',
              row.GENERATED_NOTE_NAME_63,
            );
            formData.append('GUSER_TUSER_EMAIL', row.GUSER_TUSER_EMAIL);
            formData.append('CHECKED_BY', row.CHECKED_BY);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CIR',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CIR,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190,
            );
            formData.append(
              'LOCATION_DATA_TLOCATION',
              row.LOCATION_DATA_TLOCATION,
            );
            formData.append(
              'MAGROVE_PLANT_FACING_ISLAND',
              row.MAGROVE_PLANT_FACING_ISLAND,
            );
            formData.append('GUSER_TUSER', row.GUSER_TUSER);
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23',
              row.LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW',
              row.GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC,
            );
            formData.append(
              'GTRTS_PLANTATION_SITE_YEAR_RAW',
              row.GTRTS_PLANTATION_SITE_YEAR_RAW,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_115',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_115,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_114',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_114,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262',
              row.GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_119',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_119,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_118',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_118,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_117',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_117,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_116',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_116,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK,
            );
            formData.append(
              'GTRTS_COMPOST_GENERATED_NOTE_NAME_247',
              row.GTRTS_COMPOST_GENERATED_NOTE_NAME_247,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION,
            );
            formData.append(
              'GTRTS_COMPOST_COMPOST_YEAR',
              row.GTRTS_COMPOST_COMPOST_YEAR,
            );
            formData.append(
              'GTRTS_PLANTING_GENERATED_NOTE_NAME_231',
              row.GTRTS_PLANTING_GENERATED_NOTE_NAME_231,
            );
            formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION);
            formData.append('CHECKED', row.CHECKED);
            formData.append('GSITE_HIST_OTHER', row.GSITE_HIST_OTHER);
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137',
              row.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137,
            );
            formData.append(
              'INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122',
              row.INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133',
              row.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133,
            );
            formData.append(
              'PLANTING_PLAN_TXT_BUILD1',
              row.PLANTING_PLAN_TXT_BUILD1,
            );
            formData.append(
              'PLANTING_PLAN_TXT_BUILD2',
              row.PLANTING_PLAN_TXT_BUILD2,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252',
              row.GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252,
            );
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE',
              row.LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS,
            );
            formData.append(
              'PLANTING_PLAN_BPLANTING',
              row.PLANTING_PLAN_BPLANTING,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC,
            );
            formData.append(
              'LOCATION_DATA_CA_GENERATED_NOTE_NAME_36',
              row.LOCATION_DATA_CA_GENERATED_NOTE_NAME_36,
            );
            formData.append(
              'INTERVENTION_DETAILS_LLOC_PLANT_AREA',
              row.INTERVENTION_DETAILS_LLOC_PLANT_AREA,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2,
            );
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE,
            );
            formData.append('REG_PLOT_NO', row.REG_PLOT_NO);
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3,
            );
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4,
            );
            formData.append('END', row.END);
            formData.append(
              'PLANTING_PLAN_MAX_SEEDLINGS',
              row.PLANTING_PLAN_MAX_SEEDLINGS,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append(
              'GTRTS_PLANTATION_GENERATED_NOTE_NAME_226',
              row.GTRTS_PLANTATION_GENERATED_NOTE_NAME_226,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212,
            );
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_OTHERS',
              row.INTERVENTION_DETAILS_TLOC_PLANT_OTHERS,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR',
              row.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT,
            );
            formData.append(
              'MAGROVE_PLANT_FACING_DIR',
              row.MAGROVE_PLANT_FACING_DIR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_TPOLYTYPE_NUR',
              row.NURSERY_NURSERY_SITE_TPOLYTYPE_NUR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_PIONEERS_SP',
              row.MAGROVE_PLANT_MAN_AFF_PIONEERS_SP,
            );
            formData.append('TODAY', row.TODAY);
            formData.append(
              'LOCATION_DATA_CA_TLOC_AD_DIVISION',
              row.LOCATION_DATA_CA_TLOC_AD_DIVISION,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW',
              row.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV',
              row.LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV,
            );
            formData.append(
              'LOCATION_DATA_CA_VILLAGE',
              row.LOCATION_DATA_CA_VILLAGE,
            );
            formData.append(
              'MAGROVE_PLANT_WAVE_DIR',
              row.MAGROVE_PLANT_WAVE_DIR,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199,
            );
            formData.append(
              'GSITE_GENERATED_NOTE_NAME_72',
              row.GSITE_GENERATED_NOTE_NAME_72,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE,
            );
            formData.append('START', row.START);
            formData.append(
              'REG_AVG_TREES_ALL_PLOTS',
              row.REG_AVG_TREES_ALL_PLOTS,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append('APPROVED', row.APPROVED);
            formData.append(
              'MAGROVE_PLANT_GENERATED_NOTE_NAME_131',
              row.MAGROVE_PLANT_GENERATED_NOTE_NAME_131,
            );
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_core_test?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_core_test_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_CORE_TEST`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173',
              row.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_173,
            );
            formData.append(
              'REG_AVG_SEEDLING_ALL_PLOTS',
              row.REG_AVG_SEEDLING_ALL_PLOTS,
            );
            formData.append(
              'PLANTING_PLAN_GRPSTOCKS_NTE_1',
              row.PLANTING_PLAN_GRPSTOCKS_NTE_1,
            );
            formData.append(
              'PLANTING_PLAN_GRPSTOCKS_NTE_2',
              row.PLANTING_PLAN_GRPSTOCKS_NTE_2,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174',
              row.PLANTING_PLAN_SEEDLING_NUM_GENERATED_NOTE_NAME_174,
            );
            formData.append(
              'LOCATION_DATA_CA_TLOC_AD_DISTRICT',
              row.LOCATION_DATA_CA_TLOC_AD_DISTRICT,
            );
            formData.append(
              'MAGROVE_PLANT_WIND_DIR',
              row.MAGROVE_PLANT_WIND_DIR,
            );
            formData.append('GSITE_HISTORY', row.GSITE_HISTORY);
            formData.append(
              'LOCATION_DATA_GENERATED_NOTE_NAME_20',
              row.LOCATION_DATA_GENERATED_NOTE_NAME_20,
            );
            formData.append(
              'GTRTS_PLANTING_PLANTING_YEAR',
              row.GTRTS_PLANTING_PLANTING_YEAR,
            );
            formData.append(
              'INTERVENTION_DETAILS_PATCHES_PLANT',
              row.INTERVENTION_DETAILS_PATCHES_PLANT,
            );
            formData.append(
              'INTERVENTION_DETAILS_SEEDING_PLANT',
              row.INTERVENTION_DETAILS_SEEDING_PLANT,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_SPACING',
              row.PLANTING_PLAN_GPLANTING_SPACING,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_CLAY_LAYER',
              row.MAGROVE_PLANT_MAN_AFF_CLAY_LAYER,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHER_YEAR',
              row.GTRTS_OTHER_TREATMENT_OTHER_YEAR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE_TXT,
            );
            formData.append(
              'MAGROVE_PLANT_CRABS_HOLE',
              row.MAGROVE_PLANT_CRABS_HOLE,
            );
            formData.append(
              'REG_AVG_SEEDLING_PER_HA_ALL_PLOTS',
              row.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS,
            );
            formData.append(
              'LOCATION_DATA_CA_UNION',
              row.LOCATION_DATA_CA_UNION,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append(
              'GTRTS_PLANTING_PLANTING_YEAR_RAW',
              row.GTRTS_PLANTING_PLANTING_YEAR_RAW,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW',
              row.GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW,
            );
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'PLANTING_PLAN_GENERATED_NOTE_NAME_151',
              row.PLANTING_PLAN_GENERATED_NOTE_NAME_151,
            );
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_YEAR',
              row.INTERVENTION_DETAILS_TLOC_PLANT_YEAR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179',
              row.NURSERY_NURSERY_SITE_GENERATED_NOTE_NAME_179,
            );
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_TYPE',
              row.INTERVENTION_DETAILS_TLOC_PLANT_TYPE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NUESERY_SUNLIGHT,
            );
            formData.append('LOCATION_DATA_ECOZONE', row.LOCATION_DATA_ECOZONE);
            formData.append(
              'GTRTS_PLANTATION_SITE_YEAR',
              row.GTRTS_PLANTATION_SITE_YEAR,
            );
            formData.append('GUSER_TUSER_CELL', row.GUSER_TUSER_CELL);
            formData.append(
              'REG_AVG_TREES_PER_HA_ALL_PLOTS',
              row.REG_AVG_TREES_PER_HA_ALL_PLOTS,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_AREA,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_NURSERY_YEAR',
              row.GTRTS_NUERSERY_RAISING_NURSERY_YEAR,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR',
              row.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ALT,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221',
              row.GTRTS_NUERSERY_RAISING_GENERATED_NOTE_NAME_221,
            );
            formData.append(
              'PLANTING_PLAN_SEEDLINGS_PER_HA',
              row.PLANTING_PLAN_SEEDLINGS_PER_HA,
            );
            formData.append(
              'GTRTS_COMPOST_COMPOST_YEAR_RAW',
              row.GTRTS_COMPOST_COMPOST_YEAR_RAW,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_NURSERY_LOCATION',
              row.NURSERY_NURSERY_SITE_NURSERY_LOCATION,
            );
            formData.append('GSITE_LAND_COV_DESC', row.GSITE_LAND_COV_DESC);
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append(
              'GUSER_GENERATED_NOTE_NAME_13',
              row.GUSER_GENERATED_NOTE_NAME_13,
            );
            formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW);
            formData.append(
              'NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR',
              row.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_EAST_NUR,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED',
              row.GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_HIGH_LAND,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_LEVEL_INUND',
              row.MAGROVE_PLANT_MAN_AFF_LEVEL_INUND,
            );
            formData.append('ALLPATCHES', row.ALLPATCHES);
            formData.append(
              'GENERATED_NOTE_NAME_63',
              row.GENERATED_NOTE_NAME_63,
            );
            formData.append('GUSER_TUSER_EMAIL', row.GUSER_TUSER_EMAIL);
            formData.append('CHECKED_BY', row.CHECKED_BY);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CIR',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CIR,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_NURSERY_DIS2,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LAT,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_GENERATED_NOTE_NAME_190,
            );
            formData.append(
              'LOCATION_DATA_TLOCATION',
              row.LOCATION_DATA_TLOCATION,
            );
            formData.append(
              'MAGROVE_PLANT_FACING_ISLAND',
              row.MAGROVE_PLANT_FACING_ISLAND,
            );
            formData.append('GUSER_TUSER', row.GUSER_TUSER);
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_INUNDATION_MONTH,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NAME,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23',
              row.LOCATION_DATA_FOREST_AD_GENERATED_NOTE_NAME_23,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW',
              row.GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_ACC,
            );
            formData.append(
              'GTRTS_PLANTATION_SITE_YEAR_RAW',
              row.GTRTS_PLANTATION_SITE_YEAR_RAW,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_115',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_115,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_114',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_114,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CARETAKER_NID,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262',
              row.GTRTS_OTHER_TREATMENT_GENERATED_NOTE_NAME_262,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_119',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_119,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_118',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_118,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_117',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_117,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_116',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_116,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK,
            );
            formData.append(
              'GTRTS_COMPOST_GENERATED_NOTE_NAME_247',
              row.GTRTS_COMPOST_GENERATED_NOTE_NAME_247,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION,
            );
            formData.append(
              'GTRTS_COMPOST_COMPOST_YEAR',
              row.GTRTS_COMPOST_COMPOST_YEAR,
            );
            formData.append(
              'GTRTS_PLANTING_GENERATED_NOTE_NAME_231',
              row.GTRTS_PLANTING_GENERATED_NOTE_NAME_231,
            );
            formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION);
            formData.append('CHECKED', row.CHECKED);
            formData.append('GSITE_HIST_OTHER', row.GSITE_HIST_OTHER);
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137',
              row.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_137,
            );
            formData.append(
              'INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122',
              row.INTERVENTION_DETAILS_GENERATED_NOTE_NAME_122,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133',
              row.MAGROVE_PLANT_MAN_AFF_GENERATED_NOTE_NAME_133,
            );
            formData.append(
              'PLANTING_PLAN_TXT_BUILD1',
              row.PLANTING_PLAN_TXT_BUILD1,
            );
            formData.append(
              'PLANTING_PLAN_TXT_BUILD2',
              row.PLANTING_PLAN_TXT_BUILD2,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252',
              row.GTRTS_CLIMBER_CUTTING_GENERATED_NOTE_NAME_252,
            );
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE',
              row.LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_NURSERY_DIS,
            );
            formData.append(
              'PLANTING_PLAN_BPLANTING',
              row.PLANTING_PLAN_BPLANTING,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_DRAINAGE_FAC,
            );
            formData.append(
              'LOCATION_DATA_CA_GENERATED_NOTE_NAME_36',
              row.LOCATION_DATA_CA_GENERATED_NOTE_NAME_36,
            );
            formData.append(
              'INTERVENTION_DETAILS_LLOC_PLANT_AREA',
              row.INTERVENTION_DETAILS_LLOC_PLANT_AREA,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA1,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA2,
            );
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_GENERATED_NOTE_NAME_140,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_CAREKATER_MOBILE,
            );
            formData.append('REG_PLOT_NO', row.REG_PLOT_NO);
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA7,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA5,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA6,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA3,
            );
            formData.append(
              'MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE',
              row.MAGROVE_PLANT_MANGROVE_ENRICH_PLANTATION_AGE,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_COASTAL_AREA4,
            );
            formData.append('END', row.END);
            formData.append(
              'PLANTING_PLAN_MAX_SEEDLINGS',
              row.PLANTING_PLAN_MAX_SEEDLINGS,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append(
              'GTRTS_PLANTATION_GENERATED_NOTE_NAME_226',
              row.GTRTS_PLANTATION_GENERATED_NOTE_NAME_226,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE,
            );
            formData.append(
              'NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212',
              row.NURSERY_OTHERS_INFO_CARETAKER_INFO_GENERATED_NOTE_NAME_212,
            );
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_OTHERS',
              row.INTERVENTION_DETAILS_TLOC_PLANT_OTHERS,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG',
              row.NURSERY_NURSERY_SITE_PSITEPOINT_NUR_LNG,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR',
              row.NURSERY_NURSERY_SITE_GCOORDS_NUR_SITE_NORTH_NUR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT,
            );
            formData.append(
              'MAGROVE_PLANT_FACING_DIR',
              row.MAGROVE_PLANT_FACING_DIR,
            );
            formData.append(
              'NURSERY_NURSERY_SITE_TPOLYTYPE_NUR',
              row.NURSERY_NURSERY_SITE_TPOLYTYPE_NUR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'MAGROVE_PLANT_MAN_AFF_PIONEERS_SP',
              row.MAGROVE_PLANT_MAN_AFF_PIONEERS_SP,
            );
            formData.append('TODAY', row.TODAY);
            formData.append(
              'LOCATION_DATA_CA_TLOC_AD_DIVISION',
              row.LOCATION_DATA_CA_TLOC_AD_DIVISION,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW',
              row.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV',
              row.LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV,
            );
            formData.append(
              'LOCATION_DATA_CA_VILLAGE',
              row.LOCATION_DATA_CA_VILLAGE,
            );
            formData.append(
              'MAGROVE_PLANT_WAVE_DIR',
              row.MAGROVE_PLANT_WAVE_DIR,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199',
              row.NURSERY_NUR_SITE_SELECTION_COASTAL_AREA_GENERATED_NOTE_NAME_199,
            );
            formData.append(
              'GSITE_GENERATED_NOTE_NAME_72',
              row.GSITE_GENERATED_NOTE_NAME_72,
            );
            formData.append(
              'NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE',
              row.NURSERY_NUR_SITE_SELECTION_HILL_SAL_WATER_SOURCE,
            );
            formData.append('START', row.START);
            formData.append(
              'REG_AVG_TREES_ALL_PLOTS',
              row.REG_AVG_TREES_ALL_PLOTS,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append('APPROVED', row.APPROVED);
            formData.append(
              'MAGROVE_PLANT_GENERATED_NOTE_NAME_131',
              row.MAGROVE_PLANT_GENERATED_NOTE_NAME_131,
            );
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_core_test?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const gener43_2021_xpic_beat_index_blb_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM GENER43_2021_XPIC_BEAT_INDEX_BLB WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/gener43_2021_xpic_beat_index_blb?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const gener43_2021_xpic_beat_index_blb_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM GENER43_2021_XPIC_BEAT_INDEX_BLB`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/gener43_2021_xpic_beat_index_blb?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_core_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_CORE WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'REG_AVG_SEEDLING_ALL_PLOTS',
              row.REG_AVG_SEEDLING_ALL_PLOTS,
            );
            formData.append(
              'GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR',
              row.GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NAME_CAR',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NAME_CAR,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_BNURSERY',
              row.PLANTING_PLAN_GPLANTING_BNURSERY,
            );
            formData.append(
              'LOCATION_DATA_CA_TLOC_AD_DISTRICT',
              row.LOCATION_DATA_CA_TLOC_AD_DISTRICT,
            );
            formData.append('GUSER_SURVEY_TYPE', row.GUSER_SURVEY_TYPE);
            formData.append(
              'GTRTS_LAYOUT_LAYOUT_YEAR_RAW',
              row.GTRTS_LAYOUT_LAYOUT_YEAR_RAW,
            );
            formData.append(
              'GTRTS_PLANTING_PLANTING_YEAR',
              row.GTRTS_PLANTING_PLANTING_YEAR,
            );
            formData.append('MAN_AFF_CLAY_LAYER', row.MAN_AFF_CLAY_LAYER);
            formData.append('GUSER_REASON_4_CHANGE', row.GUSER_REASON_4_CHANGE);
            formData.append(
              'GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR_RAW',
              row.GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR_RAW,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_SPACING',
              row.PLANTING_PLAN_GPLANTING_SPACING,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LAT',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LAT,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_107',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_107,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_106',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_106,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_105',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_105,
            );
            formData.append(
              'INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_OTHERS',
              row.INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_OTHERS,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHER_YEAR',
              row.GTRTS_OTHER_TREATMENT_OTHER_YEAR,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB,
            );
            formData.append(
              'REG_AVG_SEEDLING_PER_HA_ALL_PLOTS',
              row.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS,
            );
            formData.append(
              'LOCATION_DATA_CA_UNION',
              row.LOCATION_DATA_CA_UNION,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_MO_NO',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_MO_NO,
            );
            formData.append('GUSER_PREVIOUS_RECORD', row.GUSER_PREVIOUS_RECORD);
            formData.append(
              'GTRTS_PLANTING_PLANTING_YEAR_RAW',
              row.GTRTS_PLANTING_PLANTING_YEAR_RAW,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_NURS_NOTES',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_NURS_NOTES,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW',
              row.GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW,
            );
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_YEAR',
              row.INTERVENTION_DETAILS_TLOC_PLANT_YEAR,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_TOTNURSEEDLINGS',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_TOTNURSEEDLINGS,
            );
            formData.append(
              'GTRTS_PLANTATION_SITE_YEAR',
              row.GTRTS_PLANTATION_SITE_YEAR,
            );
            formData.append('GUSER_TUSER_CELL', row.GUSER_TUSER_CELL);
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ACC',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ACC,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_152',
              row.PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_152,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_151',
              row.PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_151,
            );
            formData.append('MAN_AFF_WIND_DIR', row.MAN_AFF_WIND_DIR);
            formData.append(
              'GTRTS_NUERSERY_RAISING_NURSERY_YEAR',
              row.GTRTS_NUERSERY_RAISING_NURSERY_YEAR,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR',
              row.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_EAST_NUR',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_EAST_NUR,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB_RAW',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB_RAW,
            );
            formData.append(
              'GTRTS_COMPOST_COMPOST_YEAR_RAW',
              row.GTRTS_COMPOST_COMPOST_YEAR_RAW,
            );
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append('MAN_AFF_WAVE_DIR', row.MAN_AFF_WAVE_DIR);
            formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW);
            formData.append(
              'PLANTING_PLAN_GPLANTING_MAX_SEEDLINGS',
              row.PLANTING_PLAN_GPLANTING_MAX_SEEDLINGS,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED',
              row.GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED,
            );
            formData.append(
              'GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR',
              row.GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR,
            );
            formData.append('ALLPATCHES', row.ALLPATCHES);
            formData.append(
              'GSITE_ECOLOGICAL_ATTRIBUTES_SF_PROG',
              row.GSITE_ECOLOGICAL_ATTRIBUTES_SF_PROG,
            );
            formData.append('CHECKED_BY', row.CHECKED_BY);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CIR',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CIR,
            );
            formData.append(
              'GENERATED_NOTE_NAME_62',
              row.GENERATED_NOTE_NAME_62,
            );
            formData.append(
              'GSITE_ECOLOGICAL_ATTRIBUTES_HIST_OTHER',
              row.GSITE_ECOLOGICAL_ATTRIBUTES_HIST_OTHER,
            );
            formData.append('MAN_AFF_FACING_ISLAND', row.MAN_AFF_FACING_ISLAND);
            formData.append(
              'LOCATION_DATA_TLOCATION',
              row.LOCATION_DATA_TLOCATION,
            );
            formData.append('GUSER_TUSER', row.GUSER_TUSER);
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_SEEDLING_SUM',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_SEEDLING_SUM,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW',
              row.GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW,
            );
            formData.append(
              'INTERVENTION_DETAILS_TYPE_PLANT_PATCHES_PLANT',
              row.INTERVENTION_DETAILS_TYPE_PLANT_PATCHES_PLANT,
            );
            formData.append(
              'INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_TYPE',
              row.INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_TYPE,
            );
            formData.append(
              'GTRTS_PLANTATION_SITE_YEAR_RAW',
              row.GTRTS_PLANTATION_SITE_YEAR_RAW,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR,
            );
            formData.append('ECOZONE', row.ECOZONE);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_NORTH_NUR',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_NORTH_NUR,
            );
            formData.append(
              'REGIN_NOTE_REGEN_NOTES',
              row.REGIN_NOTE_REGEN_NOTES,
            );
            formData.append('MAN_AFF_PIONEERS_SP', row.MAN_AFF_PIONEERS_SP);
            formData.append(
              'GTRTS_CLEANING_CUTTING_CUTTING_YEAR',
              row.GTRTS_CLEANING_CUTTING_CUTTING_YEAR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION,
            );
            formData.append(
              'GTRTS_COMPOST_COMPOST_YEAR',
              row.GTRTS_COMPOST_COMPOST_YEAR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CAMP',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CAMP,
            );
            formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION);
            formData.append('CHECKED', row.CHECKED);
            formData.append(
              'GTRTS_CLEANING_CUTTING_CUTTING_YEAR_RAW',
              row.GTRTS_CLEANING_CUTTING_CUTTING_YEAR_RAW,
            );
            formData.append(
              'GTRTS_PIT_DIGGING_DIGGING_YEAR',
              row.GTRTS_PIT_DIGGING_DIGGING_YEAR,
            );
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE',
              row.LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE,
            );
            formData.append('OVERALLNOTES', row.OVERALLNOTES);
            formData.append(
              'INTERVENTION_DETAILS_TYPE_PLANT_AREA_ACIVITY',
              row.INTERVENTION_DETAILS_TYPE_PLANT_AREA_ACIVITY,
            );
            formData.append(
              'GTRTS_VACANCY_FILLING_FILLING_YEAR_RAW',
              row.GTRTS_VACANCY_FILLING_FILLING_YEAR_RAW,
            );
            formData.append(
              'PLANTING_PLAN_BPLANTING',
              row.PLANTING_PLAN_BPLANTING,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LNG',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LNG,
            );
            formData.append(
              'GTRTS_LAYOUT_LAYOUT_YEAR',
              row.GTRTS_LAYOUT_LAYOUT_YEAR,
            );
            formData.append(
              'INTERVENTION_DETAILS_LLOC_PLANT_AREA',
              row.INTERVENTION_DETAILS_LLOC_PLANT_AREA,
            );
            formData.append('TINTERVENTION', row.TINTERVENTION);
            formData.append('REG_PLOT_NO', row.REG_PLOT_NO);
            formData.append(
              'PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE_2',
              row.PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE_2,
            );
            formData.append('END', row.END);
            formData.append(
              'PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE_1',
              row.PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE_1,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_TPOLYTYPE_NUR',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_TPOLYTYPE_NUR,
            );
            formData.append(
              'INTERVENTION_DETAILS_TYPE_PLANT_SEEDING_PLANT',
              row.INTERVENTION_DETAILS_TYPE_PLANT_SEEDING_PLANT,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append('MAN_AFF_FACING_DIR', row.MAN_AFF_FACING_DIR);
            formData.append(
              'GSITE_ECOLOGICAL_ATTRIBUTES_LAND_COV_DESC',
              row.GSITE_ECOLOGICAL_ATTRIBUTES_LAND_COV_DESC,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE,
            );
            formData.append(
              'GTRTS_VACANCY_FILLING_FILLING_YEAR',
              row.GTRTS_VACANCY_FILLING_FILLING_YEAR,
            );
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append(
              'PLANTING_PLAN_GPLANTING_SEEDLINGS_PER_HA',
              row.PLANTING_PLAN_GPLANTING_SEEDLINGS_PER_HA,
            );
            formData.append(
              'GSITE_ECOLOGICAL_ATTRIBUTES_TLANDCOVERCLASS',
              row.GSITE_ECOLOGICAL_ATTRIBUTES_TLANDCOVERCLASS,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_NID',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_NID,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_TXT_BUILD2',
              row.PLANTING_PLAN_GPLANTING_TXT_BUILD2,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ALT',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ALT,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'GSITE_ECOLOGICAL_ATTRIBUTES_HISTORY',
              row.GSITE_ECOLOGICAL_ATTRIBUTES_HISTORY,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_TXT_BUILD1',
              row.PLANTING_PLAN_GPLANTING_TXT_BUILD1,
            );
            formData.append('TODAY', row.TODAY);
            formData.append(
              'LOCATION_DATA_CA_TLOC_AD_DIVISION',
              row.LOCATION_DATA_CA_TLOC_AD_DIVISION,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW',
              row.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV',
              row.LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_DAREA_PLANTING',
              row.PLANTING_PLAN_GPLANTING_DAREA_PLANTING,
            );
            formData.append(
              'GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR_RAW',
              row.GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR_RAW,
            );
            formData.append('START', row.START);
            formData.append(
              'GTRTS_PIT_DIGGING_DIGGING_YEAR_RAW',
              row.GTRTS_PIT_DIGGING_DIGGING_YEAR_RAW,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append('APPROVED', row.APPROVED);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_core?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_core_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_CORE`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'REG_AVG_SEEDLING_ALL_PLOTS',
              row.REG_AVG_SEEDLING_ALL_PLOTS,
            );
            formData.append(
              'GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR',
              row.GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NAME_CAR',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NAME_CAR,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_BNURSERY',
              row.PLANTING_PLAN_GPLANTING_BNURSERY,
            );
            formData.append(
              'LOCATION_DATA_CA_TLOC_AD_DISTRICT',
              row.LOCATION_DATA_CA_TLOC_AD_DISTRICT,
            );
            formData.append('GUSER_SURVEY_TYPE', row.GUSER_SURVEY_TYPE);
            formData.append(
              'GTRTS_LAYOUT_LAYOUT_YEAR_RAW',
              row.GTRTS_LAYOUT_LAYOUT_YEAR_RAW,
            );
            formData.append(
              'GTRTS_PLANTING_PLANTING_YEAR',
              row.GTRTS_PLANTING_PLANTING_YEAR,
            );
            formData.append('MAN_AFF_CLAY_LAYER', row.MAN_AFF_CLAY_LAYER);
            formData.append('GUSER_REASON_4_CHANGE', row.GUSER_REASON_4_CHANGE);
            formData.append(
              'GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR_RAW',
              row.GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR_RAW,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_SPACING',
              row.PLANTING_PLAN_GPLANTING_SPACING,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LAT',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LAT,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_107',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_107,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_106',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_106,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_105',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_105,
            );
            formData.append(
              'INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_OTHERS',
              row.INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_OTHERS,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHER_YEAR',
              row.GTRTS_OTHER_TREATMENT_OTHER_YEAR,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB,
            );
            formData.append(
              'REG_AVG_SEEDLING_PER_HA_ALL_PLOTS',
              row.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS,
            );
            formData.append(
              'LOCATION_DATA_CA_UNION',
              row.LOCATION_DATA_CA_UNION,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_MO_NO',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_MO_NO,
            );
            formData.append('GUSER_PREVIOUS_RECORD', row.GUSER_PREVIOUS_RECORD);
            formData.append(
              'GTRTS_PLANTING_PLANTING_YEAR_RAW',
              row.GTRTS_PLANTING_PLANTING_YEAR_RAW,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_NURS_NOTES',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_NURS_NOTES,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW',
              row.GTRTS_OTHER_TREATMENT_OTHER_YEAR_RAW,
            );
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'INTERVENTION_DETAILS_TLOC_PLANT_YEAR',
              row.INTERVENTION_DETAILS_TLOC_PLANT_YEAR,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_TOTNURSEEDLINGS',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_TOTNURSEEDLINGS,
            );
            formData.append(
              'GTRTS_PLANTATION_SITE_YEAR',
              row.GTRTS_PLANTATION_SITE_YEAR,
            );
            formData.append('GUSER_TUSER_CELL', row.GUSER_TUSER_CELL);
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ACC',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ACC,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_152',
              row.PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_152,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_151',
              row.PLANTING_PLAN_GPLANTING_SEEDLING_NUM_GENERATED_NOTE_NAME_151,
            );
            formData.append('MAN_AFF_WIND_DIR', row.MAN_AFF_WIND_DIR);
            formData.append(
              'GTRTS_NUERSERY_RAISING_NURSERY_YEAR',
              row.GTRTS_NUERSERY_RAISING_NURSERY_YEAR,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR',
              row.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_EAST_NUR',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_EAST_NUR,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB_RAW',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_NURSERY_ESTAB_RAW,
            );
            formData.append(
              'GTRTS_COMPOST_COMPOST_YEAR_RAW',
              row.GTRTS_COMPOST_COMPOST_YEAR_RAW,
            );
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append('MAN_AFF_WAVE_DIR', row.MAN_AFF_WAVE_DIR);
            formData.append('GUSER_DCOLLECTION_RAW', row.GUSER_DCOLLECTION_RAW);
            formData.append(
              'PLANTING_PLAN_GPLANTING_MAX_SEEDLINGS',
              row.PLANTING_PLAN_GPLANTING_MAX_SEEDLINGS,
            );
            formData.append(
              'GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED',
              row.GTRTS_OTHER_TREATMENT_OTHERS_SPECIFIED,
            );
            formData.append(
              'GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR',
              row.GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_YEAR,
            );
            formData.append('ALLPATCHES', row.ALLPATCHES);
            formData.append(
              'GSITE_ECOLOGICAL_ATTRIBUTES_SF_PROG',
              row.GSITE_ECOLOGICAL_ATTRIBUTES_SF_PROG,
            );
            formData.append('CHECKED_BY', row.CHECKED_BY);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CIR',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CIR,
            );
            formData.append(
              'GENERATED_NOTE_NAME_62',
              row.GENERATED_NOTE_NAME_62,
            );
            formData.append(
              'GSITE_ECOLOGICAL_ATTRIBUTES_HIST_OTHER',
              row.GSITE_ECOLOGICAL_ATTRIBUTES_HIST_OTHER,
            );
            formData.append('MAN_AFF_FACING_ISLAND', row.MAN_AFF_FACING_ISLAND);
            formData.append(
              'LOCATION_DATA_TLOCATION',
              row.LOCATION_DATA_TLOCATION,
            );
            formData.append('GUSER_TUSER', row.GUSER_TUSER);
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_SEEDLING_SUM',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_SEEDLING_SUM,
            );
            formData.append(
              'GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW',
              row.GTRTS_NUERSERY_RAISING_NURSERY_YEAR_RAW,
            );
            formData.append(
              'INTERVENTION_DETAILS_TYPE_PLANT_PATCHES_PLANT',
              row.INTERVENTION_DETAILS_TYPE_PLANT_PATCHES_PLANT,
            );
            formData.append(
              'INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_TYPE',
              row.INTERVENTION_DETAILS_TYPE_PLANT_TLOC_PLANT_TYPE,
            );
            formData.append(
              'GTRTS_PLANTATION_SITE_YEAR_RAW',
              row.GTRTS_PLANTATION_SITE_YEAR_RAW,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CHAR,
            );
            formData.append('ECOZONE', row.ECOZONE);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BLOCK,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_NORTH_NUR',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_SITE_NORTH_NUR,
            );
            formData.append(
              'REGIN_NOTE_REGEN_NOTES',
              row.REGIN_NOTE_REGEN_NOTES,
            );
            formData.append('MAN_AFF_PIONEERS_SP', row.MAN_AFF_PIONEERS_SP);
            formData.append(
              'GTRTS_CLEANING_CUTTING_CUTTING_YEAR',
              row.GTRTS_CLEANING_CUTTING_CUTTING_YEAR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_DIVISION,
            );
            formData.append(
              'GTRTS_COMPOST_COMPOST_YEAR',
              row.GTRTS_COMPOST_COMPOST_YEAR,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_CAMP',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_CAMP,
            );
            formData.append('GUSER_DCOLLECTION', row.GUSER_DCOLLECTION);
            formData.append('CHECKED', row.CHECKED);
            formData.append(
              'GTRTS_CLEANING_CUTTING_CUTTING_YEAR_RAW',
              row.GTRTS_CLEANING_CUTTING_CUTTING_YEAR_RAW,
            );
            formData.append(
              'GTRTS_PIT_DIGGING_DIGGING_YEAR',
              row.GTRTS_PIT_DIGGING_DIGGING_YEAR,
            );
            formData.append('END_RAW', row.END_RAW);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE',
              row.LOCATION_DATA_FOREST_AD_TLOC_ENTER_RANGE,
            );
            formData.append('OVERALLNOTES', row.OVERALLNOTES);
            formData.append(
              'INTERVENTION_DETAILS_TYPE_PLANT_AREA_ACIVITY',
              row.INTERVENTION_DETAILS_TYPE_PLANT_AREA_ACIVITY,
            );
            formData.append(
              'GTRTS_VACANCY_FILLING_FILLING_YEAR_RAW',
              row.GTRTS_VACANCY_FILLING_FILLING_YEAR_RAW,
            );
            formData.append(
              'PLANTING_PLAN_BPLANTING',
              row.PLANTING_PLAN_BPLANTING,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LNG',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_LNG,
            );
            formData.append(
              'GTRTS_LAYOUT_LAYOUT_YEAR',
              row.GTRTS_LAYOUT_LAYOUT_YEAR,
            );
            formData.append(
              'INTERVENTION_DETAILS_LLOC_PLANT_AREA',
              row.INTERVENTION_DETAILS_LLOC_PLANT_AREA,
            );
            formData.append('TINTERVENTION', row.TINTERVENTION);
            formData.append('REG_PLOT_NO', row.REG_PLOT_NO);
            formData.append(
              'PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE_2',
              row.PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE_2,
            );
            formData.append('END', row.END);
            formData.append(
              'PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE_1',
              row.PLANTING_PLAN_GPLANTING_GRPSTOCKS_NTE_1,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_TPOLYTYPE_NUR',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_TPOLYTYPE_NUR,
            );
            formData.append(
              'INTERVENTION_DETAILS_TYPE_PLANT_SEEDING_PLANT',
              row.INTERVENTION_DETAILS_TYPE_PLANT_SEEDING_PLANT,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append('MAN_AFF_FACING_DIR', row.MAN_AFF_FACING_DIR);
            formData.append(
              'GSITE_ECOLOGICAL_ATTRIBUTES_LAND_COV_DESC',
              row.GSITE_ECOLOGICAL_ATTRIBUTES_LAND_COV_DESC,
            );
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_RANGE,
            );
            formData.append(
              'GTRTS_VACANCY_FILLING_FILLING_YEAR',
              row.GTRTS_VACANCY_FILLING_FILLING_YEAR,
            );
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append(
              'PLANTING_PLAN_GPLANTING_SEEDLINGS_PER_HA',
              row.PLANTING_PLAN_GPLANTING_SEEDLINGS_PER_HA,
            );
            formData.append(
              'GSITE_ECOLOGICAL_ATTRIBUTES_TLANDCOVERCLASS',
              row.GSITE_ECOLOGICAL_ATTRIBUTES_TLANDCOVERCLASS,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_NID',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_GCOORDS_NUR_NUR_CAR_NID,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_TXT_BUILD2',
              row.PLANTING_PLAN_GPLANTING_TXT_BUILD2,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ALT',
              row.PLANTING_PLAN_GPLANTING_GNURSERY_PSITEPOINT_NUR_ALT,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT',
              row.LOCATION_DATA_FOREST_AD_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'GSITE_ECOLOGICAL_ATTRIBUTES_HISTORY',
              row.GSITE_ECOLOGICAL_ATTRIBUTES_HISTORY,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_TXT_BUILD1',
              row.PLANTING_PLAN_GPLANTING_TXT_BUILD1,
            );
            formData.append('TODAY', row.TODAY);
            formData.append(
              'LOCATION_DATA_CA_TLOC_AD_DIVISION',
              row.LOCATION_DATA_CA_TLOC_AD_DIVISION,
            );
            formData.append(
              'GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW',
              row.GTRTS_CLIMBER_CUTTING_CLIMBER_YEAR_RAW,
            );
            formData.append(
              'LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV',
              row.LOCATION_DATA_FOREST_AD_TLOC_ENTER_DIV,
            );
            formData.append(
              'PLANTING_PLAN_GPLANTING_DAREA_PLANTING',
              row.PLANTING_PLAN_GPLANTING_DAREA_PLANTING,
            );
            formData.append(
              'GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR_RAW',
              row.GTRTS_COMMUNITY_PROTECTION_COMMUNITY_YEAR_RAW,
            );
            formData.append('START', row.START);
            formData.append(
              'GTRTS_PIT_DIGGING_DIGGING_YEAR_RAW',
              row.GTRTS_PIT_DIGGING_DIGGING_YEAR_RAW,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append('APPROVED', row.APPROVED);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_core?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gregen_reg_cen_to_e_blb_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_E_BLB WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gregen_reg_cen_to_e_blb?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gregen_reg_cen_to_e_blb_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_E_BLB`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gregen_reg_cen_to_e_blb?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gregen_reg_cen_to_e_bn_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_E_BN WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gregen_reg_cen_to_e_bn?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gregen_reg_cen_to_e_bn_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_E_BN`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gregen_reg_cen_to_e_bn?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gregen_reg_cen_to_e_ref_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_E_REF WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gregen_reg_cen_to_e_ref?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gregen_reg_cen_to_e_ref_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_E_REF`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gregen_reg_cen_to_e_ref?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gregen_reg_cen_to_n_blb_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_N_BLB WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gregen_reg_cen_to_n_blb?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gregen_reg_cen_to_n_blb_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_N_BLB`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gregen_reg_cen_to_n_blb?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gregen_reg_cen_to_n_bn_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_N_BN WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gregen_reg_cen_to_n_bn?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gregen_reg_cen_to_n_bn_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_N_BN`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gregen_reg_cen_to_n_bn?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gregen_reg_cen_to_n_ref_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_N_REF WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gregen_reg_cen_to_n_ref?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gregen_reg_cen_to_n_ref_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_N_REF`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gregen_reg_cen_to_n_ref?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gregen_reg_cen_to_s_blb_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_S_BLB WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gregen_reg_cen_to_s_blb?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gregen_reg_cen_to_s_blb_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_S_BLB`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gregen_reg_cen_to_s_blb?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gregen_reg_cen_to_s_bn_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_S_BN WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gregen_reg_cen_to_s_bn?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gregen_reg_cen_to_s_bn_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_S_BN`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gregen_reg_cen_to_s_bn?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gregen_reg_cen_to_s_ref_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_S_REF WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gregen_reg_cen_to_s_ref?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gregen_reg_cen_to_s_ref_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_S_REF`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gregen_reg_cen_to_s_ref?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gregen_reg_cen_to_w_blb_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_W_BLB WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gregen_reg_cen_to_w_blb?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gregen_reg_cen_to_w_blb_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_REG_CEN_TO_W_BLB`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gregen_reg_cen_to_w_blb?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gregen_spp_regen_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_SPP_REGEN WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('RSPP_NAME', row.RSPP_NAME);
            formData.append('RSPP_NR_NAT', row.RSPP_NR_NAT);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gregen_spp_regen?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gregen_spp_regen_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GREGEN_SPP_REGEN`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('RSPP_NAME', row.RSPP_NAME);
            formData.append('RSPP_NR_NAT', row.RSPP_NR_NAT);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gregen_spp_regen?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gr_regen_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GR_REGEN WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('GREGEN_RSITEPOINT_ALT', row.GREGEN_RSITEPOINT_ALT);
            formData.append(
              'REG_AVG_SEEDLING_PER_HA_PER_PLOT',
              row.REG_AVG_SEEDLING_PER_HA_PER_PLOT,
            );
            formData.append('GREGEN_REGEN_PLOT_NO', row.GREGEN_REGEN_PLOT_NO);
            formData.append('GREGEN_RSITEPOINT_ACC', row.GREGEN_RSITEPOINT_ACC);
            formData.append(
              'GENERATED_NOTE_NAME_99',
              row.GENERATED_NOTE_NAME_99,
            );
            formData.append('GREGEN_RSITEPOINT_LNG', row.GREGEN_RSITEPOINT_LNG);
            formData.append(
              'REG_AVG_SEEDLING_PER_PLOT',
              row.REG_AVG_SEEDLING_PER_PLOT,
            );
            formData.append(
              'GREGEN_GRCOORDS_RE_RSITE_NORTH',
              row.GREGEN_GRCOORDS_RE_RSITE_NORTH,
            );
            formData.append('GREGEN_RSITEPOINT_LAT', row.GREGEN_RSITEPOINT_LAT);
            formData.append(
              'GREGEN_GRCOORDS_RE_RSITE_EAST',
              row.GREGEN_GRCOORDS_RE_RSITE_EAST,
            );
            formData.append('GREGEN_RRECORD_HOW', row.GREGEN_RRECORD_HOW);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gr_regen?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gr_regen_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GR_REGEN`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('GREGEN_RSITEPOINT_ALT', row.GREGEN_RSITEPOINT_ALT);
            formData.append(
              'REG_AVG_SEEDLING_PER_HA_PER_PLOT',
              row.REG_AVG_SEEDLING_PER_HA_PER_PLOT,
            );
            formData.append('GREGEN_REGEN_PLOT_NO', row.GREGEN_REGEN_PLOT_NO);
            formData.append('GREGEN_RSITEPOINT_ACC', row.GREGEN_RSITEPOINT_ACC);
            formData.append(
              'GENERATED_NOTE_NAME_99',
              row.GENERATED_NOTE_NAME_99,
            );
            formData.append('GREGEN_RSITEPOINT_LNG', row.GREGEN_RSITEPOINT_LNG);
            formData.append(
              'REG_AVG_SEEDLING_PER_PLOT',
              row.REG_AVG_SEEDLING_PER_PLOT,
            );
            formData.append(
              'GREGEN_GRCOORDS_RE_RSITE_NORTH',
              row.GREGEN_GRCOORDS_RE_RSITE_NORTH,
            );
            formData.append('GREGEN_RSITEPOINT_LAT', row.GREGEN_RSITEPOINT_LAT);
            formData.append(
              'GREGEN_GRCOORDS_RE_RSITE_EAST',
              row.GREGEN_GRCOORDS_RE_RSITE_EAST,
            );
            formData.append('GREGEN_RRECORD_HOW', row.GREGEN_RRECORD_HOW);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gr_regen?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GSIT_COLOGICAL_ATTRBTES_LAND_COV_DESC_IMAGE_BLB WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GSIT_COLOGICAL_ATTRBTES_LAND_COV_DESC_IMAGE_BLB`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/sufal192020_gsit_cological_attrbtes_land_cov_desc_image_blb?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GSIT_COLOGICAL_ATTRBTES_LAND_COV_DESC_IMAGE_BN WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GSIT_COLOGICAL_ATTRBTES_LAND_COV_DESC_IMAGE_BN`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);
            }
            const response = await fetch(
              `${baseApi}/sufal192020_gsit_cological_attrbtes_land_cov_desc_image_bn?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GSIT_COLOGICAL_ATTRBTES_LAND_COV_DESC_IMAGE_REF WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GSIT_COLOGICAL_ATTRBTES_LAND_COV_DESC_IMAGE_REF`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);
            }
            const response = await fetch(
              `${baseApi}/sufal192020_gsit_cological_attrbtes_land_cov_desc_image_ref?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gtrts_cleaning_cutting_cutting_month_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GTRTS_CLEANING_CUTTING_CUTTING_MONTH WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal192020_gtrts_cleaning_cutting_cutting_month?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gtrts_cleaning_cutting_cutting_month_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GTRTS_CLEANING_CUTTING_CUTTING_MONTH`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/sufal192020_gtrts_cleaning_cutting_cutting_month?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gtrts_climber_cutting_climber_month_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GTRTS_CLIMBER_CUTTING_CLIMBER_MONTH WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal192020_gtrts_climber_cutting_climber_month?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gtrts_climber_cutting_climber_month_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GTRTS_CLIMBER_CUTTING_CLIMBER_MONTH`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/sufal192020_gtrts_climber_cutting_climber_month?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gtrts_commnty_protcton_community_month_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GTRTS_COMMNTY_PROTCTON_COMMUNITY_MONTH WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal192020_gtrts_commnty_protcton_community_month?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gtrts_commnty_protcton_community_month_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GTRTS_COMMNTY_PROTCTON_COMMUNITY_MONTH`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/sufal192020_gtrts_commnty_protcton_community_month?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gtrts_composts_pit_composts_pit_month_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_MONTH WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal192020_gtrts_composts_pit_composts_pit_month?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gtrts_composts_pit_composts_pit_month_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GTRTS_COMPOSTS_PIT_COMPOSTS_PIT_MONTH`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/sufal192020_gtrts_composts_pit_composts_pit_month?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gtrts_compost_compost_month_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GTRTS_COMPOST_COMPOST_MONTH WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gtrts_compost_compost_month?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gtrts_compost_compost_month_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GTRTS_COMPOST_COMPOST_MONTH`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gtrts_compost_compost_month?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gtrts_layout_layout_month_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GTRTS_LAYOUT_LAYOUT_MONTH WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gtrts_layout_layout_month?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gtrts_layout_layout_month_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GTRTS_LAYOUT_LAYOUT_MONTH`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gtrts_layout_layout_month?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gtrts_nuersery_raising_nursery_month_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GTRTS_NUERSERY_RAISING_NURSERY_MONTH WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal192020_gtrts_nuersery_raising_nursery_month?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gtrts_nuersery_raising_nursery_month_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GTRTS_NUERSERY_RAISING_NURSERY_MONTH`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/sufal192020_gtrts_nuersery_raising_nursery_month?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gtrts_other_treatment_other_month_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GTRTS_OTHER_TREATMENT_OTHER_MONTH WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gtrts_other_treatment_other_month?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gtrts_other_treatment_other_month_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GTRTS_OTHER_TREATMENT_OTHER_MONTH`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/sufal192020_gtrts_other_treatment_other_month?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gtrts_pit_digging_digging_month_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GTRTS_PIT_DIGGING_DIGGING_MONTH WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gtrts_pit_digging_digging_month?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gtrts_pit_digging_digging_month_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GTRTS_PIT_DIGGING_DIGGING_MONTH`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gtrts_pit_digging_digging_month?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gtrts_plantation_site_month_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GTRTS_PLANTATION_SITE_MONTH WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gtrts_plantation_site_month?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gtrts_plantation_site_month_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GTRTS_PLANTATION_SITE_MONTH`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gtrts_plantation_site_month?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gtrts_planting_planting_month_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GTRTS_PLANTING_PLANTING_MONTH WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gtrts_planting_planting_month?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gtrts_planting_planting_month_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GTRTS_PLANTING_PLANTING_MONTH`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gtrts_planting_planting_month?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gtrts_vacancy_filling_filling_month_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GTRTS_VACANCY_FILLING_FILLING_MONTH WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal192020_gtrts_vacancy_filling_filling_month?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gtrts_vacancy_filling_filling_month_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL192020_GTRTS_VACANCY_FILLING_FILLING_MONTH`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/sufal192020_gtrts_vacancy_filling_filling_month?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_gtrts_weeding_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GTRTS_WEEDING WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('WEEDING_CYCLE', row.WEEDING_CYCLE);
            formData.append('WEEDING_YEAR', row.WEEDING_YEAR);
            formData.append('WEEDING_YEAR_RAW', row.WEEDING_YEAR_RAW);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_gtrts_weeding?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_gtrts_weeding_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_GTRTS_WEEDING`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('WEEDING_CYCLE', row.WEEDING_CYCLE);
            formData.append('WEEDING_YEAR', row.WEEDING_YEAR);
            formData.append('WEEDING_YEAR_RAW', row.WEEDING_YEAR_RAW);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_gtrts_weeding?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_location_data_ca_tloc_ad_upzilla_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_LOCATION_DATA_CA_TLOC_AD_UPZILLA WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_location_data_ca_tloc_ad_upzilla?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_location_data_ca_tloc_ad_upzilla_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_LOCATION_DATA_CA_TLOC_AD_UPZILLA`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_location_data_ca_tloc_ad_upzilla?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_location_data_m_sh1_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_LOCATION_DATA_M_SH1 WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'MOUZA_SHEET1_SHEETS_OTHERS_S_TYPES',
              row.MOUZA_SHEET1_SHEETS_OTHERS_S_TYPES,
            );
            formData.append(
              'MOUZA_SHEET1_SURVEY_TYPES',
              row.MOUZA_SHEET1_SURVEY_TYPES,
            );
            formData.append(
              'MOUZA_SHEET1_SHEETS_MOUZA1',
              row.MOUZA_SHEET1_SHEETS_MOUZA1,
            );
            formData.append(
              'MOUZA_SHEET1_SHEETS_SHEET1',
              row.MOUZA_SHEET1_SHEETS_SHEET1,
            );
            formData.append(
              'MOUZA_SHEET1_SHEETS_PLOT_NO',
              row.MOUZA_SHEET1_SHEETS_PLOT_NO,
            );

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_location_data_m_sh1?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_location_data_m_sh1_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_LOCATION_DATA_M_SH1`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'MOUZA_SHEET1_SHEETS_OTHERS_S_TYPES',
              row.MOUZA_SHEET1_SHEETS_OTHERS_S_TYPES,
            );
            formData.append(
              'MOUZA_SHEET1_SURVEY_TYPES',
              row.MOUZA_SHEET1_SURVEY_TYPES,
            );
            formData.append(
              'MOUZA_SHEET1_SHEETS_MOUZA1',
              row.MOUZA_SHEET1_SHEETS_MOUZA1,
            );
            formData.append(
              'MOUZA_SHEET1_SHEETS_SHEET1',
              row.MOUZA_SHEET1_SHEETS_SHEET1,
            );
            formData.append(
              'MOUZA_SHEET1_SHEETS_PLOT_NO',
              row.MOUZA_SHEET1_SHEETS_PLOT_NO,
            );
          }
          const response = await fetch(
            `${baseApi}/sufal192020_location_data_m_sh1?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_overallnotes_ima_blb_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_OVERALLNOTES_IMA_BLB WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_overallnotes_ima_blb?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_overallnotes_ima_blb_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_OVERALLNOTES_IMA_BLB`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_overallnotes_ima_blb?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_weeding_month_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_WEEDING_MONTH WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_weeding_month?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_weeding_month_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_WEEDING_MONTH`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_weeding_month?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_xpictureextra_blb_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_XPICTUREEXTRA_BLB WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_xpictureextra_blb?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_xpictureextra_blb_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_XPICTUREEXTRA_BLB`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_xpictureextra_blb?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_xpictureextra_bn_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_XPICTUREEXTRA_BN WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_xpictureextra_bn?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_xpictureextra_bn_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_XPICTUREEXTRA_BN`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_xpictureextra_bn?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal192020_xpictureextra_ref_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL192020_XPICTUREEXTRA_REF WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal192020_xpictureextra_ref?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal192020_xpictureextra_ref_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL192020_XPICTUREEXTRA_REF`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);
          }
          const response = await fetch(
            `${baseApi}/sufal192020_xpictureextra_ref?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal_13_2021_core_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM SUFAL_13_2021_CORE WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'FOREST_AD_TLOC_FD_DIVISION',
              row.FOREST_AD_TLOC_FD_DIVISION,
            );
            formData.append(
              'FOREST_AD_TLOC_PLANT_TYPE',
              row.FOREST_AD_TLOC_PLANT_TYPE,
            );
            formData.append(
              'FOREST_AD_TLOC_PLANT_YEAR',
              row.FOREST_AD_TLOC_PLANT_YEAR,
            );
            formData.append(
              'REG_AVG_SEEDLING_ALL_PLOTS',
              row.REG_AVG_SEEDLING_ALL_PLOTS,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append(
              'FOREST_AD_TLOC_FD_BEAT',
              row.FOREST_AD_TLOC_FD_BEAT,
            );
            formData.append('FOREST_AD_TLOC_FD_CIR', row.FOREST_AD_TLOC_FD_CIR);
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_62',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_62,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_63',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_63,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_64',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_64,
            );
            formData.append('CHECKED', row.CHECKED);
            formData.append(
              'FOREST_AD_TLOC_ENTER_DIV',
              row.FOREST_AD_TLOC_ENTER_DIV,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_65',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_65,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_66',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_66,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_67',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_67,
            );
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append('END_RAW', row.END_RAW);
            formData.append('CHECKED_BY', row.CHECKED_BY);
            formData.append('TODAY', row.TODAY);
            formData.append(
              'REG_AVG_SEEDLING_PER_HA_ALL_PLOTS',
              row.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append(
              'FOREST_AD_TLOC_FD_BEAT_TXT',
              row.FOREST_AD_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'FOREST_AD_TLOC_FD_RANGE',
              row.FOREST_AD_TLOC_FD_RANGE,
            );
            formData.append('REG_PLOT_NO', row.REG_PLOT_NO);
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'FOREST_AD_GENERATED_NOTE_NAME_13',
              row.FOREST_AD_GENERATED_NOTE_NAME_13,
            );
            formData.append(
              'FOREST_AD_TLOC_ENTER_RANGE',
              row.FOREST_AD_TLOC_ENTER_RANGE,
            );
            formData.append(
              'FOREST_AD_TLOC_FD_RANGE_TXT',
              row.FOREST_AD_TLOC_FD_RANGE_TXT,
            );
            formData.append(
              'REG_AVG_TREES_PER_HA_ALL_PLOTS',
              row.REG_AVG_TREES_PER_HA_ALL_PLOTS,
            );
            formData.append('START', row.START);
            formData.append('END', row.END);
            formData.append(
              'REG_AVG_TREES_ALL_PLOTS',
              row.REG_AVG_TREES_ALL_PLOTS,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append('APPROVED', row.APPROVED);
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/sufal_13_2021_core?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal_13_2021_core_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM SUFAL_13_2021_CORE`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_MODEL_VERSION', row._MODEL_VERSION);
            formData.append('_UI_VERSION', row._UI_VERSION);
            formData.append('_IS_COMPLETE', row._IS_COMPLETE);
            formData.append('_SUBMISSION_DATE', row._SUBMISSION_DATE);
            formData.append(
              '_MARKED_AS_COMPLETE_DATE',
              row._MARKED_AS_COMPLETE_DATE,
            );
            formData.append(
              'FOREST_AD_TLOC_FD_DIVISION',
              row.FOREST_AD_TLOC_FD_DIVISION,
            );
            formData.append(
              'FOREST_AD_TLOC_PLANT_TYPE',
              row.FOREST_AD_TLOC_PLANT_TYPE,
            );
            formData.append(
              'FOREST_AD_TLOC_PLANT_YEAR',
              row.FOREST_AD_TLOC_PLANT_YEAR,
            );
            formData.append(
              'REG_AVG_SEEDLING_ALL_PLOTS',
              row.REG_AVG_SEEDLING_ALL_PLOTS,
            );
            formData.append('PHONENUMBER', row.PHONENUMBER);
            formData.append(
              'FOREST_AD_TLOC_FD_BEAT',
              row.FOREST_AD_TLOC_FD_BEAT,
            );
            formData.append('FOREST_AD_TLOC_FD_CIR', row.FOREST_AD_TLOC_FD_CIR);
            formData.append('START_RAW', row.START_RAW);
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_62',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_62,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_63',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_63,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_64',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_64,
            );
            formData.append('CHECKED', row.CHECKED);
            formData.append(
              'FOREST_AD_TLOC_ENTER_DIV',
              row.FOREST_AD_TLOC_ENTER_DIV,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_65',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_65,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_66',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_66,
            );
            formData.append(
              'REGIN_NOTE_GENERATED_NOTE_NAME_67',
              row.REGIN_NOTE_GENERATED_NOTE_NAME_67,
            );
            formData.append('META_INSTANCE_ID', row.META_INSTANCE_ID);
            formData.append('SIMSERIAL', row.SIMSERIAL);
            formData.append('END_RAW', row.END_RAW);
            formData.append('CHECKED_BY', row.CHECKED_BY);
            formData.append('TODAY', row.TODAY);
            formData.append(
              'REG_AVG_SEEDLING_PER_HA_ALL_PLOTS',
              row.REG_AVG_SEEDLING_PER_HA_ALL_PLOTS,
            );
            formData.append('SUBSCRIBERID', row.SUBSCRIBERID);
            formData.append(
              'FOREST_AD_TLOC_FD_BEAT_TXT',
              row.FOREST_AD_TLOC_FD_BEAT_TXT,
            );
            formData.append(
              'FOREST_AD_TLOC_FD_RANGE',
              row.FOREST_AD_TLOC_FD_RANGE,
            );
            formData.append('REG_PLOT_NO', row.REG_PLOT_NO);
            formData.append('DEVICEID', row.DEVICEID);
            formData.append(
              'FOREST_AD_GENERATED_NOTE_NAME_13',
              row.FOREST_AD_GENERATED_NOTE_NAME_13,
            );
            formData.append(
              'FOREST_AD_TLOC_ENTER_RANGE',
              row.FOREST_AD_TLOC_ENTER_RANGE,
            );
            formData.append(
              'FOREST_AD_TLOC_FD_RANGE_TXT',
              row.FOREST_AD_TLOC_FD_RANGE_TXT,
            );
            formData.append(
              'REG_AVG_TREES_PER_HA_ALL_PLOTS',
              row.REG_AVG_TREES_PER_HA_ALL_PLOTS,
            );
            formData.append('START', row.START);
            formData.append('END', row.END);
            formData.append(
              'REG_AVG_TREES_ALL_PLOTS',
              row.REG_AVG_TREES_ALL_PLOTS,
            );
            formData.append('TODAY_RAW', row.TODAY_RAW);
            formData.append('APPROVED', row.APPROVED);
            formData.append('project_id', row.project_id);
            formData.append('sort', row.sort);
            formData.append('last_log_id', row.last_log_id);
            formData.append('restore_id', row.restore_id);
            formData.append('created_at', row.created_at);
            formData.append('created_by', row.created_by);
            formData.append('updated_at', row.updated_at);
            formData.append('updated_by', row.updated_by);
            formData.append('deleted_at', row.deleted_at);
            formData.append('deleted_by', row.deleted_by);
            formData.append('deleted_status', row.deleted_status);
            formData.append('status', row.status);
          }
          const response = await fetch(
            `${baseApi}/sufal_13_2021_core?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_E_BLB WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_E_BLB`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_blb?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_E_BN WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_E_BN`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);
            }
            const response = await fetch(
              `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_bn?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const com202021_conslttn_ttndnc_pctre_consultation_notes_bn_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM COM202021_CONSLTTN_TTNDNC_PCTRE_CONSULTATION_NOTES_BN WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_notes_bn?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const com202021_conslttn_ttndnc_pctre_consultation_notes_bn_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM COM202021_CONSLTTN_TTNDNC_PCTRE_CONSULTATION_NOTES_BN`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);
            }
            const response = await fetch(
              `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_notes_bn?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const com202021_conslttn_ttndnc_pctre_consultation_notes_ref_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM COM202021_CONSLTTN_TTNDNC_PCTRE_CONSULTATION_NOTES_REF WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_notes_ref?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const com202021_conslttn_ttndnc_pctre_consultation_notes_ref_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM COM202021_CONSLTTN_TTNDNC_PCTRE_CONSULTATION_NOTES_REF`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);
            }
            const response = await fetch(
              `${baseApi}/com202021_conslttn_ttndnc_pctre_consultation_notes_ref?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const com202021_consultation_issues_others_ques_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM COM202021_CONSULTATION_ISSUES_OTHERS_QUES WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'GENERATED_NOTE_NAME_56',
              row.GENERATED_NOTE_NAME_56,
            );
            formData.append('OTHERS_ISSUES', row.OTHERS_ISSUES);
            formData.append('OTHERS_ISSUES_ANS', row.OTHERS_ISSUES_ANS);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/com202021_consultation_issues_others_ques?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const com202021_consultation_issues_others_ques_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM COM202021_CONSULTATION_ISSUES_OTHERS_QUES`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'GENERATED_NOTE_NAME_56',
              row.GENERATED_NOTE_NAME_56,
            );
            formData.append('OTHERS_ISSUES', row.OTHERS_ISSUES);
            formData.append('OTHERS_ISSUES_ANS', row.OTHERS_ISSUES_ANS);
          }
          const response = await fetch(
            `${baseApi}/com202021_consultation_issues_others_ques?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const com202021_consultation_photo_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM COM202021_CONSULTATION_PHOTO WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'GENERATED_NOTE_NAME_36',
              row.GENERATED_NOTE_NAME_36,
            );

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/com202021_consultation_photo?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const com202021_consultation_photo_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM COM202021_CONSULTATION_PHOTO`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'GENERATED_NOTE_NAME_36',
              row.GENERATED_NOTE_NAME_36,
            );
          }
          const response = await fetch(
            `${baseApi}/com202021_consultation_photo?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const com202021_consultation_picture_blb_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM COM202021_CONSULTATION_PICTURE_BLB WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/com202021_consultation_picture_blb?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const com202021_consultation_picture_blb_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM COM202021_CONSULTATION_PICTURE_BLB`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/com202021_consultation_picture_blb?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const gener43_2021_beat_index_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM GENER43_2021_BEAT_INDEX WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'GENERATED_NOTE_NAME_48',
              row.GENERATED_NOTE_NAME_48,
            );

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/gener43_2021_beat_index?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const gener43_2021_beat_index_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM GENER43_2021_BEAT_INDEX`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'GENERATED_NOTE_NAME_48',
              row.GENERATED_NOTE_NAME_48,
            );
          }
          const response = await fetch(
            `${baseApi}/gener43_2021_beat_index?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const gener43_2021_ghumissues_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM GENER43_2021_GHUMISSUES WHERE _PARENT_AURI =? OR _TOP_LEVEL_AURI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:in human', row);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            // formData.append(
            //   'GENERATED_NOTE_NAME_89',
            //   row.GENERATED_NOTE_NAME_89,
            // );
            formData.append('HUMISSUES', row.HUMISSUES);
            formData.append('HUM_LEVEL', row.HUM_LEVEL);
            formData.append('HUM_OTHER', row.HUM_OTHER);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/gener43_2021_ghumissues_create?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const gener43_2021_ghumissues_sync2 = async uri => {
  console.log("ghuman")
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM GENER43_2021_GHUMISSUES WHERE _PARENT_AURI =? OR _TOP_LEVEL_AURI = ?`, // Query the aspects table
        [uri],
        async (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
		  const formData = new FormData();
            
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
			(row._URI != '' ) ? formData.append('_URI[]', row._URI) : '';
(row._CREATOR_URI_USER != '' ) ? formData.append('_CREATOR_URI_USER[]', row._CREATOR_URI_USER) : '';
(row._CREATION_DATE != '' ) ? formData.append('_CREATION_DATE[]', row._CREATION_DATE) : '';
(row._LAST_UPDATE_URI_USER != '' ) ? formData.append('_LAST_UPDATE_URI_USER[]', row._LAST_UPDATE_URI_USER) : '';
(row._LAST_UPDATE_DATE != '' ) ? formData.append('_LAST_UPDATE_DATE[]', row._LAST_UPDATE_DATE) : '';
(row._PARENT_AURI != '' ) ? formData.append('_PARENT_AURI[]', row._PARENT_AURI) : '';
(row._ORDINAL_NUMBER != '' ) ? formData.append('_ORDINAL_NUMBER[]', row._ORDINAL_NUMBER) : '';
(row._TOP_LEVEL_AURI != '' ) ? formData.append('_TOP_LEVEL_AURI[]', row._TOP_LEVEL_AURI) : '';
(row.GENERATED_NOTE_NAME_89 != '' ) ? formData.append('GENERATED_NOTE_NAME_89[]', row.GENERATED_NOTE_NAME_89) : '';
(row.HUMISSUES != '' ) ? formData.append('HUMISSUES[]', row.HUMISSUES) : '';
(row.HUM_LEVEL != '' ) ? formData.append('HUM_LEVEL[]', row.HUM_LEVEL) : '';
(row.HUM_OTHER != '' ) ? formData.append('HUM_OTHER[]', row.HUM_OTHER) : '';

          }
		  const response = await fetch(
			`${baseApi}/gener43_2021_ghumissues_create?token=${token}`,
			{
			  method: 'POST',
			  headers: {
				Accept: 'application/json',
				// Note: 'Content-Type' should NOT be set when using FormData
			  },
			  body: formData,
			},
		  );
          resolve(data);
          console.log(response)
          console.log(response.status)
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const gener43_2021_gnatissues_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM GENER43_2021_GNATISSUES WHERE _PARENT_AURI =? OR _TOP_LEVEL_AURI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:in add 2', row);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('NATISSUES', row.NATISSUES);
            formData.append('NAT_LEVEL', row.NAT_LEVEL);
            // formData.append(
            //   'GENERATED_NOTE_NAME_83',
            //   row.GENERATED_NOTE_NAME_83,
            // );
            formData.append('NAT_OTHER', row.NAT_OTHER);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/gener43_2021_gnatissues_create?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI: for natissue..', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const gener43_2021_gnatissues_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    console.log("hwllo gnat")
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM GENER43_2021_GNATISSUES WHERE _PARENT_AURI =? OR _TOP_LEVEL_AURI = ?`, // Query the aspects table
        [uri],
        async (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
		  const formData = new FormData();
            
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            console.log(row)
            data.push(row);
			  (row._URI != '' ) ? formData.append('_URI[]', row._URI) : '';
        (row._CREATOR_URI_USER != '' ) ? formData.append('_CREATOR_URI_USER[]', row._CREATOR_URI_USER) : '';
        (row._CREATION_DATE != '' ) ? formData.append('_CREATION_DATE[]', row._CREATION_DATE) : '';
        (row._LAST_UPDATE_URI_USER != '' ) ? formData.append('_LAST_UPDATE_URI_USER[]', row._LAST_UPDATE_URI_USER) : '';
        (row._LAST_UPDATE_DATE != '' ) ? formData.append('_LAST_UPDATE_DATE[]', row._LAST_UPDATE_DATE) : '';
        (row._PARENT_AURI != '' ) ? formData.append('_PARENT_AURI[]', row._PARENT_AURI) : '';
        (row._ORDINAL_NUMBER != '' ) ? formData.append('_ORDINAL_NUMBER[]', row._ORDINAL_NUMBER) : '';
        (row._TOP_LEVEL_AURI != '' ) ? formData.append('_TOP_LEVEL_AURI[]', row._TOP_LEVEL_AURI) : '';
        (row.NATISSUES != '' ) ? formData.append('NATISSUES[]', row.NATISSUES) : '';
        (row.NAT_LEVEL != '' ) ? formData.append('NAT_LEVEL[]', row.NAT_LEVEL) : '';
        (row.GENERATED_NOTE_NAME_83 != '' ) ? formData.append('GENERATED_NOTE_NAME_83[]', row.GENERATED_NOTE_NAME_83) : '';
        (row.NAT_OTHER != '' ) ? formData.append('NAT_OTHER[]', row.NAT_OTHER) : '';

          }
		  const response = await fetch(
			`${baseApi}/gener43_2021_gnatissues_create?token=${token}`,
			{
			  method: 'POST',
			  headers: {
				Accept: 'application/json',
				// Note: 'Content-Type' should NOT be set when using FormData
			  },
			  body: formData,
			},
		  );
          resolve(data);
          console.log(response)
          console.log(response.status)
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const gener43_2021_gvillages_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM GENER43_2021_GVILLAGES WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('SOCFOR_PARTIC', row.SOCFOR_PARTIC);
            formData.append('VRECORD_HOW', row.VRECORD_HOW);
            formData.append('VILLA_AD_UNION', row.VILLA_AD_UNION);
            formData.append('FOREST_VILGRS', row.FOREST_VILGRS);
            formData.append('TOT_HH', row.TOT_HH);
            formData.append('VSITEPOINT_ACC', row.VSITEPOINT_ACC);
            formData.append('VSITEPOINT_LAT', row.VSITEPOINT_LAT);
            formData.append('FCV_PARTC', row.FCV_PARTC);
            formData.append('TVILLAGE_NAME', row.TVILLAGE_NAME);
            formData.append('VSITEPOINT_ALT', row.VSITEPOINT_ALT);
            formData.append('GRCOORDS_VSITE_EAST', row.GRCOORDS_VSITE_EAST);
            formData.append('VILLA_AD_UPZILLA', row.VILLA_AD_UPZILLA);
            formData.append(
              'GENERATED_NOTE_NAME_170',
              row.GENERATED_NOTE_NAME_170,
            );
            formData.append('GRCOORDS_VSITE_NORTH', row.GRCOORDS_VSITE_NORTH);
            formData.append('VSITEPOINT_LNG', row.VSITEPOINT_LNG);
            formData.append('VILLA_DIST', row.VILLA_DIST);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/gener43_2021_gvillages?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const gener43_2021_gvillages_sync2 = async uri => {
  console.log("gvillage..")
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM GENER43_2021_GVILLAGES WHERE _PARENT_AURI =? OR _TOP_LEVEL_AURI = ?`, // Query the aspects table
        [uri],
        async (_, resultSet) => {
          console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
		  const formData = new FormData();
            
          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
          (row._URI != '' ) ? formData.append('_URI[]', row._URI) : '';
          (row._CREATOR_URI_USER != '' ) ? formData.append('_CREATOR_URI_USER[]', row._CREATOR_URI_USER) : '';
          (row._CREATION_DATE != '' ) ? formData.append('_CREATION_DATE[]', row._CREATION_DATE) : '';
          (row._LAST_UPDATE_URI_USER != '' ) ? formData.append('_LAST_UPDATE_URI_USER[]', row._LAST_UPDATE_URI_USER) : '';
          (row._LAST_UPDATE_DATE != '' ) ? formData.append('_LAST_UPDATE_DATE[]', row._LAST_UPDATE_DATE) : '';
          (row._PARENT_AURI != '' ) ? formData.append('_PARENT_AURI[]', row._PARENT_AURI) : '';
          (row._ORDINAL_NUMBER != '' ) ? formData.append('_ORDINAL_NUMBER[]', row._ORDINAL_NUMBER) : '';
          (row._TOP_LEVEL_AURI != '' ) ? formData.append('_TOP_LEVEL_AURI[]', row._TOP_LEVEL_AURI) : '';
          (row.SOCFOR_PARTIC != '' ) ? formData.append('SOCFOR_PARTIC[]', row.SOCFOR_PARTIC) : '';
          (row.VRECORD_HOW != '' ) ? formData.append('VRECORD_HOW[]', row.VRECORD_HOW) : '';
          (row.VILLA_AD_UNION != '' ) ? formData.append('VILLA_AD_UNION[]', row.VILLA_AD_UNION) : '';
          (row.FOREST_VILGRS != '' ) ? formData.append('FOREST_VILGRS[]', row.FOREST_VILGRS) : '';
          (row.TOT_HH != '' ) ? formData.append('TOT_HH[]', row.TOT_HH) : '';
          (row.VSITEPOINT_ACC != '' ) ? formData.append('VSITEPOINT_ACC[]', row.VSITEPOINT_ACC) : '';
          (row.VSITEPOINT_LAT != '' ) ? formData.append('VSITEPOINT_LAT[]', row.VSITEPOINT_LAT) : '';
          (row.FCV_PARTC != '' ) ? formData.append('FCV_PARTC[]', row.FCV_PARTC) : '';
          (row.TVILLAGE_NAME != '' ) ? formData.append('TVILLAGE_NAME[]', row.TVILLAGE_NAME) : '';
          (row.VSITEPOINT_ALT != '' ) ? formData.append('VSITEPOINT_ALT[]', row.VSITEPOINT_ALT) : '';
          (row.GRCOORDS_VSITE_EAST != '' ) ? formData.append('GRCOORDS_VSITE_EAST[]', row.GRCOORDS_VSITE_EAST) : '';
          (row.VILLA_AD_UPZILLA != '' ) ? formData.append('VILLA_AD_UPZILLA[]', row.VILLA_AD_UPZILLA) : '';
          (row.GENERATED_NOTE_NAME_170 != '' ) ? formData.append('GENERATED_NOTE_NAME_170[]', row.GENERATED_NOTE_NAME_170) : '';
          (row.GRCOORDS_VSITE_NORTH != '' ) ? formData.append('GRCOORDS_VSITE_NORTH[]', row.GRCOORDS_VSITE_NORTH) : '';
          (row.VSITEPOINT_LNG != '' ) ? formData.append('VSITEPOINT_LNG[]', row.VSITEPOINT_LNG) : '';
          (row.VILLA_DIST != '' ) ? formData.append('VILLA_DIST[]', row.VILLA_DIST) : '';

          }
		  const response = await fetch(
			`${baseApi}/gener43_2021_gvillages_create?token=${token}`,
			{
			  method: 'POST',
			  headers: {
				Accept: 'application/json',
				// Note: 'Content-Type' should NOT be set when using FormData
			  },
			  body: formData,
			},
		  );
          resolve(data);
          console.log(response)
          console.log(response.status)
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const gener43_2021_overallnotes_ima_bn_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM GENER43_2021_OVERALLNOTES_IMA_BN WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/gener43_2021_overallnotes_ima_bn?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const gener43_2021_overallnotes_ima_bn_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM GENER43_2021_OVERALLNOTES_IMA_BN`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);
          }
          const response = await fetch(
            `${baseApi}/gener43_2021_overallnotes_ima_bn?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const gener43_2021_overallnotes_ima_ref_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM GENER43_2021_OVERALLNOTES_IMA_REF WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/gener43_2021_overallnotes_ima_ref?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const gener43_2021_overallnotes_ima_ref_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM GENER43_2021_OVERALLNOTES_IMA_REF`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);
          }
          const response = await fetch(
            `${baseApi}/gener43_2021_overallnotes_ima_ref?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const gener43_2021_xpic_beat_index_bn_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM GENER43_2021_XPIC_BEAT_INDEX_BN WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/gener43_2021_xpic_beat_index_bn?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const gener43_2021_xpic_beat_index_bn_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM GENER43_2021_XPIC_BEAT_INDEX_BN`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);
          }
          const response = await fetch(
            `${baseApi}/gener43_2021_xpic_beat_index_bn?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const gener43_2021_xpic_beat_index_ref_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM GENER43_2021_XPIC_BEAT_INDEX_REF WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/gener43_2021_xpic_beat_index_ref?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const gener43_2021_xpic_beat_index_ref_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM GENER43_2021_XPIC_BEAT_INDEX_REF`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);
          }
          const response = await fetch(
            `${baseApi}/gener43_2021_xpic_beat_index_ref?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_community_month_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_COMMUNITY_MONTH WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_community_month?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_community_month_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_COMMUNITY_MONTH`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_community_month?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_E_REF WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_E_REF`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);
            }
            const response = await fetch(
              `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_e_ref?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_N_BLB WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_N_BLB`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_n_blb?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_S_BLB WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_S_BLB`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_s_blb?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_S_BN WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_S_BN`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);
            }
            const response = await fetch(
              `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_s_bn?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_S_REF WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_S_REF`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);
            }
            const response = await fetch(
              `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_s_ref?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_W_BLB WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_W_BLB`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_w_blb?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_W_BN WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_W_BN`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);
            }
            const response = await fetch(
              `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_w_bn?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_W_REF WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_W_REF`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);
            }
            const response = await fetch(
              `${baseApi}/plant27_2021_gregen_gregen_plot_reg_cen_to_w_ref?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gregen_spp_regen_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_GREGEN_SPP_REGEN WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('NUM_TREES', row.NUM_TREES);
            formData.append('RSPP_NAME', row.RSPP_NAME);
            formData.append(
              'GENERATED_NOTE_NAME_95',
              row.GENERATED_NOTE_NAME_95,
            );
            formData.append('RSPP_NR_NAT', row.RSPP_NR_NAT);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_gregen_spp_regen?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gregen_spp_regen_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_GREGEN_SPP_REGEN`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('NUM_TREES', row.NUM_TREES);
            formData.append('RSPP_NAME', row.RSPP_NAME);
            formData.append(
              'GENERATED_NOTE_NAME_95',
              row.GENERATED_NOTE_NAME_95,
            );
            formData.append('RSPP_NR_NAT', row.RSPP_NR_NAT);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_gregen_spp_regen?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gr_regen_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_GR_REGEN WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'REG_AVG_SEEDLING_PER_HA_PER_PLOT',
              row.REG_AVG_SEEDLING_PER_HA_PER_PLOT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_CROWN_CLOSURE',
              row.GREGEN_GREGEN_PLOT_CROWN_CLOSURE,
            );
            formData.append(
              'REG_AVG_SEEDLING_PER_PLOT',
              row.REG_AVG_SEEDLING_PER_PLOT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_80',
              row.GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_80,
            );
            formData.append(
              'REG_AVG_TREES_PER_HA_PER_PLOT',
              row.REG_AVG_TREES_PER_HA_PER_PLOT,
            );
            formData.append(
              'GENERATED_NOTE_NAME_106',
              row.GENERATED_NOTE_NAME_106,
            );
            formData.append(
              'GENERATED_NOTE_NAME_103',
              row.GENERATED_NOTE_NAME_103,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RSITEPOINT_ALT',
              row.GREGEN_GREGEN_PLOT_RSITEPOINT_ALT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST',
              row.GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RSITEPOINT_LNG',
              row.GREGEN_GREGEN_PLOT_RSITEPOINT_LNG,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_REGEN_PLOT_NO',
              row.GREGEN_GREGEN_PLOT_REGEN_PLOT_NO,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RSITEPOINT_LAT',
              row.GREGEN_GREGEN_PLOT_RSITEPOINT_LAT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RSITEPOINT_ACC',
              row.GREGEN_GREGEN_PLOT_RSITEPOINT_ACC,
            );
            formData.append(
              'REG_AVG_TREES_PER_PLOT',
              row.REG_AVG_TREES_PER_PLOT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RRECORD_HOW',
              row.GREGEN_GREGEN_PLOT_RRECORD_HOW,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH',
              row.GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH,
            );

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_gr_regen?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gr_regen_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_GR_REGEN`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'REG_AVG_SEEDLING_PER_HA_PER_PLOT',
              row.REG_AVG_SEEDLING_PER_HA_PER_PLOT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_CROWN_CLOSURE',
              row.GREGEN_GREGEN_PLOT_CROWN_CLOSURE,
            );
            formData.append(
              'REG_AVG_SEEDLING_PER_PLOT',
              row.REG_AVG_SEEDLING_PER_PLOT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_80',
              row.GREGEN_GREGEN_PLOT_GENERATED_NOTE_NAME_80,
            );
            formData.append(
              'REG_AVG_TREES_PER_HA_PER_PLOT',
              row.REG_AVG_TREES_PER_HA_PER_PLOT,
            );
            formData.append(
              'GENERATED_NOTE_NAME_106',
              row.GENERATED_NOTE_NAME_106,
            );
            formData.append(
              'GENERATED_NOTE_NAME_103',
              row.GENERATED_NOTE_NAME_103,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RSITEPOINT_ALT',
              row.GREGEN_GREGEN_PLOT_RSITEPOINT_ALT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST',
              row.GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_EAST,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RSITEPOINT_LNG',
              row.GREGEN_GREGEN_PLOT_RSITEPOINT_LNG,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_REGEN_PLOT_NO',
              row.GREGEN_GREGEN_PLOT_REGEN_PLOT_NO,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RSITEPOINT_LAT',
              row.GREGEN_GREGEN_PLOT_RSITEPOINT_LAT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RSITEPOINT_ACC',
              row.GREGEN_GREGEN_PLOT_RSITEPOINT_ACC,
            );
            formData.append(
              'REG_AVG_TREES_PER_PLOT',
              row.REG_AVG_TREES_PER_PLOT,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_RRECORD_HOW',
              row.GREGEN_GREGEN_PLOT_RRECORD_HOW,
            );
            formData.append(
              'GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH',
              row.GREGEN_GREGEN_PLOT_GRCOORDS_RE_RSITE_NORTH,
            );
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_gr_regen?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gtrts_climber_cutting_climber_month_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GTRTS_CLIMBER_CUTTING_CLIMBER_MONTH WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/plant27_2021_gtrts_climber_cutting_climber_month?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gtrts_climber_cutting_climber_month_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GTRTS_CLIMBER_CUTTING_CLIMBER_MONTH`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/plant27_2021_gtrts_climber_cutting_climber_month?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gtrts_community_protection_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_GTRTS_COMMUNITY_PROTECTION WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'GENERATED_NOTE_NAME_257',
              row.GENERATED_NOTE_NAME_257,
            );
            formData.append('COMMUNITY_YEAR_RAW', row.COMMUNITY_YEAR_RAW);
            formData.append('COMMUNITY_YEAR', row.COMMUNITY_YEAR);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_gtrts_community_protection?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gtrts_community_protection_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_GTRTS_COMMUNITY_PROTECTION`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append(
              'GENERATED_NOTE_NAME_257',
              row.GENERATED_NOTE_NAME_257,
            );
            formData.append('COMMUNITY_YEAR_RAW', row.COMMUNITY_YEAR_RAW);
            formData.append('COMMUNITY_YEAR', row.COMMUNITY_YEAR);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_gtrts_community_protection?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gtrts_compost_compost_month_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_GTRTS_COMPOST_COMPOST_MONTH WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_gtrts_compost_compost_month?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gtrts_compost_compost_month_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_GTRTS_COMPOST_COMPOST_MONTH`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_gtrts_compost_compost_month?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gtrts_nuersery_raising_nursery_month_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GTRTS_NUERSERY_RAISING_NURSERY_MONTH WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/plant27_2021_gtrts_nuersery_raising_nursery_month?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gtrts_nuersery_raising_nursery_month_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GTRTS_NUERSERY_RAISING_NURSERY_MONTH`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/plant27_2021_gtrts_nuersery_raising_nursery_month?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gtrts_other_treatment_other_month_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GTRTS_OTHER_TREATMENT_OTHER_MONTH WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/plant27_2021_gtrts_other_treatment_other_month?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gtrts_other_treatment_other_month_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_GTRTS_OTHER_TREATMENT_OTHER_MONTH`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/plant27_2021_gtrts_other_treatment_other_month?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_gtrts_plantation_site_month_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_GTRTS_PLANTATION_SITE_MONTH WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_gtrts_plantation_site_month?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_gtrts_plantation_site_month_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_GTRTS_PLANTATION_SITE_MONTH`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_gtrts_plantation_site_month?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_location_data_ca_tloc_ad_upzilla_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_LOCATION_DATA_CA_TLOC_AD_UPZILLA WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_location_data_ca_tloc_ad_upzilla?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_location_data_ca_tloc_ad_upzilla_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM PLANT27_2021_LOCATION_DATA_CA_TLOC_AD_UPZILLA`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/plant27_2021_location_data_ca_tloc_ad_upzilla?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_location_data_m_sh1_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_LOCATION_DATA_M_SH1 WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('MOUZA1', row.MOUZA1);
            formData.append(
              'GENERATED_NOTE_NAME_45',
              row.GENERATED_NOTE_NAME_45,
            );
            formData.append('SURVEY_TYPES', row.SURVEY_TYPES);
            formData.append('OTHERS_S_TYPES', row.OTHERS_S_TYPES);
            formData.append('SHEET1', row.SHEET1);
            formData.append('PLOT_NO', row.PLOT_NO);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_location_data_m_sh1?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_location_data_m_sh1_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_LOCATION_DATA_M_SH1`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('MOUZA1', row.MOUZA1);
            formData.append(
              'GENERATED_NOTE_NAME_45',
              row.GENERATED_NOTE_NAME_45,
            );
            formData.append('SURVEY_TYPES', row.SURVEY_TYPES);
            formData.append('OTHERS_S_TYPES', row.OTHERS_S_TYPES);
            formData.append('SHEET1', row.SHEET1);
            formData.append('PLOT_NO', row.PLOT_NO);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_location_data_m_sh1?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_overallnotes_ima_blb_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_OVERALLNOTES_IMA_BLB WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_overallnotes_ima_blb?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_overallnotes_ima_blb_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_OVERALLNOTES_IMA_BLB`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_overallnotes_ima_blb?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_overallnotes_ima_bn_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_OVERALLNOTES_IMA_BN WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_overallnotes_ima_bn?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_overallnotes_ima_bn_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_OVERALLNOTES_IMA_BN`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_overallnotes_ima_bn?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_overallnotes_ima_ref_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_OVERALLNOTES_IMA_REF WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_overallnotes_ima_ref?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_overallnotes_ima_ref_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_OVERALLNOTES_IMA_REF`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_overallnotes_ima_ref?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_planting_plan_gplanting_gspp_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_PLANTING_PLAN_GPLANTING_GSPP WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PREF_SOURCE', row.PREF_SOURCE);
            formData.append(
              'GENERATED_NOTE_NAME_156',
              row.GENERATED_NOTE_NAME_156,
            );
            formData.append('PREF_OTHER_SOURCE', row.PREF_OTHER_SOURCE);
            formData.append('PREF_SPECIES', row.PREF_SPECIES);
            formData.append('PREF_REPRO_TYPE', row.PREF_REPRO_TYPE);
            formData.append('PREF_NRSEEDLINGS', row.PREF_NRSEEDLINGS);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_planting_plan_gplanting_gspp?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_planting_plan_gplanting_gspp_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_PLANTING_PLAN_GPLANTING_GSPP`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PREF_SOURCE', row.PREF_SOURCE);
            formData.append(
              'GENERATED_NOTE_NAME_156',
              row.GENERATED_NOTE_NAME_156,
            );
            formData.append('PREF_OTHER_SOURCE', row.PREF_OTHER_SOURCE);
            formData.append('PREF_SPECIES', row.PREF_SPECIES);
            formData.append('PREF_REPRO_TYPE', row.PREF_REPRO_TYPE);
            formData.append('PREF_NRSEEDLINGS', row.PREF_NRSEEDLINGS);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_planting_plan_gplanting_gspp?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_rphotoextra_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_RPHOTOEXTRA WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PPICLOCATIONEXTRA_ALT', row.PPICLOCATIONEXTRA_ALT);
            formData.append('XPIC_BEARING', row.XPIC_BEARING);
            formData.append(
              'GENERATED_NOTE_NAME_65',
              row.GENERATED_NOTE_NAME_65,
            );
            formData.append('PPICLOCATIONEXTRA_LNG', row.PPICLOCATIONEXTRA_LNG);
            formData.append('PPICLOCATIONEXTRA_ACC', row.PPICLOCATIONEXTRA_ACC);
            formData.append('PPICLOCATIONEXTRA_LAT', row.PPICLOCATIONEXTRA_LAT);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_rphotoextra?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_rphotoextra_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_RPHOTOEXTRA`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PPICLOCATIONEXTRA_ALT', row.PPICLOCATIONEXTRA_ALT);
            formData.append('XPIC_BEARING', row.XPIC_BEARING);
            formData.append(
              'GENERATED_NOTE_NAME_65',
              row.GENERATED_NOTE_NAME_65,
            );
            formData.append('PPICLOCATIONEXTRA_LNG', row.PPICLOCATIONEXTRA_LNG);
            formData.append('PPICLOCATIONEXTRA_ACC', row.PPICLOCATIONEXTRA_ACC);
            formData.append('PPICLOCATIONEXTRA_LAT', row.PPICLOCATIONEXTRA_LAT);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_rphotoextra?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_s_site_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_S_SITE WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('TRACE_GPX', row.TRACE_GPX);
            formData.append('POLYLINE', row.POLYLINE);
            formData.append('TOTAREA_HA', row.TOTAREA_HA);
            formData.append('TMAIN_POLYTYPE', row.TMAIN_POLYTYPE);
            formData.append('POLYTRACE', row.POLYTRACE);
            formData.append(
              'GENERATED_NOTE_NAME_54',
              row.GENERATED_NOTE_NAME_54,
            );
            formData.append('TOTAREA_AC', row.TOTAREA_AC);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_s_site?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_s_site_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_S_SITE`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('TRACE_GPX', row.TRACE_GPX);
            formData.append('POLYLINE', row.POLYLINE);
            formData.append('TOTAREA_HA', row.TOTAREA_HA);
            formData.append('TMAIN_POLYTYPE', row.TMAIN_POLYTYPE);
            formData.append('POLYTRACE', row.POLYTRACE);
            formData.append(
              'GENERATED_NOTE_NAME_54',
              row.GENERATED_NOTE_NAME_54,
            );
            formData.append('TOTAREA_AC', row.TOTAREA_AC);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_s_site?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_weeding_month_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_WEEDING_MONTH WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_weeding_month?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_weeding_month_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_WEEDING_MONTH`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_weeding_month?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_xpictureextra_blb_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_XPICTUREEXTRA_BLB WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_xpictureextra_blb?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_xpictureextra_blb_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_XPICTUREEXTRA_BLB`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('VALUE', row.VALUE);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_xpictureextra_blb?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_xpictureextra_bn_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_XPICTUREEXTRA_BN WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_xpictureextra_bn?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_xpictureextra_bn_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_XPICTUREEXTRA_BN`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_PARENT_AURI', row._PARENT_AURI);
            formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
            formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
            formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
            formData.append('CONTENT_HASH', row.CONTENT_HASH);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_xpictureextra_bn?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const plant27_2021_xpictureextra_ref_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_XPICTUREEXTRA_REF WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);

            console.log('FormData to be sent:', formData);
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/plant27_2021_xpictureextra_ref?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const plant27_2021_xpictureextra_ref_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM PLANT27_2021_XPICTUREEXTRA_REF`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('_DOM_AURI', row._DOM_AURI);
            formData.append('_SUB_AURI', row._SUB_AURI);
            formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
            formData.append('PART', row.PART);
          }
          const response = await fetch(
            `${baseApi}/plant27_2021_xpictureextra_ref?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_E_REF WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_E_REF`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_DOM_AURI', row._DOM_AURI);
              formData.append('_SUB_AURI', row._SUB_AURI);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('PART', row.PART);
            }
            const response = await fetch(
              `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_e_ref?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_N_BLB WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_N_BLB`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('VALUE', row.VALUE);
            }
            const response = await fetch(
              `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_blb?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn_sync =
  async uri => {
    return new Promise((resolve, reject) => {
      console.log('Starting database transaction for URI:', uri);

      // Begin database transaction
      database.transaction(tx => {
        console.log('Executing SQL query...');

        // Execute SQL query to fetch data
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_N_BN WHERE _URI = ?`,
          [uri],
          async (_, resultSet) => {
            if (resultSet.rows.length > 0) {
              const row = resultSet.rows.item(0);
              console.log('Data to be sent:', row._URI);

              // Create FormData instance and append data
              const formData = new FormData();
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);

              console.log('FormData to be sent:', formData);
              // Send data to the API using FormData
              try {
                const response = await fetch(
                  `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn?token=${token}`,
                  {
                    method: 'POST',
                    headers: {
                      Accept: 'application/json',
                      // Note: 'Content-Type' should NOT be set when using FormData
                    },
                    body: formData,
                  },
                );

                if (!response.ok) {
                  console.error(
                    'API response error:',
                    response.status,
                    response.statusText,
                  );
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log('API response:', result);
                resolve(result);
              } catch (error) {
                console.error('Error sending data to API:', error);
                reject(error);
              }
            } else {
              console.error('No data found for the given URI:', uri);
              reject(new Error('No data found.'));
            }
          },
          (_, error) => {
            console.error('Error executing SQL query:', error);
            reject(error);
          },
        );
      });
    });
  };
// sync end
//---------------------------------------------------------//
//sync2 Start
export const sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn_sync2 =
  async uri => {
    return new Promise((resolve, reject) => {
      database.transaction(tx => {
        tx.executeSql(
          `SELECT * FROM SUFAL_13_2021_GREGEN_GREGEN_PLOT_REG_CEN_TO_N_BN`, // Query the aspects table
          [],
          async (_, resultSet) => {
            //console.log('ResultSet:', resultSet); // Log the resultSet to debug
            const data = [];
            const formData = new FormData();

            for (let i = 0; i < resultSet.rows.length; i++) {
              const row = resultSet.rows.item(i);
              data.push(row);
              formData.append('_URI', row._URI);
              formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
              formData.append('_CREATION_DATE', row._CREATION_DATE);
              formData.append(
                '_LAST_UPDATE_URI_USER',
                row._LAST_UPDATE_URI_USER,
              );
              formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
              formData.append('_PARENT_AURI', row._PARENT_AURI);
              formData.append('_ORDINAL_NUMBER', row._ORDINAL_NUMBER);
              formData.append('_TOP_LEVEL_AURI', row._TOP_LEVEL_AURI);
              formData.append('UNROOTED_FILE_PATH', row.UNROOTED_FILE_PATH);
              formData.append('CONTENT_TYPE', row.CONTENT_TYPE);
              formData.append('CONTENT_LENGTH', row.CONTENT_LENGTH);
              formData.append('CONTENT_HASH', row.CONTENT_HASH);
            }
            const response = await fetch(
              `${baseApi}/sufal_13_2021_gregen_gregen_plot_reg_cen_to_n_bn?token=${token}`,
              {
                method: 'POST',
                headers: {
                  Accept: 'application/json',
                  // Note: 'Content-Type' should NOT be set when using FormData
                },
                body: formData,
              },
            );
            resolve(data);
          },
          (_, error) => {
            console.error(`Error querying aspects`, error);
            reject(error);
          },
        );
      });
    });
  };
// sync2 end
//---------------------------------------------------------//

//sync Start
export const _user_granted_authority_sync = async uri => {
  return new Promise((resolve, reject) => {
    console.log('Starting database transaction for URI:', uri);

    // Begin database transaction
    database.transaction(tx => {
      console.log('Executing SQL query...');

      // Execute SQL query to fetch data
      tx.executeSql(
        `SELECT * FROM _user_granted_authority WHERE _URI = ?`,
        [uri],
        async (_, resultSet) => {
          if (resultSet.rows.length > 0) {
            const row = resultSet.rows.item(0);
            console.log('Data to be sent:', row._URI);

            // Create FormData instance and append data
            const formData = new FormData();
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('USER', row.USER);
            formData.append('GRANTED_AUTHORITY', row.GRANTED_AUTHORITY);

            console.log('FormData to be sent:', formData);

            formData.forEach((value, key) => {
              console.log(`Key: ${key}, Value: ${value}`);
            });
            // Send data to the API using FormData
            try {
              const response = await fetch(
                `${baseApi}/_user_granted_authority?token=${token}`,
                {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    // Note: 'Content-Type' should NOT be set when using FormData
                  },
                  body: formData,
                },
              );

              console.log(response, 'response');

              if (!response.ok) {
                console.error(
                  'API response error:',
                  response.status,
                  response.statusText,
                );
                throw new Error(`HTTP error! Status: ${response.status}`);
              }

              const result = await response.json();
              console.log('API response:', result);
              resolve(result);
            } catch (error) {
              console.error('Error sending data to API:', error);
              reject(error);
            }
          } else {
            console.error('No data found for the given URI:', uri);
            reject(new Error('No data found.'));
          }
        },
        (_, error) => {
          console.error('Error executing SQL query:', error);
          reject(error);
        },
      );
    });
  });
};
// sync end
//---------------------------------------------------------//
//sync2 Start
export const _user_granted_authority_sync2 = async uri => {
  return new Promise((resolve, reject) => {
    database.transaction(tx => {
      tx.executeSql(
        `SELECT * FROM _user_granted_authority`, // Query the aspects table
        [],
        async (_, resultSet) => {
          //console.log('ResultSet:', resultSet); // Log the resultSet to debug
          const data = [];
          const formData = new FormData();

          for (let i = 0; i < resultSet.rows.length; i++) {
            const row = resultSet.rows.item(i);
            data.push(row);
            formData.append('_URI', row._URI);
            formData.append('_CREATOR_URI_USER', row._CREATOR_URI_USER);
            formData.append('_CREATION_DATE', row._CREATION_DATE);
            formData.append('_LAST_UPDATE_URI_USER', row._LAST_UPDATE_URI_USER);
            formData.append('_LAST_UPDATE_DATE', row._LAST_UPDATE_DATE);
            formData.append('USER', row.USER);
            formData.append('GRANTED_AUTHORITY', row.GRANTED_AUTHORITY);
          }
          const response = await fetch(
            `${baseApi}/_user_granted_authority?token=${token}`,
            {
              method: 'POST',
              headers: {
                Accept: 'application/json',
                // Note: 'Content-Type' should NOT be set when using FormData
              },
              body: formData,
            },
          );
          resolve(data);
        },
        (_, error) => {
          console.error(`Error querying aspects`, error);
          reject(error);
        },
      );
    });
  });
};
// sync2 end
//---------------------------------------------------------//

//---------------------------------------------------------//

//initial setup start
export const initial_setup = async () => {
  try {
    //public schema part start
    await human_issues_api();
    await jur_ad_divisions_api();
    await jur_ad_districts_api();
    await jur_ad_upazillas_api();
    await jur_fd_beats_api();
    await jur_fd_circles_api();
    await jur_fd_divisions_api();
    await jur_fd_ecozones_api();
    await jur_fd_ranges_api();
    await months_api();
    await mouza_types_api();
    await natural_issues_api();
    await users_api();
    //public schema part end
    //regate schema part start
    await gener43_2021_core_api();
    //await gener43_2021_fbli_ca_tloc_ad_upzilla_create();
    await gener43_2021_fbli_m_sh1_api();
    // await gener43_2021_fbli_m_sh1_create();
    //await gener43_2021_core_create();
    await gener43_2021_fbli_ca_tloc_ad_upzilla_api();

    await gener43_2021_ghumissues_api();
    await gener43_2021_gnatissues_api();
    await gener43_2021_gvillages_api();
    await gener43_2021_others_info1_api();
    await gener43_2021_overallnotes_ima_blb_api();
    await gener43_2021_overallnotes_ima_bn_api();
    await gener43_2021_overallnotes_ima_ref_api();
    await gener43_2021_xpic_beat_index_blb_api();
    await gener43_2021_xpic_beat_index_ref_api();
    // await plant27_2021_community_month_api();
    // await plant27_2021_core_api();
    // await plant27_2021_xpictureextra_blb_api();
    // await plant27_2021_filling_month_api();
    // await plant27_2021_gr_regen_api();
    // await plant27_2021_gregen_spp_regen_api();
    // await plant27_2021_gtrts_climber_cutting_climber_month_api();
    // await plant27_2021_gtrts_community_protection_api();
    // await plant27_2021_gtrts_compost_compost_month_api();
    // await plant27_2021_gtrts_vacancy_filling_api();
    // await plant27_2021_gtrts_weeding_api();
    // await plant27_2021_location_data_ca_tloc_ad_upzilla_api();
    // await plant27_2021_location_data_m_sh1_api();
    // await plant27_2021_planting_plan_gplanting_gspp_api();
    // await plant27_2021_rphotoextra_api();
    // await plant27_2021_s_site_api();
    // await plant27_2021_weeding_month_api();

    // await plant27_2021_overallnotes_ima_blb_api();
    // await plant27_2021_gregen_gregen_plot_reg_cen_to_e_blb_api();
    //aggregate schema part end

    // await jur_ad_districts_list();

    // await jur_ad_divisions_list();

    // await jur_ad_upazillas_list();

    // await jur_fd_beats_list();

    // await jur_fd_circles_list();

    // await jur_fd_divisions_list();

    // await jur_fd_ecozones_list();

    // await jur_fd_ranges_list();

    // await mouza_types_list();
  } catch (apiError) {
    console.error('Error fetching data from API:', apiError);
  }
};
//initial setup end
